'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easyUI = require('easyui'),
    easyUILayout = require('easyui-layout'),
    occamLexers = require('occam-lexers'),
    BNFLexer = occamLexers.BNFLexer,
    Input = easyUI.Input,
    TextArea = easyUI.TextArea,
    SizeableElement = easyUILayout.SizeableElement,
    VerticalSplitter = easyUILayout.VerticalSplitter;

var leftColumnSelector = '#leftColumn',
    inputTextAreaSelector = 'textArea#input',
    grammarTextAreaSelector = 'textArea#grammar',
    parseTreeTextAreaSelector = 'textArea#parseTree',
    specialSymbolsRegExpInputSelector = 'input#specialSymbolsRegExp',
    inputTextArea = new TextArea(inputTextAreaSelector),
    grammarTextArea = new TextArea(grammarTextAreaSelector),
    parseTreeTextArea = new TextArea(parseTreeTextAreaSelector),
    specialSymbolsRegExpInput = new Input(specialSymbolsRegExpInputSelector),
    leftColumn = new SizeableElement(leftColumnSelector),
    TO_THE_RIGHT_OF = VerticalSplitter.situated.TO_THE_RIGHT_OF;

new VerticalSplitter('.left.vertical.splitter', TO_THE_RIGHT_OF, leftColumn);

var Parser = require('../../es6/parser'),
    BNFParser = require('../../es6/bnfParser');

var mappings = {};

var BasicParser = function () {
  function BasicParser() {
    _classCallCheck(this, BasicParser);
  }

  _createClass(BasicParser, null, [{
    key: 'run',
    value: function run() {
      updateParser();

      specialSymbolsRegExpInput.onChange(function () {
        updateParser();
        updateInput();
      });

      grammarTextArea.onChange(function () {
        updateParser();
        updateInput();
      });

      inputTextArea.onChange(function () {
        updateInput();
      });
    }
  }]);

  return BasicParser;
}();

module.exports = BasicParser;

var parser;

function updateParser() {
  var grammarTextAreaValue = grammarTextArea.getValue(),
      specialSymbolsRegExpInputValue = specialSymbolsRegExpInput.getValue(),
      grammar = grammarTextAreaValue,
      ///
  specialSymbolsRegExp = specialSymbolsRegExpInputValue,
      ///
  lines = BNFLexer.linesFromGrammar(grammar),
      productions = BNFParser.parse(lines, specialSymbolsRegExp, mappings);

  parser = new Parser(productions);
}

function updateInput() {
  var inputTextAreaValue = inputTextArea.getValue(),
      input = inputTextAreaValue,
      ///
  documentNode = parser.parse(input),
      parseTree = documentNode.getParseTree(),
      parseTreeStr = parseTree.toString(),
      parseTreeTextAreaHTML = parseTreeStr; ///

  parseTreeTextArea.html(parseTreeTextAreaHTML);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9iYXNpY1BhcnNlci5qcyJdLCJuYW1lcyI6WyJlYXN5VUkiLCJyZXF1aXJlIiwiZWFzeVVJTGF5b3V0Iiwib2NjYW1MZXhlcnMiLCJCTkZMZXhlciIsIklucHV0IiwiVGV4dEFyZWEiLCJTaXplYWJsZUVsZW1lbnQiLCJWZXJ0aWNhbFNwbGl0dGVyIiwibGVmdENvbHVtblNlbGVjdG9yIiwiaW5wdXRUZXh0QXJlYVNlbGVjdG9yIiwiZ3JhbW1hclRleHRBcmVhU2VsZWN0b3IiLCJwYXJzZVRyZWVUZXh0QXJlYVNlbGVjdG9yIiwic3BlY2lhbFN5bWJvbHNSZWdFeHBJbnB1dFNlbGVjdG9yIiwiaW5wdXRUZXh0QXJlYSIsImdyYW1tYXJUZXh0QXJlYSIsInBhcnNlVHJlZVRleHRBcmVhIiwic3BlY2lhbFN5bWJvbHNSZWdFeHBJbnB1dCIsImxlZnRDb2x1bW4iLCJUT19USEVfUklHSFRfT0YiLCJzaXR1YXRlZCIsIlBhcnNlciIsIkJORlBhcnNlciIsIm1hcHBpbmdzIiwiQmFzaWNQYXJzZXIiLCJ1cGRhdGVQYXJzZXIiLCJvbkNoYW5nZSIsInVwZGF0ZUlucHV0IiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlciIsImdyYW1tYXJUZXh0QXJlYVZhbHVlIiwiZ2V0VmFsdWUiLCJzcGVjaWFsU3ltYm9sc1JlZ0V4cElucHV0VmFsdWUiLCJncmFtbWFyIiwic3BlY2lhbFN5bWJvbHNSZWdFeHAiLCJsaW5lcyIsImxpbmVzRnJvbUdyYW1tYXIiLCJwcm9kdWN0aW9ucyIsInBhcnNlIiwiaW5wdXRUZXh0QXJlYVZhbHVlIiwiaW5wdXQiLCJkb2N1bWVudE5vZGUiLCJwYXJzZVRyZWUiLCJnZXRQYXJzZVRyZWUiLCJwYXJzZVRyZWVTdHIiLCJ0b1N0cmluZyIsInBhcnNlVHJlZVRleHRBcmVhSFRNTCIsImh0bWwiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFJQSxTQUFTQyxRQUFRLFFBQVIsQ0FBYjtBQUFBLElBQ0lDLGVBQWVELFFBQVEsZUFBUixDQURuQjtBQUFBLElBRUlFLGNBQWNGLFFBQVEsY0FBUixDQUZsQjtBQUFBLElBR0lHLFdBQVdELFlBQVlDLFFBSDNCO0FBQUEsSUFJSUMsUUFBUUwsT0FBT0ssS0FKbkI7QUFBQSxJQUtJQyxXQUFXTixPQUFPTSxRQUx0QjtBQUFBLElBTUlDLGtCQUFrQkwsYUFBYUssZUFObkM7QUFBQSxJQU9JQyxtQkFBbUJOLGFBQWFNLGdCQVBwQzs7QUFTQSxJQUFJQyxxQkFBcUIsYUFBekI7QUFBQSxJQUNJQyx3QkFBd0IsZ0JBRDVCO0FBQUEsSUFFSUMsMEJBQTBCLGtCQUY5QjtBQUFBLElBR0lDLDRCQUE0QixvQkFIaEM7QUFBQSxJQUlJQyxvQ0FBb0MsNEJBSnhDO0FBQUEsSUFLSUMsZ0JBQWdCLElBQUlSLFFBQUosQ0FBYUkscUJBQWIsQ0FMcEI7QUFBQSxJQU1JSyxrQkFBa0IsSUFBSVQsUUFBSixDQUFhSyx1QkFBYixDQU50QjtBQUFBLElBT0lLLG9CQUFvQixJQUFJVixRQUFKLENBQWFNLHlCQUFiLENBUHhCO0FBQUEsSUFRSUssNEJBQTRCLElBQUlaLEtBQUosQ0FBVVEsaUNBQVYsQ0FSaEM7QUFBQSxJQVNJSyxhQUFhLElBQUlYLGVBQUosQ0FBb0JFLGtCQUFwQixDQVRqQjtBQUFBLElBVUlVLGtCQUFrQlgsaUJBQWlCWSxRQUFqQixDQUEwQkQsZUFWaEQ7O0FBWUEsSUFBSVgsZ0JBQUosQ0FBcUIseUJBQXJCLEVBQWdEVyxlQUFoRCxFQUFpRUQsVUFBakU7O0FBRUEsSUFBSUcsU0FBU3BCLFFBQVMsa0JBQVQsQ0FBYjtBQUFBLElBQ0lxQixZQUFZckIsUUFBUyxxQkFBVCxDQURoQjs7QUFHQSxJQUFJc0IsV0FBVyxFQUFmOztJQUVNQyxXOzs7Ozs7OzBCQUNTO0FBQ1hDOztBQUVBUixnQ0FBMEJTLFFBQTFCLENBQW1DLFlBQVc7QUFDNUNEO0FBQ0FFO0FBQ0QsT0FIRDs7QUFLQVosc0JBQWdCVyxRQUFoQixDQUF5QixZQUFXO0FBQ2xDRDtBQUNBRTtBQUNELE9BSEQ7O0FBS0FiLG9CQUFjWSxRQUFkLENBQXVCLFlBQVc7QUFDaENDO0FBQ0QsT0FGRDtBQUdEOzs7Ozs7QUFHSEMsT0FBT0MsT0FBUCxHQUFpQkwsV0FBakI7O0FBRUEsSUFBSU0sTUFBSjs7QUFFQSxTQUFTTCxZQUFULEdBQXdCO0FBQ3RCLE1BQUlNLHVCQUF1QmhCLGdCQUFnQmlCLFFBQWhCLEVBQTNCO0FBQUEsTUFDSUMsaUNBQWlDaEIsMEJBQTBCZSxRQUExQixFQURyQztBQUFBLE1BRUlFLFVBQVVILG9CQUZkO0FBQUEsTUFFb0M7QUFDaENJLHlCQUF1QkYsOEJBSDNCO0FBQUEsTUFHMkQ7QUFDdkRHLFVBQVFoQyxTQUFTaUMsZ0JBQVQsQ0FBMEJILE9BQTFCLENBSlo7QUFBQSxNQUtJSSxjQUFjaEIsVUFBVWlCLEtBQVYsQ0FBZ0JILEtBQWhCLEVBQXVCRCxvQkFBdkIsRUFBNkNaLFFBQTdDLENBTGxCOztBQU9BTyxXQUFTLElBQUlULE1BQUosQ0FBV2lCLFdBQVgsQ0FBVDtBQUNEOztBQUVELFNBQVNYLFdBQVQsR0FBdUI7QUFDckIsTUFBSWEscUJBQXFCMUIsY0FBY2tCLFFBQWQsRUFBekI7QUFBQSxNQUNJUyxRQUFRRCxrQkFEWjtBQUFBLE1BQ2lDO0FBQzdCRSxpQkFBZVosT0FBT1MsS0FBUCxDQUFhRSxLQUFiLENBRm5CO0FBQUEsTUFHSUUsWUFBWUQsYUFBYUUsWUFBYixFQUhoQjtBQUFBLE1BSUlDLGVBQWVGLFVBQVVHLFFBQVYsRUFKbkI7QUFBQSxNQUtJQyx3QkFBd0JGLFlBTDVCLENBRHFCLENBTXNCOztBQUUzQzdCLG9CQUFrQmdDLElBQWxCLENBQXVCRCxxQkFBdkI7QUFDRCIsImZpbGUiOiJiYXNpY1BhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGVhc3lVSSA9IHJlcXVpcmUoJ2Vhc3l1aScpLFxuICAgIGVhc3lVSUxheW91dCA9IHJlcXVpcmUoJ2Vhc3l1aS1sYXlvdXQnKSxcbiAgICBvY2NhbUxleGVycyA9IHJlcXVpcmUoJ29jY2FtLWxleGVycycpLFxuICAgIEJORkxleGVyID0gb2NjYW1MZXhlcnMuQk5GTGV4ZXIsXG4gICAgSW5wdXQgPSBlYXN5VUkuSW5wdXQsXG4gICAgVGV4dEFyZWEgPSBlYXN5VUkuVGV4dEFyZWEsXG4gICAgU2l6ZWFibGVFbGVtZW50ID0gZWFzeVVJTGF5b3V0LlNpemVhYmxlRWxlbWVudCxcbiAgICBWZXJ0aWNhbFNwbGl0dGVyID0gZWFzeVVJTGF5b3V0LlZlcnRpY2FsU3BsaXR0ZXI7XG5cbnZhciBsZWZ0Q29sdW1uU2VsZWN0b3IgPSAnI2xlZnRDb2x1bW4nLFxuICAgIGlucHV0VGV4dEFyZWFTZWxlY3RvciA9ICd0ZXh0QXJlYSNpbnB1dCcsXG4gICAgZ3JhbW1hclRleHRBcmVhU2VsZWN0b3IgPSAndGV4dEFyZWEjZ3JhbW1hcicsXG4gICAgcGFyc2VUcmVlVGV4dEFyZWFTZWxlY3RvciA9ICd0ZXh0QXJlYSNwYXJzZVRyZWUnLFxuICAgIHNwZWNpYWxTeW1ib2xzUmVnRXhwSW5wdXRTZWxlY3RvciA9ICdpbnB1dCNzcGVjaWFsU3ltYm9sc1JlZ0V4cCcsXG4gICAgaW5wdXRUZXh0QXJlYSA9IG5ldyBUZXh0QXJlYShpbnB1dFRleHRBcmVhU2VsZWN0b3IpLFxuICAgIGdyYW1tYXJUZXh0QXJlYSA9IG5ldyBUZXh0QXJlYShncmFtbWFyVGV4dEFyZWFTZWxlY3RvciksXG4gICAgcGFyc2VUcmVlVGV4dEFyZWEgPSBuZXcgVGV4dEFyZWEocGFyc2VUcmVlVGV4dEFyZWFTZWxlY3RvciksXG4gICAgc3BlY2lhbFN5bWJvbHNSZWdFeHBJbnB1dCA9IG5ldyBJbnB1dChzcGVjaWFsU3ltYm9sc1JlZ0V4cElucHV0U2VsZWN0b3IpLFxuICAgIGxlZnRDb2x1bW4gPSBuZXcgU2l6ZWFibGVFbGVtZW50KGxlZnRDb2x1bW5TZWxlY3RvciksXG4gICAgVE9fVEhFX1JJR0hUX09GID0gVmVydGljYWxTcGxpdHRlci5zaXR1YXRlZC5UT19USEVfUklHSFRfT0Y7XG5cbm5ldyBWZXJ0aWNhbFNwbGl0dGVyKCcubGVmdC52ZXJ0aWNhbC5zcGxpdHRlcicsIFRPX1RIRV9SSUdIVF9PRiwgbGVmdENvbHVtbik7XG5cbnZhciBQYXJzZXIgPSByZXF1aXJlICgnLi4vLi4vZXM2L3BhcnNlcicpLFxuICAgIEJORlBhcnNlciA9IHJlcXVpcmUgKCcuLi8uLi9lczYvYm5mUGFyc2VyJyk7XG5cbnZhciBtYXBwaW5ncyA9IHt9O1xuXG5jbGFzcyBCYXNpY1BhcnNlciB7XG4gIHN0YXRpYyBydW4oKSB7XG4gICAgdXBkYXRlUGFyc2VyKCk7XG5cbiAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cElucHV0Lm9uQ2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgdXBkYXRlUGFyc2VyKCk7XG4gICAgICB1cGRhdGVJbnB1dCgpO1xuICAgIH0pO1xuXG4gICAgZ3JhbW1hclRleHRBcmVhLm9uQ2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgdXBkYXRlUGFyc2VyKCk7XG4gICAgICB1cGRhdGVJbnB1dCgpO1xuICAgIH0pO1xuXG4gICAgaW5wdXRUZXh0QXJlYS5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZUlucHV0KCk7XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNpY1BhcnNlcjtcblxudmFyIHBhcnNlcjtcblxuZnVuY3Rpb24gdXBkYXRlUGFyc2VyKCkge1xuICB2YXIgZ3JhbW1hclRleHRBcmVhVmFsdWUgPSBncmFtbWFyVGV4dEFyZWEuZ2V0VmFsdWUoKSxcbiAgICAgIHNwZWNpYWxTeW1ib2xzUmVnRXhwSW5wdXRWYWx1ZSA9IHNwZWNpYWxTeW1ib2xzUmVnRXhwSW5wdXQuZ2V0VmFsdWUoKSxcbiAgICAgIGdyYW1tYXIgPSBncmFtbWFyVGV4dEFyZWFWYWx1ZSwgLy8vXG4gICAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cCA9IHNwZWNpYWxTeW1ib2xzUmVnRXhwSW5wdXRWYWx1ZSwgLy8vXG4gICAgICBsaW5lcyA9IEJORkxleGVyLmxpbmVzRnJvbUdyYW1tYXIoZ3JhbW1hciksXG4gICAgICBwcm9kdWN0aW9ucyA9IEJORlBhcnNlci5wYXJzZShsaW5lcywgc3BlY2lhbFN5bWJvbHNSZWdFeHAsIG1hcHBpbmdzKTtcblxuICBwYXJzZXIgPSBuZXcgUGFyc2VyKHByb2R1Y3Rpb25zKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlSW5wdXQoKSB7XG4gIHZhciBpbnB1dFRleHRBcmVhVmFsdWUgPSBpbnB1dFRleHRBcmVhLmdldFZhbHVlKCksXG4gICAgICBpbnB1dCA9IGlucHV0VGV4dEFyZWFWYWx1ZSwgIC8vL1xuICAgICAgZG9jdW1lbnROb2RlID0gcGFyc2VyLnBhcnNlKGlucHV0KSxcbiAgICAgIHBhcnNlVHJlZSA9IGRvY3VtZW50Tm9kZS5nZXRQYXJzZVRyZWUoKSxcbiAgICAgIHBhcnNlVHJlZVN0ciA9IHBhcnNlVHJlZS50b1N0cmluZygpLFxuICAgICAgcGFyc2VUcmVlVGV4dEFyZWFIVE1MID0gcGFyc2VUcmVlU3RyOyAgLy8vXG5cbiAgcGFyc2VUcmVlVGV4dEFyZWEuaHRtbChwYXJzZVRyZWVUZXh0QXJlYUhUTUwpO1xufVxuIl19