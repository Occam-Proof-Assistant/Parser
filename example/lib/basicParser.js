'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easyui = require('easyui'),
    Input = easyui.Input,
    Element = easyui.Element,
    TextArea = easyui.TextArea;

var Parser = require('../../es6/parser'),
    BNFLexer = require('../../es6/bnfLexer'),
    BNFParser = require('../../es6/bnfParser');

var inputTextAreaSelector = 'textArea#input',
    grammarTextAreaSelector = 'textArea#grammar',
    paragraphElementSelector = 'p',
    specialSymbolsRegExpPatternInputSelector = 'input#specialSymbolsRegExpPattern',
    inputTextArea = new TextArea(inputTextAreaSelector),
    grammarTextArea = new TextArea(grammarTextAreaSelector),
    paragraphElement = new Element(paragraphElementSelector),
    specialSymbolsRegExpPatternInput = new Input(specialSymbolsRegExpPatternInputSelector);

var mappings = {};

var BasicParser = function () {
  function BasicParser() {
    _classCallCheck(this, BasicParser);
  }

  _createClass(BasicParser, null, [{
    key: 'run',
    value: function run() {
      updateParser();

      specialSymbolsRegExpPatternInput.onChange(function () {
        updateParser();
        updateInput();
      });

      grammarTextArea.onChange(function () {
        updateParser();
        updateInput();
      });

      inputTextArea.onChange(function () {
        updateInput();
      });
    }
  }]);

  return BasicParser;
}();

module.exports = BasicParser;

var parser;

function updateParser() {
  var grammarTextAreaValue = grammarTextArea.getValue(),
      specialSymbolsRegExpPatternInputValue = specialSymbolsRegExpPatternInput.getValue(),
      grammar = grammarTextAreaValue,
      ///
  specialSymbolsRegExpPattern = specialSymbolsRegExpPatternInputValue,
      ///
  lines = BNFLexer.linesFromGrammar(grammar),
      productions = BNFParser.parse(lines, specialSymbolsRegExpPattern, mappings);

  parser = new Parser(productions);
}

function updateInput() {
  var inputTextAreaValue = inputTextArea.getValue(),
      input = inputTextAreaValue,
      ///
  parsedInput = parser.parse(input),
      paragraphElementHTML = parsedInput; ///

  paragraphElement.html(paragraphElementHTML);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9iYXNpY1BhcnNlci5qcyJdLCJuYW1lcyI6WyJlYXN5dWkiLCJyZXF1aXJlIiwiSW5wdXQiLCJFbGVtZW50IiwiVGV4dEFyZWEiLCJQYXJzZXIiLCJCTkZMZXhlciIsIkJORlBhcnNlciIsImlucHV0VGV4dEFyZWFTZWxlY3RvciIsImdyYW1tYXJUZXh0QXJlYVNlbGVjdG9yIiwicGFyYWdyYXBoRWxlbWVudFNlbGVjdG9yIiwic3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRTZWxlY3RvciIsImlucHV0VGV4dEFyZWEiLCJncmFtbWFyVGV4dEFyZWEiLCJwYXJhZ3JhcGhFbGVtZW50Iiwic3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXQiLCJtYXBwaW5ncyIsIkJhc2ljUGFyc2VyIiwidXBkYXRlUGFyc2VyIiwib25DaGFuZ2UiLCJ1cGRhdGVJbnB1dCIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZXIiLCJncmFtbWFyVGV4dEFyZWFWYWx1ZSIsImdldFZhbHVlIiwic3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRWYWx1ZSIsImdyYW1tYXIiLCJzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm4iLCJsaW5lcyIsImxpbmVzRnJvbUdyYW1tYXIiLCJwcm9kdWN0aW9ucyIsInBhcnNlIiwiaW5wdXRUZXh0QXJlYVZhbHVlIiwiaW5wdXQiLCJwYXJzZWRJbnB1dCIsInBhcmFncmFwaEVsZW1lbnRIVE1MIiwiaHRtbCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQUlBLFNBQVNDLFFBQVEsUUFBUixDQUFiO0FBQUEsSUFDSUMsUUFBUUYsT0FBT0UsS0FEbkI7QUFBQSxJQUVJQyxVQUFVSCxPQUFPRyxPQUZyQjtBQUFBLElBR0lDLFdBQVdKLE9BQU9JLFFBSHRCOztBQUtBLElBQUlDLFNBQVNKLFFBQVMsa0JBQVQsQ0FBYjtBQUFBLElBQ0lLLFdBQVdMLFFBQVMsb0JBQVQsQ0FEZjtBQUFBLElBRUlNLFlBQVlOLFFBQVMscUJBQVQsQ0FGaEI7O0FBSUEsSUFBSU8sd0JBQXdCLGdCQUE1QjtBQUFBLElBQ0lDLDBCQUEwQixrQkFEOUI7QUFBQSxJQUVJQywyQkFBMkIsR0FGL0I7QUFBQSxJQUdJQywyQ0FBMkMsbUNBSC9DO0FBQUEsSUFJSUMsZ0JBQWdCLElBQUlSLFFBQUosQ0FBYUkscUJBQWIsQ0FKcEI7QUFBQSxJQUtJSyxrQkFBa0IsSUFBSVQsUUFBSixDQUFhSyx1QkFBYixDQUx0QjtBQUFBLElBTUlLLG1CQUFtQixJQUFJWCxPQUFKLENBQVlPLHdCQUFaLENBTnZCO0FBQUEsSUFPSUssbUNBQW1DLElBQUliLEtBQUosQ0FBVVMsd0NBQVYsQ0FQdkM7O0FBU0EsSUFBSUssV0FBVyxFQUFmOztJQUVNQyxXOzs7Ozs7OzBCQUNTO0FBQ1hDOztBQUVBSCx1Q0FBaUNJLFFBQWpDLENBQTBDLFlBQVc7QUFDbkREO0FBQ0FFO0FBQ0QsT0FIRDs7QUFLQVAsc0JBQWdCTSxRQUFoQixDQUF5QixZQUFXO0FBQ2xDRDtBQUNBRTtBQUNELE9BSEQ7O0FBS0FSLG9CQUFjTyxRQUFkLENBQXVCLFlBQVc7QUFDaENDO0FBQ0QsT0FGRDtBQUdEOzs7Ozs7QUFHSEMsT0FBT0MsT0FBUCxHQUFpQkwsV0FBakI7O0FBRUEsSUFBSU0sTUFBSjs7QUFFQSxTQUFTTCxZQUFULEdBQXdCO0FBQ3RCLE1BQUlNLHVCQUF1QlgsZ0JBQWdCWSxRQUFoQixFQUEzQjtBQUFBLE1BQ0lDLHdDQUF3Q1gsaUNBQWlDVSxRQUFqQyxFQUQ1QztBQUFBLE1BRUlFLFVBQVVILG9CQUZkO0FBQUEsTUFFb0M7QUFDaENJLGdDQUE4QkYscUNBSGxDO0FBQUEsTUFHeUU7QUFDckVHLFVBQVF2QixTQUFTd0IsZ0JBQVQsQ0FBMEJILE9BQTFCLENBSlo7QUFBQSxNQUtJSSxjQUFjeEIsVUFBVXlCLEtBQVYsQ0FBZ0JILEtBQWhCLEVBQXVCRCwyQkFBdkIsRUFBb0RaLFFBQXBELENBTGxCOztBQU9BTyxXQUFTLElBQUlsQixNQUFKLENBQVcwQixXQUFYLENBQVQ7QUFDRDs7QUFFRCxTQUFTWCxXQUFULEdBQXVCO0FBQ3JCLE1BQUlhLHFCQUFxQnJCLGNBQWNhLFFBQWQsRUFBekI7QUFBQSxNQUNJUyxRQUFRRCxrQkFEWjtBQUFBLE1BQ2lDO0FBQzdCRSxnQkFBY1osT0FBT1MsS0FBUCxDQUFhRSxLQUFiLENBRmxCO0FBQUEsTUFHSUUsdUJBQXVCRCxXQUgzQixDQURxQixDQUltQjs7QUFFeENyQixtQkFBaUJ1QixJQUFqQixDQUFzQkQsb0JBQXRCO0FBQ0QiLCJmaWxlIjoiYmFzaWNQYXJzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBlYXN5dWkgPSByZXF1aXJlKCdlYXN5dWknKSxcbiAgICBJbnB1dCA9IGVhc3l1aS5JbnB1dCxcbiAgICBFbGVtZW50ID0gZWFzeXVpLkVsZW1lbnQsXG4gICAgVGV4dEFyZWEgPSBlYXN5dWkuVGV4dEFyZWE7XG5cbnZhciBQYXJzZXIgPSByZXF1aXJlICgnLi4vLi4vZXM2L3BhcnNlcicpLFxuICAgIEJORkxleGVyID0gcmVxdWlyZSAoJy4uLy4uL2VzNi9ibmZMZXhlcicpLFxuICAgIEJORlBhcnNlciA9IHJlcXVpcmUgKCcuLi8uLi9lczYvYm5mUGFyc2VyJyk7XG5cbnZhciBpbnB1dFRleHRBcmVhU2VsZWN0b3IgPSAndGV4dEFyZWEjaW5wdXQnLFxuICAgIGdyYW1tYXJUZXh0QXJlYVNlbGVjdG9yID0gJ3RleHRBcmVhI2dyYW1tYXInLFxuICAgIHBhcmFncmFwaEVsZW1lbnRTZWxlY3RvciA9ICdwJyxcbiAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dFNlbGVjdG9yID0gJ2lucHV0I3NwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybicsXG4gICAgaW5wdXRUZXh0QXJlYSA9IG5ldyBUZXh0QXJlYShpbnB1dFRleHRBcmVhU2VsZWN0b3IpLFxuICAgIGdyYW1tYXJUZXh0QXJlYSA9IG5ldyBUZXh0QXJlYShncmFtbWFyVGV4dEFyZWFTZWxlY3RvciksXG4gICAgcGFyYWdyYXBoRWxlbWVudCA9IG5ldyBFbGVtZW50KHBhcmFncmFwaEVsZW1lbnRTZWxlY3RvciksXG4gICAgc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXQgPSBuZXcgSW5wdXQoc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRTZWxlY3Rvcik7XG5cbnZhciBtYXBwaW5ncyA9IHt9O1xuXG5jbGFzcyBCYXNpY1BhcnNlciB7XG4gIHN0YXRpYyBydW4oKSB7XG4gICAgdXBkYXRlUGFyc2VyKCk7XG5cbiAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dC5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZVBhcnNlcigpO1xuICAgICAgdXBkYXRlSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIGdyYW1tYXJUZXh0QXJlYS5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZVBhcnNlcigpO1xuICAgICAgdXBkYXRlSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIGlucHV0VGV4dEFyZWEub25DaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICB1cGRhdGVJbnB1dCgpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzaWNQYXJzZXI7XG5cbnZhciBwYXJzZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZVBhcnNlcigpIHtcbiAgdmFyIGdyYW1tYXJUZXh0QXJlYVZhbHVlID0gZ3JhbW1hclRleHRBcmVhLmdldFZhbHVlKCksXG4gICAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dFZhbHVlID0gc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXQuZ2V0VmFsdWUoKSxcbiAgICAgIGdyYW1tYXIgPSBncmFtbWFyVGV4dEFyZWFWYWx1ZSwgLy8vXG4gICAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm4gPSBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dFZhbHVlLCAvLy9cbiAgICAgIGxpbmVzID0gQk5GTGV4ZXIubGluZXNGcm9tR3JhbW1hcihncmFtbWFyKSxcbiAgICAgIHByb2R1Y3Rpb25zID0gQk5GUGFyc2VyLnBhcnNlKGxpbmVzLCBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm4sIG1hcHBpbmdzKTtcblxuICBwYXJzZXIgPSBuZXcgUGFyc2VyKHByb2R1Y3Rpb25zKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlSW5wdXQoKSB7XG4gIHZhciBpbnB1dFRleHRBcmVhVmFsdWUgPSBpbnB1dFRleHRBcmVhLmdldFZhbHVlKCksXG4gICAgICBpbnB1dCA9IGlucHV0VGV4dEFyZWFWYWx1ZSwgIC8vL1xuICAgICAgcGFyc2VkSW5wdXQgPSBwYXJzZXIucGFyc2UoaW5wdXQpLFxuICAgICAgcGFyYWdyYXBoRWxlbWVudEhUTUwgPSBwYXJzZWRJbnB1dDsgLy8vXG5cbiAgcGFyYWdyYXBoRWxlbWVudC5odG1sKHBhcmFncmFwaEVsZW1lbnRIVE1MKTtcbn1cbiJdfQ==