'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easyui = require('easyui'),
    Input = easyui.Input,
    Element = easyui.Element,
    TextArea = easyui.TextArea;

var Parser = require('../../es6/parser'),
    BNFLexer = require('../../es6/bnfLexer'),
    BNFParser = require('../../es6/bnfParser');

var inputTextAreaSelector = 'textArea#input',
    grammarTextAreaSelector = 'textArea#grammar',
    paragraphElementSelector = 'p',
    terminalSymbolsRegExpPatternInputSelector = 'input#terminalSymbolsRegExpPattern',
    inputTextArea = new TextArea(inputTextAreaSelector),
    grammarTextArea = new TextArea(grammarTextAreaSelector),
    paragraphElement = new Element(paragraphElementSelector),
    terminalSymbolsRegExpPatternInput = new Input(terminalSymbolsRegExpPatternInputSelector);

var mappings = {};

var BasicParser = function () {
  function BasicParser() {
    _classCallCheck(this, BasicParser);
  }

  _createClass(BasicParser, null, [{
    key: 'run',
    value: function run() {
      updateParser();

      terminalSymbolsRegExpPatternInput.onChange(function () {
        updateParser();
        updateInput();
      });

      grammarTextArea.onChange(function () {
        updateParser();
        updateInput();
      });

      inputTextArea.onChange(function () {
        updateInput();
      });
    }
  }]);

  return BasicParser;
}();

module.exports = BasicParser;

var parser;

function updateParser() {
  var grammarTextAreaValue = grammarTextArea.getValue(),
      terminalSymbolsRegExpPatternInputValue = terminalSymbolsRegExpPatternInput.getValue(),
      grammar = grammarTextAreaValue,
      ///
  terminalSymbolsRegExpPattern = terminalSymbolsRegExpPatternInputValue,
      ///
  lines = BNFLexer.linesFromGrammar(grammar),
      productions = BNFParser.parse(lines, terminalSymbolsRegExpPattern, mappings);

  parser = new Parser(productions);
}

function updateInput() {
  var inputTextAreaValue = inputTextArea.getValue(),
      input = inputTextAreaValue,
      ///
  parsedInput = parser.parse(input),
      paragraphElementHTML = parsedInput; ///

  paragraphElement.html(paragraphElementHTML);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9iYXNpY1BhcnNlci5qcyJdLCJuYW1lcyI6WyJlYXN5dWkiLCJyZXF1aXJlIiwiSW5wdXQiLCJFbGVtZW50IiwiVGV4dEFyZWEiLCJQYXJzZXIiLCJCTkZMZXhlciIsIkJORlBhcnNlciIsImlucHV0VGV4dEFyZWFTZWxlY3RvciIsImdyYW1tYXJUZXh0QXJlYVNlbGVjdG9yIiwicGFyYWdyYXBoRWxlbWVudFNlbGVjdG9yIiwidGVybWluYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0U2VsZWN0b3IiLCJpbnB1dFRleHRBcmVhIiwiZ3JhbW1hclRleHRBcmVhIiwicGFyYWdyYXBoRWxlbWVudCIsInRlcm1pbmFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dCIsIm1hcHBpbmdzIiwiQmFzaWNQYXJzZXIiLCJ1cGRhdGVQYXJzZXIiLCJvbkNoYW5nZSIsInVwZGF0ZUlucHV0IiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlciIsImdyYW1tYXJUZXh0QXJlYVZhbHVlIiwiZ2V0VmFsdWUiLCJ0ZXJtaW5hbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRWYWx1ZSIsImdyYW1tYXIiLCJ0ZXJtaW5hbFN5bWJvbHNSZWdFeHBQYXR0ZXJuIiwibGluZXMiLCJsaW5lc0Zyb21HcmFtbWFyIiwicHJvZHVjdGlvbnMiLCJwYXJzZSIsImlucHV0VGV4dEFyZWFWYWx1ZSIsImlucHV0IiwicGFyc2VkSW5wdXQiLCJwYXJhZ3JhcGhFbGVtZW50SFRNTCIsImh0bWwiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFJQSxTQUFTQyxRQUFRLFFBQVIsQ0FBYjtBQUFBLElBQ0lDLFFBQVFGLE9BQU9FLEtBRG5CO0FBQUEsSUFFSUMsVUFBVUgsT0FBT0csT0FGckI7QUFBQSxJQUdJQyxXQUFXSixPQUFPSSxRQUh0Qjs7QUFLQSxJQUFJQyxTQUFTSixRQUFTLGtCQUFULENBQWI7QUFBQSxJQUNJSyxXQUFXTCxRQUFTLG9CQUFULENBRGY7QUFBQSxJQUVJTSxZQUFZTixRQUFTLHFCQUFULENBRmhCOztBQUlBLElBQUlPLHdCQUF3QixnQkFBNUI7QUFBQSxJQUNJQywwQkFBMEIsa0JBRDlCO0FBQUEsSUFFSUMsMkJBQTJCLEdBRi9CO0FBQUEsSUFHSUMsNENBQTRDLG9DQUhoRDtBQUFBLElBSUlDLGdCQUFnQixJQUFJUixRQUFKLENBQWFJLHFCQUFiLENBSnBCO0FBQUEsSUFLSUssa0JBQWtCLElBQUlULFFBQUosQ0FBYUssdUJBQWIsQ0FMdEI7QUFBQSxJQU1JSyxtQkFBbUIsSUFBSVgsT0FBSixDQUFZTyx3QkFBWixDQU52QjtBQUFBLElBT0lLLG9DQUFvQyxJQUFJYixLQUFKLENBQVVTLHlDQUFWLENBUHhDOztBQVNBLElBQUlLLFdBQVcsRUFBZjs7SUFFTUMsVzs7Ozs7OzswQkFDUztBQUNYQzs7QUFFQUgsd0NBQWtDSSxRQUFsQyxDQUEyQyxZQUFXO0FBQ3BERDtBQUNBRTtBQUNELE9BSEQ7O0FBS0FQLHNCQUFnQk0sUUFBaEIsQ0FBeUIsWUFBVztBQUNsQ0Q7QUFDQUU7QUFDRCxPQUhEOztBQUtBUixvQkFBY08sUUFBZCxDQUF1QixZQUFXO0FBQ2hDQztBQUNELE9BRkQ7QUFHRDs7Ozs7O0FBR0hDLE9BQU9DLE9BQVAsR0FBaUJMLFdBQWpCOztBQUVBLElBQUlNLE1BQUo7O0FBRUEsU0FBU0wsWUFBVCxHQUF3QjtBQUN0QixNQUFJTSx1QkFBdUJYLGdCQUFnQlksUUFBaEIsRUFBM0I7QUFBQSxNQUNJQyx5Q0FBeUNYLGtDQUFrQ1UsUUFBbEMsRUFEN0M7QUFBQSxNQUVJRSxVQUFVSCxvQkFGZDtBQUFBLE1BRW9DO0FBQ2hDSSxpQ0FBK0JGLHNDQUhuQztBQUFBLE1BRzJFO0FBQ3ZFRyxVQUFRdkIsU0FBU3dCLGdCQUFULENBQTBCSCxPQUExQixDQUpaO0FBQUEsTUFLSUksY0FBY3hCLFVBQVV5QixLQUFWLENBQWdCSCxLQUFoQixFQUF1QkQsNEJBQXZCLEVBQXFEWixRQUFyRCxDQUxsQjs7QUFPQU8sV0FBUyxJQUFJbEIsTUFBSixDQUFXMEIsV0FBWCxDQUFUO0FBQ0Q7O0FBRUQsU0FBU1gsV0FBVCxHQUF1QjtBQUNyQixNQUFJYSxxQkFBcUJyQixjQUFjYSxRQUFkLEVBQXpCO0FBQUEsTUFDSVMsUUFBUUQsa0JBRFo7QUFBQSxNQUNpQztBQUM3QkUsZ0JBQWNaLE9BQU9TLEtBQVAsQ0FBYUUsS0FBYixDQUZsQjtBQUFBLE1BR0lFLHVCQUF1QkQsV0FIM0IsQ0FEcUIsQ0FJbUI7O0FBRXhDckIsbUJBQWlCdUIsSUFBakIsQ0FBc0JELG9CQUF0QjtBQUNEIiwiZmlsZSI6ImJhc2ljUGFyc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWFzeXVpID0gcmVxdWlyZSgnZWFzeXVpJyksXG4gICAgSW5wdXQgPSBlYXN5dWkuSW5wdXQsXG4gICAgRWxlbWVudCA9IGVhc3l1aS5FbGVtZW50LFxuICAgIFRleHRBcmVhID0gZWFzeXVpLlRleHRBcmVhO1xuXG52YXIgUGFyc2VyID0gcmVxdWlyZSAoJy4uLy4uL2VzNi9wYXJzZXInKSxcbiAgICBCTkZMZXhlciA9IHJlcXVpcmUgKCcuLi8uLi9lczYvYm5mTGV4ZXInKSxcbiAgICBCTkZQYXJzZXIgPSByZXF1aXJlICgnLi4vLi4vZXM2L2JuZlBhcnNlcicpO1xuXG52YXIgaW5wdXRUZXh0QXJlYVNlbGVjdG9yID0gJ3RleHRBcmVhI2lucHV0JyxcbiAgICBncmFtbWFyVGV4dEFyZWFTZWxlY3RvciA9ICd0ZXh0QXJlYSNncmFtbWFyJyxcbiAgICBwYXJhZ3JhcGhFbGVtZW50U2VsZWN0b3IgPSAncCcsXG4gICAgdGVybWluYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0U2VsZWN0b3IgPSAnaW5wdXQjdGVybWluYWxTeW1ib2xzUmVnRXhwUGF0dGVybicsXG4gICAgaW5wdXRUZXh0QXJlYSA9IG5ldyBUZXh0QXJlYShpbnB1dFRleHRBcmVhU2VsZWN0b3IpLFxuICAgIGdyYW1tYXJUZXh0QXJlYSA9IG5ldyBUZXh0QXJlYShncmFtbWFyVGV4dEFyZWFTZWxlY3RvciksXG4gICAgcGFyYWdyYXBoRWxlbWVudCA9IG5ldyBFbGVtZW50KHBhcmFncmFwaEVsZW1lbnRTZWxlY3RvciksXG4gICAgdGVybWluYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0ID0gbmV3IElucHV0KHRlcm1pbmFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dFNlbGVjdG9yKTtcblxudmFyIG1hcHBpbmdzID0ge307XG5cbmNsYXNzIEJhc2ljUGFyc2VyIHtcbiAgc3RhdGljIHJ1bigpIHtcbiAgICB1cGRhdGVQYXJzZXIoKTtcblxuICAgIHRlcm1pbmFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dC5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZVBhcnNlcigpO1xuICAgICAgdXBkYXRlSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIGdyYW1tYXJUZXh0QXJlYS5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZVBhcnNlcigpO1xuICAgICAgdXBkYXRlSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIGlucHV0VGV4dEFyZWEub25DaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICB1cGRhdGVJbnB1dCgpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzaWNQYXJzZXI7XG5cbnZhciBwYXJzZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZVBhcnNlcigpIHtcbiAgdmFyIGdyYW1tYXJUZXh0QXJlYVZhbHVlID0gZ3JhbW1hclRleHRBcmVhLmdldFZhbHVlKCksXG4gICAgICB0ZXJtaW5hbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRWYWx1ZSA9IHRlcm1pbmFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dC5nZXRWYWx1ZSgpLFxuICAgICAgZ3JhbW1hciA9IGdyYW1tYXJUZXh0QXJlYVZhbHVlLCAvLy9cbiAgICAgIHRlcm1pbmFsU3ltYm9sc1JlZ0V4cFBhdHRlcm4gPSB0ZXJtaW5hbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRWYWx1ZSwgLy8vXG4gICAgICBsaW5lcyA9IEJORkxleGVyLmxpbmVzRnJvbUdyYW1tYXIoZ3JhbW1hciksXG4gICAgICBwcm9kdWN0aW9ucyA9IEJORlBhcnNlci5wYXJzZShsaW5lcywgdGVybWluYWxTeW1ib2xzUmVnRXhwUGF0dGVybiwgbWFwcGluZ3MpO1xuXG4gIHBhcnNlciA9IG5ldyBQYXJzZXIocHJvZHVjdGlvbnMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVJbnB1dCgpIHtcbiAgdmFyIGlucHV0VGV4dEFyZWFWYWx1ZSA9IGlucHV0VGV4dEFyZWEuZ2V0VmFsdWUoKSxcbiAgICAgIGlucHV0ID0gaW5wdXRUZXh0QXJlYVZhbHVlLCAgLy8vXG4gICAgICBwYXJzZWRJbnB1dCA9IHBhcnNlci5wYXJzZShpbnB1dCksXG4gICAgICBwYXJhZ3JhcGhFbGVtZW50SFRNTCA9IHBhcnNlZElucHV0OyAvLy9cblxuICBwYXJhZ3JhcGhFbGVtZW50Lmh0bWwocGFyYWdyYXBoRWxlbWVudEhUTUwpO1xufVxuIl19