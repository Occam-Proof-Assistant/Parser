'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easyUI = require('easyui'),
    easyUILayout = require('easyui-layout'),
    Input = easyUI.Input,
    TextArea = easyUI.TextArea,
    SizeableElement = easyUILayout.SizeableElement,
    VerticalSplitter = easyUILayout.VerticalSplitter;

var Parser = require('../../es6/parser'),
    BNFLexer = require('../../es6/bnfLexer'),
    BNFParser = require('../../es6/bnfParser');

var leftColumnSelector = '#leftColumn',
    inputTextAreaSelector = 'textArea#input',
    grammarTextAreaSelector = 'textArea#grammar',
    parseTreeTextAreaSelector = 'textArea#parseTree',
    specialSymbolsRegExpInputSelector = 'input#specialSymbolsRegExp',
    inputTextArea = new TextArea(inputTextAreaSelector),
    grammarTextArea = new TextArea(grammarTextAreaSelector),
    parseTreeTextArea = new TextArea(parseTreeTextAreaSelector),
    specialSymbolsRegExpInput = new Input(specialSymbolsRegExpInputSelector),
    leftColumn = new SizeableElement(leftColumnSelector),
    TO_THE_RIGHT_OF = VerticalSplitter.situated.TO_THE_RIGHT_OF;

new VerticalSplitter('.left.vertical.splitter', TO_THE_RIGHT_OF, leftColumn);

var mappings = {};

var BasicParser = function () {
  function BasicParser() {
    _classCallCheck(this, BasicParser);
  }

  _createClass(BasicParser, null, [{
    key: 'run',
    value: function run() {
      updateParser();

      specialSymbolsRegExpInput.onChange(function () {
        updateParser();
        updateInput();
      });

      grammarTextArea.onChange(function () {
        updateParser();
        updateInput();
      });

      inputTextArea.onChange(function () {
        updateInput();
      });
    }
  }]);

  return BasicParser;
}();

module.exports = BasicParser;

var parser;

function updateParser() {
  var grammarTextAreaValue = grammarTextArea.getValue(),
      specialSymbolsRegExpInputValue = specialSymbolsRegExpInput.getValue(),
      grammar = grammarTextAreaValue,
      ///
  specialSymbolsRegExp = specialSymbolsRegExpInputValue,
      ///
  lines = BNFLexer.linesFromGrammar(grammar),
      productions = BNFParser.parse(lines, specialSymbolsRegExp, mappings);

  parser = new Parser(productions);
}

function updateInput() {
  var inputTextAreaValue = inputTextArea.getValue(),
      input = inputTextAreaValue,
      ///
  documentNode = parser.parse(input),
      parseTree = documentNode.getParseTree(),
      parseTreeStr = parseTree.toString(),
      parseTreeTextAreaHTML = parseTreeStr; ///

  parseTreeTextArea.html(parseTreeTextAreaHTML);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9iYXNpY1BhcnNlci5qcyJdLCJuYW1lcyI6WyJlYXN5VUkiLCJyZXF1aXJlIiwiZWFzeVVJTGF5b3V0IiwiSW5wdXQiLCJUZXh0QXJlYSIsIlNpemVhYmxlRWxlbWVudCIsIlZlcnRpY2FsU3BsaXR0ZXIiLCJQYXJzZXIiLCJCTkZMZXhlciIsIkJORlBhcnNlciIsImxlZnRDb2x1bW5TZWxlY3RvciIsImlucHV0VGV4dEFyZWFTZWxlY3RvciIsImdyYW1tYXJUZXh0QXJlYVNlbGVjdG9yIiwicGFyc2VUcmVlVGV4dEFyZWFTZWxlY3RvciIsInNwZWNpYWxTeW1ib2xzUmVnRXhwSW5wdXRTZWxlY3RvciIsImlucHV0VGV4dEFyZWEiLCJncmFtbWFyVGV4dEFyZWEiLCJwYXJzZVRyZWVUZXh0QXJlYSIsInNwZWNpYWxTeW1ib2xzUmVnRXhwSW5wdXQiLCJsZWZ0Q29sdW1uIiwiVE9fVEhFX1JJR0hUX09GIiwic2l0dWF0ZWQiLCJtYXBwaW5ncyIsIkJhc2ljUGFyc2VyIiwidXBkYXRlUGFyc2VyIiwib25DaGFuZ2UiLCJ1cGRhdGVJbnB1dCIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZXIiLCJncmFtbWFyVGV4dEFyZWFWYWx1ZSIsImdldFZhbHVlIiwic3BlY2lhbFN5bWJvbHNSZWdFeHBJbnB1dFZhbHVlIiwiZ3JhbW1hciIsInNwZWNpYWxTeW1ib2xzUmVnRXhwIiwibGluZXMiLCJsaW5lc0Zyb21HcmFtbWFyIiwicHJvZHVjdGlvbnMiLCJwYXJzZSIsImlucHV0VGV4dEFyZWFWYWx1ZSIsImlucHV0IiwiZG9jdW1lbnROb2RlIiwicGFyc2VUcmVlIiwiZ2V0UGFyc2VUcmVlIiwicGFyc2VUcmVlU3RyIiwidG9TdHJpbmciLCJwYXJzZVRyZWVUZXh0QXJlYUhUTUwiLCJodG1sIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBSUEsU0FBU0MsUUFBUSxRQUFSLENBQWI7QUFBQSxJQUNJQyxlQUFlRCxRQUFRLGVBQVIsQ0FEbkI7QUFBQSxJQUVJRSxRQUFRSCxPQUFPRyxLQUZuQjtBQUFBLElBR0lDLFdBQVdKLE9BQU9JLFFBSHRCO0FBQUEsSUFJSUMsa0JBQWtCSCxhQUFhRyxlQUpuQztBQUFBLElBS0lDLG1CQUFtQkosYUFBYUksZ0JBTHBDOztBQU9BLElBQUlDLFNBQVNOLFFBQVMsa0JBQVQsQ0FBYjtBQUFBLElBQ0lPLFdBQVdQLFFBQVMsb0JBQVQsQ0FEZjtBQUFBLElBRUlRLFlBQVlSLFFBQVMscUJBQVQsQ0FGaEI7O0FBSUEsSUFBSVMscUJBQXFCLGFBQXpCO0FBQUEsSUFDSUMsd0JBQXdCLGdCQUQ1QjtBQUFBLElBRUlDLDBCQUEwQixrQkFGOUI7QUFBQSxJQUdJQyw0QkFBNEIsb0JBSGhDO0FBQUEsSUFJSUMsb0NBQW9DLDRCQUp4QztBQUFBLElBS0lDLGdCQUFnQixJQUFJWCxRQUFKLENBQWFPLHFCQUFiLENBTHBCO0FBQUEsSUFNSUssa0JBQWtCLElBQUlaLFFBQUosQ0FBYVEsdUJBQWIsQ0FOdEI7QUFBQSxJQU9JSyxvQkFBb0IsSUFBSWIsUUFBSixDQUFhUyx5QkFBYixDQVB4QjtBQUFBLElBUUlLLDRCQUE0QixJQUFJZixLQUFKLENBQVVXLGlDQUFWLENBUmhDO0FBQUEsSUFTSUssYUFBYSxJQUFJZCxlQUFKLENBQW9CSyxrQkFBcEIsQ0FUakI7QUFBQSxJQVVJVSxrQkFBa0JkLGlCQUFpQmUsUUFBakIsQ0FBMEJELGVBVmhEOztBQVlBLElBQUlkLGdCQUFKLENBQXFCLHlCQUFyQixFQUFnRGMsZUFBaEQsRUFBaUVELFVBQWpFOztBQUVBLElBQUlHLFdBQVcsRUFBZjs7SUFFTUMsVzs7Ozs7OzswQkFDUztBQUNYQzs7QUFFQU4sZ0NBQTBCTyxRQUExQixDQUFtQyxZQUFXO0FBQzVDRDtBQUNBRTtBQUNELE9BSEQ7O0FBS0FWLHNCQUFnQlMsUUFBaEIsQ0FBeUIsWUFBVztBQUNsQ0Q7QUFDQUU7QUFDRCxPQUhEOztBQUtBWCxvQkFBY1UsUUFBZCxDQUF1QixZQUFXO0FBQ2hDQztBQUNELE9BRkQ7QUFHRDs7Ozs7O0FBR0hDLE9BQU9DLE9BQVAsR0FBaUJMLFdBQWpCOztBQUVBLElBQUlNLE1BQUo7O0FBRUEsU0FBU0wsWUFBVCxHQUF3QjtBQUN0QixNQUFJTSx1QkFBdUJkLGdCQUFnQmUsUUFBaEIsRUFBM0I7QUFBQSxNQUNJQyxpQ0FBaUNkLDBCQUEwQmEsUUFBMUIsRUFEckM7QUFBQSxNQUVJRSxVQUFVSCxvQkFGZDtBQUFBLE1BRW9DO0FBQ2hDSSx5QkFBdUJGLDhCQUgzQjtBQUFBLE1BRzJEO0FBQ3ZERyxVQUFRM0IsU0FBUzRCLGdCQUFULENBQTBCSCxPQUExQixDQUpaO0FBQUEsTUFLSUksY0FBYzVCLFVBQVU2QixLQUFWLENBQWdCSCxLQUFoQixFQUF1QkQsb0JBQXZCLEVBQTZDWixRQUE3QyxDQUxsQjs7QUFPQU8sV0FBUyxJQUFJdEIsTUFBSixDQUFXOEIsV0FBWCxDQUFUO0FBQ0Q7O0FBRUQsU0FBU1gsV0FBVCxHQUF1QjtBQUNyQixNQUFJYSxxQkFBcUJ4QixjQUFjZ0IsUUFBZCxFQUF6QjtBQUFBLE1BQ0lTLFFBQVFELGtCQURaO0FBQUEsTUFDaUM7QUFDN0JFLGlCQUFlWixPQUFPUyxLQUFQLENBQWFFLEtBQWIsQ0FGbkI7QUFBQSxNQUdJRSxZQUFZRCxhQUFhRSxZQUFiLEVBSGhCO0FBQUEsTUFJSUMsZUFBZUYsVUFBVUcsUUFBVixFQUpuQjtBQUFBLE1BS0lDLHdCQUF3QkYsWUFMNUIsQ0FEcUIsQ0FNc0I7O0FBRTNDM0Isb0JBQWtCOEIsSUFBbEIsQ0FBdUJELHFCQUF2QjtBQUNEIiwiZmlsZSI6ImJhc2ljUGFyc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWFzeVVJID0gcmVxdWlyZSgnZWFzeXVpJyksXG4gICAgZWFzeVVJTGF5b3V0ID0gcmVxdWlyZSgnZWFzeXVpLWxheW91dCcpLFxuICAgIElucHV0ID0gZWFzeVVJLklucHV0LFxuICAgIFRleHRBcmVhID0gZWFzeVVJLlRleHRBcmVhLFxuICAgIFNpemVhYmxlRWxlbWVudCA9IGVhc3lVSUxheW91dC5TaXplYWJsZUVsZW1lbnQsXG4gICAgVmVydGljYWxTcGxpdHRlciA9IGVhc3lVSUxheW91dC5WZXJ0aWNhbFNwbGl0dGVyO1xuXG52YXIgUGFyc2VyID0gcmVxdWlyZSAoJy4uLy4uL2VzNi9wYXJzZXInKSxcbiAgICBCTkZMZXhlciA9IHJlcXVpcmUgKCcuLi8uLi9lczYvYm5mTGV4ZXInKSxcbiAgICBCTkZQYXJzZXIgPSByZXF1aXJlICgnLi4vLi4vZXM2L2JuZlBhcnNlcicpO1xuXG52YXIgbGVmdENvbHVtblNlbGVjdG9yID0gJyNsZWZ0Q29sdW1uJyxcbiAgICBpbnB1dFRleHRBcmVhU2VsZWN0b3IgPSAndGV4dEFyZWEjaW5wdXQnLFxuICAgIGdyYW1tYXJUZXh0QXJlYVNlbGVjdG9yID0gJ3RleHRBcmVhI2dyYW1tYXInLFxuICAgIHBhcnNlVHJlZVRleHRBcmVhU2VsZWN0b3IgPSAndGV4dEFyZWEjcGFyc2VUcmVlJyxcbiAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cElucHV0U2VsZWN0b3IgPSAnaW5wdXQjc3BlY2lhbFN5bWJvbHNSZWdFeHAnLFxuICAgIGlucHV0VGV4dEFyZWEgPSBuZXcgVGV4dEFyZWEoaW5wdXRUZXh0QXJlYVNlbGVjdG9yKSxcbiAgICBncmFtbWFyVGV4dEFyZWEgPSBuZXcgVGV4dEFyZWEoZ3JhbW1hclRleHRBcmVhU2VsZWN0b3IpLFxuICAgIHBhcnNlVHJlZVRleHRBcmVhID0gbmV3IFRleHRBcmVhKHBhcnNlVHJlZVRleHRBcmVhU2VsZWN0b3IpLFxuICAgIHNwZWNpYWxTeW1ib2xzUmVnRXhwSW5wdXQgPSBuZXcgSW5wdXQoc3BlY2lhbFN5bWJvbHNSZWdFeHBJbnB1dFNlbGVjdG9yKSxcbiAgICBsZWZ0Q29sdW1uID0gbmV3IFNpemVhYmxlRWxlbWVudChsZWZ0Q29sdW1uU2VsZWN0b3IpLFxuICAgIFRPX1RIRV9SSUdIVF9PRiA9IFZlcnRpY2FsU3BsaXR0ZXIuc2l0dWF0ZWQuVE9fVEhFX1JJR0hUX09GO1xuXG5uZXcgVmVydGljYWxTcGxpdHRlcignLmxlZnQudmVydGljYWwuc3BsaXR0ZXInLCBUT19USEVfUklHSFRfT0YsIGxlZnRDb2x1bW4pO1xuXG52YXIgbWFwcGluZ3MgPSB7fTtcblxuY2xhc3MgQmFzaWNQYXJzZXIge1xuICBzdGF0aWMgcnVuKCkge1xuICAgIHVwZGF0ZVBhcnNlcigpO1xuXG4gICAgc3BlY2lhbFN5bWJvbHNSZWdFeHBJbnB1dC5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZVBhcnNlcigpO1xuICAgICAgdXBkYXRlSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIGdyYW1tYXJUZXh0QXJlYS5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZVBhcnNlcigpO1xuICAgICAgdXBkYXRlSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIGlucHV0VGV4dEFyZWEub25DaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICB1cGRhdGVJbnB1dCgpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzaWNQYXJzZXI7XG5cbnZhciBwYXJzZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZVBhcnNlcigpIHtcbiAgdmFyIGdyYW1tYXJUZXh0QXJlYVZhbHVlID0gZ3JhbW1hclRleHRBcmVhLmdldFZhbHVlKCksXG4gICAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cElucHV0VmFsdWUgPSBzcGVjaWFsU3ltYm9sc1JlZ0V4cElucHV0LmdldFZhbHVlKCksXG4gICAgICBncmFtbWFyID0gZ3JhbW1hclRleHRBcmVhVmFsdWUsIC8vL1xuICAgICAgc3BlY2lhbFN5bWJvbHNSZWdFeHAgPSBzcGVjaWFsU3ltYm9sc1JlZ0V4cElucHV0VmFsdWUsIC8vL1xuICAgICAgbGluZXMgPSBCTkZMZXhlci5saW5lc0Zyb21HcmFtbWFyKGdyYW1tYXIpLFxuICAgICAgcHJvZHVjdGlvbnMgPSBCTkZQYXJzZXIucGFyc2UobGluZXMsIHNwZWNpYWxTeW1ib2xzUmVnRXhwLCBtYXBwaW5ncyk7XG5cbiAgcGFyc2VyID0gbmV3IFBhcnNlcihwcm9kdWN0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUlucHV0KCkge1xuICB2YXIgaW5wdXRUZXh0QXJlYVZhbHVlID0gaW5wdXRUZXh0QXJlYS5nZXRWYWx1ZSgpLFxuICAgICAgaW5wdXQgPSBpbnB1dFRleHRBcmVhVmFsdWUsICAvLy9cbiAgICAgIGRvY3VtZW50Tm9kZSA9IHBhcnNlci5wYXJzZShpbnB1dCksXG4gICAgICBwYXJzZVRyZWUgPSBkb2N1bWVudE5vZGUuZ2V0UGFyc2VUcmVlKCksXG4gICAgICBwYXJzZVRyZWVTdHIgPSBwYXJzZVRyZWUudG9TdHJpbmcoKSxcbiAgICAgIHBhcnNlVHJlZVRleHRBcmVhSFRNTCA9IHBhcnNlVHJlZVN0cjsgIC8vL1xuXG4gIHBhcnNlVHJlZVRleHRBcmVhLmh0bWwocGFyc2VUcmVlVGV4dEFyZWFIVE1MKTtcbn1cbiJdfQ==