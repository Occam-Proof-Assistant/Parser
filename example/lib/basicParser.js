'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easyUI = require('easyui'),
    easyUILayout = require('easyui-layout'),
    Input = easyUI.Input,
    TextArea = easyUI.TextArea,
    SizeableElement = easyUILayout.SizeableElement,
    VerticalSplitter = easyUILayout.VerticalSplitter;

var Parser = require('../../es6/parser'),
    BNFLexer = require('../../es6/bnfLexer'),
    BNFParser = require('../../es6/bnfParser');

var leftColumnSizeableElementSelector = '#leftColumn',
    leftColumnSizeableElement = new SizeableElement(leftColumnSizeableElementSelector),
    TO_THE_RIGHT_OF = VerticalSplitter.situated.TO_THE_RIGHT_OF,
    verticalSplitter = new VerticalSplitter('.left.vertical.splitter', TO_THE_RIGHT_OF, leftColumnSizeableElement);

var inputTextAreaSelector = 'textArea#input',
    grammarTextAreaSelector = 'textArea#grammar',
    parseTreeTextAreaSelector = 'textArea#parseTree',
    specialSymbolsRegExpPatternInputSelector = 'input#specialSymbolsRegExpPattern',
    inputTextArea = new TextArea(inputTextAreaSelector),
    grammarTextArea = new TextArea(grammarTextAreaSelector),
    parseTreeTextArea = new TextArea(parseTreeTextAreaSelector),
    specialSymbolsRegExpPatternInput = new Input(specialSymbolsRegExpPatternInputSelector);

var mappings = {};

var BasicParser = function () {
  function BasicParser() {
    _classCallCheck(this, BasicParser);
  }

  _createClass(BasicParser, null, [{
    key: 'run',
    value: function run() {
      updateParser();

      specialSymbolsRegExpPatternInput.onChange(function () {
        updateParser();
        updateInput();
      });

      grammarTextArea.onChange(function () {
        updateParser();
        updateInput();
      });

      inputTextArea.onChange(function () {
        updateInput();
      });
    }
  }]);

  return BasicParser;
}();

module.exports = BasicParser;

var parser;

function updateParser() {
  var grammarTextAreaValue = grammarTextArea.getValue(),
      specialSymbolsRegExpPatternInputValue = specialSymbolsRegExpPatternInput.getValue(),
      grammar = grammarTextAreaValue,
      ///
  specialSymbolsRegExpPattern = specialSymbolsRegExpPatternInputValue,
      ///
  lines = BNFLexer.linesFromGrammar(grammar),
      productions = BNFParser.parse(lines, specialSymbolsRegExpPattern, mappings);

  parser = new Parser(productions);
}

function updateInput() {
  var inputTextAreaValue = inputTextArea.getValue(),
      input = inputTextAreaValue,
      ///
  documentNode = parser.parse(input),
      documentNodeString = documentNode.toString(),
      parseTreeTextAreaHTML = documentNodeString; ///

  parseTreeTextArea.html(parseTreeTextAreaHTML);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9iYXNpY1BhcnNlci5qcyJdLCJuYW1lcyI6WyJlYXN5VUkiLCJyZXF1aXJlIiwiZWFzeVVJTGF5b3V0IiwiSW5wdXQiLCJUZXh0QXJlYSIsIlNpemVhYmxlRWxlbWVudCIsIlZlcnRpY2FsU3BsaXR0ZXIiLCJQYXJzZXIiLCJCTkZMZXhlciIsIkJORlBhcnNlciIsImxlZnRDb2x1bW5TaXplYWJsZUVsZW1lbnRTZWxlY3RvciIsImxlZnRDb2x1bW5TaXplYWJsZUVsZW1lbnQiLCJUT19USEVfUklHSFRfT0YiLCJzaXR1YXRlZCIsInZlcnRpY2FsU3BsaXR0ZXIiLCJpbnB1dFRleHRBcmVhU2VsZWN0b3IiLCJncmFtbWFyVGV4dEFyZWFTZWxlY3RvciIsInBhcnNlVHJlZVRleHRBcmVhU2VsZWN0b3IiLCJzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dFNlbGVjdG9yIiwiaW5wdXRUZXh0QXJlYSIsImdyYW1tYXJUZXh0QXJlYSIsInBhcnNlVHJlZVRleHRBcmVhIiwic3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXQiLCJtYXBwaW5ncyIsIkJhc2ljUGFyc2VyIiwidXBkYXRlUGFyc2VyIiwib25DaGFuZ2UiLCJ1cGRhdGVJbnB1dCIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZXIiLCJncmFtbWFyVGV4dEFyZWFWYWx1ZSIsImdldFZhbHVlIiwic3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRWYWx1ZSIsImdyYW1tYXIiLCJzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm4iLCJsaW5lcyIsImxpbmVzRnJvbUdyYW1tYXIiLCJwcm9kdWN0aW9ucyIsInBhcnNlIiwiaW5wdXRUZXh0QXJlYVZhbHVlIiwiaW5wdXQiLCJkb2N1bWVudE5vZGUiLCJkb2N1bWVudE5vZGVTdHJpbmciLCJ0b1N0cmluZyIsInBhcnNlVHJlZVRleHRBcmVhSFRNTCIsImh0bWwiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFJQSxTQUFTQyxRQUFRLFFBQVIsQ0FBYjtBQUFBLElBQ0lDLGVBQWVELFFBQVEsZUFBUixDQURuQjtBQUFBLElBRUlFLFFBQVFILE9BQU9HLEtBRm5CO0FBQUEsSUFHSUMsV0FBV0osT0FBT0ksUUFIdEI7QUFBQSxJQUlJQyxrQkFBa0JILGFBQWFHLGVBSm5DO0FBQUEsSUFLSUMsbUJBQW1CSixhQUFhSSxnQkFMcEM7O0FBT0EsSUFBSUMsU0FBU04sUUFBUyxrQkFBVCxDQUFiO0FBQUEsSUFDSU8sV0FBV1AsUUFBUyxvQkFBVCxDQURmO0FBQUEsSUFFSVEsWUFBWVIsUUFBUyxxQkFBVCxDQUZoQjs7QUFJQSxJQUFJUyxvQ0FBb0MsYUFBeEM7QUFBQSxJQUNJQyw0QkFBNEIsSUFBSU4sZUFBSixDQUFvQkssaUNBQXBCLENBRGhDO0FBQUEsSUFFSUUsa0JBQWtCTixpQkFBaUJPLFFBQWpCLENBQTBCRCxlQUZoRDtBQUFBLElBR0lFLG1CQUFtQixJQUFJUixnQkFBSixDQUFxQix5QkFBckIsRUFBZ0RNLGVBQWhELEVBQWlFRCx5QkFBakUsQ0FIdkI7O0FBS0EsSUFBSUksd0JBQXdCLGdCQUE1QjtBQUFBLElBQ0lDLDBCQUEwQixrQkFEOUI7QUFBQSxJQUVJQyw0QkFBNEIsb0JBRmhDO0FBQUEsSUFHSUMsMkNBQTJDLG1DQUgvQztBQUFBLElBSUlDLGdCQUFnQixJQUFJZixRQUFKLENBQWFXLHFCQUFiLENBSnBCO0FBQUEsSUFLSUssa0JBQWtCLElBQUloQixRQUFKLENBQWFZLHVCQUFiLENBTHRCO0FBQUEsSUFNSUssb0JBQW9CLElBQUlqQixRQUFKLENBQWFhLHlCQUFiLENBTnhCO0FBQUEsSUFPSUssbUNBQW1DLElBQUluQixLQUFKLENBQVVlLHdDQUFWLENBUHZDOztBQVNBLElBQUlLLFdBQVcsRUFBZjs7SUFFTUMsVzs7Ozs7OzswQkFDUztBQUNYQzs7QUFFQUgsdUNBQWlDSSxRQUFqQyxDQUEwQyxZQUFXO0FBQ25ERDtBQUNBRTtBQUNELE9BSEQ7O0FBS0FQLHNCQUFnQk0sUUFBaEIsQ0FBeUIsWUFBVztBQUNsQ0Q7QUFDQUU7QUFDRCxPQUhEOztBQUtBUixvQkFBY08sUUFBZCxDQUF1QixZQUFXO0FBQ2hDQztBQUNELE9BRkQ7QUFHRDs7Ozs7O0FBR0hDLE9BQU9DLE9BQVAsR0FBaUJMLFdBQWpCOztBQUVBLElBQUlNLE1BQUo7O0FBRUEsU0FBU0wsWUFBVCxHQUF3QjtBQUN0QixNQUFJTSx1QkFBdUJYLGdCQUFnQlksUUFBaEIsRUFBM0I7QUFBQSxNQUNJQyx3Q0FBd0NYLGlDQUFpQ1UsUUFBakMsRUFENUM7QUFBQSxNQUVJRSxVQUFVSCxvQkFGZDtBQUFBLE1BRW9DO0FBQ2hDSSxnQ0FBOEJGLHFDQUhsQztBQUFBLE1BR3lFO0FBQ3JFRyxVQUFRNUIsU0FBUzZCLGdCQUFULENBQTBCSCxPQUExQixDQUpaO0FBQUEsTUFLSUksY0FBYzdCLFVBQVU4QixLQUFWLENBQWdCSCxLQUFoQixFQUF1QkQsMkJBQXZCLEVBQW9EWixRQUFwRCxDQUxsQjs7QUFPQU8sV0FBUyxJQUFJdkIsTUFBSixDQUFXK0IsV0FBWCxDQUFUO0FBQ0Q7O0FBRUQsU0FBU1gsV0FBVCxHQUF1QjtBQUNyQixNQUFJYSxxQkFBcUJyQixjQUFjYSxRQUFkLEVBQXpCO0FBQUEsTUFDSVMsUUFBUUQsa0JBRFo7QUFBQSxNQUNpQztBQUM3QkUsaUJBQWVaLE9BQU9TLEtBQVAsQ0FBYUUsS0FBYixDQUZuQjtBQUFBLE1BR0lFLHFCQUFxQkQsYUFBYUUsUUFBYixFQUh6QjtBQUFBLE1BSUlDLHdCQUF3QkYsa0JBSjVCLENBRHFCLENBSzRCOztBQUVqRHRCLG9CQUFrQnlCLElBQWxCLENBQXVCRCxxQkFBdkI7QUFDRCIsImZpbGUiOiJiYXNpY1BhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGVhc3lVSSA9IHJlcXVpcmUoJ2Vhc3l1aScpLFxuICAgIGVhc3lVSUxheW91dCA9IHJlcXVpcmUoJ2Vhc3l1aS1sYXlvdXQnKSxcbiAgICBJbnB1dCA9IGVhc3lVSS5JbnB1dCxcbiAgICBUZXh0QXJlYSA9IGVhc3lVSS5UZXh0QXJlYSxcbiAgICBTaXplYWJsZUVsZW1lbnQgPSBlYXN5VUlMYXlvdXQuU2l6ZWFibGVFbGVtZW50LFxuICAgIFZlcnRpY2FsU3BsaXR0ZXIgPSBlYXN5VUlMYXlvdXQuVmVydGljYWxTcGxpdHRlcjtcblxudmFyIFBhcnNlciA9IHJlcXVpcmUgKCcuLi8uLi9lczYvcGFyc2VyJyksXG4gICAgQk5GTGV4ZXIgPSByZXF1aXJlICgnLi4vLi4vZXM2L2JuZkxleGVyJyksXG4gICAgQk5GUGFyc2VyID0gcmVxdWlyZSAoJy4uLy4uL2VzNi9ibmZQYXJzZXInKTtcblxudmFyIGxlZnRDb2x1bW5TaXplYWJsZUVsZW1lbnRTZWxlY3RvciA9ICcjbGVmdENvbHVtbicsXG4gICAgbGVmdENvbHVtblNpemVhYmxlRWxlbWVudCA9IG5ldyBTaXplYWJsZUVsZW1lbnQobGVmdENvbHVtblNpemVhYmxlRWxlbWVudFNlbGVjdG9yKSxcbiAgICBUT19USEVfUklHSFRfT0YgPSBWZXJ0aWNhbFNwbGl0dGVyLnNpdHVhdGVkLlRPX1RIRV9SSUdIVF9PRixcbiAgICB2ZXJ0aWNhbFNwbGl0dGVyID0gbmV3IFZlcnRpY2FsU3BsaXR0ZXIoJy5sZWZ0LnZlcnRpY2FsLnNwbGl0dGVyJywgVE9fVEhFX1JJR0hUX09GLCBsZWZ0Q29sdW1uU2l6ZWFibGVFbGVtZW50KTtcblxudmFyIGlucHV0VGV4dEFyZWFTZWxlY3RvciA9ICd0ZXh0QXJlYSNpbnB1dCcsXG4gICAgZ3JhbW1hclRleHRBcmVhU2VsZWN0b3IgPSAndGV4dEFyZWEjZ3JhbW1hcicsXG4gICAgcGFyc2VUcmVlVGV4dEFyZWFTZWxlY3RvciA9ICd0ZXh0QXJlYSNwYXJzZVRyZWUnLFxuICAgIHNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0U2VsZWN0b3IgPSAnaW5wdXQjc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuJyxcbiAgICBpbnB1dFRleHRBcmVhID0gbmV3IFRleHRBcmVhKGlucHV0VGV4dEFyZWFTZWxlY3RvciksXG4gICAgZ3JhbW1hclRleHRBcmVhID0gbmV3IFRleHRBcmVhKGdyYW1tYXJUZXh0QXJlYVNlbGVjdG9yKSxcbiAgICBwYXJzZVRyZWVUZXh0QXJlYSA9IG5ldyBUZXh0QXJlYShwYXJzZVRyZWVUZXh0QXJlYVNlbGVjdG9yKSxcbiAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dCA9IG5ldyBJbnB1dChzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dFNlbGVjdG9yKTtcblxudmFyIG1hcHBpbmdzID0ge307XG5cbmNsYXNzIEJhc2ljUGFyc2VyIHtcbiAgc3RhdGljIHJ1bigpIHtcbiAgICB1cGRhdGVQYXJzZXIoKTtcblxuICAgIHNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0Lm9uQ2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgdXBkYXRlUGFyc2VyKCk7XG4gICAgICB1cGRhdGVJbnB1dCgpO1xuICAgIH0pO1xuXG4gICAgZ3JhbW1hclRleHRBcmVhLm9uQ2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgdXBkYXRlUGFyc2VyKCk7XG4gICAgICB1cGRhdGVJbnB1dCgpO1xuICAgIH0pO1xuXG4gICAgaW5wdXRUZXh0QXJlYS5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZUlucHV0KCk7XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNpY1BhcnNlcjtcblxudmFyIHBhcnNlcjtcblxuZnVuY3Rpb24gdXBkYXRlUGFyc2VyKCkge1xuICB2YXIgZ3JhbW1hclRleHRBcmVhVmFsdWUgPSBncmFtbWFyVGV4dEFyZWEuZ2V0VmFsdWUoKSxcbiAgICAgIHNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0VmFsdWUgPSBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dC5nZXRWYWx1ZSgpLFxuICAgICAgZ3JhbW1hciA9IGdyYW1tYXJUZXh0QXJlYVZhbHVlLCAvLy9cbiAgICAgIHNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybiA9IHNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0VmFsdWUsIC8vL1xuICAgICAgbGluZXMgPSBCTkZMZXhlci5saW5lc0Zyb21HcmFtbWFyKGdyYW1tYXIpLFxuICAgICAgcHJvZHVjdGlvbnMgPSBCTkZQYXJzZXIucGFyc2UobGluZXMsIHNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybiwgbWFwcGluZ3MpO1xuXG4gIHBhcnNlciA9IG5ldyBQYXJzZXIocHJvZHVjdGlvbnMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVJbnB1dCgpIHtcbiAgdmFyIGlucHV0VGV4dEFyZWFWYWx1ZSA9IGlucHV0VGV4dEFyZWEuZ2V0VmFsdWUoKSxcbiAgICAgIGlucHV0ID0gaW5wdXRUZXh0QXJlYVZhbHVlLCAgLy8vXG4gICAgICBkb2N1bWVudE5vZGUgPSBwYXJzZXIucGFyc2UoaW5wdXQpLFxuICAgICAgZG9jdW1lbnROb2RlU3RyaW5nID0gZG9jdW1lbnROb2RlLnRvU3RyaW5nKCksXG4gICAgICBwYXJzZVRyZWVUZXh0QXJlYUhUTUwgPSBkb2N1bWVudE5vZGVTdHJpbmc7ICAvLy9cblxuICBwYXJzZVRyZWVUZXh0QXJlYS5odG1sKHBhcnNlVHJlZVRleHRBcmVhSFRNTCk7XG59XG4iXX0=