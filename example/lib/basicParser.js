'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easyUI = require('easyui'),
    easyUILayout = require('easyui-layout'),
    Input = easyUI.Input,
    Element = easyUI.Element,
    TextArea = easyUI.TextArea,
    SizeableElement = easyUILayout.SizeableElement,
    VerticalSplitter = easyUILayout.VerticalSplitter;

var leftColumn = new SizeableElement('#leftColumn');

new VerticalSplitter('.left.vertical.splitter', VerticalSplitter.situated.TO_THE_RIGHT_OF, leftColumn);

var Parser = require('../../es6/parser'),
    BNFLexer = require('../../es6/bnfLexer'),
    BNFParser = require('../../es6/bnfParser');

var inputTextAreaSelector = 'textArea#input',
    grammarTextAreaSelector = 'textArea#grammar',
    paragraphElementSelector = 'p',
    specialSymbolsRegExpPatternInputSelector = 'input#specialSymbolsRegExpPattern',
    inputTextArea = new TextArea(inputTextAreaSelector),
    grammarTextArea = new TextArea(grammarTextAreaSelector),
    paragraphElement = new Element(paragraphElementSelector),
    specialSymbolsRegExpPatternInput = new Input(specialSymbolsRegExpPatternInputSelector);

var mappings = {};

var BasicParser = function () {
  function BasicParser() {
    _classCallCheck(this, BasicParser);
  }

  _createClass(BasicParser, null, [{
    key: 'run',
    value: function run() {
      updateParser();

      specialSymbolsRegExpPatternInput.onChange(function () {
        updateParser();
        updateInput();
      });

      grammarTextArea.onChange(function () {
        updateParser();
        updateInput();
      });

      inputTextArea.onChange(function () {
        updateInput();
      });
    }
  }]);

  return BasicParser;
}();

module.exports = BasicParser;

var parser;

function updateParser() {
  var grammarTextAreaValue = grammarTextArea.getValue(),
      specialSymbolsRegExpPatternInputValue = specialSymbolsRegExpPatternInput.getValue(),
      grammar = grammarTextAreaValue,
      ///
  specialSymbolsRegExpPattern = specialSymbolsRegExpPatternInputValue,
      ///
  lines = BNFLexer.linesFromGrammar(grammar),
      productions = BNFParser.parse(lines, specialSymbolsRegExpPattern, mappings);

  parser = new Parser(productions);
}

function updateInput() {
  var inputTextAreaValue = inputTextArea.getValue(),
      input = inputTextAreaValue,
      ///
  parsedInput = parser.parse(input),
      paragraphElementHTML = parsedInput; ///

  paragraphElement.html(paragraphElementHTML);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9iYXNpY1BhcnNlci5qcyJdLCJuYW1lcyI6WyJlYXN5VUkiLCJyZXF1aXJlIiwiZWFzeVVJTGF5b3V0IiwiSW5wdXQiLCJFbGVtZW50IiwiVGV4dEFyZWEiLCJTaXplYWJsZUVsZW1lbnQiLCJWZXJ0aWNhbFNwbGl0dGVyIiwibGVmdENvbHVtbiIsInNpdHVhdGVkIiwiVE9fVEhFX1JJR0hUX09GIiwiUGFyc2VyIiwiQk5GTGV4ZXIiLCJCTkZQYXJzZXIiLCJpbnB1dFRleHRBcmVhU2VsZWN0b3IiLCJncmFtbWFyVGV4dEFyZWFTZWxlY3RvciIsInBhcmFncmFwaEVsZW1lbnRTZWxlY3RvciIsInNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0U2VsZWN0b3IiLCJpbnB1dFRleHRBcmVhIiwiZ3JhbW1hclRleHRBcmVhIiwicGFyYWdyYXBoRWxlbWVudCIsInNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0IiwibWFwcGluZ3MiLCJCYXNpY1BhcnNlciIsInVwZGF0ZVBhcnNlciIsIm9uQ2hhbmdlIiwidXBkYXRlSW5wdXQiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2VyIiwiZ3JhbW1hclRleHRBcmVhVmFsdWUiLCJnZXRWYWx1ZSIsInNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0VmFsdWUiLCJncmFtbWFyIiwic3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuIiwibGluZXMiLCJsaW5lc0Zyb21HcmFtbWFyIiwicHJvZHVjdGlvbnMiLCJwYXJzZSIsImlucHV0VGV4dEFyZWFWYWx1ZSIsImlucHV0IiwicGFyc2VkSW5wdXQiLCJwYXJhZ3JhcGhFbGVtZW50SFRNTCIsImh0bWwiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFJQSxTQUFTQyxRQUFRLFFBQVIsQ0FBYjtBQUFBLElBQ0lDLGVBQWVELFFBQVEsZUFBUixDQURuQjtBQUFBLElBRUlFLFFBQVFILE9BQU9HLEtBRm5CO0FBQUEsSUFHSUMsVUFBVUosT0FBT0ksT0FIckI7QUFBQSxJQUlJQyxXQUFXTCxPQUFPSyxRQUp0QjtBQUFBLElBS0lDLGtCQUFrQkosYUFBYUksZUFMbkM7QUFBQSxJQU1JQyxtQkFBbUJMLGFBQWFLLGdCQU5wQzs7QUFRQSxJQUFJQyxhQUFhLElBQUlGLGVBQUosQ0FBb0IsYUFBcEIsQ0FBakI7O0FBRUEsSUFBSUMsZ0JBQUosQ0FBcUIseUJBQXJCLEVBQWdEQSxpQkFBaUJFLFFBQWpCLENBQTBCQyxlQUExRSxFQUEyRkYsVUFBM0Y7O0FBRUEsSUFBSUcsU0FBU1YsUUFBUyxrQkFBVCxDQUFiO0FBQUEsSUFDSVcsV0FBV1gsUUFBUyxvQkFBVCxDQURmO0FBQUEsSUFFSVksWUFBWVosUUFBUyxxQkFBVCxDQUZoQjs7QUFJQSxJQUFJYSx3QkFBd0IsZ0JBQTVCO0FBQUEsSUFDSUMsMEJBQTBCLGtCQUQ5QjtBQUFBLElBRUlDLDJCQUEyQixHQUYvQjtBQUFBLElBR0lDLDJDQUEyQyxtQ0FIL0M7QUFBQSxJQUlJQyxnQkFBZ0IsSUFBSWIsUUFBSixDQUFhUyxxQkFBYixDQUpwQjtBQUFBLElBS0lLLGtCQUFrQixJQUFJZCxRQUFKLENBQWFVLHVCQUFiLENBTHRCO0FBQUEsSUFNSUssbUJBQW1CLElBQUloQixPQUFKLENBQVlZLHdCQUFaLENBTnZCO0FBQUEsSUFPSUssbUNBQW1DLElBQUlsQixLQUFKLENBQVVjLHdDQUFWLENBUHZDOztBQVNBLElBQUlLLFdBQVcsRUFBZjs7SUFFTUMsVzs7Ozs7OzswQkFDUztBQUNYQzs7QUFFQUgsdUNBQWlDSSxRQUFqQyxDQUEwQyxZQUFXO0FBQ25ERDtBQUNBRTtBQUNELE9BSEQ7O0FBS0FQLHNCQUFnQk0sUUFBaEIsQ0FBeUIsWUFBVztBQUNsQ0Q7QUFDQUU7QUFDRCxPQUhEOztBQUtBUixvQkFBY08sUUFBZCxDQUF1QixZQUFXO0FBQ2hDQztBQUNELE9BRkQ7QUFHRDs7Ozs7O0FBR0hDLE9BQU9DLE9BQVAsR0FBaUJMLFdBQWpCOztBQUVBLElBQUlNLE1BQUo7O0FBRUEsU0FBU0wsWUFBVCxHQUF3QjtBQUN0QixNQUFJTSx1QkFBdUJYLGdCQUFnQlksUUFBaEIsRUFBM0I7QUFBQSxNQUNJQyx3Q0FBd0NYLGlDQUFpQ1UsUUFBakMsRUFENUM7QUFBQSxNQUVJRSxVQUFVSCxvQkFGZDtBQUFBLE1BRW9DO0FBQ2hDSSxnQ0FBOEJGLHFDQUhsQztBQUFBLE1BR3lFO0FBQ3JFRyxVQUFRdkIsU0FBU3dCLGdCQUFULENBQTBCSCxPQUExQixDQUpaO0FBQUEsTUFLSUksY0FBY3hCLFVBQVV5QixLQUFWLENBQWdCSCxLQUFoQixFQUF1QkQsMkJBQXZCLEVBQW9EWixRQUFwRCxDQUxsQjs7QUFPQU8sV0FBUyxJQUFJbEIsTUFBSixDQUFXMEIsV0FBWCxDQUFUO0FBQ0Q7O0FBRUQsU0FBU1gsV0FBVCxHQUF1QjtBQUNyQixNQUFJYSxxQkFBcUJyQixjQUFjYSxRQUFkLEVBQXpCO0FBQUEsTUFDSVMsUUFBUUQsa0JBRFo7QUFBQSxNQUNpQztBQUM3QkUsZ0JBQWNaLE9BQU9TLEtBQVAsQ0FBYUUsS0FBYixDQUZsQjtBQUFBLE1BR0lFLHVCQUF1QkQsV0FIM0IsQ0FEcUIsQ0FJbUI7O0FBRXhDckIsbUJBQWlCdUIsSUFBakIsQ0FBc0JELG9CQUF0QjtBQUNEIiwiZmlsZSI6ImJhc2ljUGFyc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWFzeVVJID0gcmVxdWlyZSgnZWFzeXVpJyksXG4gICAgZWFzeVVJTGF5b3V0ID0gcmVxdWlyZSgnZWFzeXVpLWxheW91dCcpLFxuICAgIElucHV0ID0gZWFzeVVJLklucHV0LFxuICAgIEVsZW1lbnQgPSBlYXN5VUkuRWxlbWVudCxcbiAgICBUZXh0QXJlYSA9IGVhc3lVSS5UZXh0QXJlYSxcbiAgICBTaXplYWJsZUVsZW1lbnQgPSBlYXN5VUlMYXlvdXQuU2l6ZWFibGVFbGVtZW50LFxuICAgIFZlcnRpY2FsU3BsaXR0ZXIgPSBlYXN5VUlMYXlvdXQuVmVydGljYWxTcGxpdHRlcjtcblxudmFyIGxlZnRDb2x1bW4gPSBuZXcgU2l6ZWFibGVFbGVtZW50KCcjbGVmdENvbHVtbicpO1xuXG5uZXcgVmVydGljYWxTcGxpdHRlcignLmxlZnQudmVydGljYWwuc3BsaXR0ZXInLCBWZXJ0aWNhbFNwbGl0dGVyLnNpdHVhdGVkLlRPX1RIRV9SSUdIVF9PRiwgbGVmdENvbHVtbik7XG5cbnZhciBQYXJzZXIgPSByZXF1aXJlICgnLi4vLi4vZXM2L3BhcnNlcicpLFxuICAgIEJORkxleGVyID0gcmVxdWlyZSAoJy4uLy4uL2VzNi9ibmZMZXhlcicpLFxuICAgIEJORlBhcnNlciA9IHJlcXVpcmUgKCcuLi8uLi9lczYvYm5mUGFyc2VyJyk7XG5cbnZhciBpbnB1dFRleHRBcmVhU2VsZWN0b3IgPSAndGV4dEFyZWEjaW5wdXQnLFxuICAgIGdyYW1tYXJUZXh0QXJlYVNlbGVjdG9yID0gJ3RleHRBcmVhI2dyYW1tYXInLFxuICAgIHBhcmFncmFwaEVsZW1lbnRTZWxlY3RvciA9ICdwJyxcbiAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dFNlbGVjdG9yID0gJ2lucHV0I3NwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybicsXG4gICAgaW5wdXRUZXh0QXJlYSA9IG5ldyBUZXh0QXJlYShpbnB1dFRleHRBcmVhU2VsZWN0b3IpLFxuICAgIGdyYW1tYXJUZXh0QXJlYSA9IG5ldyBUZXh0QXJlYShncmFtbWFyVGV4dEFyZWFTZWxlY3RvciksXG4gICAgcGFyYWdyYXBoRWxlbWVudCA9IG5ldyBFbGVtZW50KHBhcmFncmFwaEVsZW1lbnRTZWxlY3RvciksXG4gICAgc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXQgPSBuZXcgSW5wdXQoc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRTZWxlY3Rvcik7XG5cbnZhciBtYXBwaW5ncyA9IHt9O1xuXG5jbGFzcyBCYXNpY1BhcnNlciB7XG4gIHN0YXRpYyBydW4oKSB7XG4gICAgdXBkYXRlUGFyc2VyKCk7XG5cbiAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dC5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZVBhcnNlcigpO1xuICAgICAgdXBkYXRlSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIGdyYW1tYXJUZXh0QXJlYS5vbkNoYW5nZShmdW5jdGlvbigpIHtcbiAgICAgIHVwZGF0ZVBhcnNlcigpO1xuICAgICAgdXBkYXRlSW5wdXQoKTtcbiAgICB9KTtcblxuICAgIGlucHV0VGV4dEFyZWEub25DaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICB1cGRhdGVJbnB1dCgpO1xuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzaWNQYXJzZXI7XG5cbnZhciBwYXJzZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZVBhcnNlcigpIHtcbiAgdmFyIGdyYW1tYXJUZXh0QXJlYVZhbHVlID0gZ3JhbW1hclRleHRBcmVhLmdldFZhbHVlKCksXG4gICAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dFZhbHVlID0gc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXQuZ2V0VmFsdWUoKSxcbiAgICAgIGdyYW1tYXIgPSBncmFtbWFyVGV4dEFyZWFWYWx1ZSwgLy8vXG4gICAgICBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm4gPSBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm5JbnB1dFZhbHVlLCAvLy9cbiAgICAgIGxpbmVzID0gQk5GTGV4ZXIubGluZXNGcm9tR3JhbW1hcihncmFtbWFyKSxcbiAgICAgIHByb2R1Y3Rpb25zID0gQk5GUGFyc2VyLnBhcnNlKGxpbmVzLCBzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm4sIG1hcHBpbmdzKTtcblxuICBwYXJzZXIgPSBuZXcgUGFyc2VyKHByb2R1Y3Rpb25zKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlSW5wdXQoKSB7XG4gIHZhciBpbnB1dFRleHRBcmVhVmFsdWUgPSBpbnB1dFRleHRBcmVhLmdldFZhbHVlKCksXG4gICAgICBpbnB1dCA9IGlucHV0VGV4dEFyZWFWYWx1ZSwgIC8vL1xuICAgICAgcGFyc2VkSW5wdXQgPSBwYXJzZXIucGFyc2UoaW5wdXQpLFxuICAgICAgcGFyYWdyYXBoRWxlbWVudEhUTUwgPSBwYXJzZWRJbnB1dDsgLy8vXG5cbiAgcGFyYWdyYXBoRWxlbWVudC5odG1sKHBhcmFncmFwaEVsZW1lbnRIVE1MKTtcbn1cbiJdfQ==