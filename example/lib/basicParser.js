'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easyUI = require('easyui'),
    easyUILayout = require('easyui-layout'),
    Input = easyUI.Input,
    Element = easyUI.Element,
    TextArea = easyUI.TextArea,
    SizeableElement = easyUILayout.SizeableElement,
    VerticalSplitter = easyUILayout.VerticalSplitter;

var leftColumn = new SizeableElement('#leftColumn');

new VerticalSplitter('.left.vertical.splitter', VerticalSplitter.situated.TO_THE_RIGHT_OF, leftColumn);

var Parser = require('../../es6/parser'),
    BNFLexer = require('../../es6/bnfLexer'),
    BNFParser = require('../../es6/bnfParser');

var inputTextAreaSelector = 'textArea#input',
    grammarTextAreaSelector = 'textArea#grammar',
    paragraphElementSelector = 'p',
    specialSymbolsRegExpPatternInputSelector = 'input#specialSymbolsRegExpPattern',
    inputTextArea = new TextArea(inputTextAreaSelector),
    grammarTextArea = new TextArea(grammarTextAreaSelector),
    paragraphElement = new Element(paragraphElementSelector),
    specialSymbolsRegExpPatternInput = new Input(specialSymbolsRegExpPatternInputSelector);

var mappings = {};

var BasicParser = function () {
  function BasicParser() {
    _classCallCheck(this, BasicParser);
  }

  _createClass(BasicParser, null, [{
    key: 'run',
    value: function run() {
      updateParser();

      specialSymbolsRegExpPatternInput.onChange(function () {
        updateParser();
        updateInput();
      });

      grammarTextArea.onChange(function () {
        updateParser();
        updateInput();
      });

      inputTextArea.onChange(function () {
        updateInput();
      });
    }
  }]);

  return BasicParser;
}();

module.exports = BasicParser;

var parser;

function updateParser() {
  var grammarTextAreaValue = grammarTextArea.getValue(),
      specialSymbolsRegExpPatternInputValue = specialSymbolsRegExpPatternInput.getValue(),
      grammar = grammarTextAreaValue,
      ///
  specialSymbolsRegExpPattern = specialSymbolsRegExpPatternInputValue,
      ///
  lines = BNFLexer.linesFromGrammar(grammar),
      productions = BNFParser.parse(lines, specialSymbolsRegExpPattern, mappings);

  parser = new Parser(productions);
}

function updateInput() {
  var inputTextAreaValue = inputTextArea.getValue(),
      input = inputTextAreaValue,
      ///
  documentNode = parser.parse(input),
      documentNodeString = documentNode.toString(),
      paragraphElementHTML = documentNodeString; /// 

  paragraphElement.html(paragraphElementHTML);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9iYXNpY1BhcnNlci5qcyJdLCJuYW1lcyI6WyJlYXN5VUkiLCJyZXF1aXJlIiwiZWFzeVVJTGF5b3V0IiwiSW5wdXQiLCJFbGVtZW50IiwiVGV4dEFyZWEiLCJTaXplYWJsZUVsZW1lbnQiLCJWZXJ0aWNhbFNwbGl0dGVyIiwibGVmdENvbHVtbiIsInNpdHVhdGVkIiwiVE9fVEhFX1JJR0hUX09GIiwiUGFyc2VyIiwiQk5GTGV4ZXIiLCJCTkZQYXJzZXIiLCJpbnB1dFRleHRBcmVhU2VsZWN0b3IiLCJncmFtbWFyVGV4dEFyZWFTZWxlY3RvciIsInBhcmFncmFwaEVsZW1lbnRTZWxlY3RvciIsInNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0U2VsZWN0b3IiLCJpbnB1dFRleHRBcmVhIiwiZ3JhbW1hclRleHRBcmVhIiwicGFyYWdyYXBoRWxlbWVudCIsInNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0IiwibWFwcGluZ3MiLCJCYXNpY1BhcnNlciIsInVwZGF0ZVBhcnNlciIsIm9uQ2hhbmdlIiwidXBkYXRlSW5wdXQiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2VyIiwiZ3JhbW1hclRleHRBcmVhVmFsdWUiLCJnZXRWYWx1ZSIsInNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0VmFsdWUiLCJncmFtbWFyIiwic3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuIiwibGluZXMiLCJsaW5lc0Zyb21HcmFtbWFyIiwicHJvZHVjdGlvbnMiLCJwYXJzZSIsImlucHV0VGV4dEFyZWFWYWx1ZSIsImlucHV0IiwiZG9jdW1lbnROb2RlIiwiZG9jdW1lbnROb2RlU3RyaW5nIiwidG9TdHJpbmciLCJwYXJhZ3JhcGhFbGVtZW50SFRNTCIsImh0bWwiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFJQSxTQUFTQyxRQUFRLFFBQVIsQ0FBYjtBQUFBLElBQ0lDLGVBQWVELFFBQVEsZUFBUixDQURuQjtBQUFBLElBRUlFLFFBQVFILE9BQU9HLEtBRm5CO0FBQUEsSUFHSUMsVUFBVUosT0FBT0ksT0FIckI7QUFBQSxJQUlJQyxXQUFXTCxPQUFPSyxRQUp0QjtBQUFBLElBS0lDLGtCQUFrQkosYUFBYUksZUFMbkM7QUFBQSxJQU1JQyxtQkFBbUJMLGFBQWFLLGdCQU5wQzs7QUFRQSxJQUFJQyxhQUFhLElBQUlGLGVBQUosQ0FBb0IsYUFBcEIsQ0FBakI7O0FBRUEsSUFBSUMsZ0JBQUosQ0FBcUIseUJBQXJCLEVBQWdEQSxpQkFBaUJFLFFBQWpCLENBQTBCQyxlQUExRSxFQUEyRkYsVUFBM0Y7O0FBRUEsSUFBSUcsU0FBU1YsUUFBUyxrQkFBVCxDQUFiO0FBQUEsSUFDSVcsV0FBV1gsUUFBUyxvQkFBVCxDQURmO0FBQUEsSUFFSVksWUFBWVosUUFBUyxxQkFBVCxDQUZoQjs7QUFJQSxJQUFJYSx3QkFBd0IsZ0JBQTVCO0FBQUEsSUFDSUMsMEJBQTBCLGtCQUQ5QjtBQUFBLElBRUlDLDJCQUEyQixHQUYvQjtBQUFBLElBR0lDLDJDQUEyQyxtQ0FIL0M7QUFBQSxJQUlJQyxnQkFBZ0IsSUFBSWIsUUFBSixDQUFhUyxxQkFBYixDQUpwQjtBQUFBLElBS0lLLGtCQUFrQixJQUFJZCxRQUFKLENBQWFVLHVCQUFiLENBTHRCO0FBQUEsSUFNSUssbUJBQW1CLElBQUloQixPQUFKLENBQVlZLHdCQUFaLENBTnZCO0FBQUEsSUFPSUssbUNBQW1DLElBQUlsQixLQUFKLENBQVVjLHdDQUFWLENBUHZDOztBQVNBLElBQUlLLFdBQVcsRUFBZjs7SUFFTUMsVzs7Ozs7OzswQkFDUztBQUNYQzs7QUFFQUgsdUNBQWlDSSxRQUFqQyxDQUEwQyxZQUFXO0FBQ25ERDtBQUNBRTtBQUNELE9BSEQ7O0FBS0FQLHNCQUFnQk0sUUFBaEIsQ0FBeUIsWUFBVztBQUNsQ0Q7QUFDQUU7QUFDRCxPQUhEOztBQUtBUixvQkFBY08sUUFBZCxDQUF1QixZQUFXO0FBQ2hDQztBQUNELE9BRkQ7QUFHRDs7Ozs7O0FBR0hDLE9BQU9DLE9BQVAsR0FBaUJMLFdBQWpCOztBQUVBLElBQUlNLE1BQUo7O0FBRUEsU0FBU0wsWUFBVCxHQUF3QjtBQUN0QixNQUFJTSx1QkFBdUJYLGdCQUFnQlksUUFBaEIsRUFBM0I7QUFBQSxNQUNJQyx3Q0FBd0NYLGlDQUFpQ1UsUUFBakMsRUFENUM7QUFBQSxNQUVJRSxVQUFVSCxvQkFGZDtBQUFBLE1BRW9DO0FBQ2hDSSxnQ0FBOEJGLHFDQUhsQztBQUFBLE1BR3lFO0FBQ3JFRyxVQUFRdkIsU0FBU3dCLGdCQUFULENBQTBCSCxPQUExQixDQUpaO0FBQUEsTUFLSUksY0FBY3hCLFVBQVV5QixLQUFWLENBQWdCSCxLQUFoQixFQUF1QkQsMkJBQXZCLEVBQW9EWixRQUFwRCxDQUxsQjs7QUFPQU8sV0FBUyxJQUFJbEIsTUFBSixDQUFXMEIsV0FBWCxDQUFUO0FBQ0Q7O0FBRUQsU0FBU1gsV0FBVCxHQUF1QjtBQUNyQixNQUFJYSxxQkFBcUJyQixjQUFjYSxRQUFkLEVBQXpCO0FBQUEsTUFDSVMsUUFBUUQsa0JBRFo7QUFBQSxNQUNpQztBQUM3QkUsaUJBQWVaLE9BQU9TLEtBQVAsQ0FBYUUsS0FBYixDQUZuQjtBQUFBLE1BR0lFLHFCQUFxQkQsYUFBYUUsUUFBYixFQUh6QjtBQUFBLE1BSUlDLHVCQUF1QkYsa0JBSjNCLENBRHFCLENBSzJCOztBQUVoRHRCLG1CQUFpQnlCLElBQWpCLENBQXNCRCxvQkFBdEI7QUFDRCIsImZpbGUiOiJiYXNpY1BhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGVhc3lVSSA9IHJlcXVpcmUoJ2Vhc3l1aScpLFxuICAgIGVhc3lVSUxheW91dCA9IHJlcXVpcmUoJ2Vhc3l1aS1sYXlvdXQnKSxcbiAgICBJbnB1dCA9IGVhc3lVSS5JbnB1dCxcbiAgICBFbGVtZW50ID0gZWFzeVVJLkVsZW1lbnQsXG4gICAgVGV4dEFyZWEgPSBlYXN5VUkuVGV4dEFyZWEsXG4gICAgU2l6ZWFibGVFbGVtZW50ID0gZWFzeVVJTGF5b3V0LlNpemVhYmxlRWxlbWVudCxcbiAgICBWZXJ0aWNhbFNwbGl0dGVyID0gZWFzeVVJTGF5b3V0LlZlcnRpY2FsU3BsaXR0ZXI7XG5cbnZhciBsZWZ0Q29sdW1uID0gbmV3IFNpemVhYmxlRWxlbWVudCgnI2xlZnRDb2x1bW4nKTtcblxubmV3IFZlcnRpY2FsU3BsaXR0ZXIoJy5sZWZ0LnZlcnRpY2FsLnNwbGl0dGVyJywgVmVydGljYWxTcGxpdHRlci5zaXR1YXRlZC5UT19USEVfUklHSFRfT0YsIGxlZnRDb2x1bW4pO1xuXG52YXIgUGFyc2VyID0gcmVxdWlyZSAoJy4uLy4uL2VzNi9wYXJzZXInKSxcbiAgICBCTkZMZXhlciA9IHJlcXVpcmUgKCcuLi8uLi9lczYvYm5mTGV4ZXInKSxcbiAgICBCTkZQYXJzZXIgPSByZXF1aXJlICgnLi4vLi4vZXM2L2JuZlBhcnNlcicpO1xuXG52YXIgaW5wdXRUZXh0QXJlYVNlbGVjdG9yID0gJ3RleHRBcmVhI2lucHV0JyxcbiAgICBncmFtbWFyVGV4dEFyZWFTZWxlY3RvciA9ICd0ZXh0QXJlYSNncmFtbWFyJyxcbiAgICBwYXJhZ3JhcGhFbGVtZW50U2VsZWN0b3IgPSAncCcsXG4gICAgc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRTZWxlY3RvciA9ICdpbnB1dCNzcGVjaWFsU3ltYm9sc1JlZ0V4cFBhdHRlcm4nLFxuICAgIGlucHV0VGV4dEFyZWEgPSBuZXcgVGV4dEFyZWEoaW5wdXRUZXh0QXJlYVNlbGVjdG9yKSxcbiAgICBncmFtbWFyVGV4dEFyZWEgPSBuZXcgVGV4dEFyZWEoZ3JhbW1hclRleHRBcmVhU2VsZWN0b3IpLFxuICAgIHBhcmFncmFwaEVsZW1lbnQgPSBuZXcgRWxlbWVudChwYXJhZ3JhcGhFbGVtZW50U2VsZWN0b3IpLFxuICAgIHNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0ID0gbmV3IElucHV0KHNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0U2VsZWN0b3IpO1xuXG52YXIgbWFwcGluZ3MgPSB7fTtcblxuY2xhc3MgQmFzaWNQYXJzZXIge1xuICBzdGF0aWMgcnVuKCkge1xuICAgIHVwZGF0ZVBhcnNlcigpO1xuXG4gICAgc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXQub25DaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICB1cGRhdGVQYXJzZXIoKTtcbiAgICAgIHVwZGF0ZUlucHV0KCk7XG4gICAgfSk7XG5cbiAgICBncmFtbWFyVGV4dEFyZWEub25DaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICB1cGRhdGVQYXJzZXIoKTtcbiAgICAgIHVwZGF0ZUlucHV0KCk7XG4gICAgfSk7XG5cbiAgICBpbnB1dFRleHRBcmVhLm9uQ2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgdXBkYXRlSW5wdXQoKTtcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2ljUGFyc2VyO1xuXG52YXIgcGFyc2VyO1xuXG5mdW5jdGlvbiB1cGRhdGVQYXJzZXIoKSB7XG4gIHZhciBncmFtbWFyVGV4dEFyZWFWYWx1ZSA9IGdyYW1tYXJUZXh0QXJlYS5nZXRWYWx1ZSgpLFxuICAgICAgc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRWYWx1ZSA9IHNwZWNpYWxTeW1ib2xzUmVnRXhwUGF0dGVybklucHV0LmdldFZhbHVlKCksXG4gICAgICBncmFtbWFyID0gZ3JhbW1hclRleHRBcmVhVmFsdWUsIC8vL1xuICAgICAgc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuID0gc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuSW5wdXRWYWx1ZSwgLy8vXG4gICAgICBsaW5lcyA9IEJORkxleGVyLmxpbmVzRnJvbUdyYW1tYXIoZ3JhbW1hciksXG4gICAgICBwcm9kdWN0aW9ucyA9IEJORlBhcnNlci5wYXJzZShsaW5lcywgc3BlY2lhbFN5bWJvbHNSZWdFeHBQYXR0ZXJuLCBtYXBwaW5ncyk7XG5cbiAgcGFyc2VyID0gbmV3IFBhcnNlcihwcm9kdWN0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUlucHV0KCkge1xuICB2YXIgaW5wdXRUZXh0QXJlYVZhbHVlID0gaW5wdXRUZXh0QXJlYS5nZXRWYWx1ZSgpLFxuICAgICAgaW5wdXQgPSBpbnB1dFRleHRBcmVhVmFsdWUsICAvLy9cbiAgICAgIGRvY3VtZW50Tm9kZSA9IHBhcnNlci5wYXJzZShpbnB1dCksXG4gICAgICBkb2N1bWVudE5vZGVTdHJpbmcgPSBkb2N1bWVudE5vZGUudG9TdHJpbmcoKSxcbiAgICAgIHBhcmFncmFwaEVsZW1lbnRIVE1MID0gZG9jdW1lbnROb2RlU3RyaW5nOyAgLy8vIFxuXG4gIHBhcmFncmFwaEVsZW1lbnQuaHRtbChwYXJhZ3JhcGhFbGVtZW50SFRNTCk7XG59XG4iXX0=