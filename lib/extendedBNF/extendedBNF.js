'use strict';

var extendedBNF = '\n\n  rules                    ::=  rule+ ;\n   \n  rule                     ::=  ruleName "::=" definitions ";" ;\n  \n  definitions              ::=  definition ( "|" definition )* ;\n  \n  definition               ::=  part+ ;\n  \n  noWhitespacePart         ::=  "<NO_WHITESPACE>" part ;\n\n  optionalPart             ::=  part<NO_WHITESPACE>"?" ;\n                          \n  zeroOrMoreParts          ::=  part<NO_WHITESPACE>"*" ;\n                          \n  oneOrMoreParts           ::=  part<NO_WHITESPACE>"+" ;\n  \n  groupOfParts             ::=  "(" part+ ")" ;\n  \n  choiceOfParts            ::=  "(" part ( "|" part )+ ")" ;\n\n  part                     ::=  noWhitespacePart\n                \n                             |  optionalPart  \n                \n                             |  zeroOrMoreParts  \n                \n                             |  oneOrMoreParts  \n                \n                             |  groupOfParts  \n                           \n                             |  choiceOfParts  \n                           \n                             |  ruleName  \n                \n                             |  regularExpression \n                \n                             |  significantTokenType \n\n                             |  terminalSymbol\n                          \n                             |  endOfLine\n                \n                             |  epsilon\n\n                             |  wildcard\n                              \n                             ;\n\n  ruleName                 ::=  [name] ;\n\n  regularExpression        ::=  [regularExpression] ;\n  \n  significantTokenType     ::=  [type] ;\n\n  terminalSymbol           ::=  [string] ;\n  \n  endOfLine                ::=  "<END_OF_LINE>" ;\n  \n  epsilon                  ::=  "\u03B5" ;\n\n  wildcard                 ::=  "." ;\n\n';

module.exports = extendedBNF;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leHRlbmRlZEJORi9leHRlbmRlZEJORi5qcyJdLCJuYW1lcyI6WyJleHRlbmRlZEJORiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLDgyREFBTjs7QUFrRUFDLE9BQU9DLE9BQVAsR0FBaUJGLFdBQWpCIiwiZmlsZSI6ImV4dGVuZGVkQk5GLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBleHRlbmRlZEJORiA9IGBcblxuICBydWxlcyAgICAgICAgICAgICAgICAgICAgOjo9ICBydWxlKyA7XG4gICBcbiAgcnVsZSAgICAgICAgICAgICAgICAgICAgIDo6PSAgcnVsZU5hbWUgXCI6Oj1cIiBkZWZpbml0aW9ucyBcIjtcIiA7XG4gIFxuICBkZWZpbml0aW9ucyAgICAgICAgICAgICAgOjo9ICBkZWZpbml0aW9uICggXCJ8XCIgZGVmaW5pdGlvbiApKiA7XG4gIFxuICBkZWZpbml0aW9uICAgICAgICAgICAgICAgOjo9ICBwYXJ0KyA7XG4gIFxuICBub1doaXRlc3BhY2VQYXJ0ICAgICAgICAgOjo9ICBcIjxOT19XSElURVNQQUNFPlwiIHBhcnQgO1xuXG4gIG9wdGlvbmFsUGFydCAgICAgICAgICAgICA6Oj0gIHBhcnQ8Tk9fV0hJVEVTUEFDRT5cIj9cIiA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFxuICB6ZXJvT3JNb3JlUGFydHMgICAgICAgICAgOjo9ICBwYXJ0PE5PX1dISVRFU1BBQ0U+XCIqXCIgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgb25lT3JNb3JlUGFydHMgICAgICAgICAgIDo6PSAgcGFydDxOT19XSElURVNQQUNFPlwiK1wiIDtcbiAgXG4gIGdyb3VwT2ZQYXJ0cyAgICAgICAgICAgICA6Oj0gIFwiKFwiIHBhcnQrIFwiKVwiIDtcbiAgXG4gIGNob2ljZU9mUGFydHMgICAgICAgICAgICA6Oj0gIFwiKFwiIHBhcnQgKCBcInxcIiBwYXJ0ICkrIFwiKVwiIDtcblxuICBwYXJ0ICAgICAgICAgICAgICAgICAgICAgOjo9ICBub1doaXRlc3BhY2VQYXJ0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIG9wdGlvbmFsUGFydCAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIHplcm9Pck1vcmVQYXJ0cyAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIG9uZU9yTW9yZVBhcnRzICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgZ3JvdXBPZlBhcnRzICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBjaG9pY2VPZlBhcnRzICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBydWxlTmFtZSAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIHJlZ3VsYXJFeHByZXNzaW9uIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBzaWduaWZpY2FudFRva2VuVHlwZSBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICB0ZXJtaW5hbFN5bWJvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgZW5kT2ZMaW5lXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIGVwc2lsb25cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICB3aWxkY2FyZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcblxuICBydWxlTmFtZSAgICAgICAgICAgICAgICAgOjo9ICBbbmFtZV0gO1xuXG4gIHJlZ3VsYXJFeHByZXNzaW9uICAgICAgICA6Oj0gIFtyZWd1bGFyRXhwcmVzc2lvbl0gO1xuICBcbiAgc2lnbmlmaWNhbnRUb2tlblR5cGUgICAgIDo6PSAgW3R5cGVdIDtcblxuICB0ZXJtaW5hbFN5bWJvbCAgICAgICAgICAgOjo9ICBbc3RyaW5nXSA7XG4gIFxuICBlbmRPZkxpbmUgICAgICAgICAgICAgICAgOjo9ICBcIjxFTkRfT0ZfTElORT5cIiA7XG4gIFxuICBlcHNpbG9uICAgICAgICAgICAgICAgICAgOjo9ICBcIs61XCIgO1xuXG4gIHdpbGRjYXJkICAgICAgICAgICAgICAgICA6Oj0gIFwiLlwiIDtcblxuYDtcblxubW9kdWxlLmV4cG9ydHMgPSBleHRlbmRlZEJORjtcbiJdfQ==