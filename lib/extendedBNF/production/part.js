'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../production'),
    PartNode = require('../node/part'),
    ProductionNameDefinition = require('../definition/productionName');

var PartProduction = function (_Production) {
  _inherits(PartProduction, _Production);

  function PartProduction() {
    _classCallCheck(this, PartProduction);

    var optionalPartProductionName = 'optionalPart',
        zeroOrMorePartsProductionName = 'zeroOrMoreParts',
        oneOrMorePartsProductionName = 'oneOrMoreParts',
        groupOfPartsProductionName = 'groupOfParts',
        choiceOfPartsProductionName = 'choiceOfParts',
        terminalSymbolProductionName = 'terminalSymbol',
        endOfLineSymbolProductionName = 'endOfLineSymbol',
        wildcardSymbolProductionName = 'wildcardSymbol',
        productionNameProductionName = 'productionName',
        noWhitespacePartProductionName = 'noWhitespacePart',
        regularExpressionProductionName = 'regularExpression',
        significantTokenTypeProductionName = 'significantTokenType',
        optionalPartProductionNameDefinition = new ProductionNameDefinition(optionalPartProductionName),
        zeroOrMorePartsProductionNameDefinition = new ProductionNameDefinition(zeroOrMorePartsProductionName),
        oneOrMorePartsProductionNameDefinition = new ProductionNameDefinition(oneOrMorePartsProductionName),
        groupOfPartsProductionNameDefinition = new ProductionNameDefinition(groupOfPartsProductionName),
        choiceOfPartsProductionNameDefinition = new ProductionNameDefinition(choiceOfPartsProductionName),
        terminalSymbolProductionNameDefinition = new ProductionNameDefinition(terminalSymbolProductionName),
        endOfLineSymbolProductionNameDefinition = new ProductionNameDefinition(endOfLineSymbolProductionName),
        wildcardSymbolProductionNameDefinition = new ProductionNameDefinition(wildcardSymbolProductionName),
        productionNameProductionNameDefinition = new ProductionNameDefinition(productionNameProductionName),
        noWhitespacePartProductionNameDefinition = new ProductionNameDefinition(noWhitespacePartProductionName),
        regularExpressionProductionNameDefinition = new ProductionNameDefinition(regularExpressionProductionName),
        significantTokenTypeProductionNameDefinition = new ProductionNameDefinition(significantTokenTypeProductionName),
        name = 'part',
        definitions = [noWhitespacePartProductionNameDefinition, optionalPartProductionNameDefinition, zeroOrMorePartsProductionNameDefinition, oneOrMorePartsProductionNameDefinition, groupOfPartsProductionNameDefinition, choiceOfPartsProductionNameDefinition, productionNameProductionNameDefinition, regularExpressionProductionNameDefinition, significantTokenTypeProductionNameDefinition, terminalSymbolProductionNameDefinition, endOfLineSymbolProductionNameDefinition, wildcardSymbolProductionNameDefinition],
        Node = PartNode;

    return _possibleConstructorReturn(this, (PartProduction.__proto__ || Object.getPrototypeOf(PartProduction)).call(this, name, definitions, Node));
  }

  return PartProduction;
}(Production);

module.exports = PartProduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leHRlbmRlZEJORi9wcm9kdWN0aW9uL3BhcnQuanMiXSwibmFtZXMiOlsiUHJvZHVjdGlvbiIsInJlcXVpcmUiLCJQYXJ0Tm9kZSIsIlByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIlBhcnRQcm9kdWN0aW9uIiwib3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWUiLCJ6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSIsIm9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUiLCJncm91cE9mUGFydHNQcm9kdWN0aW9uTmFtZSIsImNob2ljZU9mUGFydHNQcm9kdWN0aW9uTmFtZSIsInRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWUiLCJlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uTmFtZSIsIndpbGRjYXJkU3ltYm9sUHJvZHVjdGlvbk5hbWUiLCJwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lIiwibm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb25OYW1lIiwicmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZSIsInNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWUiLCJvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJ6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsImdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsImNob2ljZU9mUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJ0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsImVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIndpbGRjYXJkU3ltYm9sUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwicHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwicmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIm5hbWUiLCJkZWZpbml0aW9ucyIsIk5vZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQSxJQUFNQSxhQUFhQyxRQUFRLGVBQVIsQ0FBbkI7QUFBQSxJQUNNQyxXQUFXRCxRQUFRLGNBQVIsQ0FEakI7QUFBQSxJQUVNRSwyQkFBMkJGLFFBQVEsOEJBQVIsQ0FGakM7O0lBSU1HLGM7OztBQUNKLDRCQUFjO0FBQUE7O0FBQ1osUUFBTUMsNkJBQTZCLGNBQW5DO0FBQUEsUUFDTUMsZ0NBQWdDLGlCQUR0QztBQUFBLFFBRU1DLCtCQUErQixnQkFGckM7QUFBQSxRQUdNQyw2QkFBNkIsY0FIbkM7QUFBQSxRQUlNQyw4QkFBOEIsZUFKcEM7QUFBQSxRQUtNQywrQkFBK0IsZ0JBTHJDO0FBQUEsUUFNTUMsZ0NBQWdDLGlCQU50QztBQUFBLFFBT01DLCtCQUErQixnQkFQckM7QUFBQSxRQVFNQywrQkFBK0IsZ0JBUnJDO0FBQUEsUUFTTUMsaUNBQWlDLGtCQVR2QztBQUFBLFFBVU1DLGtDQUFrQyxtQkFWeEM7QUFBQSxRQVdNQyxxQ0FBcUMsc0JBWDNDO0FBQUEsUUFZTUMsdUNBQXVDLElBQUlkLHdCQUFKLENBQTZCRSwwQkFBN0IsQ0FaN0M7QUFBQSxRQWFNYSwwQ0FBMEMsSUFBSWYsd0JBQUosQ0FBNkJHLDZCQUE3QixDQWJoRDtBQUFBLFFBY01hLHlDQUF5QyxJQUFJaEIsd0JBQUosQ0FBNkJJLDRCQUE3QixDQWQvQztBQUFBLFFBZU1hLHVDQUF1QyxJQUFJakIsd0JBQUosQ0FBNkJLLDBCQUE3QixDQWY3QztBQUFBLFFBZ0JNYSx3Q0FBd0MsSUFBSWxCLHdCQUFKLENBQTZCTSwyQkFBN0IsQ0FoQjlDO0FBQUEsUUFpQk1hLHlDQUF5QyxJQUFJbkIsd0JBQUosQ0FBNkJPLDRCQUE3QixDQWpCL0M7QUFBQSxRQWtCTWEsMENBQTBDLElBQUlwQix3QkFBSixDQUE2QlEsNkJBQTdCLENBbEJoRDtBQUFBLFFBbUJNYSx5Q0FBeUMsSUFBSXJCLHdCQUFKLENBQTZCUyw0QkFBN0IsQ0FuQi9DO0FBQUEsUUFvQk1hLHlDQUF5QyxJQUFJdEIsd0JBQUosQ0FBNkJVLDRCQUE3QixDQXBCL0M7QUFBQSxRQXFCTWEsMkNBQTJDLElBQUl2Qix3QkFBSixDQUE2QlcsOEJBQTdCLENBckJqRDtBQUFBLFFBc0JNYSw0Q0FBNEMsSUFBSXhCLHdCQUFKLENBQTZCWSwrQkFBN0IsQ0F0QmxEO0FBQUEsUUF1Qk1hLCtDQUErQyxJQUFJekIsd0JBQUosQ0FBNkJhLGtDQUE3QixDQXZCckQ7QUFBQSxRQXdCTWEsT0FBTyxNQXhCYjtBQUFBLFFBeUJNQyxjQUFjLENBQ1pKLHdDQURZLEVBRVpULG9DQUZZLEVBR1pDLHVDQUhZLEVBSVpDLHNDQUpZLEVBS1pDLG9DQUxZLEVBTVpDLHFDQU5ZLEVBT1pJLHNDQVBZLEVBUVpFLHlDQVJZLEVBU1pDLDRDQVRZLEVBVVpOLHNDQVZZLEVBV1pDLHVDQVhZLEVBWVpDLHNDQVpZLENBekJwQjtBQUFBLFFBdUNNTyxPQUFPN0IsUUF2Q2I7O0FBRFksMkhBMENOMkIsSUExQ00sRUEwQ0FDLFdBMUNBLEVBMENhQyxJQTFDYjtBQTJDYjs7O0VBNUMwQi9CLFU7O0FBK0M3QmdDLE9BQU9DLE9BQVAsR0FBaUI3QixjQUFqQiIsImZpbGUiOiJwYXJ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi4vcHJvZHVjdGlvbicpLFxuICAgICAgUGFydE5vZGUgPSByZXF1aXJlKCcuLi9ub2RlL3BhcnQnKSxcbiAgICAgIFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL2RlZmluaXRpb24vcHJvZHVjdGlvbk5hbWUnKTtcblxuY2xhc3MgUGFydFByb2R1Y3Rpb24gZXh0ZW5kcyBQcm9kdWN0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3Qgb3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWUgPSAnb3B0aW9uYWxQYXJ0JyxcbiAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSA9ICd6ZXJvT3JNb3JlUGFydHMnLFxuICAgICAgICAgIG9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUgPSAnb25lT3JNb3JlUGFydHMnLFxuICAgICAgICAgIGdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lID0gJ2dyb3VwT2ZQYXJ0cycsXG4gICAgICAgICAgY2hvaWNlT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lID0gJ2Nob2ljZU9mUGFydHMnLFxuICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWUgPSAndGVybWluYWxTeW1ib2wnLFxuICAgICAgICAgIGVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lID0gJ2VuZE9mTGluZVN5bWJvbCcsXG4gICAgICAgICAgd2lsZGNhcmRTeW1ib2xQcm9kdWN0aW9uTmFtZSA9ICd3aWxkY2FyZFN5bWJvbCcsXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZSA9ICdwcm9kdWN0aW9uTmFtZScsXG4gICAgICAgICAgbm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb25OYW1lID0gJ25vV2hpdGVzcGFjZVBhcnQnLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWUgPSAncmVndWxhckV4cHJlc3Npb24nLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWUgPSAnc2lnbmlmaWNhbnRUb2tlblR5cGUnLFxuICAgICAgICAgIG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24ob3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIG9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBncm91cE9mUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKGdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBjaG9pY2VPZlBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihjaG9pY2VPZlBhcnRzUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbih0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKGVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICB3aWxkY2FyZFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24od2lsZGNhcmRTeW1ib2xQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIG5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKG5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBuYW1lID0gJ3BhcnQnLFxuICAgICAgICAgIGRlZmluaXRpb25zID0gW1xuICAgICAgICAgICAgbm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIG9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgZ3JvdXBPZlBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgY2hvaWNlT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgcmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgZW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgd2lsZGNhcmRTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb25cbiAgICAgICAgICBdLFxuICAgICAgICAgIE5vZGUgPSBQYXJ0Tm9kZTtcbiAgICBcbiAgICBzdXBlcihuYW1lLCBkZWZpbml0aW9ucywgTm9kZSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRQcm9kdWN0aW9uO1xuIl19