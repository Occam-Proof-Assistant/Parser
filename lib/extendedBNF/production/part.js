'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../production'),
    PartNode = require('../node/part'),
    ProductionNameDefinition = require('../definition/productionName');

var PartProduction = function (_Production) {
  _inherits(PartProduction, _Production);

  function PartProduction() {
    _classCallCheck(this, PartProduction);

    var noWhitespacePartProductionName = 'noWhitespacePart',
        optionalPartProductionName = 'optionalPart',
        zeroOrMorePartsProductionName = 'zeroOrMoreParts',
        oneOrMorePartsProductionName = 'oneOrMoreParts',
        groupOfPartsProductionName = 'groupOfParts',
        choiceOfPartsProductionName = 'choiceOfParts',
        productionNameProductionName = 'productionName',
        regularExpressionProductionName = 'regularExpression',
        significantTokenTypeProductionName = 'significantTokenType',
        terminalSymbolProductionName = 'terminalSymbol',
        endOfLineProductionName = 'endOfLine',
        epsilonProductionName = 'epsilon',
        wildcardProductionName = 'wildcard',
        noWhitespacePartProductionNameDefinition = new ProductionNameDefinition(noWhitespacePartProductionName),
        optionalPartProductionNameDefinition = new ProductionNameDefinition(optionalPartProductionName),
        zeroOrMorePartsProductionNameDefinition = new ProductionNameDefinition(zeroOrMorePartsProductionName),
        oneOrMorePartsProductionNameDefinition = new ProductionNameDefinition(oneOrMorePartsProductionName),
        groupOfPartsProductionNameDefinition = new ProductionNameDefinition(groupOfPartsProductionName),
        choiceOfPartsProductionNameDefinition = new ProductionNameDefinition(choiceOfPartsProductionName),
        productionNameProductionNameDefinition = new ProductionNameDefinition(productionNameProductionName),
        regularExpressionProductionNameDefinition = new ProductionNameDefinition(regularExpressionProductionName),
        significantTokenTypeProductionNameDefinition = new ProductionNameDefinition(significantTokenTypeProductionName),
        terminalSymbolProductionNameDefinition = new ProductionNameDefinition(terminalSymbolProductionName),
        endOfLineProductionNameDefinition = new ProductionNameDefinition(endOfLineProductionName),
        epsilonProductionNameDefinition = new ProductionNameDefinition(epsilonProductionName),
        wildcardProductionNameDefinition = new ProductionNameDefinition(wildcardProductionName),
        name = 'part',
        definitions = [noWhitespacePartProductionNameDefinition, optionalPartProductionNameDefinition, zeroOrMorePartsProductionNameDefinition, oneOrMorePartsProductionNameDefinition, groupOfPartsProductionNameDefinition, choiceOfPartsProductionNameDefinition, productionNameProductionNameDefinition, regularExpressionProductionNameDefinition, significantTokenTypeProductionNameDefinition, terminalSymbolProductionNameDefinition, endOfLineProductionNameDefinition, epsilonProductionNameDefinition, wildcardProductionNameDefinition],
        Node = PartNode;

    return _possibleConstructorReturn(this, (PartProduction.__proto__ || Object.getPrototypeOf(PartProduction)).call(this, name, definitions, Node));
  }

  return PartProduction;
}(Production);

module.exports = PartProduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leHRlbmRlZEJORi9wcm9kdWN0aW9uL3BhcnQuanMiXSwibmFtZXMiOlsiUHJvZHVjdGlvbiIsInJlcXVpcmUiLCJQYXJ0Tm9kZSIsIlByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIlBhcnRQcm9kdWN0aW9uIiwibm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb25OYW1lIiwib3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWUiLCJ6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSIsIm9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUiLCJncm91cE9mUGFydHNQcm9kdWN0aW9uTmFtZSIsImNob2ljZU9mUGFydHNQcm9kdWN0aW9uTmFtZSIsInByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWUiLCJyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lIiwic2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZSIsInRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWUiLCJlbmRPZkxpbmVQcm9kdWN0aW9uTmFtZSIsImVwc2lsb25Qcm9kdWN0aW9uTmFtZSIsIndpbGRjYXJkUHJvZHVjdGlvbk5hbWUiLCJub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwib3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwiemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwib25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJncm91cE9mUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJjaG9pY2VPZlBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwicHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsInNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwidGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJlbmRPZkxpbmVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJlcHNpbG9uUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwid2lsZGNhcmRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJuYW1lIiwiZGVmaW5pdGlvbnMiLCJOb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUEsSUFBTUEsYUFBYUMsUUFBUSxlQUFSLENBQW5CO0FBQUEsSUFDTUMsV0FBV0QsUUFBUSxjQUFSLENBRGpCO0FBQUEsSUFFTUUsMkJBQTJCRixRQUFRLDhCQUFSLENBRmpDOztJQUlNRyxjOzs7QUFDSiw0QkFBYztBQUFBOztBQUNaLFFBQU1DLGlDQUFpQyxrQkFBdkM7QUFBQSxRQUNNQyw2QkFBNkIsY0FEbkM7QUFBQSxRQUVNQyxnQ0FBZ0MsaUJBRnRDO0FBQUEsUUFHTUMsK0JBQStCLGdCQUhyQztBQUFBLFFBSU1DLDZCQUE2QixjQUpuQztBQUFBLFFBS01DLDhCQUE4QixlQUxwQztBQUFBLFFBTU1DLCtCQUErQixnQkFOckM7QUFBQSxRQU9NQyxrQ0FBa0MsbUJBUHhDO0FBQUEsUUFRTUMscUNBQXFDLHNCQVIzQztBQUFBLFFBU01DLCtCQUErQixnQkFUckM7QUFBQSxRQVVNQywwQkFBMEIsV0FWaEM7QUFBQSxRQVdNQyx3QkFBd0IsU0FYOUI7QUFBQSxRQVlNQyx5QkFBeUIsVUFaL0I7QUFBQSxRQWFNQywyQ0FBMkMsSUFBSWYsd0JBQUosQ0FBNkJFLDhCQUE3QixDQWJqRDtBQUFBLFFBY01jLHVDQUF1QyxJQUFJaEIsd0JBQUosQ0FBNkJHLDBCQUE3QixDQWQ3QztBQUFBLFFBZU1jLDBDQUEwQyxJQUFJakIsd0JBQUosQ0FBNkJJLDZCQUE3QixDQWZoRDtBQUFBLFFBZ0JNYyx5Q0FBeUMsSUFBSWxCLHdCQUFKLENBQTZCSyw0QkFBN0IsQ0FoQi9DO0FBQUEsUUFpQk1jLHVDQUF1QyxJQUFJbkIsd0JBQUosQ0FBNkJNLDBCQUE3QixDQWpCN0M7QUFBQSxRQWtCTWMsd0NBQXdDLElBQUlwQix3QkFBSixDQUE2Qk8sMkJBQTdCLENBbEI5QztBQUFBLFFBbUJNYyx5Q0FBeUMsSUFBSXJCLHdCQUFKLENBQTZCUSw0QkFBN0IsQ0FuQi9DO0FBQUEsUUFvQk1jLDRDQUE0QyxJQUFJdEIsd0JBQUosQ0FBNkJTLCtCQUE3QixDQXBCbEQ7QUFBQSxRQXFCTWMsK0NBQStDLElBQUl2Qix3QkFBSixDQUE2QlUsa0NBQTdCLENBckJyRDtBQUFBLFFBc0JNYyx5Q0FBeUMsSUFBSXhCLHdCQUFKLENBQTZCVyw0QkFBN0IsQ0F0Qi9DO0FBQUEsUUF1Qk1jLG9DQUFvQyxJQUFJekIsd0JBQUosQ0FBNkJZLHVCQUE3QixDQXZCMUM7QUFBQSxRQXdCTWMsa0NBQWtDLElBQUkxQix3QkFBSixDQUE2QmEscUJBQTdCLENBeEJ4QztBQUFBLFFBeUJNYyxtQ0FBbUMsSUFBSTNCLHdCQUFKLENBQTZCYyxzQkFBN0IsQ0F6QnpDO0FBQUEsUUEwQk1jLE9BQU8sTUExQmI7QUFBQSxRQTJCTUMsY0FBYyxDQUNaZCx3Q0FEWSxFQUVaQyxvQ0FGWSxFQUdaQyx1Q0FIWSxFQUlaQyxzQ0FKWSxFQUtaQyxvQ0FMWSxFQU1aQyxxQ0FOWSxFQU9aQyxzQ0FQWSxFQVFaQyx5Q0FSWSxFQVNaQyw0Q0FUWSxFQVVaQyxzQ0FWWSxFQVdaQyxpQ0FYWSxFQVlaQywrQkFaWSxFQWFaQyxnQ0FiWSxDQTNCcEI7QUFBQSxRQTBDTUcsT0FBTy9CLFFBMUNiOztBQURZLDJIQTZDTjZCLElBN0NNLEVBNkNBQyxXQTdDQSxFQTZDYUMsSUE3Q2I7QUE4Q2I7OztFQS9DMEJqQyxVOztBQWtEN0JrQyxPQUFPQyxPQUFQLEdBQWlCL0IsY0FBakIiLCJmaWxlIjoicGFydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4uL3Byb2R1Y3Rpb24nKSxcbiAgICAgIFBhcnROb2RlID0gcmVxdWlyZSgnLi4vbm9kZS9wYXJ0JyksXG4gICAgICBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3Byb2R1Y3Rpb25OYW1lJyk7XG5cbmNsYXNzIFBhcnRQcm9kdWN0aW9uIGV4dGVuZHMgUHJvZHVjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IG5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZSA9ICdub1doaXRlc3BhY2VQYXJ0JyxcbiAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZSA9ICdvcHRpb25hbFBhcnQnLFxuICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lID0gJ3plcm9Pck1vcmVQYXJ0cycsXG4gICAgICAgICAgb25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSA9ICdvbmVPck1vcmVQYXJ0cycsXG4gICAgICAgICAgZ3JvdXBPZlBhcnRzUHJvZHVjdGlvbk5hbWUgPSAnZ3JvdXBPZlBhcnRzJyxcbiAgICAgICAgICBjaG9pY2VPZlBhcnRzUHJvZHVjdGlvbk5hbWUgPSAnY2hvaWNlT2ZQYXJ0cycsXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZSA9ICdwcm9kdWN0aW9uTmFtZScsXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZSA9ICdyZWd1bGFyRXhwcmVzc2lvbicsXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZSA9ICdzaWduaWZpY2FudFRva2VuVHlwZScsXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZSA9ICd0ZXJtaW5hbFN5bWJvbCcsXG4gICAgICAgICAgZW5kT2ZMaW5lUHJvZHVjdGlvbk5hbWUgPSAnZW5kT2ZMaW5lJyxcbiAgICAgICAgICBlcHNpbG9uUHJvZHVjdGlvbk5hbWUgPSAnZXBzaWxvbicsXG4gICAgICAgICAgd2lsZGNhcmRQcm9kdWN0aW9uTmFtZSA9ICd3aWxkY2FyZCcsXG4gICAgICAgICAgbm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24obm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24ob25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgZ3JvdXBPZlBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihncm91cE9mUGFydHNQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgY2hvaWNlT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oY2hvaWNlT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24ocHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24odGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgZW5kT2ZMaW5lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihlbmRPZkxpbmVQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgZXBzaWxvblByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oZXBzaWxvblByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICB3aWxkY2FyZFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24od2lsZGNhcmRQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgbmFtZSA9ICdwYXJ0JyxcbiAgICAgICAgICBkZWZpbml0aW9ucyA9IFtcbiAgICAgICAgICAgIG5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGNob2ljZU9mUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGVuZE9mTGluZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGVwc2lsb25Qcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICB3aWxkY2FyZFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvblxuICAgICAgICAgIF0sXG4gICAgICAgICAgTm9kZSA9IFBhcnROb2RlO1xuICAgIFxuICAgIHN1cGVyKG5hbWUsIGRlZmluaXRpb25zLCBOb2RlKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGFydFByb2R1Y3Rpb247XG4iXX0=