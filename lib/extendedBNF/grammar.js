'use strict';

var grammar = '\n\n  productions              ::=  production+ ;\n  \n  production               ::=  productionName "::=" definitions ";" ;\n  \n  definitions              ::=  definition ( "|" definition )* ;\n  \n  definition               ::=  part+ ;\n  \n  noWhitespacePart         ::=  "<NO_WHITESPACE>" part ;\n\n  optionalPart             ::=  part<NO_WHITESPACE>"?" ;\n                          \n  zeroOrMoreParts          ::=  part<NO_WHITESPACE>"*" ;\n                          \n  oneOrMoreParts           ::=  part<NO_WHITESPACE>"+" ;\n  \n  groupOfParts             ::=  "(" part+ ")" ;\n  \n  choiceOfParts            ::=  "(" part ( "|" part )+ ")" ;\n\n  part                     ::=  noWhitespacePart\n                \n                             |  optionalPart  \n                \n                             |  zeroOrMoreParts  \n                \n                             |  oneOrMoreParts  \n                \n                             |  groupOfParts  \n                           \n                             |  choiceOfParts  \n                           \n                             |  productionName  \n                \n                             |  regularExpression \n                \n                             |  significantTokenType \n\n                             |  terminalSymbol\n                          \n                             |  endOfLine\n                \n                             |  epsilon\n\n                             |  wildcard\n                              \n                             ;\n\n  productionName           ::=  [name] ;\n\n  regularExpression        ::=  [regularExpression] ;\n  \n  significantTokenType     ::=  [type] ;\n\n  terminalSymbol           ::=  [string] ;\n  \n  endOfLine                ::=  "<END_OF_LINE>" ;\n  \n  epsilon                  ::=  "\u03B5" ;\n\n  wildcard                 ::=  "." ;\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leHRlbmRlZEJORi9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSwyM0RBQU47O0FBa0VBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJncmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBncmFtbWFyID0gYFxuXG4gIHByb2R1Y3Rpb25zICAgICAgICAgICAgICA6Oj0gIHByb2R1Y3Rpb24rIDtcbiAgXG4gIHByb2R1Y3Rpb24gICAgICAgICAgICAgICA6Oj0gIHByb2R1Y3Rpb25OYW1lIFwiOjo9XCIgZGVmaW5pdGlvbnMgXCI7XCIgO1xuICBcbiAgZGVmaW5pdGlvbnMgICAgICAgICAgICAgIDo6PSAgZGVmaW5pdGlvbiAoIFwifFwiIGRlZmluaXRpb24gKSogO1xuICBcbiAgZGVmaW5pdGlvbiAgICAgICAgICAgICAgIDo6PSAgcGFydCsgO1xuICBcbiAgbm9XaGl0ZXNwYWNlUGFydCAgICAgICAgIDo6PSAgXCI8Tk9fV0hJVEVTUEFDRT5cIiBwYXJ0IDtcblxuICBvcHRpb25hbFBhcnQgICAgICAgICAgICAgOjo9ICBwYXJ0PE5PX1dISVRFU1BBQ0U+XCI/XCIgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgemVyb09yTW9yZVBhcnRzICAgICAgICAgIDo6PSAgcGFydDxOT19XSElURVNQQUNFPlwiKlwiIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIG9uZU9yTW9yZVBhcnRzICAgICAgICAgICA6Oj0gIHBhcnQ8Tk9fV0hJVEVTUEFDRT5cIitcIiA7XG4gIFxuICBncm91cE9mUGFydHMgICAgICAgICAgICAgOjo9ICBcIihcIiBwYXJ0KyBcIilcIiA7XG4gIFxuICBjaG9pY2VPZlBhcnRzICAgICAgICAgICAgOjo9ICBcIihcIiBwYXJ0ICggXCJ8XCIgcGFydCApKyBcIilcIiA7XG5cbiAgcGFydCAgICAgICAgICAgICAgICAgICAgIDo6PSAgbm9XaGl0ZXNwYWNlUGFydFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBvcHRpb25hbFBhcnQgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICB6ZXJvT3JNb3JlUGFydHMgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBvbmVPck1vcmVQYXJ0cyAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIGdyb3VwT2ZQYXJ0cyAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgY2hvaWNlT2ZQYXJ0cyAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgcHJvZHVjdGlvbk5hbWUgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICByZWd1bGFyRXhwcmVzc2lvbiBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgc2lnbmlmaWNhbnRUb2tlblR5cGUgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgdGVybWluYWxTeW1ib2xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIGVuZE9mTGluZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBlcHNpbG9uXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgd2lsZGNhcmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XG5cbiAgcHJvZHVjdGlvbk5hbWUgICAgICAgICAgIDo6PSAgW25hbWVdIDtcblxuICByZWd1bGFyRXhwcmVzc2lvbiAgICAgICAgOjo9ICBbcmVndWxhckV4cHJlc3Npb25dIDtcbiAgXG4gIHNpZ25pZmljYW50VG9rZW5UeXBlICAgICA6Oj0gIFt0eXBlXSA7XG5cbiAgdGVybWluYWxTeW1ib2wgICAgICAgICAgIDo6PSAgW3N0cmluZ10gO1xuICBcbiAgZW5kT2ZMaW5lICAgICAgICAgICAgICAgIDo6PSAgXCI8RU5EX09GX0xJTkU+XCIgO1xuICBcbiAgZXBzaWxvbiAgICAgICAgICAgICAgICAgIDo6PSAgXCLOtVwiIDtcblxuICB3aWxkY2FyZCAgICAgICAgICAgICAgICAgOjo9ICBcIi5cIiA7XG5cbmA7XG5cbm1vZHVsZS5leHBvcnRzID0gZ3JhbW1hcjtcbiJdfQ==