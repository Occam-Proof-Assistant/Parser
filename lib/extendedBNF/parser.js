'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Parts = require('./parts'),
    Definition = require('./definition'),
    Production = require('./production'),
    cycles = require('../grammar/cycles'),
    leftRecursion = require('../grammar/leftRecursion'),
    CommonParser = require('../common/parser'),
    PartProduction = require('./production/part'),
    DefinitionProduction = require('./production/definition'),
    ProductionProduction = require('./production/production'),
    DefinitionsProduction = require('./production/definitions'),
    ProductionsProduction = require('./production/productions'),
    GroupOfPartsProduction = require('./production/groupOfParts'),
    ChoiceOfPartsProduction = require('./production/choiceOfParts'),
    OptionalPartProduction = require('./production/optionalPart'),
    ZeroOrMorePartsProduction = require('./production/zeroOrMoreParts'),
    OneOrMorePartsProduction = require('./production/oneOrMoreParts'),
    ProductionNameProduction = require('./production/productionName'),
    WildcardSymbolProduction = require('./production/wildcardSymbol'),
    TerminalSymbolProduction = require('./production/terminalSymbol'),
    EndOfLineSymbolProduction = require('./production/endOfLineSymbol'),
    NoWhitespacePartProduction = require('./production/noWhitespacePart'),
    RegularExpressionProduction = require('./production/regularExpression'),
    SignificantTokenTypeProduction = require('./production/significantTokenType');

var ExtetendedBNFParser = function (_CommonParser) {
  _inherits(ExtetendedBNFParser, _CommonParser);

  function ExtetendedBNFParser() {
    _classCallCheck(this, ExtetendedBNFParser);

    return _possibleConstructorReturn(this, (ExtetendedBNFParser.__proto__ || Object.getPrototypeOf(ExtetendedBNFParser)).apply(this, arguments));
  }

  _createClass(ExtetendedBNFParser, null, [{
    key: 'generateProductions',
    value: function generateProductions(node) {
      var mappings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var productions = node !== null ? node.generateProductions(Production, Definition, Parts, mappings) : [];

      return productions;
    }
  }, {
    key: 'fromNothing',
    value: function fromNothing() {
      var partProduction = new PartProduction(),
          definitionProduction = new DefinitionProduction(),
          productionProduction = new ProductionProduction(),
          definitionsProduction = new DefinitionsProduction(),
          productionsProduction = new ProductionsProduction(),
          groupOfPartsProduction = new GroupOfPartsProduction(),
          choiceOfPartsProduction = new ChoiceOfPartsProduction(),
          optionalPartProduction = new OptionalPartProduction(),
          zeroOrMorePartsProduction = new ZeroOrMorePartsProduction(),
          oneOrMorePartsProduction = new OneOrMorePartsProduction(),
          productionNameProduction = new ProductionNameProduction(),
          wildcardSymbolProduction = new WildcardSymbolProduction(),
          terminalSymbolProduction = new TerminalSymbolProduction(),
          endOfLineSymbolProduction = new EndOfLineSymbolProduction(),
          noWhitespacePartProduction = new NoWhitespacePartProduction(),
          regularExpressionProduction = new RegularExpressionProduction(),
          significantTokenTypeProduction = new SignificantTokenTypeProduction();

      var productions = [productionsProduction, productionProduction, definitionsProduction, definitionProduction, noWhitespacePartProduction, optionalPartProduction, zeroOrMorePartsProduction, oneOrMorePartsProduction, groupOfPartsProduction, choiceOfPartsProduction, partProduction, productionNameProduction, regularExpressionProduction, significantTokenTypeProduction, terminalSymbolProduction, endOfLineSymbolProduction, wildcardSymbolProduction];

      productions = cycles.eliminate(productions); ///

      productions = leftRecursion.eliminate(productions); ///

      var extendedBNFParser = new ExtetendedBNFParser(productions);

      return extendedBNFParser;
    }
  }]);

  return ExtetendedBNFParser;
}(CommonParser);

module.exports = ExtetendedBNFParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,