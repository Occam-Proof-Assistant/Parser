'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rule = require('../rule'),
    PartNode = require('../node/part'),
    RuleNameDefinition = require('../definition/ruleName');

var PartRule = function (_Rule) {
  _inherits(PartRule, _Rule);

  function PartRule() {
    _classCallCheck(this, PartRule);

    var noWhitespacePartRuleName = 'noWhitespacePart',
        optionalPartRuleName = 'optionalPart',
        zeroOrMorePartsRuleName = 'zeroOrMoreParts',
        oneOrMorePartsRuleName = 'oneOrMoreParts',
        groupOfPartsRuleName = 'groupOfParts',
        choiceOfPartsRuleName = 'choiceOfParts',
        ruleNameRuleName = 'ruleName',
        regularExpressionRuleName = 'regularExpression',
        significantTokenTypeRuleName = 'significantTokenType',
        terminalSymbolRuleName = 'terminalSymbol',
        endOfLineRuleName = 'endOfLine',
        epsilonRuleName = 'epsilon',
        wildcardRuleName = 'wildcard',
        noWhitespacePartRuleNameDefinition = new RuleNameDefinition(noWhitespacePartRuleName),
        optionalPartRuleNameDefinition = new RuleNameDefinition(optionalPartRuleName),
        zeroOrMorePartsRuleNameDefinition = new RuleNameDefinition(zeroOrMorePartsRuleName),
        oneOrMorePartsRuleNameDefinition = new RuleNameDefinition(oneOrMorePartsRuleName),
        groupOfPartsRuleNameDefinition = new RuleNameDefinition(groupOfPartsRuleName),
        choiceOfPartsRuleNameDefinition = new RuleNameDefinition(choiceOfPartsRuleName),
        ruleNameRuleNameDefinition = new RuleNameDefinition(ruleNameRuleName),
        regularExpressionRuleNameDefinition = new RuleNameDefinition(regularExpressionRuleName),
        significantTokenTypeRuleNameDefinition = new RuleNameDefinition(significantTokenTypeRuleName),
        terminalSymbolRuleNameDefinition = new RuleNameDefinition(terminalSymbolRuleName),
        endOfLineRuleNameDefinition = new RuleNameDefinition(endOfLineRuleName),
        epsilonRuleNameDefinition = new RuleNameDefinition(epsilonRuleName),
        wildcardRuleNameDefinition = new RuleNameDefinition(wildcardRuleName),
        name = 'part',
        definitions = [noWhitespacePartRuleNameDefinition, optionalPartRuleNameDefinition, zeroOrMorePartsRuleNameDefinition, oneOrMorePartsRuleNameDefinition, groupOfPartsRuleNameDefinition, choiceOfPartsRuleNameDefinition, ruleNameRuleNameDefinition, regularExpressionRuleNameDefinition, significantTokenTypeRuleNameDefinition, terminalSymbolRuleNameDefinition, endOfLineRuleNameDefinition, epsilonRuleNameDefinition, wildcardRuleNameDefinition],
        Node = PartNode;

    return _possibleConstructorReturn(this, (PartRule.__proto__ || Object.getPrototypeOf(PartRule)).call(this, name, definitions, Node));
  }

  return PartRule;
}(Rule);

module.exports = PartRule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9leHRlbmRlZEJORi9ydWxlL3BhcnQuanMiXSwibmFtZXMiOlsiUnVsZSIsInJlcXVpcmUiLCJQYXJ0Tm9kZSIsIlJ1bGVOYW1lRGVmaW5pdGlvbiIsIlBhcnRSdWxlIiwibm9XaGl0ZXNwYWNlUGFydFJ1bGVOYW1lIiwib3B0aW9uYWxQYXJ0UnVsZU5hbWUiLCJ6ZXJvT3JNb3JlUGFydHNSdWxlTmFtZSIsIm9uZU9yTW9yZVBhcnRzUnVsZU5hbWUiLCJncm91cE9mUGFydHNSdWxlTmFtZSIsImNob2ljZU9mUGFydHNSdWxlTmFtZSIsInJ1bGVOYW1lUnVsZU5hbWUiLCJyZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lIiwic2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSIsInRlcm1pbmFsU3ltYm9sUnVsZU5hbWUiLCJlbmRPZkxpbmVSdWxlTmFtZSIsImVwc2lsb25SdWxlTmFtZSIsIndpbGRjYXJkUnVsZU5hbWUiLCJub1doaXRlc3BhY2VQYXJ0UnVsZU5hbWVEZWZpbml0aW9uIiwib3B0aW9uYWxQYXJ0UnVsZU5hbWVEZWZpbml0aW9uIiwiemVyb09yTW9yZVBhcnRzUnVsZU5hbWVEZWZpbml0aW9uIiwib25lT3JNb3JlUGFydHNSdWxlTmFtZURlZmluaXRpb24iLCJncm91cE9mUGFydHNSdWxlTmFtZURlZmluaXRpb24iLCJjaG9pY2VPZlBhcnRzUnVsZU5hbWVEZWZpbml0aW9uIiwicnVsZU5hbWVSdWxlTmFtZURlZmluaXRpb24iLCJyZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lRGVmaW5pdGlvbiIsInNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWVEZWZpbml0aW9uIiwidGVybWluYWxTeW1ib2xSdWxlTmFtZURlZmluaXRpb24iLCJlbmRPZkxpbmVSdWxlTmFtZURlZmluaXRpb24iLCJlcHNpbG9uUnVsZU5hbWVEZWZpbml0aW9uIiwid2lsZGNhcmRSdWxlTmFtZURlZmluaXRpb24iLCJuYW1lIiwiZGVmaW5pdGlvbnMiLCJOb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxTQUFSLENBQWI7QUFBQSxJQUNNQyxXQUFXRCxRQUFRLGNBQVIsQ0FEakI7QUFBQSxJQUVNRSxxQkFBcUJGLFFBQVEsd0JBQVIsQ0FGM0I7O0lBSU1HLFE7OztBQUNKLHNCQUFjO0FBQUE7O0FBQ1osUUFBTUMsMkJBQTJCLGtCQUFqQztBQUFBLFFBQ01DLHVCQUF1QixjQUQ3QjtBQUFBLFFBRU1DLDBCQUEwQixpQkFGaEM7QUFBQSxRQUdNQyx5QkFBeUIsZ0JBSC9CO0FBQUEsUUFJTUMsdUJBQXVCLGNBSjdCO0FBQUEsUUFLTUMsd0JBQXdCLGVBTDlCO0FBQUEsUUFNTUMsbUJBQW1CLFVBTnpCO0FBQUEsUUFPTUMsNEJBQTRCLG1CQVBsQztBQUFBLFFBUU1DLCtCQUErQixzQkFSckM7QUFBQSxRQVNNQyx5QkFBeUIsZ0JBVC9CO0FBQUEsUUFVTUMsb0JBQW9CLFdBVjFCO0FBQUEsUUFXTUMsa0JBQWtCLFNBWHhCO0FBQUEsUUFZTUMsbUJBQW1CLFVBWnpCO0FBQUEsUUFhTUMscUNBQXFDLElBQUlmLGtCQUFKLENBQXVCRSx3QkFBdkIsQ0FiM0M7QUFBQSxRQWNNYyxpQ0FBaUMsSUFBSWhCLGtCQUFKLENBQXVCRyxvQkFBdkIsQ0FkdkM7QUFBQSxRQWVNYyxvQ0FBb0MsSUFBSWpCLGtCQUFKLENBQXVCSSx1QkFBdkIsQ0FmMUM7QUFBQSxRQWdCTWMsbUNBQW1DLElBQUlsQixrQkFBSixDQUF1Qkssc0JBQXZCLENBaEJ6QztBQUFBLFFBaUJNYyxpQ0FBaUMsSUFBSW5CLGtCQUFKLENBQXVCTSxvQkFBdkIsQ0FqQnZDO0FBQUEsUUFrQk1jLGtDQUFrQyxJQUFJcEIsa0JBQUosQ0FBdUJPLHFCQUF2QixDQWxCeEM7QUFBQSxRQW1CTWMsNkJBQTZCLElBQUlyQixrQkFBSixDQUF1QlEsZ0JBQXZCLENBbkJuQztBQUFBLFFBb0JNYyxzQ0FBc0MsSUFBSXRCLGtCQUFKLENBQXVCUyx5QkFBdkIsQ0FwQjVDO0FBQUEsUUFxQk1jLHlDQUF5QyxJQUFJdkIsa0JBQUosQ0FBdUJVLDRCQUF2QixDQXJCL0M7QUFBQSxRQXNCTWMsbUNBQW1DLElBQUl4QixrQkFBSixDQUF1Qlcsc0JBQXZCLENBdEJ6QztBQUFBLFFBdUJNYyw4QkFBOEIsSUFBSXpCLGtCQUFKLENBQXVCWSxpQkFBdkIsQ0F2QnBDO0FBQUEsUUF3Qk1jLDRCQUE0QixJQUFJMUIsa0JBQUosQ0FBdUJhLGVBQXZCLENBeEJsQztBQUFBLFFBeUJNYyw2QkFBNkIsSUFBSTNCLGtCQUFKLENBQXVCYyxnQkFBdkIsQ0F6Qm5DO0FBQUEsUUEwQk1jLE9BQU8sTUExQmI7QUFBQSxRQTJCTUMsY0FBYyxDQUNaZCxrQ0FEWSxFQUVaQyw4QkFGWSxFQUdaQyxpQ0FIWSxFQUlaQyxnQ0FKWSxFQUtaQyw4QkFMWSxFQU1aQywrQkFOWSxFQU9aQywwQkFQWSxFQVFaQyxtQ0FSWSxFQVNaQyxzQ0FUWSxFQVVaQyxnQ0FWWSxFQVdaQywyQkFYWSxFQVlaQyx5QkFaWSxFQWFaQywwQkFiWSxDQTNCcEI7QUFBQSxRQTBDTUcsT0FBTy9CLFFBMUNiOztBQURZLCtHQTZDTjZCLElBN0NNLEVBNkNBQyxXQTdDQSxFQTZDYUMsSUE3Q2I7QUE4Q2I7OztFQS9Db0JqQyxJOztBQWtEdkJrQyxPQUFPQyxPQUFQLEdBQWlCL0IsUUFBakIiLCJmaWxlIjoicGFydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUnKSxcbiAgICAgIFBhcnROb2RlID0gcmVxdWlyZSgnLi4vbm9kZS9wYXJ0JyksXG4gICAgICBSdWxlTmFtZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3J1bGVOYW1lJyk7XG5cbmNsYXNzIFBhcnRSdWxlIGV4dGVuZHMgUnVsZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IG5vV2hpdGVzcGFjZVBhcnRSdWxlTmFtZSA9ICdub1doaXRlc3BhY2VQYXJ0JyxcbiAgICAgICAgICBvcHRpb25hbFBhcnRSdWxlTmFtZSA9ICdvcHRpb25hbFBhcnQnLFxuICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1J1bGVOYW1lID0gJ3plcm9Pck1vcmVQYXJ0cycsXG4gICAgICAgICAgb25lT3JNb3JlUGFydHNSdWxlTmFtZSA9ICdvbmVPck1vcmVQYXJ0cycsXG4gICAgICAgICAgZ3JvdXBPZlBhcnRzUnVsZU5hbWUgPSAnZ3JvdXBPZlBhcnRzJyxcbiAgICAgICAgICBjaG9pY2VPZlBhcnRzUnVsZU5hbWUgPSAnY2hvaWNlT2ZQYXJ0cycsXG4gICAgICAgICAgcnVsZU5hbWVSdWxlTmFtZSA9ICdydWxlTmFtZScsXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25SdWxlTmFtZSA9ICdyZWd1bGFyRXhwcmVzc2lvbicsXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSA9ICdzaWduaWZpY2FudFRva2VuVHlwZScsXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xSdWxlTmFtZSA9ICd0ZXJtaW5hbFN5bWJvbCcsXG4gICAgICAgICAgZW5kT2ZMaW5lUnVsZU5hbWUgPSAnZW5kT2ZMaW5lJyxcbiAgICAgICAgICBlcHNpbG9uUnVsZU5hbWUgPSAnZXBzaWxvbicsXG4gICAgICAgICAgd2lsZGNhcmRSdWxlTmFtZSA9ICd3aWxkY2FyZCcsXG4gICAgICAgICAgbm9XaGl0ZXNwYWNlUGFydFJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24obm9XaGl0ZXNwYWNlUGFydFJ1bGVOYW1lKSxcbiAgICAgICAgICBvcHRpb25hbFBhcnRSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKG9wdGlvbmFsUGFydFJ1bGVOYW1lKSxcbiAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKHplcm9Pck1vcmVQYXJ0c1J1bGVOYW1lKSxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24ob25lT3JNb3JlUGFydHNSdWxlTmFtZSksXG4gICAgICAgICAgZ3JvdXBPZlBhcnRzUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihncm91cE9mUGFydHNSdWxlTmFtZSksXG4gICAgICAgICAgY2hvaWNlT2ZQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24oY2hvaWNlT2ZQYXJ0c1J1bGVOYW1lKSxcbiAgICAgICAgICBydWxlTmFtZVJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24ocnVsZU5hbWVSdWxlTmFtZSksXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25SdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKHJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUpLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lKSxcbiAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24odGVybWluYWxTeW1ib2xSdWxlTmFtZSksXG4gICAgICAgICAgZW5kT2ZMaW5lUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihlbmRPZkxpbmVSdWxlTmFtZSksXG4gICAgICAgICAgZXBzaWxvblJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24oZXBzaWxvblJ1bGVOYW1lKSxcbiAgICAgICAgICB3aWxkY2FyZFJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24od2lsZGNhcmRSdWxlTmFtZSksXG4gICAgICAgICAgbmFtZSA9ICdwYXJ0JyxcbiAgICAgICAgICBkZWZpbml0aW9ucyA9IFtcbiAgICAgICAgICAgIG5vV2hpdGVzcGFjZVBhcnRSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvcHRpb25hbFBhcnRSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvbmVPck1vcmVQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGdyb3VwT2ZQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGNob2ljZU9mUGFydHNSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBydWxlTmFtZVJ1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGVuZE9mTGluZVJ1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGVwc2lsb25SdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICB3aWxkY2FyZFJ1bGVOYW1lRGVmaW5pdGlvblxuICAgICAgICAgIF0sXG4gICAgICAgICAgTm9kZSA9IFBhcnROb2RlO1xuICAgIFxuICAgIHN1cGVyKG5hbWUsIGRlZmluaXRpb25zLCBOb2RlKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGFydFJ1bGU7XG4iXX0=