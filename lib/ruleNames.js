"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignificantTokenTypeRuleName = exports.ZeroOrMoreQuantifierRuleName = exports.OneOrMoreQuantifierRuleName = exports.OptionalQuantifierRuleName = exports.RegularExpressionRuleName = exports.AmbiguousModifierRuleName = exports.LookAheadModifierRuleName = exports.NoWhitespacePartRuleName = exports.SequenceOfPartsRuleName = exports.NonTerminalPartRuleName = exports.TerminalSymbolRuleName = exports.ChoiceOfPartsRuleName = exports.TerminalPartRuleName = exports.DefinitionsRuleName = exports.QuantifierRuleName = exports.DefinitionRuleName = exports.EndOfLineRuleName = exports.WildcardRuleName = exports.DocumentRuleName = exports.RuleNameRuleName = exports.ErrorRuleName = exports.RuleRuleName = exports.PartRuleName = exports.NameRuleName = void 0;
var NameRuleName = "name";
exports.NameRuleName = NameRuleName;
var PartRuleName = "part";
exports.PartRuleName = PartRuleName;
var RuleRuleName = "rule";
exports.RuleRuleName = RuleRuleName;
var ErrorRuleName = "error";
exports.ErrorRuleName = ErrorRuleName;
var RuleNameRuleName = "ruleName";
exports.RuleNameRuleName = RuleNameRuleName;
var DocumentRuleName = "document";
exports.DocumentRuleName = DocumentRuleName;
var WildcardRuleName = "wildcard";
exports.WildcardRuleName = WildcardRuleName;
var EndOfLineRuleName = "endOfLine";
exports.EndOfLineRuleName = EndOfLineRuleName;
var DefinitionRuleName = "definition";
exports.DefinitionRuleName = DefinitionRuleName;
var QuantifierRuleName = "quantifier";
exports.QuantifierRuleName = QuantifierRuleName;
var DefinitionsRuleName = "definitions";
exports.DefinitionsRuleName = DefinitionsRuleName;
var TerminalPartRuleName = "terminalPart";
exports.TerminalPartRuleName = TerminalPartRuleName;
var ChoiceOfPartsRuleName = "choiceOfParts";
exports.ChoiceOfPartsRuleName = ChoiceOfPartsRuleName;
var TerminalSymbolRuleName = "terminalSymbol";
exports.TerminalSymbolRuleName = TerminalSymbolRuleName;
var NonTerminalPartRuleName = "nonTerminalPart";
exports.NonTerminalPartRuleName = NonTerminalPartRuleName;
var SequenceOfPartsRuleName = "sequenceOfParts";
exports.SequenceOfPartsRuleName = SequenceOfPartsRuleName;
var NoWhitespacePartRuleName = "noWhitespacePart";
exports.NoWhitespacePartRuleName = NoWhitespacePartRuleName;
var LookAheadModifierRuleName = "lookAheadModifier";
exports.LookAheadModifierRuleName = LookAheadModifierRuleName;
var AmbiguousModifierRuleName = "AmbiguousModifier";
exports.AmbiguousModifierRuleName = AmbiguousModifierRuleName;
var RegularExpressionRuleName = "regularExpression";
exports.RegularExpressionRuleName = RegularExpressionRuleName;
var OptionalQuantifierRuleName = "optionalQuantifier";
exports.OptionalQuantifierRuleName = OptionalQuantifierRuleName;
var OneOrMoreQuantifierRuleName = "oneOrMoreQuantifier";
exports.OneOrMoreQuantifierRuleName = OneOrMoreQuantifierRuleName;
var ZeroOrMoreQuantifierRuleName = "zeroOrMoreQuantifier";
exports.ZeroOrMoreQuantifierRuleName = ZeroOrMoreQuantifierRuleName;
var SignificantTokenTypeRuleName = "significantTokenType";
exports.SignificantTokenTypeRuleName = SignificantTokenTypeRuleName;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ydWxlTmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBjb25zdCBOYW1lUnVsZU5hbWUgPSBcIm5hbWVcIjtcbmV4cG9ydCBjb25zdCBQYXJ0UnVsZU5hbWUgPSBcInBhcnRcIjtcbmV4cG9ydCBjb25zdCBSdWxlUnVsZU5hbWUgPSBcInJ1bGVcIjtcbmV4cG9ydCBjb25zdCBFcnJvclJ1bGVOYW1lID0gXCJlcnJvclwiO1xuZXhwb3J0IGNvbnN0IFJ1bGVOYW1lUnVsZU5hbWUgPSBcInJ1bGVOYW1lXCI7XG5leHBvcnQgY29uc3QgRG9jdW1lbnRSdWxlTmFtZSA9IFwiZG9jdW1lbnRcIjtcbmV4cG9ydCBjb25zdCBXaWxkY2FyZFJ1bGVOYW1lID0gXCJ3aWxkY2FyZFwiO1xuZXhwb3J0IGNvbnN0IEVuZE9mTGluZVJ1bGVOYW1lID0gXCJlbmRPZkxpbmVcIjtcbmV4cG9ydCBjb25zdCBEZWZpbml0aW9uUnVsZU5hbWUgPSBcImRlZmluaXRpb25cIjtcbmV4cG9ydCBjb25zdCBRdWFudGlmaWVyUnVsZU5hbWUgPSBcInF1YW50aWZpZXJcIjtcbmV4cG9ydCBjb25zdCBEZWZpbml0aW9uc1J1bGVOYW1lID0gXCJkZWZpbml0aW9uc1wiO1xuZXhwb3J0IGNvbnN0IFRlcm1pbmFsUGFydFJ1bGVOYW1lID0gXCJ0ZXJtaW5hbFBhcnRcIjtcbmV4cG9ydCBjb25zdCBDaG9pY2VPZlBhcnRzUnVsZU5hbWUgPSBcImNob2ljZU9mUGFydHNcIjtcbmV4cG9ydCBjb25zdCBUZXJtaW5hbFN5bWJvbFJ1bGVOYW1lID0gXCJ0ZXJtaW5hbFN5bWJvbFwiO1xuZXhwb3J0IGNvbnN0IE5vblRlcm1pbmFsUGFydFJ1bGVOYW1lID0gXCJub25UZXJtaW5hbFBhcnRcIjtcbmV4cG9ydCBjb25zdCBTZXF1ZW5jZU9mUGFydHNSdWxlTmFtZSA9IFwic2VxdWVuY2VPZlBhcnRzXCI7XG5leHBvcnQgY29uc3QgTm9XaGl0ZXNwYWNlUGFydFJ1bGVOYW1lID0gXCJub1doaXRlc3BhY2VQYXJ0XCI7XG5leHBvcnQgY29uc3QgTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSA9IFwibG9va0FoZWFkTW9kaWZpZXJcIjtcbmV4cG9ydCBjb25zdCBBbWJpZ3VvdXNNb2RpZmllclJ1bGVOYW1lID0gXCJBbWJpZ3VvdXNNb2RpZmllclwiO1xuZXhwb3J0IGNvbnN0IFJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUgPSBcInJlZ3VsYXJFeHByZXNzaW9uXCI7XG5leHBvcnQgY29uc3QgT3B0aW9uYWxRdWFudGlmaWVyUnVsZU5hbWUgPSBcIm9wdGlvbmFsUXVhbnRpZmllclwiO1xuZXhwb3J0IGNvbnN0IE9uZU9yTW9yZVF1YW50aWZpZXJSdWxlTmFtZSA9IFwib25lT3JNb3JlUXVhbnRpZmllclwiO1xuZXhwb3J0IGNvbnN0IFplcm9Pck1vcmVRdWFudGlmaWVyUnVsZU5hbWUgPSBcInplcm9Pck1vcmVRdWFudGlmaWVyXCI7XG5leHBvcnQgY29uc3QgU2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSA9IFwic2lnbmlmaWNhbnRUb2tlblR5cGVcIjtcblxuIl0sIm5hbWVzIjpbIk5hbWVSdWxlTmFtZSIsIlBhcnRSdWxlTmFtZSIsIlJ1bGVSdWxlTmFtZSIsIkVycm9yUnVsZU5hbWUiLCJSdWxlTmFtZVJ1bGVOYW1lIiwiRG9jdW1lbnRSdWxlTmFtZSIsIldpbGRjYXJkUnVsZU5hbWUiLCJFbmRPZkxpbmVSdWxlTmFtZSIsIkRlZmluaXRpb25SdWxlTmFtZSIsIlF1YW50aWZpZXJSdWxlTmFtZSIsIkRlZmluaXRpb25zUnVsZU5hbWUiLCJUZXJtaW5hbFBhcnRSdWxlTmFtZSIsIkNob2ljZU9mUGFydHNSdWxlTmFtZSIsIlRlcm1pbmFsU3ltYm9sUnVsZU5hbWUiLCJOb25UZXJtaW5hbFBhcnRSdWxlTmFtZSIsIlNlcXVlbmNlT2ZQYXJ0c1J1bGVOYW1lIiwiTm9XaGl0ZXNwYWNlUGFydFJ1bGVOYW1lIiwiTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSIsIkFtYmlndW91c01vZGlmaWVyUnVsZU5hbWUiLCJSZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lIiwiT3B0aW9uYWxRdWFudGlmaWVyUnVsZU5hbWUiLCJPbmVPck1vcmVRdWFudGlmaWVyUnVsZU5hbWUiLCJaZXJvT3JNb3JlUXVhbnRpZmllclJ1bGVOYW1lIiwiU2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7RUFBYjtvdkJBQUE7QUFFTyxJQUFNQSxZQUFZLEdBQUcsTUFBTSxBQUFDO1FBQXRCQSxZQUFZLEdBQVpBLFlBQVksQUFGekI7QUFHTyxJQUFNQyxZQUFZLEdBQUcsTUFBTSxBQUFDO1FBQXRCQSxZQUFZLEdBQVpBLFlBQVksQUFIekI7QUFJTyxJQUFNQyxZQUFZLEdBQUcsTUFBTSxBQUFDO1FBQXRCQSxZQUFZLEdBQVpBLFlBQVksQUFKekI7QUFLTyxJQUFNQyxhQUFhLEdBQUcsT0FBTyxBQUFDO1FBQXhCQSxhQUFhLEdBQWJBLGFBQWEsQUFMMUI7QUFNTyxJQUFNQyxnQkFBZ0IsR0FBRyxVQUFVLEFBQUM7UUFBOUJBLGdCQUFnQixHQUFoQkEsZ0JBQWdCLEFBTjdCO0FBT08sSUFBTUMsZ0JBQWdCLEdBQUcsVUFBVSxBQUFDO1FBQTlCQSxnQkFBZ0IsR0FBaEJBLGdCQUFnQixBQVA3QjtBQVFPLElBQU1DLGdCQUFnQixHQUFHLFVBQVUsQUFBQztRQUE5QkEsZ0JBQWdCLEdBQWhCQSxnQkFBZ0IsQUFSN0I7QUFTTyxJQUFNQyxpQkFBaUIsR0FBRyxXQUFXLEFBQUM7UUFBaENBLGlCQUFpQixHQUFqQkEsaUJBQWlCLEFBVDlCO0FBVU8sSUFBTUMsa0JBQWtCLEdBQUcsWUFBWSxBQUFDO1FBQWxDQSxrQkFBa0IsR0FBbEJBLGtCQUFrQixBQVYvQjtBQVdPLElBQU1DLGtCQUFrQixHQUFHLFlBQVksQUFBQztRQUFsQ0Esa0JBQWtCLEdBQWxCQSxrQkFBa0IsQUFYL0I7QUFZTyxJQUFNQyxtQkFBbUIsR0FBRyxhQUFhLEFBQUM7UUFBcENBLG1CQUFtQixHQUFuQkEsbUJBQW1CLEFBWmhDO0FBYU8sSUFBTUMsb0JBQW9CLEdBQUcsY0FBYyxBQUFDO1FBQXRDQSxvQkFBb0IsR0FBcEJBLG9CQUFvQixBQWJqQztBQWNPLElBQU1DLHFCQUFxQixHQUFHLGVBQWUsQUFBQztRQUF4Q0EscUJBQXFCLEdBQXJCQSxxQkFBcUIsQUFkbEM7QUFlTyxJQUFNQyxzQkFBc0IsR0FBRyxnQkFBZ0IsQUFBQztRQUExQ0Esc0JBQXNCLEdBQXRCQSxzQkFBc0IsQUFmbkM7QUFnQk8sSUFBTUMsdUJBQXVCLEdBQUcsaUJBQWlCLEFBQUM7UUFBNUNBLHVCQUF1QixHQUF2QkEsdUJBQXVCLEFBaEJwQztBQWlCTyxJQUFNQyx1QkFBdUIsR0FBRyxpQkFBaUIsQUFBQztRQUE1Q0EsdUJBQXVCLEdBQXZCQSx1QkFBdUIsQUFqQnBDO0FBa0JPLElBQU1DLHdCQUF3QixHQUFHLGtCQUFrQixBQUFDO1FBQTlDQSx3QkFBd0IsR0FBeEJBLHdCQUF3QixBQWxCckM7QUFtQk8sSUFBTUMseUJBQXlCLEdBQUcsbUJBQW1CLEFBQUM7UUFBaERBLHlCQUF5QixHQUF6QkEseUJBQXlCLEFBbkJ0QztBQW9CTyxJQUFNQyx5QkFBeUIsR0FBRyxtQkFBbUIsQUFBQztRQUFoREEseUJBQXlCLEdBQXpCQSx5QkFBeUIsQUFwQnRDO0FBcUJPLElBQU1DLHlCQUF5QixHQUFHLG1CQUFtQixBQUFDO1FBQWhEQSx5QkFBeUIsR0FBekJBLHlCQUF5QixBQXJCdEM7QUFzQk8sSUFBTUMsMEJBQTBCLEdBQUcsb0JBQW9CLEFBQUM7UUFBbERBLDBCQUEwQixHQUExQkEsMEJBQTBCLEFBdEJ2QztBQXVCTyxJQUFNQywyQkFBMkIsR0FBRyxxQkFBcUIsQUFBQztRQUFwREEsMkJBQTJCLEdBQTNCQSwyQkFBMkIsQUF2QnhDO0FBd0JPLElBQU1DLDRCQUE0QixHQUFHLHNCQUFzQixBQUFDO1FBQXREQSw0QkFBNEIsR0FBNUJBLDRCQUE0QixBQXhCekM7QUF5Qk8sSUFBTUMsNEJBQTRCLEdBQUcsc0JBQXNCLEFBQUM7UUFBdERBLDRCQUE0QixHQUE1QkEsNEJBQTRCLEFBekJ6QyJ9