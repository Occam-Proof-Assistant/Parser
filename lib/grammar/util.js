'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Graph = require('./graph'),
    parserUtil = require('../util/parser'),
    CyclicProduction = require('./production/unitRules'),
    NonUnitProduction = require('./production/nonUnit'),
    RightRecursiveProduction = require('./production/rightRecursive'),
    NonLeftRecursiveProduction = require('./production/nonLeftRecursive'),
    NonImplicitlyLeftRecursiveProduction = require('./production/nonImplicitlyLeftRecursive');

var grammarUtil = function () {
  function grammarUtil() {
    _classCallCheck(this, grammarUtil);
  }

  _createClass(grammarUtil, null, [{
    key: 'eliminateCycles',
    value: function eliminateCycles(productions) {
      var cyclicProductions = cyclicProductionsFromProductions(productions),
          graph = graphFromCyclicProductions(cyclicProductions),
          components = graph.getComponents();

      productions = productionsFromComponents(components, productions);

      return productions;
    }
  }, {
    key: 'eliminateLeftRecursion',
    value: function eliminateLeftRecursion(productions) {
      var nonLeftRecursiveProductions = [],
          rightRecursiveProductions = [];

      productions.forEach(function (production, index) {
        var begin = 0,
            end = index,
            ///
        previousNonLeftRecursiveProductions = nonLeftRecursiveProductions.slice(begin, end),
            previousProductions = previousNonLeftRecursiveProductions,
            ///
        productionImplicitlyLeftRecursive = production.isImplicitlyLeftRecursive(previousProductions);

        if (productionImplicitlyLeftRecursive) {
          var nonImplicitlyLeftRecursiveProduction = NonImplicitlyLeftRecursiveProduction.fromProductionAndPreviousProductions(production, previousProductions);

          production = nonImplicitlyLeftRecursiveProduction; ///
        }

        var productionLeftRecursive = production.isLeftRecursive();

        if (productionLeftRecursive) {
          var nonLeftRecursiveProduction = NonLeftRecursiveProduction.fromProduction(production),
              rightRecursiveProduction = RightRecursiveProduction.fromProduction(production);

          nonLeftRecursiveProductions.push(nonLeftRecursiveProduction);

          rightRecursiveProductions.push(rightRecursiveProduction);
        } else {
          var _nonLeftRecursiveProduction = production; ///

          nonLeftRecursiveProductions.push(_nonLeftRecursiveProduction);
        }
      });

      productions = [].concat(nonLeftRecursiveProductions).concat(rightRecursiveProductions);

      return productions;
    }
  }]);

  return grammarUtil;
}();

module.exports = grammarUtil;

function cyclicProductionsFromProductions(productions) {
  var cyclicProductions = productions.reduce(function (cyclicProductions, production) {
    var cyclicProduction = CyclicProduction.fromProduction(production);

    if (cyclicProduction !== null) {
      cyclicProductions.push(cyclicProduction);
    }

    return cyclicProductions;
  }, []);

  return cyclicProductions;
}

function graphFromCyclicProductions(cyclicProductions) {
  var graph = new Graph();

  cyclicProductions.forEach(function (cyclicProduction) {
    var cyclicProductionName = cyclicProduction.getName(),
        cyclicProductionRulesProductionNames = cyclicProduction.getRulesProductionNames(),
        vertexName = cyclicProductionName,
        ///
    descendantVertexNames = cyclicProductionRulesProductionNames; ///

    graph.addVertex(vertexName, descendantVertexNames);
  });

  return graph;
}

function productionsFromComponents(components, productions) {
  var componentProductions = components.reduce(function (componentProductions, component) {
    var componentCyclic = component.isCyclic();

    if (componentCyclic) {
      var cyclicComponent = component,
          ///
      nonCyclicProductions = nonCyclicProductionsFromCyclicComponent(cyclicComponent, productions);

      componentProductions = componentProductions.concat(nonCyclicProductions);
    } else {
      var nonCyclicComponent = component,
          ///
      production = productionFromNonCyclicComponent(nonCyclicComponent, productions);

      componentProductions.push(production);
    }

    return componentProductions;
  }, []);

  productions = componentProductions; ///

  return productions;
}

function nonCyclicProductionsFromCyclicComponent(cyclicComponent, productions) {
  var cyclicProductions = cyclicComponent.mapVertex(function (vertex) {
    var vertexName = vertex.getName(),
        cyclicProductionName = vertexName,
        ///
    production = parserUtil.findProduction(cyclicProductionName, productions),
        cyclicProduction = CyclicProduction.fromProduction(production);

    return cyclicProduction;
  }),
      unitProductions = unitProductionsFromCyclicProductions(cyclicProductions),
      nonUnitProductions = nonUnitProductionsFromCyclicProductions(cyclicProductions);

  debugger;
}

function unitProductionsFromCyclicProductions(cyclicProductions) {
  var unitProductions = cyclicProductions.reduce(function (unitProductions, cyclicProduction) {
    var cyclicProductionEdges = cyclicProduction.getUnitProductions();

    unitProductions = unitProductions.concat(cyclicProductionEdges);

    return unitProductions;
  }, []);

  return unitProductions;
}

function nonUnitProductionsFromCyclicProductions(cyclicProductions) {
  var nonUnitProductions = cyclicProductions.map(function (cyclicProduction) {
    var nonUnitProduction = NonUnitProduction.fromCyclicProduction(cyclicProduction);

    return nonUnitProduction;
  });

  return nonUnitProductions;
}

function productionFromNonCyclicComponent(nonCyclicComponent, productions) {
  var nonCyclicComponentFirstVertex = nonCyclicComponent.getFirstVertex(),
      nonCyclicComponentFirstVertexName = nonCyclicComponentFirstVertex.getName(),
      productionName = nonCyclicComponentFirstVertexName,
      ///
  production = parserUtil.findProduction(productionName, productions);

  return production;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,