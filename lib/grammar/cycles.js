'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Graph = require('./graph'),
    parserUtil = require('../util/parser'),
    Production = require('../common/production'),
    UnitRuleProduction = require('./production/unitRule'),
    UnitRulesProduction = require('./production/unitRules'),
    NonUnitRulesProduction = require('./production/nonUnitRules');

var cycles = function () {
  function cycles() {
    _classCallCheck(this, cycles);
  }

  _createClass(cycles, null, [{
    key: 'eliminate',
    value: function eliminate(productions) {
      var graph = graphFromProductions(productions),
          components = graph.generateComponents(),
          nonCyclicProductions = nonCyclicProductionsFromComponents(components, productions),
          alreadyNonCyclicProductions = alreadyNonCyclicProductionsFromGraph(graph, productions);

      productions = [].concat(nonCyclicProductions).concat(alreadyNonCyclicProductions);

      return productions;
    }
  }]);

  return cycles;
}();

module.exports = cycles;

function graphFromProductions(productions) {
  var unitRulesProductions = unitRulesProductionsFromProductions(productions),
      graph = graphFromUnitRulesProductions(unitRulesProductions);

  return graph;
}

function unitRulesProductionsFromProductions(productions) {
  var unitRulesProductions = productions.reduce(function (unitRulesProductions, production) {
    var unitRulesProduction = UnitRulesProduction.fromProduction(production);

    if (unitRulesProduction !== null) {
      unitRulesProductions.push(unitRulesProduction);
    }

    return unitRulesProductions;
  }, []);

  return unitRulesProductions;
}

function graphFromUnitRulesProductions(unitRulesProductions) {
  var graph = new Graph();

  unitRulesProductions.forEach(function (unitRulesProduction) {
    var productionName = unitRulesProduction.getName(),
        productionNames = unitRulesProduction.getProductionNames(),
        vertexName = productionName,
        ///
    descendantVertexNames = productionNames; ///

    graph.addVertex(vertexName, descendantVertexNames);
  });

  return graph;
}

function nonCyclicProductionsFromComponents(components, productions) {
  var nonCyclicProductions = components.reduce(function (nonCyclicProductions, component) {
    var componentNonCyclic = component.isNonCyclic();

    if (componentNonCyclic) {
      nonCyclicProductionFromComponent(component, productions, nonCyclicProductions);
    } else {
      nonCyclicProductionsFromComponent(component, productions, nonCyclicProductions);
    }

    return nonCyclicProductions;
  }, []);

  return nonCyclicProductions;
}

function alreadyNonCyclicProductionsFromGraph(graph, productions) {
  var alreadyNonCyclicProductions = productions.filter(function (production) {
    var productionName = production.getName(),
        vertexName = productionName,
        ///
    vertexPresent = graph.isVertexPresent(vertexName),
        productionAlreadyNonCyclic = !vertexPresent; ///

    return productionAlreadyNonCyclic;
  });

  return alreadyNonCyclicProductions;
}

function nonCyclicProductionFromComponent(component, productions, nonCyclicProductions) {
  var firstVertex = component.getFirstVertex(),
      firstVertexName = firstVertex.getName(),
      nonCyclicProductionName = firstVertexName,
      ///
  nonCyclicProduction = parserUtil.findProduction(nonCyclicProductionName, productions);

  nonCyclicProductions.push(nonCyclicProduction);
}

function nonCyclicProductionsFromComponent(component, productions, nonCyclicProductions) {
  productions = productionsFromComponent(component, productions); ///

  var fixedProductions = fixedProductionsFromProductions(productions),
      unitRuleProductions = unitRuleProductionsFromProductions(productions),
      removedProductions = [],
      addedProductions = [];

  var unitRuleProductionsLength = unitRuleProductions.length;

  while (unitRuleProductionsLength > 0) {
    var unitRuleProduction = unitRuleProductions.shift(),
        unitRuleProductionName = unitRuleProduction.getName();

    var removedProduction = unitRuleProduction;

    removedProductions.push(removedProduction);

    var unitRuleProductionUnitRuleProductionName = unitRuleProduction.getUnitRuleProductionName(),
        fixedProductionName = unitRuleProductionUnitRuleProductionName,
        ///
    addedProductionName = unitRuleProductionName,
        ///
    fixedProduction = parserUtil.findProduction(fixedProductionName, fixedProductions);

    var addedProduction = parserUtil.findProduction(addedProductionName, addedProductions);

    if (addedProduction === null) {
      addedProduction = Production.fromProduction(fixedProduction);

      addedProduction.setName(addedProductionName);

      addedProductions.push(addedProduction);
    } else {
      var fixedProductionRules = fixedProduction.getRules();

      addedProduction.concatRules(fixedProductionRules);
    }

    var intermediateProductionName = unitRuleProductionUnitRuleProductionName,
        ///
    intermediateProduction = parserUtil.findProduction(intermediateProductionName, unitRuleProductions);

    if (intermediateProduction !== null) {
      var intermediateProductionUnitRuleProductionName = intermediateProduction.getUnitRuleProductionName(),
          _unitRuleProductionUnitRuleProductionName = intermediateProductionUnitRuleProductionName,
          ///
      unitRuleProductionNonCyclic = unitRuleProductionName !== _unitRuleProductionUnitRuleProductionName;

      if (unitRuleProductionNonCyclic) {
        unitRuleProduction = findUnitRuleProduction(unitRuleProductionName, _unitRuleProductionUnitRuleProductionName, removedProductions);

        if (unitRuleProduction === null) {
          unitRuleProduction = UnitRuleProduction.fromNameAndUnitRuleProductionName(unitRuleProductionName, _unitRuleProductionUnitRuleProductionName);

          unitRuleProductions.unshift(unitRuleProduction);
        }
      }
    }

    unitRuleProductionsLength = unitRuleProductions.length;
  }

  nonCyclicProductionsFromFixedAndAddedProductions(fixedProductions, addedProductions, nonCyclicProductions);
}

function nonCyclicProductionsFromFixedAndAddedProductions(fixedProductions, addedProductions, nonCyclicProductions) {
  fixedProductions.forEach(function (fixedProduction) {
    var nonCyclicProduction = fixedProduction,
        ///
    nonCyclicProductionName = nonCyclicProduction.getName(),
        addedProductionName = nonCyclicProductionName,
        ///
    addedProduction = parserUtil.findProduction(addedProductionName, addedProductions);

    if (addedProduction !== null) {
      var addedProductionRules = addedProduction.getRules();

      nonCyclicProduction.concatRules(addedProductionRules);
    }

    nonCyclicProductions.push(nonCyclicProduction);
  });
}

function productionsFromComponent(component, productions) {
  productions = component.mapVertices(function (vertex) {
    var vertexName = vertex.getName(),
        productionName = vertexName,
        ///
    production = parserUtil.findProduction(productionName, productions);

    return production;
  });

  return productions;
}

function unitRuleProductionsFromProductions(productions) {
  var unitRuleProductions = productions.reduce(function (unitRuleProductions, production) {
    var name = production.getName(),
        unitRulesProduction = UnitRulesProduction.fromProduction(production);

    unitRulesProduction.forEachUnitRule(function (unitRule) {
      var unitRuleProduction = UnitRuleProduction.fromNameAndUnitRule(name, unitRule);

      unitRuleProductions.push(unitRuleProduction);
    });

    return unitRuleProductions;
  }, []);

  return unitRuleProductions;
}

function fixedProductionsFromProductions(productions) {
  var fixedProductions = productions.map(function (production) {
    var nonUnitProduction = NonUnitRulesProduction.fromProduction(production),
        fixedProduction = nonUnitProduction; ///

    return fixedProduction;
  });

  return fixedProductions;
}

function findUnitRuleProduction(productionName, unitRuleProductionName, unitRuleProductions) {
  var firstProductionName = productionName,
      ///
  secondProductionName = unitRuleProductionName; ///

  var foundUnitRuleProduction = null;

  unitRuleProductions.some(function (unitRuleProduction) {
    var unitRuleProductionFound = unitRuleProduction.isFoundByProductionNames(firstProductionName, secondProductionName);

    if (unitRuleProductionFound) {
      foundUnitRuleProduction = unitRuleProduction;

      return true;
    }
  });

  var unitRuleProduction = foundUnitRuleProduction; ///

  return unitRuleProduction;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,