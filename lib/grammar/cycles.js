'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tarjan = require('occam-tarjan');

var parserUtil = require('../util/parser'),
    Rule = require('../extendedBNF/rule'),
    UnitRule = require('./rule/unit'),
    UnitsRule = require('./rule/units'),
    FixedRule = require('./rule/fixed'),
    NonCyclicRule = require('./rule/nonCyclic');

var Graph = tarjan.Graph;

var cycles = function () {
  function cycles() {
    _classCallCheck(this, cycles);
  }

  _createClass(cycles, null, [{
    key: 'eliminate',
    value: function eliminate(rules) {
      var graph = graphFromRules(rules),
          components = graph.generateComponents(),
          nonCyclicRules = nonCyclicRulesFromComponents(components, rules);

      rules = rules.map(function (rule) {
        var ruleName = rule.getName(),
            nonCyclicRuleName = ruleName,
            ///
        nonCyclicRule = parserUtil.findRule(nonCyclicRuleName, nonCyclicRules);

        if (nonCyclicRule !== null) {
          rule = nonCyclicRule; ///
        } else {
          var alreadyNonCyclicRuleName = ruleName,
              ///
          alreadyNonCyclicRule = parserUtil.findRule(alreadyNonCyclicRuleName, rules); ///

          rule = alreadyNonCyclicRule; ///
        }

        return rule;
      });

      return rules;
    }
  }]);

  return cycles;
}();

module.exports = cycles;

function graphFromRules(rules) {
  var graph = new Graph(),
      unitsRules = unitsRulesFromRules(rules);

  unitsRules.forEach(function (unitsRule) {
    var ruleName = unitsRule.getName(),
        unitDefinitionsRuleNames = unitsRule.getUnitDefinitionRuleNames(),
        vertexName = ruleName,
        ///
    descendantVertexNames = unitDefinitionsRuleNames; ///

    graph.addVertex(vertexName, descendantVertexNames);
  });

  return graph;
}

function unitsRulesFromRules(rules) {
  var unitsRules = rules.reduce(function (unitsRules, rule) {
    var unitsRule = UnitsRule.fromRule(rule);

    if (unitsRule !== null) {
      unitsRules.push(unitsRule);
    }

    return unitsRules;
  }, []);

  return unitsRules;
}

function nonCyclicRulesFromComponents(components, rules) {
  var nonCyclicRules = components.reduce(function (nonCyclicRules, component) {
    var componentNonCyclic = component.isNonCyclic();

    if (componentNonCyclic) {
      nonCyclicRuleFromComponent(component, rules, nonCyclicRules);
    } else {
      nonCyclicRulesFromComponent(component, rules, nonCyclicRules);
    }

    return nonCyclicRules;
  }, []);

  return nonCyclicRules;
}

function nonCyclicRuleFromComponent(component, rules, nonCyclicRules) {
  var firstVertexName = component.getFirstVertexName(),
      ruleName = firstVertexName,
      ///
  rule = parserUtil.findRule(ruleName, rules);

  if (rule !== null) {
    var nonCyclicRule = NonCyclicRule.fromRule(rule);

    nonCyclicRules.push(nonCyclicRule);
  }
}

function nonCyclicRulesFromComponent(component, rules, nonCyclicRules) {
  var unitRules = unitRulesFromComponent(component, rules),
      fixedRules = fixedRulesFromComponent(component, rules),
      addedRules = addedRulesFromUnitRulesAndFixedRules(unitRules, fixedRules);

  nonCyclicRulesFromFixedRulesAndAddedRules(fixedRules, addedRules, nonCyclicRules);
}

function addedRulesFromUnitRulesAndFixedRules(unitRules, fixedRules) {
  var addedRules = [],
      removedUnitRules = [];

  var unitRulesLength = unitRules.length;

  while (unitRulesLength > 0) {
    var unitRule = unitRules.shift(),
        unitRuleName = unitRule.getName();

    var removedUnitRule = unitRule; ///

    removedUnitRules.push(removedUnitRule);

    var unitRuleUnitRuleName = unitRule.getUnitRuleName(),
        fixedRuleName = unitRuleUnitRuleName,
        ///
    fixedRule = parserUtil.findRule(fixedRuleName, fixedRules),
        addedRuleName = unitRuleName; ///

    var addedRule = parserUtil.findRule(addedRuleName, addedRules);

    if (addedRule === null) {
      addedRule = Rule.fromRule(fixedRule);

      addedRule.setName(addedRuleName);

      addedRules.push(addedRule);
    } else {
      var fixedRuleDefinitions = fixedRule.getDefinitions();

      addedRule.addDefinitions(fixedRuleDefinitions);
    }

    var intermediateUnitRuleName = unitRuleUnitRuleName,
        ///
    intermediateUnitRule = parserUtil.findRule(intermediateUnitRuleName, unitRules);

    if (intermediateUnitRule !== null) {
      var intermediateUnitRuleUnitRuleName = intermediateUnitRule.getUnitRuleName(),
          firstRuleName = unitRuleName,
          ///
      secondRuleName = intermediateUnitRuleUnitRuleName,
          ///
      unitRuleNonCyclic = firstRuleName !== secondRuleName;

      if (unitRuleNonCyclic) {
        unitRule = findUnitRule(firstRuleName, secondRuleName, removedUnitRules);

        if (unitRule === null) {
          unitRule = UnitRule.fromRuleNames(firstRuleName, secondRuleName);

          unitRules.unshift(unitRule);
        }
      }
    }

    unitRulesLength = unitRules.length;
  }

  return addedRules;
}

function nonCyclicRulesFromFixedRulesAndAddedRules(fixedRules, addedRules, nonCyclicRules) {
  fixedRules.forEach(function (fixedRule) {
    var nonCyclicRule = fixedRule,
        ///
    nonCyclicRuleName = nonCyclicRule.getName(),
        addedRuleName = nonCyclicRuleName,
        ///
    addedRule = parserUtil.findRule(addedRuleName, addedRules);

    if (addedRule !== null) {
      var addedRuleDefinitions = addedRule.getDefinitions();

      nonCyclicRule.addDefinitions(addedRuleDefinitions);
    }

    var nonCyclicRuleDefinitionsExist = nonCyclicRule.doDefinitionsExist();

    if (nonCyclicRuleDefinitionsExist) {
      nonCyclicRules.push(nonCyclicRule);
    }
  });
}

function unitRulesFromComponent(component, rules) {
  var componentVertexNames = component.getVertexNames(),
      unitsRules = unitsRulesFromComponent(component, rules),
      ruleNames = componentVertexNames,
      ///
  unitRules = unitRulesFromUnitsRulesAndRuleNames(unitsRules, ruleNames);

  return unitRules;
}

function unitsRulesFromComponent(component, rules) {
  var unitsRules = component.reduceVertexNames(function (unitsRules, vertexName) {
    var ruleName = vertexName,
        ///
    rule = parserUtil.findRule(ruleName, rules),
        unitsRule = UnitsRule.fromRule(rule);

    if (unitsRule !== null) {
      unitsRules.push(unitsRule);
    }

    return unitsRules;
  }, []);

  return unitsRules;
}

function unitRulesFromUnitsRulesAndRuleNames(unitsRules, ruleNames) {
  var unitRules = unitsRules.reduce(function (unitRules, unitsRule) {
    var unitsRuleName = unitsRule.getName();

    unitsRule.forEachUnitDefinition(function (unitDefinition) {
      var name = unitsRuleName,
          ///
      unitRule = UnitRule.fromNameAndUnitDefinition(name, unitDefinition),
          unitRuleNotCyclic = unitRule.isNotCyclic(),
          unitRuleIncludedInRuleNames = unitRule.isIncludedInRuleNames(ruleNames);

      if (unitRuleNotCyclic && unitRuleIncludedInRuleNames) {
        unitRules.push(unitRule);
      }
    });

    return unitRules;
  }, []);

  return unitRules;
}

function fixedRulesFromComponent(component, rules) {
  var componentVertexNames = component.getVertexNames(),
      ruleNames = componentVertexNames,
      ///
  fixedRules = component.mapVertexNames(function (vertexName) {
    var ruleName = vertexName,
        ///
    rule = parserUtil.findRule(ruleName, rules),
        fixedRule = FixedRule.fromRuleAndRuleNames(rule, ruleNames);

    return fixedRule;
  });

  return fixedRules;
}

function findUnitRule(firstRuleName, secondRuleName, unitRules) {
  var foundUnitRule = null;

  unitRules.some(function (unitRule) {
    var unitRuleFound = unitRule.isFoundByRuleNames(firstRuleName, secondRuleName);

    if (unitRuleFound) {
      foundUnitRule = unitRule;

      return true;
    }
  });

  var unitRule = foundUnitRule; ///

  return unitRule;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2N5Y2xlcy5qcyJdLCJuYW1lcyI6WyJ0YXJqYW4iLCJyZXF1aXJlIiwicGFyc2VyVXRpbCIsIlJ1bGUiLCJVbml0UnVsZSIsIlVuaXRzUnVsZSIsIkZpeGVkUnVsZSIsIk5vbkN5Y2xpY1J1bGUiLCJHcmFwaCIsImN5Y2xlcyIsInJ1bGVzIiwiZ3JhcGgiLCJncmFwaEZyb21SdWxlcyIsImNvbXBvbmVudHMiLCJnZW5lcmF0ZUNvbXBvbmVudHMiLCJub25DeWNsaWNSdWxlcyIsIm5vbkN5Y2xpY1J1bGVzRnJvbUNvbXBvbmVudHMiLCJtYXAiLCJydWxlIiwicnVsZU5hbWUiLCJnZXROYW1lIiwibm9uQ3ljbGljUnVsZU5hbWUiLCJub25DeWNsaWNSdWxlIiwiZmluZFJ1bGUiLCJhbHJlYWR5Tm9uQ3ljbGljUnVsZU5hbWUiLCJhbHJlYWR5Tm9uQ3ljbGljUnVsZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1bml0c1J1bGVzIiwidW5pdHNSdWxlc0Zyb21SdWxlcyIsImZvckVhY2giLCJ1bml0c1J1bGUiLCJ1bml0RGVmaW5pdGlvbnNSdWxlTmFtZXMiLCJnZXRVbml0RGVmaW5pdGlvblJ1bGVOYW1lcyIsInZlcnRleE5hbWUiLCJkZXNjZW5kYW50VmVydGV4TmFtZXMiLCJhZGRWZXJ0ZXgiLCJyZWR1Y2UiLCJmcm9tUnVsZSIsInB1c2giLCJjb21wb25lbnQiLCJjb21wb25lbnROb25DeWNsaWMiLCJpc05vbkN5Y2xpYyIsIm5vbkN5Y2xpY1J1bGVGcm9tQ29tcG9uZW50Iiwibm9uQ3ljbGljUnVsZXNGcm9tQ29tcG9uZW50IiwiZmlyc3RWZXJ0ZXhOYW1lIiwiZ2V0Rmlyc3RWZXJ0ZXhOYW1lIiwidW5pdFJ1bGVzIiwidW5pdFJ1bGVzRnJvbUNvbXBvbmVudCIsImZpeGVkUnVsZXMiLCJmaXhlZFJ1bGVzRnJvbUNvbXBvbmVudCIsImFkZGVkUnVsZXMiLCJhZGRlZFJ1bGVzRnJvbVVuaXRSdWxlc0FuZEZpeGVkUnVsZXMiLCJub25DeWNsaWNSdWxlc0Zyb21GaXhlZFJ1bGVzQW5kQWRkZWRSdWxlcyIsInJlbW92ZWRVbml0UnVsZXMiLCJ1bml0UnVsZXNMZW5ndGgiLCJsZW5ndGgiLCJ1bml0UnVsZSIsInNoaWZ0IiwidW5pdFJ1bGVOYW1lIiwicmVtb3ZlZFVuaXRSdWxlIiwidW5pdFJ1bGVVbml0UnVsZU5hbWUiLCJnZXRVbml0UnVsZU5hbWUiLCJmaXhlZFJ1bGVOYW1lIiwiZml4ZWRSdWxlIiwiYWRkZWRSdWxlTmFtZSIsImFkZGVkUnVsZSIsInNldE5hbWUiLCJmaXhlZFJ1bGVEZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwiYWRkRGVmaW5pdGlvbnMiLCJpbnRlcm1lZGlhdGVVbml0UnVsZU5hbWUiLCJpbnRlcm1lZGlhdGVVbml0UnVsZSIsImludGVybWVkaWF0ZVVuaXRSdWxlVW5pdFJ1bGVOYW1lIiwiZmlyc3RSdWxlTmFtZSIsInNlY29uZFJ1bGVOYW1lIiwidW5pdFJ1bGVOb25DeWNsaWMiLCJmaW5kVW5pdFJ1bGUiLCJmcm9tUnVsZU5hbWVzIiwidW5zaGlmdCIsImFkZGVkUnVsZURlZmluaXRpb25zIiwibm9uQ3ljbGljUnVsZURlZmluaXRpb25zRXhpc3QiLCJkb0RlZmluaXRpb25zRXhpc3QiLCJjb21wb25lbnRWZXJ0ZXhOYW1lcyIsImdldFZlcnRleE5hbWVzIiwidW5pdHNSdWxlc0Zyb21Db21wb25lbnQiLCJydWxlTmFtZXMiLCJ1bml0UnVsZXNGcm9tVW5pdHNSdWxlc0FuZFJ1bGVOYW1lcyIsInJlZHVjZVZlcnRleE5hbWVzIiwidW5pdHNSdWxlTmFtZSIsImZvckVhY2hVbml0RGVmaW5pdGlvbiIsInVuaXREZWZpbml0aW9uIiwibmFtZSIsImZyb21OYW1lQW5kVW5pdERlZmluaXRpb24iLCJ1bml0UnVsZU5vdEN5Y2xpYyIsImlzTm90Q3ljbGljIiwidW5pdFJ1bGVJbmNsdWRlZEluUnVsZU5hbWVzIiwiaXNJbmNsdWRlZEluUnVsZU5hbWVzIiwibWFwVmVydGV4TmFtZXMiLCJmcm9tUnVsZUFuZFJ1bGVOYW1lcyIsImZvdW5kVW5pdFJ1bGUiLCJzb21lIiwidW5pdFJ1bGVGb3VuZCIsImlzRm91bmRCeVJ1bGVOYW1lcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLFNBQVNDLFFBQVEsY0FBUixDQUFmOztBQUVBLElBQU1DLGFBQWFELFFBQVEsZ0JBQVIsQ0FBbkI7QUFBQSxJQUNNRSxPQUFPRixRQUFRLHFCQUFSLENBRGI7QUFBQSxJQUVNRyxXQUFXSCxRQUFRLGFBQVIsQ0FGakI7QUFBQSxJQUdNSSxZQUFZSixRQUFRLGNBQVIsQ0FIbEI7QUFBQSxJQUlNSyxZQUFZTCxRQUFRLGNBQVIsQ0FKbEI7QUFBQSxJQUtNTSxnQkFBZ0JOLFFBQVEsa0JBQVIsQ0FMdEI7O0lBT1FPLEssR0FBVVIsTSxDQUFWUSxLOztJQUVGQyxNOzs7Ozs7OzhCQUNhQyxLLEVBQU87QUFDdEIsVUFBTUMsUUFBUUMsZUFBZUYsS0FBZixDQUFkO0FBQUEsVUFDTUcsYUFBYUYsTUFBTUcsa0JBQU4sRUFEbkI7QUFBQSxVQUVNQyxpQkFBaUJDLDZCQUE2QkgsVUFBN0IsRUFBeUNILEtBQXpDLENBRnZCOztBQUlBQSxjQUFRQSxNQUFNTyxHQUFOLENBQVUsVUFBU0MsSUFBVCxFQUFlO0FBQy9CLFlBQU1DLFdBQVdELEtBQUtFLE9BQUwsRUFBakI7QUFBQSxZQUNNQyxvQkFBb0JGLFFBRDFCO0FBQUEsWUFDb0M7QUFDOUJHLHdCQUFnQnBCLFdBQVdxQixRQUFYLENBQW9CRixpQkFBcEIsRUFBdUNOLGNBQXZDLENBRnRCOztBQUlBLFlBQUlPLGtCQUFrQixJQUF0QixFQUE0QjtBQUMxQkosaUJBQU9JLGFBQVAsQ0FEMEIsQ0FDSjtBQUN2QixTQUZELE1BRU87QUFDTCxjQUFNRSwyQkFBMkJMLFFBQWpDO0FBQUEsY0FBNEM7QUFDdENNLGlDQUF1QnZCLFdBQVdxQixRQUFYLENBQW9CQyx3QkFBcEIsRUFBOENkLEtBQTlDLENBRDdCLENBREssQ0FFK0U7O0FBRXBGUSxpQkFBT08sb0JBQVAsQ0FKSyxDQUl3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UkQ7O0FBVUEsTUFBTUEsV0FBVzJDLGFBQWpCLENBYjhELENBYTlCOztBQUVoQyxTQUFPM0MsUUFBUDtBQUNEIiwiZmlsZSI6ImN5Y2xlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdGFyamFuID0gcmVxdWlyZSgnb2NjYW0tdGFyamFuJyk7XG5cbmNvbnN0IHBhcnNlclV0aWwgPSByZXF1aXJlKCcuLi91dGlsL3BhcnNlcicpLFxuICAgICAgUnVsZSA9IHJlcXVpcmUoJy4uL2V4dGVuZGVkQk5GL3J1bGUnKSxcbiAgICAgIFVuaXRSdWxlID0gcmVxdWlyZSgnLi9ydWxlL3VuaXQnKSxcbiAgICAgIFVuaXRzUnVsZSA9IHJlcXVpcmUoJy4vcnVsZS91bml0cycpLFxuICAgICAgRml4ZWRSdWxlID0gcmVxdWlyZSgnLi9ydWxlL2ZpeGVkJyksXG4gICAgICBOb25DeWNsaWNSdWxlID0gcmVxdWlyZSgnLi9ydWxlL25vbkN5Y2xpYycpO1xuXG5jb25zdCB7IEdyYXBoIH0gPSB0YXJqYW47XG5cbmNsYXNzIGN5Y2xlcyB7XG4gIHN0YXRpYyBlbGltaW5hdGUocnVsZXMpIHtcbiAgICBjb25zdCBncmFwaCA9IGdyYXBoRnJvbVJ1bGVzKHJ1bGVzKSxcbiAgICAgICAgICBjb21wb25lbnRzID0gZ3JhcGguZ2VuZXJhdGVDb21wb25lbnRzKCksXG4gICAgICAgICAgbm9uQ3ljbGljUnVsZXMgPSBub25DeWNsaWNSdWxlc0Zyb21Db21wb25lbnRzKGNvbXBvbmVudHMsIHJ1bGVzKTtcblxuICAgIHJ1bGVzID0gcnVsZXMubWFwKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgICAgICBub25DeWNsaWNSdWxlTmFtZSA9IHJ1bGVOYW1lLCAvLy9cbiAgICAgICAgICAgIG5vbkN5Y2xpY1J1bGUgPSBwYXJzZXJVdGlsLmZpbmRSdWxlKG5vbkN5Y2xpY1J1bGVOYW1lLCBub25DeWNsaWNSdWxlcyk7XG4gICAgICBcbiAgICAgIGlmIChub25DeWNsaWNSdWxlICE9PSBudWxsKSB7XG4gICAgICAgIHJ1bGUgPSBub25DeWNsaWNSdWxlOyAvLy9cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGFscmVhZHlOb25DeWNsaWNSdWxlTmFtZSA9IHJ1bGVOYW1lLCAgLy8vXG4gICAgICAgICAgICAgIGFscmVhZHlOb25DeWNsaWNSdWxlID0gcGFyc2VyVXRpbC5maW5kUnVsZShhbHJlYWR5Tm9uQ3ljbGljUnVsZU5hbWUsIHJ1bGVzKTsgIC8vL1xuXG4gICAgICAgIHJ1bGUgPSBhbHJlYWR5Tm9uQ3ljbGljUnVsZTsgLy8vXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJ1bGVzO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3ljbGVzO1xuXG5mdW5jdGlvbiBncmFwaEZyb21SdWxlcyhydWxlcykge1xuICBjb25zdCBncmFwaCA9IG5ldyBHcmFwaCgpLFxuICAgICAgICB1bml0c1J1bGVzID0gdW5pdHNSdWxlc0Zyb21SdWxlcyhydWxlcyk7XG5cbiAgdW5pdHNSdWxlcy5mb3JFYWNoKGZ1bmN0aW9uKHVuaXRzUnVsZSkge1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gdW5pdHNSdWxlLmdldE5hbWUoKSxcbiAgICAgICAgICB1bml0RGVmaW5pdGlvbnNSdWxlTmFtZXMgPSB1bml0c1J1bGUuZ2V0VW5pdERlZmluaXRpb25SdWxlTmFtZXMoKSxcbiAgICAgICAgICB2ZXJ0ZXhOYW1lID0gcnVsZU5hbWUsICAvLy9cbiAgICAgICAgICBkZXNjZW5kYW50VmVydGV4TmFtZXMgPSB1bml0RGVmaW5pdGlvbnNSdWxlTmFtZXM7IC8vL1xuXG4gICAgZ3JhcGguYWRkVmVydGV4KHZlcnRleE5hbWUsIGRlc2NlbmRhbnRWZXJ0ZXhOYW1lcyk7XG4gIH0pO1xuXG4gIHJldHVybiBncmFwaDtcbn1cblxuZnVuY3Rpb24gdW5pdHNSdWxlc0Zyb21SdWxlcyhydWxlcykge1xuICBjb25zdCB1bml0c1J1bGVzID0gcnVsZXMucmVkdWNlKGZ1bmN0aW9uKHVuaXRzUnVsZXMsIHJ1bGUpIHtcbiAgICBjb25zdCB1bml0c1J1bGUgPSBVbml0c1J1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBpZiAodW5pdHNSdWxlICE9PSBudWxsKSB7XG4gICAgICB1bml0c1J1bGVzLnB1c2godW5pdHNSdWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5pdHNSdWxlcztcbiAgfSwgW10pO1xuXG4gIHJldHVybiB1bml0c1J1bGVzO1xufVxuXG5mdW5jdGlvbiBub25DeWNsaWNSdWxlc0Zyb21Db21wb25lbnRzKGNvbXBvbmVudHMsIHJ1bGVzKSB7XG4gIGNvbnN0IG5vbkN5Y2xpY1J1bGVzID0gY29tcG9uZW50cy5yZWR1Y2UoZnVuY3Rpb24obm9uQ3ljbGljUnVsZXMsIGNvbXBvbmVudCkge1xuICAgICAgICAgIGNvbnN0IGNvbXBvbmVudE5vbkN5Y2xpYyA9IGNvbXBvbmVudC5pc05vbkN5Y2xpYygpO1xuXG4gICAgICAgICAgaWYgKGNvbXBvbmVudE5vbkN5Y2xpYykge1xuICAgICAgICAgICAgbm9uQ3ljbGljUnVsZUZyb21Db21wb25lbnQoY29tcG9uZW50LCBydWxlcywgbm9uQ3ljbGljUnVsZXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub25DeWNsaWNSdWxlc0Zyb21Db21wb25lbnQoY29tcG9uZW50LCBydWxlcywgbm9uQ3ljbGljUnVsZXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBub25DeWNsaWNSdWxlcztcbiAgICAgICAgfSwgW10pO1xuXG4gIHJldHVybiBub25DeWNsaWNSdWxlcztcbn1cblxuZnVuY3Rpb24gbm9uQ3ljbGljUnVsZUZyb21Db21wb25lbnQoY29tcG9uZW50LCBydWxlcywgbm9uQ3ljbGljUnVsZXMpIHtcbiAgY29uc3QgZmlyc3RWZXJ0ZXhOYW1lID0gY29tcG9uZW50LmdldEZpcnN0VmVydGV4TmFtZSgpLFxuICAgICAgICBydWxlTmFtZSA9IGZpcnN0VmVydGV4TmFtZSwgIC8vL1xuICAgICAgICBydWxlID0gcGFyc2VyVXRpbC5maW5kUnVsZShydWxlTmFtZSwgcnVsZXMpO1xuXG4gIGlmIChydWxlICE9PSBudWxsKSB7XG4gICAgY29uc3Qgbm9uQ3ljbGljUnVsZSA9IE5vbkN5Y2xpY1J1bGUuZnJvbVJ1bGUocnVsZSk7XG5cbiAgICBub25DeWNsaWNSdWxlcy5wdXNoKG5vbkN5Y2xpY1J1bGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vbkN5Y2xpY1J1bGVzRnJvbUNvbXBvbmVudChjb21wb25lbnQsIHJ1bGVzLCBub25DeWNsaWNSdWxlcykge1xuICBjb25zdCB1bml0UnVsZXMgPSB1bml0UnVsZXNGcm9tQ29tcG9uZW50KGNvbXBvbmVudCwgcnVsZXMpLFxuICAgICAgICBmaXhlZFJ1bGVzID0gZml4ZWRSdWxlc0Zyb21Db21wb25lbnQoY29tcG9uZW50LCBydWxlcyksXG4gICAgICAgIGFkZGVkUnVsZXMgPSBhZGRlZFJ1bGVzRnJvbVVuaXRSdWxlc0FuZEZpeGVkUnVsZXModW5pdFJ1bGVzLCBmaXhlZFJ1bGVzKTtcblxuICBub25DeWNsaWNSdWxlc0Zyb21GaXhlZFJ1bGVzQW5kQWRkZWRSdWxlcyhmaXhlZFJ1bGVzLCBhZGRlZFJ1bGVzLCBub25DeWNsaWNSdWxlcyk7XG59XG5cbmZ1bmN0aW9uIGFkZGVkUnVsZXNGcm9tVW5pdFJ1bGVzQW5kRml4ZWRSdWxlcyh1bml0UnVsZXMsIGZpeGVkUnVsZXMpIHtcbiAgY29uc3QgYWRkZWRSdWxlcyA9IFtdLFxuICAgICAgICByZW1vdmVkVW5pdFJ1bGVzID0gW107XG5cbiAgbGV0IHVuaXRSdWxlc0xlbmd0aCA9IHVuaXRSdWxlcy5sZW5ndGg7XG5cbiAgd2hpbGUgKHVuaXRSdWxlc0xlbmd0aCA+IDApIHtcbiAgICBsZXQgdW5pdFJ1bGUgPSB1bml0UnVsZXMuc2hpZnQoKSxcbiAgICAgICAgdW5pdFJ1bGVOYW1lID0gdW5pdFJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgY29uc3QgcmVtb3ZlZFVuaXRSdWxlID0gdW5pdFJ1bGU7IC8vL1xuXG4gICAgcmVtb3ZlZFVuaXRSdWxlcy5wdXNoKHJlbW92ZWRVbml0UnVsZSk7XG5cbiAgICBjb25zdCB1bml0UnVsZVVuaXRSdWxlTmFtZSA9IHVuaXRSdWxlLmdldFVuaXRSdWxlTmFtZSgpLFxuICAgICAgICAgIGZpeGVkUnVsZU5hbWUgPSB1bml0UnVsZVVuaXRSdWxlTmFtZSwgIC8vL1xuICAgICAgICAgIGZpeGVkUnVsZSA9IHBhcnNlclV0aWwuZmluZFJ1bGUoZml4ZWRSdWxlTmFtZSwgZml4ZWRSdWxlcyksXG4gICAgICAgICAgYWRkZWRSdWxlTmFtZSA9IHVuaXRSdWxlTmFtZTsgIC8vL1xuXG4gICAgbGV0IGFkZGVkUnVsZSA9IHBhcnNlclV0aWwuZmluZFJ1bGUoYWRkZWRSdWxlTmFtZSwgYWRkZWRSdWxlcyk7XG5cbiAgICBpZiAoYWRkZWRSdWxlID09PSBudWxsKSB7XG4gICAgICBhZGRlZFJ1bGUgPSBSdWxlLmZyb21SdWxlKGZpeGVkUnVsZSk7XG5cbiAgICAgIGFkZGVkUnVsZS5zZXROYW1lKGFkZGVkUnVsZU5hbWUpO1xuXG4gICAgICBhZGRlZFJ1bGVzLnB1c2goYWRkZWRSdWxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZml4ZWRSdWxlRGVmaW5pdGlvbnMgPSBmaXhlZFJ1bGUuZ2V0RGVmaW5pdGlvbnMoKTtcblxuICAgICAgYWRkZWRSdWxlLmFkZERlZmluaXRpb25zKGZpeGVkUnVsZURlZmluaXRpb25zKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnRlcm1lZGlhdGVVbml0UnVsZU5hbWUgPSB1bml0UnVsZVVuaXRSdWxlTmFtZSwgLy8vXG4gICAgICAgICAgaW50ZXJtZWRpYXRlVW5pdFJ1bGUgPSBwYXJzZXJVdGlsLmZpbmRSdWxlKGludGVybWVkaWF0ZVVuaXRSdWxlTmFtZSwgdW5pdFJ1bGVzKTtcblxuICAgIGlmIChpbnRlcm1lZGlhdGVVbml0UnVsZSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgaW50ZXJtZWRpYXRlVW5pdFJ1bGVVbml0UnVsZU5hbWUgPSBpbnRlcm1lZGlhdGVVbml0UnVsZS5nZXRVbml0UnVsZU5hbWUoKSxcbiAgICAgICAgICAgIGZpcnN0UnVsZU5hbWUgPSB1bml0UnVsZU5hbWUsICAvLy9cbiAgICAgICAgICAgIHNlY29uZFJ1bGVOYW1lID0gaW50ZXJtZWRpYXRlVW5pdFJ1bGVVbml0UnVsZU5hbWUsICAvLy9cbiAgICAgICAgICAgIHVuaXRSdWxlTm9uQ3ljbGljID0gKGZpcnN0UnVsZU5hbWUgIT09IHNlY29uZFJ1bGVOYW1lKTtcblxuICAgICAgaWYgKHVuaXRSdWxlTm9uQ3ljbGljKSB7XG4gICAgICAgIHVuaXRSdWxlID0gZmluZFVuaXRSdWxlKGZpcnN0UnVsZU5hbWUsIHNlY29uZFJ1bGVOYW1lLCByZW1vdmVkVW5pdFJ1bGVzKTtcblxuICAgICAgICBpZiAodW5pdFJ1bGUgPT09IG51bGwpIHtcbiAgICAgICAgICB1bml0UnVsZSA9IFVuaXRSdWxlLmZyb21SdWxlTmFtZXMoZmlyc3RSdWxlTmFtZSwgc2Vjb25kUnVsZU5hbWUpO1xuXG4gICAgICAgICAgdW5pdFJ1bGVzLnVuc2hpZnQodW5pdFJ1bGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdW5pdFJ1bGVzTGVuZ3RoID0gdW5pdFJ1bGVzLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBhZGRlZFJ1bGVzO1xufVxuXG5mdW5jdGlvbiBub25DeWNsaWNSdWxlc0Zyb21GaXhlZFJ1bGVzQW5kQWRkZWRSdWxlcyhmaXhlZFJ1bGVzLCBhZGRlZFJ1bGVzLCBub25DeWNsaWNSdWxlcykge1xuICBmaXhlZFJ1bGVzLmZvckVhY2goZnVuY3Rpb24oZml4ZWRSdWxlKSB7XG4gICAgY29uc3Qgbm9uQ3ljbGljUnVsZSA9IGZpeGVkUnVsZSwgLy8vXG4gICAgICAgICAgbm9uQ3ljbGljUnVsZU5hbWUgPSBub25DeWNsaWNSdWxlLmdldE5hbWUoKSxcbiAgICAgICAgICBhZGRlZFJ1bGVOYW1lID0gbm9uQ3ljbGljUnVsZU5hbWUsIC8vL1xuICAgICAgICAgIGFkZGVkUnVsZSA9IHBhcnNlclV0aWwuZmluZFJ1bGUoYWRkZWRSdWxlTmFtZSwgYWRkZWRSdWxlcyk7XG5cbiAgICBpZiAoYWRkZWRSdWxlICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBhZGRlZFJ1bGVEZWZpbml0aW9ucyA9IGFkZGVkUnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gICAgICBub25DeWNsaWNSdWxlLmFkZERlZmluaXRpb25zKGFkZGVkUnVsZURlZmluaXRpb25zKTtcbiAgICB9XG5cbiAgICBjb25zdCBub25DeWNsaWNSdWxlRGVmaW5pdGlvbnNFeGlzdCA9IG5vbkN5Y2xpY1J1bGUuZG9EZWZpbml0aW9uc0V4aXN0KCk7XG5cbiAgICBpZiAobm9uQ3ljbGljUnVsZURlZmluaXRpb25zRXhpc3QpIHtcbiAgICAgIG5vbkN5Y2xpY1J1bGVzLnB1c2gobm9uQ3ljbGljUnVsZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gdW5pdFJ1bGVzRnJvbUNvbXBvbmVudChjb21wb25lbnQsIHJ1bGVzKSB7XG4gIGNvbnN0IGNvbXBvbmVudFZlcnRleE5hbWVzID0gY29tcG9uZW50LmdldFZlcnRleE5hbWVzKCksXG4gICAgICAgIHVuaXRzUnVsZXMgPSB1bml0c1J1bGVzRnJvbUNvbXBvbmVudChjb21wb25lbnQsIHJ1bGVzKSxcbiAgICAgICAgcnVsZU5hbWVzID0gY29tcG9uZW50VmVydGV4TmFtZXMsICAvLy9cbiAgICAgICAgdW5pdFJ1bGVzID0gdW5pdFJ1bGVzRnJvbVVuaXRzUnVsZXNBbmRSdWxlTmFtZXModW5pdHNSdWxlcywgcnVsZU5hbWVzKTtcblxuICByZXR1cm4gdW5pdFJ1bGVzO1xufVxuXG5mdW5jdGlvbiB1bml0c1J1bGVzRnJvbUNvbXBvbmVudChjb21wb25lbnQsIHJ1bGVzKSB7XG4gIGNvbnN0IHVuaXRzUnVsZXMgPSBjb21wb25lbnQucmVkdWNlVmVydGV4TmFtZXMoZnVuY3Rpb24odW5pdHNSdWxlcywgdmVydGV4TmFtZSkge1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gdmVydGV4TmFtZSwgIC8vL1xuICAgICAgICAgIHJ1bGUgPSBwYXJzZXJVdGlsLmZpbmRSdWxlKHJ1bGVOYW1lLCBydWxlcyksXG4gICAgICAgICAgdW5pdHNSdWxlID0gVW5pdHNSdWxlLmZyb21SdWxlKHJ1bGUpO1xuXG4gICAgaWYgKHVuaXRzUnVsZSAhPT0gbnVsbCkge1xuICAgICAgdW5pdHNSdWxlcy5wdXNoKHVuaXRzUnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuaXRzUnVsZXM7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gdW5pdHNSdWxlcztcbn1cblxuZnVuY3Rpb24gdW5pdFJ1bGVzRnJvbVVuaXRzUnVsZXNBbmRSdWxlTmFtZXModW5pdHNSdWxlcywgcnVsZU5hbWVzKSB7XG4gIGNvbnN0IHVuaXRSdWxlcyA9IHVuaXRzUnVsZXMucmVkdWNlKGZ1bmN0aW9uKHVuaXRSdWxlcywgdW5pdHNSdWxlKSB7XG4gICAgY29uc3QgdW5pdHNSdWxlTmFtZSA9IHVuaXRzUnVsZS5nZXROYW1lKCk7XG5cbiAgICB1bml0c1J1bGUuZm9yRWFjaFVuaXREZWZpbml0aW9uKGZ1bmN0aW9uKHVuaXREZWZpbml0aW9uKSB7XG4gICAgICBjb25zdCBuYW1lID0gdW5pdHNSdWxlTmFtZSwgLy8vXG4gICAgICAgICAgICB1bml0UnVsZSA9IFVuaXRSdWxlLmZyb21OYW1lQW5kVW5pdERlZmluaXRpb24obmFtZSwgdW5pdERlZmluaXRpb24pLFxuICAgICAgICAgICAgdW5pdFJ1bGVOb3RDeWNsaWMgPSB1bml0UnVsZS5pc05vdEN5Y2xpYygpLFxuICAgICAgICAgICAgdW5pdFJ1bGVJbmNsdWRlZEluUnVsZU5hbWVzID0gdW5pdFJ1bGUuaXNJbmNsdWRlZEluUnVsZU5hbWVzKHJ1bGVOYW1lcyk7XG4gICAgICBcbiAgICAgIGlmICh1bml0UnVsZU5vdEN5Y2xpYyAmJiB1bml0UnVsZUluY2x1ZGVkSW5SdWxlTmFtZXMpIHtcbiAgICAgICAgdW5pdFJ1bGVzLnB1c2godW5pdFJ1bGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVuaXRSdWxlcztcbiAgfSwgW10pO1xuXG4gIHJldHVybiB1bml0UnVsZXM7XG59XG5cbmZ1bmN0aW9uIGZpeGVkUnVsZXNGcm9tQ29tcG9uZW50KGNvbXBvbmVudCwgcnVsZXMpIHtcbiAgY29uc3QgY29tcG9uZW50VmVydGV4TmFtZXMgPSBjb21wb25lbnQuZ2V0VmVydGV4TmFtZXMoKSxcbiAgICAgICAgcnVsZU5hbWVzID0gY29tcG9uZW50VmVydGV4TmFtZXMsIC8vL1xuICAgICAgICBmaXhlZFJ1bGVzID0gY29tcG9uZW50Lm1hcFZlcnRleE5hbWVzKGZ1bmN0aW9uKHZlcnRleE5hbWUpIHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHZlcnRleE5hbWUsICAvLy9cbiAgICAgICAgICBydWxlID0gcGFyc2VyVXRpbC5maW5kUnVsZShydWxlTmFtZSwgcnVsZXMpLFxuICAgICAgICAgIGZpeGVkUnVsZSA9IEZpeGVkUnVsZS5mcm9tUnVsZUFuZFJ1bGVOYW1lcyhydWxlLCBydWxlTmFtZXMpO1xuXG4gICAgcmV0dXJuIGZpeGVkUnVsZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZpeGVkUnVsZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRVbml0UnVsZShmaXJzdFJ1bGVOYW1lLCBzZWNvbmRSdWxlTmFtZSwgdW5pdFJ1bGVzKSB7XG4gIGxldCBmb3VuZFVuaXRSdWxlID0gbnVsbDtcblxuICB1bml0UnVsZXMuc29tZShmdW5jdGlvbih1bml0UnVsZSkge1xuICAgIGNvbnN0IHVuaXRSdWxlRm91bmQgPSB1bml0UnVsZS5pc0ZvdW5kQnlSdWxlTmFtZXMoZmlyc3RSdWxlTmFtZSwgc2Vjb25kUnVsZU5hbWUpO1xuXG4gICAgaWYgKHVuaXRSdWxlRm91bmQpIHtcbiAgICAgIGZvdW5kVW5pdFJ1bGUgPSB1bml0UnVsZTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCB1bml0UnVsZSA9IGZvdW5kVW5pdFJ1bGU7IC8vL1xuXG4gIHJldHVybiB1bml0UnVsZTtcbn1cbiJdfQ==