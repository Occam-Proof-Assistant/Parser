'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tarjan = require('occam-tarjan');

var parserUtil = require('../util/parser'),
    Production = require('../extendedBNF/production'),
    UnitProduction = require('./production/unit'),
    UnitsProduction = require('./production/units'),
    FixedProduction = require('./production/fixed'),
    NonCyclicProduction = require('./production/nonCyclic');

var Graph = tarjan.Graph;

var cycles = function () {
  function cycles() {
    _classCallCheck(this, cycles);
  }

  _createClass(cycles, null, [{
    key: 'eliminate',
    value: function eliminate(productions) {
      var graph = graphFromProductions(productions),
          components = graph.generateComponents(),
          nonCyclicProductions = nonCyclicProductionsFromComponents(components, productions);

      productions = productions.map(function (production) {
        var productionName = production.getName(),
            nonCyclicProductionName = productionName,
            ///
        nonCyclicProduction = parserUtil.findProduction(nonCyclicProductionName, nonCyclicProductions);

        if (nonCyclicProduction !== null) {
          production = nonCyclicProduction; ///
        } else {
          var alreadyNonCyclicProductionName = productionName,
              ///
          alreadyNonCyclicProduction = parserUtil.findProduction(alreadyNonCyclicProductionName, productions); ///

          production = alreadyNonCyclicProduction; ///
        }

        return production;
      });

      return productions;
    }
  }]);

  return cycles;
}();

module.exports = cycles;

function graphFromProductions(productions) {
  var graph = new Graph(),
      unitsProductions = unitsProductionsFromProductions(productions);

  unitsProductions.forEach(function (unitsProduction) {
    var productionName = unitsProduction.getName(),
        unitDefinitionsProductionNames = unitsProduction.getUnitDefinitionProductionNames(),
        vertexName = productionName,
        ///
    descendantVertexNames = unitDefinitionsProductionNames; ///

    graph.addVertex(vertexName, descendantVertexNames);
  });

  return graph;
}

function unitsProductionsFromProductions(productions) {
  var unitsProductions = productions.reduce(function (unitsProductions, production) {
    var unitsProduction = UnitsProduction.fromProduction(production);

    if (unitsProduction !== null) {
      unitsProductions.push(unitsProduction);
    }

    return unitsProductions;
  }, []);

  return unitsProductions;
}

function nonCyclicProductionsFromComponents(components, productions) {
  var nonCyclicProductions = components.reduce(function (nonCyclicProductions, component) {
    var componentNonCyclic = component.isNonCyclic();

    if (componentNonCyclic) {
      nonCyclicProductionFromComponent(component, productions, nonCyclicProductions);
    } else {
      nonCyclicProductionsFromComponent(component, productions, nonCyclicProductions);
    }

    return nonCyclicProductions;
  }, []);

  return nonCyclicProductions;
}

function nonCyclicProductionFromComponent(component, productions, nonCyclicProductions) {
  var firstVertexName = component.getFirstVertexName(),
      productionName = firstVertexName,
      ///
  production = parserUtil.findProduction(productionName, productions);

  if (production !== null) {
    var nonCyclicProduction = NonCyclicProduction.fromProduction(production);

    nonCyclicProductions.push(nonCyclicProduction);
  }
}

function nonCyclicProductionsFromComponent(component, productions, nonCyclicProductions) {
  var unitProductions = unitProductionsFromComponent(component, productions),
      fixedProductions = fixedProductionsFromComponent(component, productions),
      addedProductions = addedProductionsFromUnitProductionsAndFixedProductions(unitProductions, fixedProductions);

  nonCyclicProductionsFromFixedProductionsAndAddedProductions(fixedProductions, addedProductions, nonCyclicProductions);
}

function addedProductionsFromUnitProductionsAndFixedProductions(unitProductions, fixedProductions) {
  var addedProductions = [],
      removedUnitProductions = [];

  var unitProductionsLength = unitProductions.length;

  while (unitProductionsLength > 0) {
    var unitProduction = unitProductions.shift(),
        unitProductionName = unitProduction.getName();

    var removedUnitProduction = unitProduction; ///

    removedUnitProductions.push(removedUnitProduction);

    var unitProductionUnitProductionName = unitProduction.getUnitProductionName(),
        fixedProductionName = unitProductionUnitProductionName,
        ///
    fixedProduction = parserUtil.findProduction(fixedProductionName, fixedProductions),
        addedProductionName = unitProductionName; ///

    var addedProduction = parserUtil.findProduction(addedProductionName, addedProductions);

    if (addedProduction === null) {
      addedProduction = Production.fromProduction(fixedProduction);

      addedProduction.setName(addedProductionName);

      addedProductions.push(addedProduction);
    } else {
      var fixedProductionDefinitions = fixedProduction.getDefinitions();

      addedProduction.addDefinitions(fixedProductionDefinitions);
    }

    var intermediateUnitProductionName = unitProductionUnitProductionName,
        ///
    intermediateUnitProduction = parserUtil.findProduction(intermediateUnitProductionName, unitProductions);

    if (intermediateUnitProduction !== null) {
      var intermediateUnitProductionUnitProductionName = intermediateUnitProduction.getUnitProductionName(),
          firstProductionName = unitProductionName,
          ///
      secondProductionName = intermediateUnitProductionUnitProductionName,
          ///
      unitProductionNonCyclic = firstProductionName !== secondProductionName;

      if (unitProductionNonCyclic) {
        unitProduction = findUnitProduction(firstProductionName, secondProductionName, removedUnitProductions);

        if (unitProduction === null) {
          unitProduction = UnitProduction.fromProductionNames(firstProductionName, secondProductionName);

          unitProductions.unshift(unitProduction);
        }
      }
    }

    unitProductionsLength = unitProductions.length;
  }

  return addedProductions;
}

function nonCyclicProductionsFromFixedProductionsAndAddedProductions(fixedProductions, addedProductions, nonCyclicProductions) {
  fixedProductions.forEach(function (fixedProduction) {
    var nonCyclicProduction = fixedProduction,
        ///
    nonCyclicProductionName = nonCyclicProduction.getName(),
        addedProductionName = nonCyclicProductionName,
        ///
    addedProduction = parserUtil.findProduction(addedProductionName, addedProductions);

    if (addedProduction !== null) {
      var addedProductionDefinitions = addedProduction.getDefinitions();

      nonCyclicProduction.addDefinitions(addedProductionDefinitions);
    }

    var nonCyclicProductionDefinitionsExist = nonCyclicProduction.doDefinitionsExist();

    if (nonCyclicProductionDefinitionsExist) {
      nonCyclicProductions.push(nonCyclicProduction);
    }
  });
}

function unitProductionsFromComponent(component, productions) {
  var componentVertexNames = component.getVertexNames(),
      unitsProductions = unitsProductionsFromComponent(component, productions),
      productionNames = componentVertexNames,
      ///
  unitProductions = unitProductionsFromUnitsProductionsAndProductionNames(unitsProductions, productionNames);

  return unitProductions;
}

function unitsProductionsFromComponent(component, productions) {
  var unitsProductions = component.reduceVertexNames(function (unitsProductions, vertexName) {
    var productionName = vertexName,
        ///
    production = parserUtil.findProduction(productionName, productions),
        unitsProduction = UnitsProduction.fromProduction(production);

    if (unitsProduction !== null) {
      unitsProductions.push(unitsProduction);
    }

    return unitsProductions;
  }, []);

  return unitsProductions;
}

function unitProductionsFromUnitsProductionsAndProductionNames(unitsProductions, productionNames) {
  var unitProductions = unitsProductions.reduce(function (unitProductions, unitsProduction) {
    var unitsProductionName = unitsProduction.getName();

    unitsProduction.forEachUnitDefinition(function (unitDefinition) {
      var name = unitsProductionName,
          ///
      unitProduction = UnitProduction.fromNameAndUnitDefinition(name, unitDefinition),
          unitProductionNotCyclic = unitProduction.isNotCyclic(),
          unitProductionIncludedInProductionNames = unitProduction.isIncludedInProductionNames(productionNames);

      if (unitProductionNotCyclic && unitProductionIncludedInProductionNames) {
        unitProductions.push(unitProduction);
      }
    });

    return unitProductions;
  }, []);

  return unitProductions;
}

function fixedProductionsFromComponent(component, productions) {
  var componentVertexNames = component.getVertexNames(),
      productionNames = componentVertexNames,
      ///
  fixedProductions = component.mapVertexNames(function (vertexName) {
    var productionName = vertexName,
        ///
    production = parserUtil.findProduction(productionName, productions),
        fixedProduction = FixedProduction.fromProductionAndProductionNames(production, productionNames);

    return fixedProduction;
  });

  return fixedProductions;
}

function findUnitProduction(firstProductionName, secondProductionName, unitProductions) {
  var foundUnitProduction = null;

  unitProductions.some(function (unitProduction) {
    var unitProductionFound = unitProduction.isFoundByProductionNames(firstProductionName, secondProductionName);

    if (unitProductionFound) {
      foundUnitProduction = unitProduction;

      return true;
    }
  });

  var unitProduction = foundUnitProduction; ///

  return unitProduction;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,