'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Graph = require('./graph'),
    arrayUtil = require('../util/array'),
    parserUtil = require('../util/parser'),
    Production = require('../common/production'),
    UnitRuleProduction = require('./production/unitRule'),
    UnitRulesProduction = require('./production/unitRules'),
    NonUnitRulesProduction = require('./production/nonUnitRules');

var cycles = function () {
  function cycles() {
    _classCallCheck(this, cycles);
  }

  _createClass(cycles, null, [{
    key: 'eliminate',
    value: function eliminate(productions) {
      var unitRulesProductions = unitRulesProductionsFromProductions(productions),
          graph = Graph.fromUnitRulesProductions(unitRulesProductions),
          components = graph.getComponents(),
          nonCyclicProductions = nonCyclicProductionsFromComponents(components, productions);

      productions = nonCyclicProductions; ///

      return productions;
    }
  }]);

  return cycles;
}();

module.exports = cycles;

function unitRulesProductionsFromProductions(productions) {
  var unitRulesProductions = productions.reduce(function (unitRulesProductions, production) {
    var unitRulesProduction = UnitRulesProduction.fromProduction(production);

    if (unitRulesProduction !== null) {
      unitRulesProductions.push(unitRulesProduction);
    }

    return unitRulesProductions;
  }, []);

  return unitRulesProductions;
}

function nonCyclicProductionsFromComponents(components, productions) {
  var nonCyclicProductions = components.reduce(function (nonCyclicProductions, component) {
    var componentNonCyclic = component.isNonCyclic();

    if (componentNonCyclic) {
      nonCyclicProductionFromComponent(component, productions, nonCyclicProductions);
    } else {
      nonCyclicProductionsFromComponent(component, productions, nonCyclicProductions);
    }

    return nonCyclicProductions;
  }, []);

  return nonCyclicProductions;
}

function nonCyclicProductionFromComponent(component, productions, nonCyclicProductions) {
  var firstVertex = component.getFirstVertex(),
      firstVertexName = firstVertex.getName(),
      nonCyclicProductionName = firstVertexName,
      ///
  nonCyclicProduction = parserUtil.findProduction(nonCyclicProductionName, productions);

  nonCyclicProductions.push(nonCyclicProduction);
}

function nonCyclicProductionsFromComponent(component, productions, nonCyclicProductions) {
  productions = productionsFromComponent(component, productions); ///

  var fixedNonUnitRulesProductions = fixedNonUnitRulesProductionsFromProductions(productions),
      unitRuleProductions = unitRuleProductionsFromProductions(productions),
      removedUnitRuleProductions = [],
      addedNonUnitRulesProductions = [];

  var unitRuleProductionsLength = unitRuleProductions.length;

  while (unitRuleProductionsLength > 0) {
    var removedUnitRuleProduction = unitRuleProductions.shift();

    removedUnitRuleProductions.push(removedUnitRuleProduction);

    var removedUnitRuleProductionName = removedUnitRuleProduction.getName(),
        removedUnitRuleProductionUnitRuleProductionName = removedUnitRuleProduction.getUnitRuleProductionName(),
        fixedNonUnitRulesProductionName = removedUnitRuleProductionUnitRuleProductionName,
        ///
    fixedNonUnitRulesProduction = parserUtil.findProduction(fixedNonUnitRulesProductionName, fixedNonUnitRulesProductions),
        fixedNonUnitRulesProductionRules = fixedNonUnitRulesProduction.getRules(),
        addedNonUnitRulesProductionName = removedUnitRuleProductionName,
        ///
    addedNonUnitRulesProductionRules = fixedNonUnitRulesProductionRules; ///

    var addedNonUnitRulesProduction = parserUtil.findProduction(addedNonUnitRulesProductionName, addedNonUnitRulesProductions);

    if (addedNonUnitRulesProduction === null) {
      var removedUnitRuleProductionNode = removedUnitRuleProduction.getNode(),
          addedNonUnitRulesProductionNode = removedUnitRuleProductionNode;

      addedNonUnitRulesProduction = new Production(addedNonUnitRulesProductionName, addedNonUnitRulesProductionRules, addedNonUnitRulesProductionNode);

      addedNonUnitRulesProductions.push(addedNonUnitRulesProduction);
    } else {
      addedNonUnitRulesProduction.concatRules(fixedNonUnitRulesProductionRules);
    }

    var unitRuleProductionName = removedUnitRuleProductionUnitRuleProductionName,
        ///
    unitRuleProduction = parserUtil.findProduction(unitRuleProductionName, unitRuleProductions);

    if (unitRuleProduction !== null) {
      var unitRuleProductionUnitRuleProductionName = unitRuleProduction.getUnitRuleProductionName();

      unitRuleProductionName = removedUnitRuleProductionName; ///

      if (unitRuleProductionName !== unitRuleProductionUnitRuleProductionName) {
        unitRuleProduction = findUnitRuleProduction(unitRuleProductionName, unitRuleProductionUnitRuleProductionName, removedUnitRuleProductions);

        if (unitRuleProduction === null) {
          unitRuleProduction = UnitRuleProduction.fromNameAndUnitRuleProductionName(unitRuleProductionName, unitRuleProductionUnitRuleProductionName);

          unitRuleProductions.unshift(unitRuleProduction);
        }
      }
    }

    unitRuleProductionsLength = unitRuleProductions.length;
  }

  nonCyclicProductionsFromFixedAndAddedNonUnitRulesProductions(fixedNonUnitRulesProductions, addedNonUnitRulesProductions, nonCyclicProductions);
}

function nonCyclicProductionsFromFixedAndAddedNonUnitRulesProductions(fixedNonUnitRulesProductions, addedNonUnitRulesProductions, nonCyclicProductions) {
  fixedNonUnitRulesProductions.forEach(function (fixedNonUnitRulesProduction) {
    var nonCyclicProduction = fixedNonUnitRulesProduction,
        ///
    nonCyclicProductionName = nonCyclicProduction.getName(),
        addedNonUnitRulesProductionName = nonCyclicProductionName,
        ///
    addedNonUnitRulesProduction = parserUtil.findProduction(addedNonUnitRulesProductionName, addedNonUnitRulesProductions);

    if (addedNonUnitRulesProduction !== null) {
      var addedNonUnitRulesProductionRules = addedNonUnitRulesProduction.getRules();

      nonCyclicProduction.concatRules(addedNonUnitRulesProductionRules);
    }

    nonCyclicProductions.push(nonCyclicProduction);
  });
}

function productionsFromComponent(component, productions) {
  productions = component.mapVertices(function (vertex) {
    var vertexName = vertex.getName(),
        productionName = vertexName,
        ///
    production = parserUtil.findProduction(productionName, productions);

    return production;
  });

  return productions;
}

function unitRuleProductionsFromProductions(productions) {
  var unitRuleProductions = productions.reduce(function (unitRuleProductions, production) {
    var name = production.getName(),
        unitRulesProduction = UnitRulesProduction.fromProduction(production);

    unitRulesProduction.forEachUnitRule(function (unitRule) {
      var unitRuleProduction = UnitRuleProduction.fromNameAndUnitRule(name, unitRule);

      unitRuleProductions.push(unitRuleProduction);
    });

    return unitRuleProductions;
  }, []);

  return unitRuleProductions;
}

function fixedNonUnitRulesProductionsFromProductions(productions) {
  var fixedNonUnitProductions = productions.map(function (production) {
    var nonUnitProduction = NonUnitRulesProduction.fromProduction(production),
        fixedNonUnitProduction = nonUnitProduction; ///

    return fixedNonUnitProduction;
  });

  return fixedNonUnitProductions;
}

function findUnitRuleProduction(productionName, unitRuleProductionName, unitRuleProductions) {
  var firstProductionName = productionName,
      ///
  secondProductionName = unitRuleProductionName; ///

  var foundUnitRuleProduction = null;

  unitRuleProductions.some(function (unitRuleProduction) {
    var unitRuleProductionFound = unitRuleProduction.isFoundByProductionNames(firstProductionName, secondProductionName);

    if (unitRuleProductionFound) {
      foundUnitRuleProduction = unitRuleProduction;

      return true;
    }
  });

  var unitRuleProduction = foundUnitRuleProduction; ///

  return unitRuleProduction;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2N5Y2xlcy5qcyJdLCJuYW1lcyI6WyJHcmFwaCIsInJlcXVpcmUiLCJhcnJheVV0aWwiLCJwYXJzZXJVdGlsIiwiUHJvZHVjdGlvbiIsIlVuaXRSdWxlUHJvZHVjdGlvbiIsIlVuaXRSdWxlc1Byb2R1Y3Rpb24iLCJOb25Vbml0UnVsZXNQcm9kdWN0aW9uIiwiY3ljbGVzIiwicHJvZHVjdGlvbnMiLCJ1bml0UnVsZXNQcm9kdWN0aW9ucyIsInVuaXRSdWxlc1Byb2R1Y3Rpb25zRnJvbVByb2R1Y3Rpb25zIiwiZ3JhcGgiLCJmcm9tVW5pdFJ1bGVzUHJvZHVjdGlvbnMiLCJjb21wb25lbnRzIiwiZ2V0Q29tcG9uZW50cyIsIm5vbkN5Y2xpY1Byb2R1Y3Rpb25zIiwibm9uQ3ljbGljUHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZWR1Y2UiLCJwcm9kdWN0aW9uIiwidW5pdFJ1bGVzUHJvZHVjdGlvbiIsImZyb21Qcm9kdWN0aW9uIiwicHVzaCIsImNvbXBvbmVudCIsImNvbXBvbmVudE5vbkN5Y2xpYyIsImlzTm9uQ3ljbGljIiwibm9uQ3ljbGljUHJvZHVjdGlvbkZyb21Db21wb25lbnQiLCJub25DeWNsaWNQcm9kdWN0aW9uc0Zyb21Db21wb25lbnQiLCJmaXJzdFZlcnRleCIsImdldEZpcnN0VmVydGV4IiwiZmlyc3RWZXJ0ZXhOYW1lIiwiZ2V0TmFtZSIsIm5vbkN5Y2xpY1Byb2R1Y3Rpb25OYW1lIiwibm9uQ3ljbGljUHJvZHVjdGlvbiIsImZpbmRQcm9kdWN0aW9uIiwicHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50IiwiZml4ZWROb25Vbml0UnVsZXNQcm9kdWN0aW9ucyIsImZpeGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMiLCJ1bml0UnVsZVByb2R1Y3Rpb25zIiwidW5pdFJ1bGVQcm9kdWN0aW9uc0Zyb21Qcm9kdWN0aW9ucyIsInJlbW92ZWRVbml0UnVsZVByb2R1Y3Rpb25zIiwiYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9ucyIsInVuaXRSdWxlUHJvZHVjdGlvbnNMZW5ndGgiLCJsZW5ndGgiLCJyZW1vdmVkVW5pdFJ1bGVQcm9kdWN0aW9uIiwic2hpZnQiLCJyZW1vdmVkVW5pdFJ1bGVQcm9kdWN0aW9uTmFtZSIsInJlbW92ZWRVbml0UnVsZVByb2R1Y3Rpb25Vbml0UnVsZVByb2R1Y3Rpb25OYW1lIiwiZ2V0VW5pdFJ1bGVQcm9kdWN0aW9uTmFtZSIsImZpeGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbk5hbWUiLCJmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb24iLCJmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25SdWxlcyIsImdldFJ1bGVzIiwiYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9uTmFtZSIsImFkZGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvblJ1bGVzIiwiYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9uIiwicmVtb3ZlZFVuaXRSdWxlUHJvZHVjdGlvbk5vZGUiLCJnZXROb2RlIiwiYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9uTm9kZSIsImNvbmNhdFJ1bGVzIiwidW5pdFJ1bGVQcm9kdWN0aW9uTmFtZSIsInVuaXRSdWxlUHJvZHVjdGlvbiIsInVuaXRSdWxlUHJvZHVjdGlvblVuaXRSdWxlUHJvZHVjdGlvbk5hbWUiLCJmaW5kVW5pdFJ1bGVQcm9kdWN0aW9uIiwiZnJvbU5hbWVBbmRVbml0UnVsZVByb2R1Y3Rpb25OYW1lIiwidW5zaGlmdCIsIm5vbkN5Y2xpY1Byb2R1Y3Rpb25zRnJvbUZpeGVkQW5kQWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9ucyIsImZvckVhY2giLCJtYXBWZXJ0aWNlcyIsInZlcnRleCIsInZlcnRleE5hbWUiLCJwcm9kdWN0aW9uTmFtZSIsIm5hbWUiLCJmb3JFYWNoVW5pdFJ1bGUiLCJ1bml0UnVsZSIsImZyb21OYW1lQW5kVW5pdFJ1bGUiLCJmaXhlZE5vblVuaXRQcm9kdWN0aW9ucyIsIm1hcCIsIm5vblVuaXRQcm9kdWN0aW9uIiwiZml4ZWROb25Vbml0UHJvZHVjdGlvbiIsImZpcnN0UHJvZHVjdGlvbk5hbWUiLCJzZWNvbmRQcm9kdWN0aW9uTmFtZSIsImZvdW5kVW5pdFJ1bGVQcm9kdWN0aW9uIiwic29tZSIsInVuaXRSdWxlUHJvZHVjdGlvbkZvdW5kIiwiaXNGb3VuZEJ5UHJvZHVjdGlvbk5hbWVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsUUFBUUMsUUFBUSxTQUFSLENBQWQ7QUFBQSxJQUNNQyxZQUFZRCxRQUFRLGVBQVIsQ0FEbEI7QUFBQSxJQUVNRSxhQUFhRixRQUFRLGdCQUFSLENBRm5CO0FBQUEsSUFHTUcsYUFBYUgsUUFBUSxzQkFBUixDQUhuQjtBQUFBLElBSU1JLHFCQUFxQkosUUFBUSx1QkFBUixDQUozQjtBQUFBLElBS01LLHNCQUFzQkwsUUFBUSx3QkFBUixDQUw1QjtBQUFBLElBTU1NLHlCQUF5Qk4sUUFBUSwyQkFBUixDQU4vQjs7SUFRTU8sTTs7Ozs7Ozs4QkFDYUMsVyxFQUFhO0FBQzVCLFVBQU1DLHVCQUF1QkMsb0NBQW9DRixXQUFwQyxDQUE3QjtBQUFBLFVBQ01HLFFBQVFaLE1BQU1hLHdCQUFOLENBQStCSCxvQkFBL0IsQ0FEZDtBQUFBLFVBRU1JLGFBQWFGLE1BQU1HLGFBQU4sRUFGbkI7QUFBQSxVQUdNQyx1QkFBdUJDLG1DQUFtQ0gsVUFBbkMsRUFBK0NMLFdBQS9DLENBSDdCOztBQUtBQSxvQkFBY08sb0JBQWQsQ0FONEIsQ0FNUTs7QUFFcEMsYUFBT1AsV0FBUDtBQUNEOzs7Ozs7QUFHSFMsT0FBT0MsT0FBUCxHQUFpQlgsTUFBakI7O0FBRUEsU0FBU0csbUNBQVQsQ0FBNkNGLFdBQTdDLEVBQTBEO0FBQ3hELE1BQU1DLHVCQUF1QkQsWUFBWVcsTUFBWixDQUFtQixVQUFTVixvQkFBVCxFQUErQlcsVUFBL0IsRUFBMkM7QUFDekYsUUFBTUMsc0JBQXNCaEIsb0JBQW9CaUIsY0FBcEIsQ0FBbUNGLFVBQW5DLENBQTVCOztB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RSxHQUFaLENBQWdCLFVBQVMxRCxVQUFULEVBQXFCO0FBQ25FLFFBQU0yRCxvQkFBb0J6RSx1QkFBdUJnQixjQUF2QixDQUFzQ0YsVUFBdEMsQ0FBMUI7QUFBQSxRQUNNNEQseUJBQXlCRCxpQkFEL0IsQ0FEbUUsQ0FFakI7O0FBRWxELFdBQU9DLHNCQUFQO0FBQ0QsR0FMK0IsQ0FBaEM7O0FBT0EsU0FBT0gsdUJBQVA7QUFDRDs7QUFFRCxTQUFTYixzQkFBVCxDQUFnQ1EsY0FBaEMsRUFBZ0RYLHNCQUFoRCxFQUF3RXRCLG1CQUF4RSxFQUE2RjtBQUMzRixNQUFNMEMsc0JBQXNCVCxjQUE1QjtBQUFBLE1BQTRDO0FBQ3RDVSx5QkFBdUJyQixzQkFEN0IsQ0FEMkYsQ0FFckM7O0FBRXRELE1BQUlzQiwwQkFBMEIsSUFBOUI7O0FBRUE1QyxzQkFBb0I2QyxJQUFwQixDQUF5QixVQUFTdEIsa0JBQVQsRUFBNkI7QUFDcEQsUUFBTXVCLDBCQUEwQnZCLG1CQUFtQndCLHdCQUFuQixDQUE0Q0wsbUJBQTVDLEVBQWlFQyxvQkFBakUsQ0FBaEM7O0FBRUEsUUFBSUcsdUJBQUosRUFBNkI7QUFDM0JGLGdDQUEwQnJCLGtCQUExQjs7QUFFQSxhQUFPLElBQVA7QUFDRDtBQUNGLEdBUkQ7O0FBVUEsTUFBTUEscUJBQXFCcUIsdUJBQTNCLENBaEIyRixDQWdCdkM7O0FBRXBELFNBQU9yQixrQkFBUDtBQUNEIiwiZmlsZSI6ImN5Y2xlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgR3JhcGggPSByZXF1aXJlKCcuL2dyYXBoJyksXG4gICAgICBhcnJheVV0aWwgPSByZXF1aXJlKCcuLi91dGlsL2FycmF5JyksXG4gICAgICBwYXJzZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbC9wYXJzZXInKSxcbiAgICAgIFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuLi9jb21tb24vcHJvZHVjdGlvbicpLFxuICAgICAgVW5pdFJ1bGVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL3VuaXRSdWxlJyksXG4gICAgICBVbml0UnVsZXNQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL3VuaXRSdWxlcycpLFxuICAgICAgTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi9ub25Vbml0UnVsZXMnKTtcblxuY2xhc3MgY3ljbGVzIHtcbiAgc3RhdGljIGVsaW1pbmF0ZShwcm9kdWN0aW9ucykge1xuICAgIGNvbnN0IHVuaXRSdWxlc1Byb2R1Y3Rpb25zID0gdW5pdFJ1bGVzUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMocHJvZHVjdGlvbnMpLFxuICAgICAgICAgIGdyYXBoID0gR3JhcGguZnJvbVVuaXRSdWxlc1Byb2R1Y3Rpb25zKHVuaXRSdWxlc1Byb2R1Y3Rpb25zKSxcbiAgICAgICAgICBjb21wb25lbnRzID0gZ3JhcGguZ2V0Q29tcG9uZW50cygpLFxuICAgICAgICAgIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zID0gbm9uQ3ljbGljUHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50cyhjb21wb25lbnRzLCBwcm9kdWN0aW9ucyk7XG5cbiAgICBwcm9kdWN0aW9ucyA9IG5vbkN5Y2xpY1Byb2R1Y3Rpb25zOyAvLy9cblxuICAgIHJldHVybiBwcm9kdWN0aW9ucztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGN5Y2xlcztcblxuZnVuY3Rpb24gdW5pdFJ1bGVzUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMocHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgdW5pdFJ1bGVzUHJvZHVjdGlvbnMgPSBwcm9kdWN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24odW5pdFJ1bGVzUHJvZHVjdGlvbnMsIHByb2R1Y3Rpb24pIHtcbiAgICBjb25zdCB1bml0UnVsZXNQcm9kdWN0aW9uID0gVW5pdFJ1bGVzUHJvZHVjdGlvbi5mcm9tUHJvZHVjdGlvbihwcm9kdWN0aW9uKTtcblxuICAgIGlmICh1bml0UnVsZXNQcm9kdWN0aW9uICE9PSBudWxsKSB7XG4gICAgICB1bml0UnVsZXNQcm9kdWN0aW9ucy5wdXNoKHVuaXRSdWxlc1Byb2R1Y3Rpb24pO1xuICAgIH1cblxuICAgIHJldHVybiB1bml0UnVsZXNQcm9kdWN0aW9ucztcbiAgfSwgW10pO1xuXG4gIHJldHVybiB1bml0UnVsZXNQcm9kdWN0aW9ucztcbn1cblxuZnVuY3Rpb24gbm9uQ3ljbGljUHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50cyhjb21wb25lbnRzLCBwcm9kdWN0aW9ucykge1xuICBjb25zdCBub25DeWNsaWNQcm9kdWN0aW9ucyA9IGNvbXBvbmVudHMucmVkdWNlKGZ1bmN0aW9uKG5vbkN5Y2xpY1Byb2R1Y3Rpb25zLCBjb21wb25lbnQpIHtcbiAgICAgICAgICBjb25zdCBjb21wb25lbnROb25DeWNsaWMgPSBjb21wb25lbnQuaXNOb25DeWNsaWMoKTtcblxuICAgICAgICAgIGlmIChjb21wb25lbnROb25DeWNsaWMpIHtcbiAgICAgICAgICAgIG5vbkN5Y2xpY1Byb2R1Y3Rpb25Gcm9tQ29tcG9uZW50KGNvbXBvbmVudCwgcHJvZHVjdGlvbnMsIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9uQ3ljbGljUHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50KGNvbXBvbmVudCwgcHJvZHVjdGlvbnMsIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbm9uQ3ljbGljUHJvZHVjdGlvbnM7XG4gICAgICAgIH0sIFtdKTtcblxuICByZXR1cm4gbm9uQ3ljbGljUHJvZHVjdGlvbnM7XG59XG5cbmZ1bmN0aW9uIG5vbkN5Y2xpY1Byb2R1Y3Rpb25Gcm9tQ29tcG9uZW50KGNvbXBvbmVudCwgcHJvZHVjdGlvbnMsIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zKSB7XG4gIGNvbnN0IGZpcnN0VmVydGV4ID0gY29tcG9uZW50LmdldEZpcnN0VmVydGV4KCksXG4gICAgICAgIGZpcnN0VmVydGV4TmFtZSA9IGZpcnN0VmVydGV4LmdldE5hbWUoKSxcbiAgICAgICAgbm9uQ3ljbGljUHJvZHVjdGlvbk5hbWUgPSBmaXJzdFZlcnRleE5hbWUsICAvLy9cbiAgICAgICAgbm9uQ3ljbGljUHJvZHVjdGlvbiA9IHBhcnNlclV0aWwuZmluZFByb2R1Y3Rpb24obm9uQ3ljbGljUHJvZHVjdGlvbk5hbWUsIHByb2R1Y3Rpb25zKTtcblxuICBub25DeWNsaWNQcm9kdWN0aW9ucy5wdXNoKG5vbkN5Y2xpY1Byb2R1Y3Rpb24pO1xufVxuXG5mdW5jdGlvbiBub25DeWNsaWNQcm9kdWN0aW9uc0Zyb21Db21wb25lbnQoY29tcG9uZW50LCBwcm9kdWN0aW9ucywgbm9uQ3ljbGljUHJvZHVjdGlvbnMpIHtcbiAgcHJvZHVjdGlvbnMgPSBwcm9kdWN0aW9uc0Zyb21Db21wb25lbnQoY29tcG9uZW50LCBwcm9kdWN0aW9ucyk7IC8vL1xuXG4gIGNvbnN0IGZpeGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbnMgPSBmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25zRnJvbVByb2R1Y3Rpb25zKHByb2R1Y3Rpb25zKSxcbiAgICAgICAgdW5pdFJ1bGVQcm9kdWN0aW9ucyA9IHVuaXRSdWxlUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMocHJvZHVjdGlvbnMpLFxuICAgICAgICByZW1vdmVkVW5pdFJ1bGVQcm9kdWN0aW9ucyA9IFtdLFxuICAgICAgICBhZGRlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25zID0gW107XG5cbiAgbGV0IHVuaXRSdWxlUHJvZHVjdGlvbnNMZW5ndGggPSB1bml0UnVsZVByb2R1Y3Rpb25zLmxlbmd0aDtcblxuICB3aGlsZSAodW5pdFJ1bGVQcm9kdWN0aW9uc0xlbmd0aCA+IDApIHtcbiAgICBjb25zdCByZW1vdmVkVW5pdFJ1bGVQcm9kdWN0aW9uID0gdW5pdFJ1bGVQcm9kdWN0aW9ucy5zaGlmdCgpO1xuXG4gICAgcmVtb3ZlZFVuaXRSdWxlUHJvZHVjdGlvbnMucHVzaChyZW1vdmVkVW5pdFJ1bGVQcm9kdWN0aW9uKTtcblxuICAgIGNvbnN0IHJlbW92ZWRVbml0UnVsZVByb2R1Y3Rpb25OYW1lID0gcmVtb3ZlZFVuaXRSdWxlUHJvZHVjdGlvbi5nZXROYW1lKCksXG4gICAgICAgICAgcmVtb3ZlZFVuaXRSdWxlUHJvZHVjdGlvblVuaXRSdWxlUHJvZHVjdGlvbk5hbWUgPSByZW1vdmVkVW5pdFJ1bGVQcm9kdWN0aW9uLmdldFVuaXRSdWxlUHJvZHVjdGlvbk5hbWUoKSxcbiAgICAgICAgICBmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25OYW1lID0gcmVtb3ZlZFVuaXRSdWxlUHJvZHVjdGlvblVuaXRSdWxlUHJvZHVjdGlvbk5hbWUsICAvLy9cbiAgICAgICAgICBmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb24gPSBwYXJzZXJVdGlsLmZpbmRQcm9kdWN0aW9uKGZpeGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbk5hbWUsIGZpeGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbnMpLFxuICAgICAgICAgIGZpeGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvblJ1bGVzID0gZml4ZWROb25Vbml0UnVsZXNQcm9kdWN0aW9uLmdldFJ1bGVzKCksXG4gICAgICAgICAgYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9uTmFtZSA9IHJlbW92ZWRVbml0UnVsZVByb2R1Y3Rpb25OYW1lLCAgLy8vXG4gICAgICAgICAgYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9uUnVsZXMgPSBmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25SdWxlczsgLy8vXG5cbiAgICBsZXQgYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9uID0gcGFyc2VyVXRpbC5maW5kUHJvZHVjdGlvbihhZGRlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25OYW1lLCBhZGRlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25zKTtcblxuICAgIGlmIChhZGRlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb24gPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHJlbW92ZWRVbml0UnVsZVByb2R1Y3Rpb25Ob2RlID0gcmVtb3ZlZFVuaXRSdWxlUHJvZHVjdGlvbi5nZXROb2RlKCksXG4gICAgICAgICAgICBhZGRlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25Ob2RlID0gcmVtb3ZlZFVuaXRSdWxlUHJvZHVjdGlvbk5vZGU7XG5cbiAgICAgIGFkZGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbiA9IG5ldyBQcm9kdWN0aW9uKGFkZGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbk5hbWUsIGFkZGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvblJ1bGVzLCBhZGRlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25Ob2RlKTtcblxuICAgICAgYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9ucy5wdXNoKGFkZGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbi5jb25jYXRSdWxlcyhmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25SdWxlcyk7XG4gICAgfVxuXG4gICAgbGV0IHVuaXRSdWxlUHJvZHVjdGlvbk5hbWUgPSByZW1vdmVkVW5pdFJ1bGVQcm9kdWN0aW9uVW5pdFJ1bGVQcm9kdWN0aW9uTmFtZSwgLy8vXG4gICAgICAgIHVuaXRSdWxlUHJvZHVjdGlvbiA9IHBhcnNlclV0aWwuZmluZFByb2R1Y3Rpb24odW5pdFJ1bGVQcm9kdWN0aW9uTmFtZSwgdW5pdFJ1bGVQcm9kdWN0aW9ucyk7XG5cbiAgICBpZiAodW5pdFJ1bGVQcm9kdWN0aW9uICE9PSBudWxsKSB7XG4gICAgICBjb25zdCB1bml0UnVsZVByb2R1Y3Rpb25Vbml0UnVsZVByb2R1Y3Rpb25OYW1lID0gdW5pdFJ1bGVQcm9kdWN0aW9uLmdldFVuaXRSdWxlUHJvZHVjdGlvbk5hbWUoKTtcblxuICAgICAgdW5pdFJ1bGVQcm9kdWN0aW9uTmFtZSA9IHJlbW92ZWRVbml0UnVsZVByb2R1Y3Rpb25OYW1lOyAvLy9cblxuICAgICAgaWYgKHVuaXRSdWxlUHJvZHVjdGlvbk5hbWUgIT09IHVuaXRSdWxlUHJvZHVjdGlvblVuaXRSdWxlUHJvZHVjdGlvbk5hbWUpIHtcbiAgICAgICAgdW5pdFJ1bGVQcm9kdWN0aW9uID0gZmluZFVuaXRSdWxlUHJvZHVjdGlvbih1bml0UnVsZVByb2R1Y3Rpb25OYW1lLCB1bml0UnVsZVByb2R1Y3Rpb25Vbml0UnVsZVByb2R1Y3Rpb25OYW1lLCByZW1vdmVkVW5pdFJ1bGVQcm9kdWN0aW9ucyk7XG5cbiAgICAgICAgaWYgKHVuaXRSdWxlUHJvZHVjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgIHVuaXRSdWxlUHJvZHVjdGlvbiA9IFVuaXRSdWxlUHJvZHVjdGlvbi5mcm9tTmFtZUFuZFVuaXRSdWxlUHJvZHVjdGlvbk5hbWUodW5pdFJ1bGVQcm9kdWN0aW9uTmFtZSwgdW5pdFJ1bGVQcm9kdWN0aW9uVW5pdFJ1bGVQcm9kdWN0aW9uTmFtZSk7XG5cbiAgICAgICAgICB1bml0UnVsZVByb2R1Y3Rpb25zLnVuc2hpZnQodW5pdFJ1bGVQcm9kdWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHVuaXRSdWxlUHJvZHVjdGlvbnNMZW5ndGggPSB1bml0UnVsZVByb2R1Y3Rpb25zLmxlbmd0aDtcbiAgfVxuXG4gIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zRnJvbUZpeGVkQW5kQWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9ucyhmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25zLCBhZGRlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25zLCBub25DeWNsaWNQcm9kdWN0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zRnJvbUZpeGVkQW5kQWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9ucyhmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25zLCBhZGRlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25zLCBub25DeWNsaWNQcm9kdWN0aW9ucykge1xuICBmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25zLmZvckVhY2goZnVuY3Rpb24oZml4ZWROb25Vbml0UnVsZXNQcm9kdWN0aW9uKSB7XG4gICAgY29uc3Qgbm9uQ3ljbGljUHJvZHVjdGlvbiA9IGZpeGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbiwgLy8vXG4gICAgICAgICAgbm9uQ3ljbGljUHJvZHVjdGlvbk5hbWUgPSBub25DeWNsaWNQcm9kdWN0aW9uLmdldE5hbWUoKSxcbiAgICAgICAgICBhZGRlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25OYW1lID0gbm9uQ3ljbGljUHJvZHVjdGlvbk5hbWUsIC8vL1xuICAgICAgICAgIGFkZGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbiA9IHBhcnNlclV0aWwuZmluZFByb2R1Y3Rpb24oYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9uTmFtZSwgYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9ucyk7XG5cbiAgICBpZiAoYWRkZWROb25Vbml0UnVsZXNQcm9kdWN0aW9uICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBhZGRlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25SdWxlcyA9IGFkZGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvbi5nZXRSdWxlcygpO1xuXG4gICAgICBub25DeWNsaWNQcm9kdWN0aW9uLmNvbmNhdFJ1bGVzKGFkZGVkTm9uVW5pdFJ1bGVzUHJvZHVjdGlvblJ1bGVzKTtcbiAgICB9XG5cbiAgICBub25DeWNsaWNQcm9kdWN0aW9ucy5wdXNoKG5vbkN5Y2xpY1Byb2R1Y3Rpb24pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50KGNvbXBvbmVudCwgcHJvZHVjdGlvbnMpIHtcbiAgcHJvZHVjdGlvbnMgPSBjb21wb25lbnQubWFwVmVydGljZXMoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgY29uc3QgdmVydGV4TmFtZSA9IHZlcnRleC5nZXROYW1lKCksXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWUgPSB2ZXJ0ZXhOYW1lLCAgLy8vXG4gICAgICAgICAgcHJvZHVjdGlvbiA9IHBhcnNlclV0aWwuZmluZFByb2R1Y3Rpb24ocHJvZHVjdGlvbk5hbWUsIHByb2R1Y3Rpb25zKTtcblxuICAgIHJldHVybiBwcm9kdWN0aW9uO1xuICB9KTtcblxuICByZXR1cm4gcHJvZHVjdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHVuaXRSdWxlUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMocHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgdW5pdFJ1bGVQcm9kdWN0aW9ucyA9IHByb2R1Y3Rpb25zLnJlZHVjZShmdW5jdGlvbih1bml0UnVsZVByb2R1Y3Rpb25zLCBwcm9kdWN0aW9uKSB7XG4gICAgY29uc3QgbmFtZSA9IHByb2R1Y3Rpb24uZ2V0TmFtZSgpLFxuICAgICAgICAgIHVuaXRSdWxlc1Byb2R1Y3Rpb24gPSBVbml0UnVsZXNQcm9kdWN0aW9uLmZyb21Qcm9kdWN0aW9uKHByb2R1Y3Rpb24pO1xuXG4gICAgdW5pdFJ1bGVzUHJvZHVjdGlvbi5mb3JFYWNoVW5pdFJ1bGUoZnVuY3Rpb24odW5pdFJ1bGUpIHtcbiAgICAgIGNvbnN0IHVuaXRSdWxlUHJvZHVjdGlvbiA9IFVuaXRSdWxlUHJvZHVjdGlvbi5mcm9tTmFtZUFuZFVuaXRSdWxlKG5hbWUsIHVuaXRSdWxlKTtcblxuICAgICAgdW5pdFJ1bGVQcm9kdWN0aW9ucy5wdXNoKHVuaXRSdWxlUHJvZHVjdGlvbik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdW5pdFJ1bGVQcm9kdWN0aW9ucztcbiAgfSwgW10pO1xuXG4gIHJldHVybiB1bml0UnVsZVByb2R1Y3Rpb25zO1xufVxuXG5mdW5jdGlvbiBmaXhlZE5vblVuaXRSdWxlc1Byb2R1Y3Rpb25zRnJvbVByb2R1Y3Rpb25zKHByb2R1Y3Rpb25zKSB7XG4gIGNvbnN0IGZpeGVkTm9uVW5pdFByb2R1Y3Rpb25zID0gcHJvZHVjdGlvbnMubWFwKGZ1bmN0aW9uKHByb2R1Y3Rpb24pIHtcbiAgICBjb25zdCBub25Vbml0UHJvZHVjdGlvbiA9IE5vblVuaXRSdWxlc1Byb2R1Y3Rpb24uZnJvbVByb2R1Y3Rpb24ocHJvZHVjdGlvbiksXG4gICAgICAgICAgZml4ZWROb25Vbml0UHJvZHVjdGlvbiA9IG5vblVuaXRQcm9kdWN0aW9uOyAvLy9cbiAgICBcbiAgICByZXR1cm4gZml4ZWROb25Vbml0UHJvZHVjdGlvbjtcbiAgfSk7XG4gIFxuICByZXR1cm4gZml4ZWROb25Vbml0UHJvZHVjdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGZpbmRVbml0UnVsZVByb2R1Y3Rpb24ocHJvZHVjdGlvbk5hbWUsIHVuaXRSdWxlUHJvZHVjdGlvbk5hbWUsIHVuaXRSdWxlUHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgZmlyc3RQcm9kdWN0aW9uTmFtZSA9IHByb2R1Y3Rpb25OYW1lLCAvLy9cbiAgICAgICAgc2Vjb25kUHJvZHVjdGlvbk5hbWUgPSB1bml0UnVsZVByb2R1Y3Rpb25OYW1lOyAgLy8vXG5cbiAgbGV0IGZvdW5kVW5pdFJ1bGVQcm9kdWN0aW9uID0gbnVsbDtcblxuICB1bml0UnVsZVByb2R1Y3Rpb25zLnNvbWUoZnVuY3Rpb24odW5pdFJ1bGVQcm9kdWN0aW9uKSB7XG4gICAgY29uc3QgdW5pdFJ1bGVQcm9kdWN0aW9uRm91bmQgPSB1bml0UnVsZVByb2R1Y3Rpb24uaXNGb3VuZEJ5UHJvZHVjdGlvbk5hbWVzKGZpcnN0UHJvZHVjdGlvbk5hbWUsIHNlY29uZFByb2R1Y3Rpb25OYW1lKTtcblxuICAgIGlmICh1bml0UnVsZVByb2R1Y3Rpb25Gb3VuZCkge1xuICAgICAgZm91bmRVbml0UnVsZVByb2R1Y3Rpb24gPSB1bml0UnVsZVByb2R1Y3Rpb247XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgdW5pdFJ1bGVQcm9kdWN0aW9uID0gZm91bmRVbml0UnVsZVByb2R1Y3Rpb247IC8vL1xuXG4gIHJldHVybiB1bml0UnVsZVByb2R1Y3Rpb247XG59Il19