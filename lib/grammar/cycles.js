'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tarjan = require('occam-tarjan');

var parserUtil = require('../util/parser'),
    Production = require('../common/production'),
    UnitDefinitionProduction = require('./production/unitDefinition'),
    UnitDefinitionsProduction = require('./production/unitDefinitions'),
    NonUnitDefinitionsProduction = require('./production/nonUnitDefinitions');

var Graph = tarjan.Graph;

var cycles = function () {
  function cycles() {
    _classCallCheck(this, cycles);
  }

  _createClass(cycles, null, [{
    key: 'eliminate',
    value: function eliminate(productions) {
      var graph = graphFromProductions(productions),
          components = graph.generateComponents(),
          nonCyclicProductions = nonCyclicProductionsFromComponents(components, productions),
          alreadyNonCyclicProductions = alreadyNonCyclicProductionsFromGraph(graph, productions);

      productions = productions.map(function (production) {
        var productionName = production.getName(),
            nonCyclicProduction = parserUtil.findProduction(productionName, nonCyclicProductions),
            alreadyNonCyclicProduction = parserUtil.findProduction(productionName, alreadyNonCyclicProductions);

        production = nonCyclicProduction || alreadyNonCyclicProduction; ///

        return production;
      });

      return productions;
    }
  }]);

  return cycles;
}();

module.exports = cycles;

function graphFromProductions(productions) {
  var unitDefinitionsProductions = unitDefinitionsProductionsFromProductions(productions),
      graph = graphFromUnitDefinitionsProductions(unitDefinitionsProductions);

  return graph;
}

function unitDefinitionsProductionsFromProductions(productions) {
  var unitDefinitionsProductions = productions.reduce(function (unitDefinitionsProductions, production) {
    var unitDefinitionsProduction = UnitDefinitionsProduction.fromProduction(production);

    if (unitDefinitionsProduction !== null) {
      unitDefinitionsProductions.push(unitDefinitionsProduction);
    }

    return unitDefinitionsProductions;
  }, []);

  return unitDefinitionsProductions;
}

function graphFromUnitDefinitionsProductions(unitDefinitionsProductions) {
  var graph = new Graph();

  unitDefinitionsProductions.forEach(function (unitDefinitionsProduction) {
    var productionName = unitDefinitionsProduction.getName(),
        productionNames = unitDefinitionsProduction.getProductionNames(),
        vertexName = productionName,
        ///
    descendantVertexNames = productionNames; ///

    graph.addVertex(vertexName, descendantVertexNames);
  });

  return graph;
}

function nonCyclicProductionsFromComponents(components, productions) {
  var nonCyclicProductions = components.reduce(function (nonCyclicProductions, component) {
    var componentNonCyclic = component.isNonCyclic();

    if (componentNonCyclic) {
      nonCyclicProductionFromComponent(component, productions, nonCyclicProductions);
    } else {
      nonCyclicProductionsFromComponent(component, productions, nonCyclicProductions);
    }

    return nonCyclicProductions;
  }, []);

  return nonCyclicProductions;
}

function alreadyNonCyclicProductionsFromGraph(graph, productions) {
  var alreadyNonCyclicProductions = productions.filter(function (production) {
    var productionName = production.getName(),
        vertexName = productionName,
        ///
    vertexPresent = graph.isVertexPresent(vertexName),
        productionAlreadyNonCyclic = !vertexPresent; ///

    return productionAlreadyNonCyclic;
  });

  return alreadyNonCyclicProductions;
}

function nonCyclicProductionFromComponent(component, productions, nonCyclicProductions) {
  var firstVertex = component.getFirstVertex(),
      firstVertexName = firstVertex.getName(),
      nonCyclicProductionName = firstVertexName,
      ///
  nonCyclicProduction = parserUtil.findProduction(nonCyclicProductionName, productions);

  nonCyclicProductions.push(nonCyclicProduction);
}

function nonCyclicProductionsFromComponent(component, productions, nonCyclicProductions) {
  productions = productionsFromComponent(component, productions); ///

  var fixedProductions = fixedProductionsFromProductions(productions),
      unitDefinitionProductions = unitDefinitionProductionsFromProductions(productions),
      removedProductions = [],
      addedProductions = [];

  var unitDefinitionProductionsLength = unitDefinitionProductions.length;

  while (unitDefinitionProductionsLength > 0) {
    var unitDefinitionProduction = unitDefinitionProductions.shift(),
        unitDefinitionProductionName = unitDefinitionProduction.getName();

    var removedProduction = unitDefinitionProduction;

    removedProductions.push(removedProduction);

    var unitDefinitionProductionUnitDefinitionProductionName = unitDefinitionProduction.getUnitDefinitionProductionName(),
        fixedProductionName = unitDefinitionProductionUnitDefinitionProductionName,
        ///
    addedProductionName = unitDefinitionProductionName,
        ///
    fixedProduction = parserUtil.findProduction(fixedProductionName, fixedProductions);

    var addedProduction = parserUtil.findProduction(addedProductionName, addedProductions);

    if (addedProduction === null) {
      addedProduction = Production.fromProduction(fixedProduction);

      addedProduction.setName(addedProductionName);

      addedProductions.push(addedProduction);
    } else {
      var fixedProductionDefinitions = fixedProduction.getDefinitions();

      addedProduction.addDefinitions(fixedProductionDefinitions);
    }

    var intermediateProductionName = unitDefinitionProductionUnitDefinitionProductionName,
        ///
    intermediateProduction = parserUtil.findProduction(intermediateProductionName, unitDefinitionProductions);

    if (intermediateProduction !== null) {
      var intermediateProductionUnitDefinitionProductionName = intermediateProduction.getUnitDefinitionProductionName(),
          _unitDefinitionProductionUnitDefinitionProductionName = intermediateProductionUnitDefinitionProductionName,
          ///
      unitDefinitionProductionNonCyclic = unitDefinitionProductionName !== _unitDefinitionProductionUnitDefinitionProductionName;

      if (unitDefinitionProductionNonCyclic) {
        unitDefinitionProduction = findUnitDefinitionProduction(unitDefinitionProductionName, _unitDefinitionProductionUnitDefinitionProductionName, removedProductions);

        if (unitDefinitionProduction === null) {
          unitDefinitionProduction = UnitDefinitionProduction.fromNameAndUnitDefinitionProductionName(unitDefinitionProductionName, _unitDefinitionProductionUnitDefinitionProductionName);

          unitDefinitionProductions.unshift(unitDefinitionProduction);
        }
      }
    }

    unitDefinitionProductionsLength = unitDefinitionProductions.length;
  }

  nonCyclicProductionsFromFixedAndAddedProductions(fixedProductions, addedProductions, nonCyclicProductions);
}

function nonCyclicProductionsFromFixedAndAddedProductions(fixedProductions, addedProductions, nonCyclicProductions) {
  fixedProductions.forEach(function (fixedProduction) {
    var nonCyclicProduction = fixedProduction,
        ///
    nonCyclicProductionName = nonCyclicProduction.getName(),
        addedProductionName = nonCyclicProductionName,
        ///
    addedProduction = parserUtil.findProduction(addedProductionName, addedProductions);

    if (addedProduction !== null) {
      var addedProductionDefinitions = addedProduction.getDefinitions();

      nonCyclicProduction.addDefinitions(addedProductionDefinitions);
    }

    nonCyclicProductions.push(nonCyclicProduction);
  });
}

function productionsFromComponent(component, productions) {
  productions = component.mapVertices(function (vertex) {
    var vertexName = vertex.getName(),
        productionName = vertexName,
        ///
    production = parserUtil.findProduction(productionName, productions);

    return production;
  });

  return productions;
}

function unitDefinitionProductionsFromProductions(productions) {
  var unitDefinitionProductions = productions.reduce(function (unitDefinitionProductions, production) {
    var name = production.getName(),
        unitDefinitionsProduction = UnitDefinitionsProduction.fromProduction(production);

    unitDefinitionsProduction.forEachUnitDefinition(function (unitDefinition) {
      var unitDefinitionProduction = UnitDefinitionProduction.fromNameAndUnitDefinition(name, unitDefinition);

      unitDefinitionProductions.push(unitDefinitionProduction);
    });

    return unitDefinitionProductions;
  }, []);

  return unitDefinitionProductions;
}

function fixedProductionsFromProductions(productions) {
  var fixedProductions = productions.map(function (production) {
    var nonUnitProduction = NonUnitDefinitionsProduction.fromProduction(production),
        fixedProduction = nonUnitProduction; ///

    return fixedProduction;
  });

  return fixedProductions;
}

function findUnitDefinitionProduction(productionName, unitDefinitionProductionName, unitDefinitionProductions) {
  var firstProductionName = productionName,
      ///
  secondProductionName = unitDefinitionProductionName; ///

  var foundUnitDefinitionProduction = null;

  unitDefinitionProductions.some(function (unitDefinitionProduction) {
    var unitDefinitionProductionFound = unitDefinitionProduction.isFoundByProductionNames(firstProductionName, secondProductionName);

    if (unitDefinitionProductionFound) {
      foundUnitDefinitionProduction = unitDefinitionProduction;

      return true;
    }
  });

  var unitDefinitionProduction = foundUnitDefinitionProduction; ///

  return unitDefinitionProduction;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2N5Y2xlcy5qcyJdLCJuYW1lcyI6WyJ0YXJqYW4iLCJyZXF1aXJlIiwicGFyc2VyVXRpbCIsIlByb2R1Y3Rpb24iLCJVbml0RGVmaW5pdGlvblByb2R1Y3Rpb24iLCJVbml0RGVmaW5pdGlvbnNQcm9kdWN0aW9uIiwiTm9uVW5pdERlZmluaXRpb25zUHJvZHVjdGlvbiIsIkdyYXBoIiwiY3ljbGVzIiwicHJvZHVjdGlvbnMiLCJncmFwaCIsImdyYXBoRnJvbVByb2R1Y3Rpb25zIiwiY29tcG9uZW50cyIsImdlbmVyYXRlQ29tcG9uZW50cyIsIm5vbkN5Y2xpY1Byb2R1Y3Rpb25zIiwibm9uQ3ljbGljUHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50cyIsImFscmVhZHlOb25DeWNsaWNQcm9kdWN0aW9ucyIsImFscmVhZHlOb25DeWNsaWNQcm9kdWN0aW9uc0Zyb21HcmFwaCIsIm1hcCIsInByb2R1Y3Rpb24iLCJwcm9kdWN0aW9uTmFtZSIsImdldE5hbWUiLCJub25DeWNsaWNQcm9kdWN0aW9uIiwiZmluZFByb2R1Y3Rpb24iLCJhbHJlYWR5Tm9uQ3ljbGljUHJvZHVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1bml0RGVmaW5pdGlvbnNQcm9kdWN0aW9ucyIsInVuaXREZWZpbml0aW9uc1Byb2R1Y3Rpb25zRnJvbVByb2R1Y3Rpb25zIiwiZ3JhcGhGcm9tVW5pdERlZmluaXRpb25zUHJvZHVjdGlvbnMiLCJyZWR1Y2UiLCJ1bml0RGVmaW5pdGlvbnNQcm9kdWN0aW9uIiwiZnJvbVByb2R1Y3Rpb24iLCJwdXNoIiwiZm9yRWFjaCIsInByb2R1Y3Rpb25OYW1lcyIsImdldFByb2R1Y3Rpb25OYW1lcyIsInZlcnRleE5hbWUiLCJkZXNjZW5kYW50VmVydGV4TmFtZXMiLCJhZGRWZXJ0ZXgiLCJjb21wb25lbnQiLCJjb21wb25lbnROb25DeWNsaWMiLCJpc05vbkN5Y2xpYyIsIm5vbkN5Y2xpY1Byb2R1Y3Rpb25Gcm9tQ29tcG9uZW50Iiwibm9uQ3ljbGljUHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50IiwiZmlsdGVyIiwidmVydGV4UHJlc2VudCIsImlzVmVydGV4UHJlc2VudCIsInByb2R1Y3Rpb25BbHJlYWR5Tm9uQ3ljbGljIiwiZmlyc3RWZXJ0ZXgiLCJnZXRGaXJzdFZlcnRleCIsImZpcnN0VmVydGV4TmFtZSIsIm5vbkN5Y2xpY1Byb2R1Y3Rpb25OYW1lIiwicHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50IiwiZml4ZWRQcm9kdWN0aW9ucyIsImZpeGVkUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMiLCJ1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25zIiwidW5pdERlZmluaXRpb25Qcm9kdWN0aW9uc0Zyb21Qcm9kdWN0aW9ucyIsInJlbW92ZWRQcm9kdWN0aW9ucyIsImFkZGVkUHJvZHVjdGlvbnMiLCJ1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25zTGVuZ3RoIiwibGVuZ3RoIiwidW5pdERlZmluaXRpb25Qcm9kdWN0aW9uIiwic2hpZnQiLCJ1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25OYW1lIiwicmVtb3ZlZFByb2R1Y3Rpb24iLCJ1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25Vbml0RGVmaW5pdGlvblByb2R1Y3Rpb25OYW1lIiwiZ2V0VW5pdERlZmluaXRpb25Qcm9kdWN0aW9uTmFtZSIsImZpeGVkUHJvZHVjdGlvbk5hbWUiLCJhZGRlZFByb2R1Y3Rpb25OYW1lIiwiZml4ZWRQcm9kdWN0aW9uIiwiYWRkZWRQcm9kdWN0aW9uIiwic2V0TmFtZSIsImZpeGVkUHJvZHVjdGlvbkRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJhZGREZWZpbml0aW9ucyIsImludGVybWVkaWF0ZVByb2R1Y3Rpb25OYW1lIiwiaW50ZXJtZWRpYXRlUHJvZHVjdGlvbiIsImludGVybWVkaWF0ZVByb2R1Y3Rpb25Vbml0RGVmaW5pdGlvblByb2R1Y3Rpb25OYW1lIiwidW5pdERlZmluaXRpb25Qcm9kdWN0aW9uTm9uQ3ljbGljIiwiZmluZFVuaXREZWZpbml0aW9uUHJvZHVjdGlvbiIsImZyb21OYW1lQW5kVW5pdERlZmluaXRpb25Qcm9kdWN0aW9uTmFtZSIsInVuc2hpZnQiLCJub25DeWNsaWNQcm9kdWN0aW9uc0Zyb21GaXhlZEFuZEFkZGVkUHJvZHVjdGlvbnMiLCJhZGRlZFByb2R1Y3Rpb25EZWZpbml0aW9ucyIsIm1hcFZlcnRpY2VzIiwidmVydGV4IiwibmFtZSIsImZvckVhY2hVbml0RGVmaW5pdGlvbiIsInVuaXREZWZpbml0aW9uIiwiZnJvbU5hbWVBbmRVbml0RGVmaW5pdGlvbiIsIm5vblVuaXRQcm9kdWN0aW9uIiwiZmlyc3RQcm9kdWN0aW9uTmFtZSIsInNlY29uZFByb2R1Y3Rpb25OYW1lIiwiZm91bmRVbml0RGVmaW5pdGlvblByb2R1Y3Rpb24iLCJzb21lIiwidW5pdERlZmluaXRpb25Qcm9kdWN0aW9uRm91bmQiLCJpc0ZvdW5kQnlQcm9kdWN0aW9uTmFtZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjs7QUFFQSxJQUFNQyxhQUFhRCxRQUFRLGdCQUFSLENBQW5CO0FBQUEsSUFDTUUsYUFBYUYsUUFBUSxzQkFBUixDQURuQjtBQUFBLElBRU1HLDJCQUEyQkgsUUFBUSw2QkFBUixDQUZqQztBQUFBLElBR01JLDRCQUE0QkosUUFBUSw4QkFBUixDQUhsQztBQUFBLElBSU1LLCtCQUErQkwsUUFBUSxpQ0FBUixDQUpyQzs7SUFNUU0sSyxHQUFVUCxNLENBQVZPLEs7O0lBRUZDLE07Ozs7Ozs7OEJBQ2FDLFcsRUFBYTtBQUM1QixVQUFNQyxRQUFRQyxxQkFBcUJGLFdBQXJCLENBQWQ7QUFBQSxVQUNNRyxhQUFhRixNQUFNRyxrQkFBTixFQURuQjtBQUFBLFVBRU1DLHVCQUF1QkMsbUNBQW1DSCxVQUFuQyxFQUErQ0gsV0FBL0MsQ0FGN0I7QUFBQSxVQUdNTyw4QkFBOEJDLHFDQUFxQ1AsS0FBckMsRUFBNENELFdBQTVDLENBSHBDOztBQUtBQSxvQkFBY0EsWUFBWVMs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QkFBaEM7O0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQVJEOztBQVVBLE1BQU1BLDJCQUEyQmdDLDZCQUFqQyxDQWhCNkcsQ0FnQjdDOztBQUVoRSxTQUFPaEMsd0JBQVA7QUFDRCIsImZpbGUiOiJjeWNsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHRhcmphbiA9IHJlcXVpcmUoJ29jY2FtLXRhcmphbicpO1xuXG5jb25zdCBwYXJzZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbC9wYXJzZXInKSxcbiAgICAgIFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuLi9jb21tb24vcHJvZHVjdGlvbicpLFxuICAgICAgVW5pdERlZmluaXRpb25Qcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL3VuaXREZWZpbml0aW9uJyksXG4gICAgICBVbml0RGVmaW5pdGlvbnNQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL3VuaXREZWZpbml0aW9ucycpLFxuICAgICAgTm9uVW5pdERlZmluaXRpb25zUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi9ub25Vbml0RGVmaW5pdGlvbnMnKTtcblxuY29uc3QgeyBHcmFwaCB9ID0gdGFyamFuO1xuXG5jbGFzcyBjeWNsZXMge1xuICBzdGF0aWMgZWxpbWluYXRlKHByb2R1Y3Rpb25zKSB7XG4gICAgY29uc3QgZ3JhcGggPSBncmFwaEZyb21Qcm9kdWN0aW9ucyhwcm9kdWN0aW9ucyksXG4gICAgICAgICAgY29tcG9uZW50cyA9IGdyYXBoLmdlbmVyYXRlQ29tcG9uZW50cygpLFxuICAgICAgICAgIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zID0gbm9uQ3ljbGljUHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50cyhjb21wb25lbnRzLCBwcm9kdWN0aW9ucyksXG4gICAgICAgICAgYWxyZWFkeU5vbkN5Y2xpY1Byb2R1Y3Rpb25zID0gYWxyZWFkeU5vbkN5Y2xpY1Byb2R1Y3Rpb25zRnJvbUdyYXBoKGdyYXBoLCBwcm9kdWN0aW9ucyk7XG5cbiAgICBwcm9kdWN0aW9ucyA9IHByb2R1Y3Rpb25zLm1hcChmdW5jdGlvbihwcm9kdWN0aW9uKSB7XG4gICAgICBjb25zdCBwcm9kdWN0aW9uTmFtZSA9IHByb2R1Y3Rpb24uZ2V0TmFtZSgpLFxuICAgICAgICAgICAgbm9uQ3ljbGljUHJvZHVjdGlvbiA9IHBhcnNlclV0aWwuZmluZFByb2R1Y3Rpb24ocHJvZHVjdGlvbk5hbWUsIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zKSxcbiAgICAgICAgICAgIGFscmVhZHlOb25DeWNsaWNQcm9kdWN0aW9uID0gcGFyc2VyVXRpbC5maW5kUHJvZHVjdGlvbihwcm9kdWN0aW9uTmFtZSwgYWxyZWFkeU5vbkN5Y2xpY1Byb2R1Y3Rpb25zKTtcblxuICAgICAgcHJvZHVjdGlvbiA9IG5vbkN5Y2xpY1Byb2R1Y3Rpb24gfHwgYWxyZWFkeU5vbkN5Y2xpY1Byb2R1Y3Rpb247IC8vL1xuXG4gICAgICByZXR1cm4gcHJvZHVjdGlvbjtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9kdWN0aW9ucztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGN5Y2xlcztcblxuZnVuY3Rpb24gZ3JhcGhGcm9tUHJvZHVjdGlvbnMocHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgdW5pdERlZmluaXRpb25zUHJvZHVjdGlvbnMgPSB1bml0RGVmaW5pdGlvbnNQcm9kdWN0aW9uc0Zyb21Qcm9kdWN0aW9ucyhwcm9kdWN0aW9ucyksXG4gICAgICAgIGdyYXBoID0gZ3JhcGhGcm9tVW5pdERlZmluaXRpb25zUHJvZHVjdGlvbnModW5pdERlZmluaXRpb25zUHJvZHVjdGlvbnMpO1xuXG4gIHJldHVybiBncmFwaDtcbn1cblxuZnVuY3Rpb24gdW5pdERlZmluaXRpb25zUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMocHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgdW5pdERlZmluaXRpb25zUHJvZHVjdGlvbnMgPSBwcm9kdWN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24odW5pdERlZmluaXRpb25zUHJvZHVjdGlvbnMsIHByb2R1Y3Rpb24pIHtcbiAgICBjb25zdCB1bml0RGVmaW5pdGlvbnNQcm9kdWN0aW9uID0gVW5pdERlZmluaXRpb25zUHJvZHVjdGlvbi5mcm9tUHJvZHVjdGlvbihwcm9kdWN0aW9uKTtcblxuICAgIGlmICh1bml0RGVmaW5pdGlvbnNQcm9kdWN0aW9uICE9PSBudWxsKSB7XG4gICAgICB1bml0RGVmaW5pdGlvbnNQcm9kdWN0aW9ucy5wdXNoKHVuaXREZWZpbml0aW9uc1Byb2R1Y3Rpb24pO1xuICAgIH1cblxuICAgIHJldHVybiB1bml0RGVmaW5pdGlvbnNQcm9kdWN0aW9ucztcbiAgfSwgW10pO1xuXG4gIHJldHVybiB1bml0RGVmaW5pdGlvbnNQcm9kdWN0aW9ucztcbn1cblxuZnVuY3Rpb24gZ3JhcGhGcm9tVW5pdERlZmluaXRpb25zUHJvZHVjdGlvbnModW5pdERlZmluaXRpb25zUHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgZ3JhcGggPSBuZXcgR3JhcGgoKTtcblxuICB1bml0RGVmaW5pdGlvbnNQcm9kdWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHVuaXREZWZpbml0aW9uc1Byb2R1Y3Rpb24pIHtcbiAgICBjb25zdCBwcm9kdWN0aW9uTmFtZSA9IHVuaXREZWZpbml0aW9uc1Byb2R1Y3Rpb24uZ2V0TmFtZSgpLFxuICAgICAgICAgIHByb2R1Y3Rpb25OYW1lcyA9IHVuaXREZWZpbml0aW9uc1Byb2R1Y3Rpb24uZ2V0UHJvZHVjdGlvbk5hbWVzKCksXG4gICAgICAgICAgdmVydGV4TmFtZSA9IHByb2R1Y3Rpb25OYW1lLCAgLy8vXG4gICAgICAgICAgZGVzY2VuZGFudFZlcnRleE5hbWVzID0gcHJvZHVjdGlvbk5hbWVzOyAvLy9cblxuICAgIGdyYXBoLmFkZFZlcnRleCh2ZXJ0ZXhOYW1lLCBkZXNjZW5kYW50VmVydGV4TmFtZXMpO1xuICB9KTtcblxuICByZXR1cm4gZ3JhcGg7XG59XG5cbmZ1bmN0aW9uIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zRnJvbUNvbXBvbmVudHMoY29tcG9uZW50cywgcHJvZHVjdGlvbnMpIHtcbiAgY29uc3Qgbm9uQ3ljbGljUHJvZHVjdGlvbnMgPSBjb21wb25lbnRzLnJlZHVjZShmdW5jdGlvbihub25DeWNsaWNQcm9kdWN0aW9ucywgY29tcG9uZW50KSB7XG4gICAgICAgICAgY29uc3QgY29tcG9uZW50Tm9uQ3ljbGljID0gY29tcG9uZW50LmlzTm9uQ3ljbGljKCk7XG5cbiAgICAgICAgICBpZiAoY29tcG9uZW50Tm9uQ3ljbGljKSB7XG4gICAgICAgICAgICBub25DeWNsaWNQcm9kdWN0aW9uRnJvbUNvbXBvbmVudChjb21wb25lbnQsIHByb2R1Y3Rpb25zLCBub25DeWNsaWNQcm9kdWN0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zRnJvbUNvbXBvbmVudChjb21wb25lbnQsIHByb2R1Y3Rpb25zLCBub25DeWNsaWNQcm9kdWN0aW9ucyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zO1xuICAgICAgICB9LCBbXSk7XG5cbiAgcmV0dXJuIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zO1xufVxuXG5mdW5jdGlvbiBhbHJlYWR5Tm9uQ3ljbGljUHJvZHVjdGlvbnNGcm9tR3JhcGgoZ3JhcGgsIHByb2R1Y3Rpb25zKSB7XG4gIGNvbnN0IGFscmVhZHlOb25DeWNsaWNQcm9kdWN0aW9ucyA9IHByb2R1Y3Rpb25zLmZpbHRlcihmdW5jdGlvbihwcm9kdWN0aW9uKSB7XG4gICAgY29uc3QgcHJvZHVjdGlvbk5hbWUgPSBwcm9kdWN0aW9uLmdldE5hbWUoKSxcbiAgICAgICAgICB2ZXJ0ZXhOYW1lID0gcHJvZHVjdGlvbk5hbWUsICAvLy9cbiAgICAgICAgICB2ZXJ0ZXhQcmVzZW50ID0gZ3JhcGguaXNWZXJ0ZXhQcmVzZW50KHZlcnRleE5hbWUpLFxuICAgICAgICAgIHByb2R1Y3Rpb25BbHJlYWR5Tm9uQ3ljbGljID0gIXZlcnRleFByZXNlbnQ7IC8vL1xuICAgIFxuICAgIHJldHVybiBwcm9kdWN0aW9uQWxyZWFkeU5vbkN5Y2xpYztcbiAgfSk7XG5cbiAgcmV0dXJuIGFscmVhZHlOb25DeWNsaWNQcm9kdWN0aW9ucztcbn1cblxuZnVuY3Rpb24gbm9uQ3ljbGljUHJvZHVjdGlvbkZyb21Db21wb25lbnQoY29tcG9uZW50LCBwcm9kdWN0aW9ucywgbm9uQ3ljbGljUHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgZmlyc3RWZXJ0ZXggPSBjb21wb25lbnQuZ2V0Rmlyc3RWZXJ0ZXgoKSxcbiAgICAgICAgZmlyc3RWZXJ0ZXhOYW1lID0gZmlyc3RWZXJ0ZXguZ2V0TmFtZSgpLFxuICAgICAgICBub25DeWNsaWNQcm9kdWN0aW9uTmFtZSA9IGZpcnN0VmVydGV4TmFtZSwgIC8vL1xuICAgICAgICBub25DeWNsaWNQcm9kdWN0aW9uID0gcGFyc2VyVXRpbC5maW5kUHJvZHVjdGlvbihub25DeWNsaWNQcm9kdWN0aW9uTmFtZSwgcHJvZHVjdGlvbnMpO1xuXG4gIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zLnB1c2gobm9uQ3ljbGljUHJvZHVjdGlvbik7XG59XG5cbmZ1bmN0aW9uIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zRnJvbUNvbXBvbmVudChjb21wb25lbnQsIHByb2R1Y3Rpb25zLCBub25DeWNsaWNQcm9kdWN0aW9ucykge1xuICBwcm9kdWN0aW9ucyA9IHByb2R1Y3Rpb25zRnJvbUNvbXBvbmVudChjb21wb25lbnQsIHByb2R1Y3Rpb25zKTsgLy8vXG5cbiAgY29uc3QgZml4ZWRQcm9kdWN0aW9ucyA9IGZpeGVkUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMocHJvZHVjdGlvbnMpLFxuICAgICAgICB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25zID0gdW5pdERlZmluaXRpb25Qcm9kdWN0aW9uc0Zyb21Qcm9kdWN0aW9ucyhwcm9kdWN0aW9ucyksXG4gICAgICAgIHJlbW92ZWRQcm9kdWN0aW9ucyA9IFtdLFxuICAgICAgICBhZGRlZFByb2R1Y3Rpb25zID0gW107XG5cbiAgbGV0IHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbnNMZW5ndGggPSB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25zLmxlbmd0aDtcblxuICB3aGlsZSAodW5pdERlZmluaXRpb25Qcm9kdWN0aW9uc0xlbmd0aCA+IDApIHtcbiAgICBsZXQgdW5pdERlZmluaXRpb25Qcm9kdWN0aW9uID0gdW5pdERlZmluaXRpb25Qcm9kdWN0aW9ucy5zaGlmdCgpLFxuICAgICAgICB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25OYW1lID0gdW5pdERlZmluaXRpb25Qcm9kdWN0aW9uLmdldE5hbWUoKTtcblxuICAgIGNvbnN0IHJlbW92ZWRQcm9kdWN0aW9uID0gdW5pdERlZmluaXRpb25Qcm9kdWN0aW9uO1xuXG4gICAgcmVtb3ZlZFByb2R1Y3Rpb25zLnB1c2gocmVtb3ZlZFByb2R1Y3Rpb24pO1xuXG4gICAgY29uc3QgdW5pdERlZmluaXRpb25Qcm9kdWN0aW9uVW5pdERlZmluaXRpb25Qcm9kdWN0aW9uTmFtZSA9IHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbi5nZXRVbml0RGVmaW5pdGlvblByb2R1Y3Rpb25OYW1lKCksXG4gICAgICAgICAgZml4ZWRQcm9kdWN0aW9uTmFtZSA9IHVuaXREZWZpbml0aW9uUHJvZHVjdGlvblVuaXREZWZpbml0aW9uUHJvZHVjdGlvbk5hbWUsICAvLy9cbiAgICAgICAgICBhZGRlZFByb2R1Y3Rpb25OYW1lID0gdW5pdERlZmluaXRpb25Qcm9kdWN0aW9uTmFtZSwgIC8vL1xuICAgICAgICAgIGZpeGVkUHJvZHVjdGlvbiA9IHBhcnNlclV0aWwuZmluZFByb2R1Y3Rpb24oZml4ZWRQcm9kdWN0aW9uTmFtZSwgZml4ZWRQcm9kdWN0aW9ucyk7XG5cbiAgICBsZXQgYWRkZWRQcm9kdWN0aW9uID0gcGFyc2VyVXRpbC5maW5kUHJvZHVjdGlvbihhZGRlZFByb2R1Y3Rpb25OYW1lLCBhZGRlZFByb2R1Y3Rpb25zKTtcblxuICAgIGlmIChhZGRlZFByb2R1Y3Rpb24gPT09IG51bGwpIHtcbiAgICAgIGFkZGVkUHJvZHVjdGlvbiA9IFByb2R1Y3Rpb24uZnJvbVByb2R1Y3Rpb24oZml4ZWRQcm9kdWN0aW9uKTtcblxuICAgICAgYWRkZWRQcm9kdWN0aW9uLnNldE5hbWUoYWRkZWRQcm9kdWN0aW9uTmFtZSk7XG5cbiAgICAgIGFkZGVkUHJvZHVjdGlvbnMucHVzaChhZGRlZFByb2R1Y3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmaXhlZFByb2R1Y3Rpb25EZWZpbml0aW9ucyA9IGZpeGVkUHJvZHVjdGlvbi5nZXREZWZpbml0aW9ucygpO1xuXG4gICAgICBhZGRlZFByb2R1Y3Rpb24uYWRkRGVmaW5pdGlvbnMoZml4ZWRQcm9kdWN0aW9uRGVmaW5pdGlvbnMpO1xuICAgIH1cblxuICAgIGNvbnN0IGludGVybWVkaWF0ZVByb2R1Y3Rpb25OYW1lID0gdW5pdERlZmluaXRpb25Qcm9kdWN0aW9uVW5pdERlZmluaXRpb25Qcm9kdWN0aW9uTmFtZSwgLy8vXG4gICAgICAgICAgaW50ZXJtZWRpYXRlUHJvZHVjdGlvbiA9IHBhcnNlclV0aWwuZmluZFByb2R1Y3Rpb24oaW50ZXJtZWRpYXRlUHJvZHVjdGlvbk5hbWUsIHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbnMpO1xuXG4gICAgaWYgKGludGVybWVkaWF0ZVByb2R1Y3Rpb24gIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGludGVybWVkaWF0ZVByb2R1Y3Rpb25Vbml0RGVmaW5pdGlvblByb2R1Y3Rpb25OYW1lID0gaW50ZXJtZWRpYXRlUHJvZHVjdGlvbi5nZXRVbml0RGVmaW5pdGlvblByb2R1Y3Rpb25OYW1lKCksXG4gICAgICAgICAgICB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25Vbml0RGVmaW5pdGlvblByb2R1Y3Rpb25OYW1lID0gaW50ZXJtZWRpYXRlUHJvZHVjdGlvblVuaXREZWZpbml0aW9uUHJvZHVjdGlvbk5hbWUsICAvLy9cbiAgICAgICAgICAgIHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbk5vbkN5Y2xpYyA9ICh1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25OYW1lICE9PSB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25Vbml0RGVmaW5pdGlvblByb2R1Y3Rpb25OYW1lKTtcblxuICAgICAgaWYgKHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbk5vbkN5Y2xpYykge1xuICAgICAgICB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb24gPSBmaW5kVW5pdERlZmluaXRpb25Qcm9kdWN0aW9uKHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbk5hbWUsIHVuaXREZWZpbml0aW9uUHJvZHVjdGlvblVuaXREZWZpbml0aW9uUHJvZHVjdGlvbk5hbWUsIHJlbW92ZWRQcm9kdWN0aW9ucyk7XG5cbiAgICAgICAgaWYgKHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgIHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbiA9IFVuaXREZWZpbml0aW9uUHJvZHVjdGlvbi5mcm9tTmFtZUFuZFVuaXREZWZpbml0aW9uUHJvZHVjdGlvbk5hbWUodW5pdERlZmluaXRpb25Qcm9kdWN0aW9uTmFtZSwgdW5pdERlZmluaXRpb25Qcm9kdWN0aW9uVW5pdERlZmluaXRpb25Qcm9kdWN0aW9uTmFtZSk7XG5cbiAgICAgICAgICB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25zLnVuc2hpZnQodW5pdERlZmluaXRpb25Qcm9kdWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbnNMZW5ndGggPSB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25zLmxlbmd0aDtcbiAgfVxuXG4gIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zRnJvbUZpeGVkQW5kQWRkZWRQcm9kdWN0aW9ucyhmaXhlZFByb2R1Y3Rpb25zLCBhZGRlZFByb2R1Y3Rpb25zLCBub25DeWNsaWNQcm9kdWN0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIG5vbkN5Y2xpY1Byb2R1Y3Rpb25zRnJvbUZpeGVkQW5kQWRkZWRQcm9kdWN0aW9ucyhmaXhlZFByb2R1Y3Rpb25zLCBhZGRlZFByb2R1Y3Rpb25zLCBub25DeWNsaWNQcm9kdWN0aW9ucykge1xuICBmaXhlZFByb2R1Y3Rpb25zLmZvckVhY2goZnVuY3Rpb24oZml4ZWRQcm9kdWN0aW9uKSB7XG4gICAgY29uc3Qgbm9uQ3ljbGljUHJvZHVjdGlvbiA9IGZpeGVkUHJvZHVjdGlvbiwgLy8vXG4gICAgICAgICAgbm9uQ3ljbGljUHJvZHVjdGlvbk5hbWUgPSBub25DeWNsaWNQcm9kdWN0aW9uLmdldE5hbWUoKSxcbiAgICAgICAgICBhZGRlZFByb2R1Y3Rpb25OYW1lID0gbm9uQ3ljbGljUHJvZHVjdGlvbk5hbWUsIC8vL1xuICAgICAgICAgIGFkZGVkUHJvZHVjdGlvbiA9IHBhcnNlclV0aWwuZmluZFByb2R1Y3Rpb24oYWRkZWRQcm9kdWN0aW9uTmFtZSwgYWRkZWRQcm9kdWN0aW9ucyk7XG5cbiAgICBpZiAoYWRkZWRQcm9kdWN0aW9uICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBhZGRlZFByb2R1Y3Rpb25EZWZpbml0aW9ucyA9IGFkZGVkUHJvZHVjdGlvbi5nZXREZWZpbml0aW9ucygpO1xuXG4gICAgICBub25DeWNsaWNQcm9kdWN0aW9uLmFkZERlZmluaXRpb25zKGFkZGVkUHJvZHVjdGlvbkRlZmluaXRpb25zKTtcbiAgICB9XG5cbiAgICBub25DeWNsaWNQcm9kdWN0aW9ucy5wdXNoKG5vbkN5Y2xpY1Byb2R1Y3Rpb24pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50KGNvbXBvbmVudCwgcHJvZHVjdGlvbnMpIHtcbiAgcHJvZHVjdGlvbnMgPSBjb21wb25lbnQubWFwVmVydGljZXMoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgY29uc3QgdmVydGV4TmFtZSA9IHZlcnRleC5nZXROYW1lKCksXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWUgPSB2ZXJ0ZXhOYW1lLCAgLy8vXG4gICAgICAgICAgcHJvZHVjdGlvbiA9IHBhcnNlclV0aWwuZmluZFByb2R1Y3Rpb24ocHJvZHVjdGlvbk5hbWUsIHByb2R1Y3Rpb25zKTtcblxuICAgIHJldHVybiBwcm9kdWN0aW9uO1xuICB9KTtcblxuICByZXR1cm4gcHJvZHVjdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMocHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgdW5pdERlZmluaXRpb25Qcm9kdWN0aW9ucyA9IHByb2R1Y3Rpb25zLnJlZHVjZShmdW5jdGlvbih1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25zLCBwcm9kdWN0aW9uKSB7XG4gICAgY29uc3QgbmFtZSA9IHByb2R1Y3Rpb24uZ2V0TmFtZSgpLFxuICAgICAgICAgIHVuaXREZWZpbml0aW9uc1Byb2R1Y3Rpb24gPSBVbml0RGVmaW5pdGlvbnNQcm9kdWN0aW9uLmZyb21Qcm9kdWN0aW9uKHByb2R1Y3Rpb24pO1xuXG4gICAgdW5pdERlZmluaXRpb25zUHJvZHVjdGlvbi5mb3JFYWNoVW5pdERlZmluaXRpb24oZnVuY3Rpb24odW5pdERlZmluaXRpb24pIHtcbiAgICAgIGNvbnN0IHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbiA9IFVuaXREZWZpbml0aW9uUHJvZHVjdGlvbi5mcm9tTmFtZUFuZFVuaXREZWZpbml0aW9uKG5hbWUsIHVuaXREZWZpbml0aW9uKTtcblxuICAgICAgdW5pdERlZmluaXRpb25Qcm9kdWN0aW9ucy5wdXNoKHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdW5pdERlZmluaXRpb25Qcm9kdWN0aW9ucztcbiAgfSwgW10pO1xuXG4gIHJldHVybiB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25zO1xufVxuXG5mdW5jdGlvbiBmaXhlZFByb2R1Y3Rpb25zRnJvbVByb2R1Y3Rpb25zKHByb2R1Y3Rpb25zKSB7XG4gIGNvbnN0IGZpeGVkUHJvZHVjdGlvbnMgPSBwcm9kdWN0aW9ucy5tYXAoZnVuY3Rpb24ocHJvZHVjdGlvbikge1xuICAgIGNvbnN0IG5vblVuaXRQcm9kdWN0aW9uID0gTm9uVW5pdERlZmluaXRpb25zUHJvZHVjdGlvbi5mcm9tUHJvZHVjdGlvbihwcm9kdWN0aW9uKSxcbiAgICAgICAgICBmaXhlZFByb2R1Y3Rpb24gPSBub25Vbml0UHJvZHVjdGlvbjsgLy8vXG4gICAgXG4gICAgcmV0dXJuIGZpeGVkUHJvZHVjdGlvbjtcbiAgfSk7XG4gIFxuICByZXR1cm4gZml4ZWRQcm9kdWN0aW9ucztcbn1cblxuZnVuY3Rpb24gZmluZFVuaXREZWZpbml0aW9uUHJvZHVjdGlvbihwcm9kdWN0aW9uTmFtZSwgdW5pdERlZmluaXRpb25Qcm9kdWN0aW9uTmFtZSwgdW5pdERlZmluaXRpb25Qcm9kdWN0aW9ucykge1xuICBjb25zdCBmaXJzdFByb2R1Y3Rpb25OYW1lID0gcHJvZHVjdGlvbk5hbWUsIC8vL1xuICAgICAgICBzZWNvbmRQcm9kdWN0aW9uTmFtZSA9IHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbk5hbWU7ICAvLy9cblxuICBsZXQgZm91bmRVbml0RGVmaW5pdGlvblByb2R1Y3Rpb24gPSBudWxsO1xuXG4gIHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbnMuc29tZShmdW5jdGlvbih1bml0RGVmaW5pdGlvblByb2R1Y3Rpb24pIHtcbiAgICBjb25zdCB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb25Gb3VuZCA9IHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbi5pc0ZvdW5kQnlQcm9kdWN0aW9uTmFtZXMoZmlyc3RQcm9kdWN0aW9uTmFtZSwgc2Vjb25kUHJvZHVjdGlvbk5hbWUpO1xuXG4gICAgaWYgKHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbkZvdW5kKSB7XG4gICAgICBmb3VuZFVuaXREZWZpbml0aW9uUHJvZHVjdGlvbiA9IHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbjtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCB1bml0RGVmaW5pdGlvblByb2R1Y3Rpb24gPSBmb3VuZFVuaXREZWZpbml0aW9uUHJvZHVjdGlvbjsgLy8vXG5cbiAgcmV0dXJuIHVuaXREZWZpbml0aW9uUHJvZHVjdGlvbjtcbn1cbiJdfQ==