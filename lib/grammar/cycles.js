'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tarjan = require('occam-tarjan');

var parserUtil = require('../util/parser'),
    Production = require('../bnf/production'),
    UnitDefinitionProduction = require('./production/unitDefinition'),
    UnitDefinitionsProduction = require('./production/unitDefinitions'),
    NonUnitDefinitionsProduction = require('./production/nonUnitDefinitions');

var Graph = tarjan.Graph;

var cycles = function () {
  function cycles() {
    _classCallCheck(this, cycles);
  }

  _createClass(cycles, null, [{
    key: 'eliminate',
    value: function eliminate(productions) {
      var graph = graphFromProductions(productions),
          components = graph.generateComponents(),
          nonCyclicProductions = nonCyclicProductionsFromComponents(components, productions);

      productions = productions.map(function (production) {
        var productionName = production.getName(),
            nonCyclicProductionName = productionName,
            ///
        alreadyNonCyclicProductionName = productionName,
            ///
        nonCyclicProduction = parserUtil.findProduction(nonCyclicProductionName, nonCyclicProductions),
            alreadyNonCyclicProduction = parserUtil.findProduction(alreadyNonCyclicProductionName, productions); ///

        production = nonCyclicProduction || alreadyNonCyclicProduction; ///

        return production;
      });

      return productions;
    }
  }]);

  return cycles;
}();

module.exports = cycles;

function graphFromProductions(productions) {
  var graph = new Graph(),
      unitDefinitionsProductions = unitDefinitionsProductionsFromProductions(productions);

  unitDefinitionsProductions.forEach(function (unitDefinitionsProduction) {
    var productionName = unitDefinitionsProduction.getName(),
        productionNames = unitDefinitionsProduction.getProductionNames(),
        unitDefinitionProductionNames = unitDefinitionProductionNamesFromProductionNames(productionNames, unitDefinitionsProductions),
        vertexName = productionName,
        ///
    descendantVertexNames = unitDefinitionProductionNames; ///

    graph.addVertex(vertexName, descendantVertexNames);
  });

  return graph;
}

function unitDefinitionsProductionsFromProductions(productions) {
  var unitDefinitionsProductions = productions.reduce(function (unitDefinitionsProductions, production) {
    var unitDefinitionsProduction = UnitDefinitionsProduction.fromProduction(production);

    if (unitDefinitionsProduction !== null) {
      unitDefinitionsProductions.push(unitDefinitionsProduction);
    }

    return unitDefinitionsProductions;
  }, []);

  return unitDefinitionsProductions;
}

function unitDefinitionProductionNamesFromProductionNames(productionNames, unitDefinitionProductions) {
  var unitDefinitionProductionNames = productionNames.reduce(function (unitDefinitionProductionNames, productionName) {
    var unitDefinitionProductionName = productionName,
        ///
    unitDefinitionProduction = parserUtil.findProduction(unitDefinitionProductionName, unitDefinitionProductions);

    if (unitDefinitionProduction !== null) {
      var _unitDefinitionProductionName = productionName; ///

      unitDefinitionProductionNames.push(_unitDefinitionProductionName);
    }

    return unitDefinitionProductionNames;
  }, []);

  return unitDefinitionProductionNames;
}

function nonCyclicProductionsFromComponents(components, productions) {
  var nonCyclicProductions = components.reduce(function (nonCyclicProductions, component) {
    var componentNonCyclic = component.isNonCyclic();

    if (componentNonCyclic) {
      nonCyclicProductionFromComponent(component, productions, nonCyclicProductions);
    } else {
      nonCyclicProductionsFromComponent(component, productions, nonCyclicProductions);
    }

    return nonCyclicProductions;
  }, []);

  return nonCyclicProductions;
}

function nonCyclicProductionFromComponent(component, productions, nonCyclicProductions) {
  var firstVertex = component.getFirstVertex(),
      firstVertexName = firstVertex.getName(),
      nonCyclicProductionName = firstVertexName,
      ///
  nonCyclicProduction = parserUtil.findProduction(nonCyclicProductionName, productions);

  if (nonCyclicProduction !== null) {
    ///
    nonCyclicProductions.push(nonCyclicProduction);
  }
}

function nonCyclicProductionsFromComponent(component, productions, nonCyclicProductions) {
  var unitDefinitionProductions = unitDefinitionProductionsFromComponent(component, productions),
      fixedNonUnitDefinitionsProductions = fixedNonUnitDefinitionsProductionsFromProductions(productions),
      addedNonUnitDefinitionsProductions = [],
      removedUnitDefinitionProductions = [];

  var unitDefinitionProductionsLength = unitDefinitionProductions.length;

  while (unitDefinitionProductionsLength > 0) {
    var unitDefinitionProduction = unitDefinitionProductions.shift(),
        unitDefinitionProductionName = unitDefinitionProduction.getName();

    var removedUnitDefinitionProduction = unitDefinitionProduction; ///

    removedUnitDefinitionProductions.push(removedUnitDefinitionProduction);

    var unitDefinitionProductionUnitDefinitionProductionName = unitDefinitionProduction.getUnitDefinitionProductionName(),
        fixedNonUnitDefinitionsProductionName = unitDefinitionProductionUnitDefinitionProductionName,
        ///
    fixedNonUnitDefinitionsProduction = parserUtil.findProduction(fixedNonUnitDefinitionsProductionName, fixedNonUnitDefinitionsProductions),
        addedNonUnitDefinitionsProductionName = unitDefinitionProductionName; ///

    var addedNonUnitDefinitionsProduction = parserUtil.findProduction(addedNonUnitDefinitionsProductionName, addedNonUnitDefinitionsProductions);

    if (addedNonUnitDefinitionsProduction === null) {
      addedNonUnitDefinitionsProduction = Production.fromProduction(fixedNonUnitDefinitionsProduction);

      addedNonUnitDefinitionsProduction.setName(addedNonUnitDefinitionsProductionName);

      addedNonUnitDefinitionsProductions.push(addedNonUnitDefinitionsProduction);
    } else {
      var fixedNonUnitDefinitionsProductionDefinitions = fixedNonUnitDefinitionsProduction.getDefinitions();

      addedNonUnitDefinitionsProduction.addDefinitions(fixedNonUnitDefinitionsProductionDefinitions);
    }

    var intermediateUnitDefinitionProductionName = unitDefinitionProductionUnitDefinitionProductionName,
        ///
    intermediateUnitDefinitionProduction = parserUtil.findProduction(intermediateUnitDefinitionProductionName, unitDefinitionProductions);

    if (intermediateUnitDefinitionProduction !== null) {
      var intermediateUnitDefinitionProductionUnitDefinitionProductionName = intermediateUnitDefinitionProduction.getUnitDefinitionProductionName(),
          firstProductionName = unitDefinitionProductionName,
          ///
      secondProductionName = intermediateUnitDefinitionProductionUnitDefinitionProductionName,
          ///
      unitDefinitionProductionNonCyclic = firstProductionName !== secondProductionName;

      if (unitDefinitionProductionNonCyclic) {
        unitDefinitionProduction = findUnitDefinitionProduction(firstProductionName, secondProductionName, removedUnitDefinitionProductions);

        if (unitDefinitionProduction === null) {
          unitDefinitionProduction = UnitDefinitionProduction.fromProductionNames(firstProductionName, secondProductionName);

          unitDefinitionProductions.unshift(unitDefinitionProduction);
        }
      }
    }

    unitDefinitionProductionsLength = unitDefinitionProductions.length;
  }

  nonCyclicProductionsFromFixedAndAddedProductions(fixedNonUnitDefinitionsProductions, addedNonUnitDefinitionsProductions, nonCyclicProductions);
}

function nonCyclicProductionsFromFixedAndAddedProductions(fixedNonUnitDefinitionsProductions, addedNonUnitDefinitionsProductions, nonCyclicProductions) {
  fixedNonUnitDefinitionsProductions.forEach(function (fixedNonUnitDefinitionsProduction) {
    var nonCyclicProduction = fixedNonUnitDefinitionsProduction,
        ///
    nonCyclicProductionName = nonCyclicProduction.getName(),
        addedNonUnitDefinitionsProductionName = nonCyclicProductionName,
        ///
    addedNonUnitDefinitionsProduction = parserUtil.findProduction(addedNonUnitDefinitionsProductionName, addedNonUnitDefinitionsProductions);

    if (addedNonUnitDefinitionsProduction !== null) {
      var addedNonUnitDefinitionsProductionDefinitions = addedNonUnitDefinitionsProduction.getDefinitions();

      nonCyclicProduction.addDefinitions(addedNonUnitDefinitionsProductionDefinitions);
    }

    var nonCyclicProductionDefinitionsExist = nonCyclicProduction.doDefinitionsExist();

    if (nonCyclicProductionDefinitionsExist) {
      nonCyclicProductions.push(nonCyclicProduction);
    }
  });
}

function unitDefinitionProductionsFromComponent(component, productions, nonCyclicProductions) {
  var unitDefinitionsProductions = unitDefinitionsProductionsFromComponent(component, productions),
      unitDefinitionProductions = unitDefinitionProductionsFromUnitDefinitionsProductions(unitDefinitionsProductions);

  return unitDefinitionProductions;
}

function unitDefinitionsProductionsFromComponent(component, productions) {
  var unitDefinitionsProductions = component.mapVertices(function (vertex) {
    var vertexName = vertex.getName(),
        productionName = vertexName,
        ///
    production = parserUtil.findProduction(productionName, productions),
        unitDefinitionsProduction = UnitDefinitionsProduction.fromProduction(production);

    return unitDefinitionsProduction;
  });

  return unitDefinitionsProductions;
}

function fixedNonUnitDefinitionsProductionsFromProductions(productions) {
  var fixedNonUnitDefinitionsProductions = productions.map(function (production) {
    var nonUnitDefinitionsProduction = NonUnitDefinitionsProduction.fromProduction(production),
        fixedNonUnitDefinitionsProduction = nonUnitDefinitionsProduction; ///

    return fixedNonUnitDefinitionsProduction;
  });

  return fixedNonUnitDefinitionsProductions;
}

function unitDefinitionProductionsFromUnitDefinitionsProductions(unitDefinitionsProductions) {
  var unitDefinitionProductions = unitDefinitionsProductions.reduce(function (unitDefinitionProductions, unitDefinitionsProduction) {
    var unitDefinitionsProductionName = unitDefinitionsProduction.getName();

    unitDefinitionsProduction.forEachUnitDefinition(function (unitDefinition) {
      var name = unitDefinitionsProductionName,
          ///
      unitDefinitionProduction = UnitDefinitionProduction.fromNameAndUnitDefinition(name, unitDefinition);

      unitDefinitionProductions.push(unitDefinitionProduction);
    });

    return unitDefinitionProductions;
  }, []);

  return unitDefinitionProductions;
}

function findUnitDefinitionProduction(firstProductionName, secondProductionName, unitDefinitionProductions) {
  var foundUnitDefinitionProduction = null;

  unitDefinitionProductions.some(function (unitDefinitionProduction) {
    var unitDefinitionProductionFound = unitDefinitionProduction.isFoundByProductionNames(firstProductionName, secondProductionName);

    if (unitDefinitionProductionFound) {
      foundUnitDefinitionProduction = unitDefinitionProduction;

      return true;
    }
  });

  var unitDefinitionProduction = foundUnitDefinitionProduction; ///

  return unitDefinitionProduction;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,