'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RightRecursiveProduction = require('./production/rightRecursive'),
    NonLeftRecursiveProduction = require('./production/nonLeftRecursive'),
    NonImplicitlyLeftRecursiveProduction = require('./production/nonImplicitlyLeftRecursive');

var leftRecursion = function () {
  function leftRecursion() {
    _classCallCheck(this, leftRecursion);
  }

  _createClass(leftRecursion, null, [{
    key: 'eliminate',
    value: function eliminate(productions) {
      var nonLeftRecursiveProductions = [],
          rightRecursiveProductions = [];

      productions.forEach(function (production, index) {
        var begin = 0,
            end = index,
            ///
        previousNonLeftRecursiveProductions = nonLeftRecursiveProductions.slice(begin, end),
            previousProductions = previousNonLeftRecursiveProductions,
            ///
        productionImplicitlyLeftRecursive = production.isImplicitlyLeftRecursive(previousProductions);

        if (productionImplicitlyLeftRecursive) {
          var nonImplicitlyLeftRecursiveProduction = NonImplicitlyLeftRecursiveProduction.fromProductionAndPreviousProductions(production, previousProductions);

          production = nonImplicitlyLeftRecursiveProduction; ///
        }

        var productionLeftRecursive = production.isLeftRecursive();

        if (productionLeftRecursive) {
          var nonLeftRecursiveProduction = NonLeftRecursiveProduction.fromProduction(production),
              rightRecursiveProduction = RightRecursiveProduction.fromProduction(production);

          nonLeftRecursiveProductions.push(nonLeftRecursiveProduction);

          rightRecursiveProductions.push(rightRecursiveProduction);
        } else {
          var _nonLeftRecursiveProduction = production; ///

          nonLeftRecursiveProductions.push(_nonLeftRecursiveProduction);
        }
      });

      productions = [].concat(nonLeftRecursiveProductions).concat(rightRecursiveProductions);

      return productions;
    }
  }]);

  return leftRecursion;
}();

module.exports = leftRecursion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2xlZnRSZWN1cnNpb24uanMiXSwibmFtZXMiOlsiUmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uIiwicmVxdWlyZSIsIk5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uIiwiTm9uSW1wbGljaXRseUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uIiwibGVmdFJlY3Vyc2lvbiIsInByb2R1Y3Rpb25zIiwibm9uTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb25zIiwicmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9ucyIsImZvckVhY2giLCJwcm9kdWN0aW9uIiwiaW5kZXgiLCJiZWdpbiIsImVuZCIsInByZXZpb3VzTm9uTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb25zIiwic2xpY2UiLCJwcmV2aW91c1Byb2R1Y3Rpb25zIiwicHJvZHVjdGlvbkltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlIiwiaXNJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZSIsIm5vbkltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiIsImZyb21Qcm9kdWN0aW9uQW5kUHJldmlvdXNQcm9kdWN0aW9ucyIsInByb2R1Y3Rpb25MZWZ0UmVjdXJzaXZlIiwiaXNMZWZ0UmVjdXJzaXZlIiwibm9uTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJmcm9tUHJvZHVjdGlvbiIsInJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbiIsInB1c2giLCJjb25jYXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsMkJBQTJCQyxRQUFRLDZCQUFSLENBQWpDO0FBQUEsSUFDTUMsNkJBQTZCRCxRQUFRLCtCQUFSLENBRG5DO0FBQUEsSUFFTUUsdUNBQXVDRixRQUFRLHlDQUFSLENBRjdDOztJQUlNRyxhOzs7Ozs7OzhCQUNhQyxXLEVBQWE7QUFDNUIsVUFBTUMsOEJBQThCLEVBQXBDO0FBQUEsVUFDTUMsNEJBQTRCLEVBRGxDOztBQUdBRixrQkFBWUcsT0FBWixDQUFvQixVQUFTQyxVQUFULEVBQXFCQyxLQUFyQixFQUE0QjtBQUM5QyxZQUFNQyxRQUFRLENBQWQ7QUFBQSxZQUNNQyxNQUFNRixLQURaO0FBQUEsWUFDb0I7QUFDZEcsOENBQXNDUCw0QkFBNEJRLEtBQTVCLENBQWtDSCxLQUFsQyxFQUF5Q0MsR0FBekMsQ0FGNUM7QUFBQSxZQUdNRyxzQkFBc0JGLG1DQUg1QjtBQUFBLFlBR2tFO0FBQzVERyw0Q0FBb0NQLFdBQVdRLHlCQUFYLENBQXFDRixtQkFBckMsQ0FKMUM7O0FBTUEsWUFBSUMsaUNBQUosRUFBdUM7QUFDckMsY0FBTUUsdUNBQXVDZixxQ0FBcUNnQixvQ0FBckMsQ0FBMEVWLFVBQTFFLEVBQXNGTSxtQkFBdEYsQ0FBN0M7O0FBRUFOLHVCQUFhUyxvQ0FBYixDQUhxQyxDQUdlO0FBQ3JEOztBQUVELFlBQU1FLDBCQUEwQlgsV0FBV1ksZUFBWCxFQUFoQzs7QUFFQSxZQUFJRCx1QkFBSixFQUE2QjtBQUMzQixjQUFNRSw2QkFBNkJwQiwyQkFBMkJxQixjQUEzQixDQUEwQ2QsVUFBMUMsQ0FBbkM7QUFBQSxjQUNNZSwyQkFBMkJ4Qix5QkFBeUJ1QixjQUF6QixDQUF3Q2QsVUFBeEMsQ0FEakM7O0FBR0FILHNDQUE0Qm1CLElBQTVCLENBQWlDSCwwQkFBakM7O0FBRUFmLG9DQUEwQmtCLElBQTFCLENBQStCRCx3QkFBL0I7QUFDRCxTQVBELE1BT087QUFDTCxjQUFNRiw4QkFBNkJiLFVBQW5DLENBREssQ0FDMkM7O0FBRWhESCxzQ0FBNEJtQixJQUE1QixDQUFpQ0gsMkJBQWpDO0FBQ0Q7QUFDRixPQTNCRDs7QUE2QkFqQixvQkFBYyxHQUFHcUIsTUFBSCxDQUFVcEIsMkJBQVYsRUFBdUNvQixNQUF2QyxDQUE4Q25CLHlCQUE5QyxDQUFkOztBQUVBLGFBQU9GLFdBQVA7QUFDRDs7Ozs7O0FBR0hzQixPQUFPQyxPQUFQLEdBQWlCeEIsYUFBakIiLCJmaWxlIjoibGVmdFJlY3Vyc2lvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL3JpZ2h0UmVjdXJzaXZlJyksXG4gICAgICBOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi9ub25MZWZ0UmVjdXJzaXZlJyksXG4gICAgICBOb25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vbm9uSW1wbGljaXRseUxlZnRSZWN1cnNpdmUnKTtcblxuY2xhc3MgbGVmdFJlY3Vyc2lvbiB7XG4gIHN0YXRpYyBlbGltaW5hdGUocHJvZHVjdGlvbnMpIHtcbiAgICBjb25zdCBub25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMgPSBbXSxcbiAgICAgICAgICByaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb25zID0gW107XG5cbiAgICBwcm9kdWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHByb2R1Y3Rpb24sIGluZGV4KSB7XG4gICAgICBjb25zdCBiZWdpbiA9IDAsXG4gICAgICAgICAgICBlbmQgPSBpbmRleCwgIC8vL1xuICAgICAgICAgICAgcHJldmlvdXNOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMgPSBub25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMuc2xpY2UoYmVnaW4sIGVuZCksXG4gICAgICAgICAgICBwcmV2aW91c1Byb2R1Y3Rpb25zID0gcHJldmlvdXNOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMsICAvLy9cbiAgICAgICAgICAgIHByb2R1Y3Rpb25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZSA9IHByb2R1Y3Rpb24uaXNJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZShwcmV2aW91c1Byb2R1Y3Rpb25zKTtcblxuICAgICAgaWYgKHByb2R1Y3Rpb25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZSkge1xuICAgICAgICBjb25zdCBub25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gPSBOb25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24uZnJvbVByb2R1Y3Rpb25BbmRQcmV2aW91c1Byb2R1Y3Rpb25zKHByb2R1Y3Rpb24sIHByZXZpb3VzUHJvZHVjdGlvbnMpO1xuXG4gICAgICAgIHByb2R1Y3Rpb24gPSBub25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb247ICAvLy9cbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvZHVjdGlvbkxlZnRSZWN1cnNpdmUgPSBwcm9kdWN0aW9uLmlzTGVmdFJlY3Vyc2l2ZSgpO1xuXG4gICAgICBpZiAocHJvZHVjdGlvbkxlZnRSZWN1cnNpdmUpIHtcbiAgICAgICAgY29uc3Qgbm9uTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gPSBOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbi5mcm9tUHJvZHVjdGlvbihwcm9kdWN0aW9uKSxcbiAgICAgICAgICAgICAgcmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uID0gUmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uLmZyb21Qcm9kdWN0aW9uKHByb2R1Y3Rpb24pO1xuXG4gICAgICAgIG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9ucy5wdXNoKG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKTtcblxuICAgICAgICByaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb25zLnB1c2gocmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uID0gcHJvZHVjdGlvbjsgIC8vL1xuXG4gICAgICAgIG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9ucy5wdXNoKG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHByb2R1Y3Rpb25zID0gW10uY29uY2F0KG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9ucykuY29uY2F0KHJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbnMpO1xuXG4gICAgcmV0dXJuIHByb2R1Y3Rpb25zO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGVmdFJlY3Vyc2lvbjtcbiJdfQ==