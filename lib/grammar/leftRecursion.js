'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LeftRecursiveProduction = require('./production/leftRecursive'),
    RightRecursiveProduction = require('./production/rightRecursive'),
    NonLeftRecursiveProduction = require('./production/nonLeftRecursive'),
    ImplicitlyLeftRecursiveProduction = require('./production/implicitlyLeftRecursive');

var leftRecursion = function () {
  function leftRecursion() {
    _classCallCheck(this, leftRecursion);
  }

  _createClass(leftRecursion, null, [{
    key: 'eliminate',
    value: function eliminate(productions) {
      var nonLeftRecursiveProductions = [],
          rightRecursiveProductions = [];

      productions.forEach(function (production, index) {
        var begin = 0,
            end = index,
            ///
        previousNonLeftRecursiveProductions = nonLeftRecursiveProductions.slice(begin, end),
            previousProductions = previousNonLeftRecursiveProductions,
            ///
        implicitlyLeftRecursiveProduction = ImplicitlyLeftRecursiveProduction.fromProductionAndPreviousProductions(production, previousProductions);

        if (implicitlyLeftRecursiveProduction !== null) {
          var _leftRecursiveProduction = LeftRecursiveProduction.fromImplicitlyLeftRecursiveProductionAndPreviousProductions(implicitlyLeftRecursiveProduction, previousProductions);

          production = _leftRecursiveProduction; ///
        }

        var leftRecursiveProduction = LeftRecursiveProduction.fromProduction(production);

        if (leftRecursiveProduction === null) {
          var nonLeftRecursiveProduction = production; ///

          nonLeftRecursiveProductions.push(nonLeftRecursiveProduction);
        } else {
          var rightRecursiveProduction = RightRecursiveProduction.fromLeftRecursiveProduction(leftRecursiveProduction),
              _nonLeftRecursiveProduction = NonLeftRecursiveProduction.fromLeftRecursiveProduction(leftRecursiveProduction);

          rightRecursiveProductions.push(rightRecursiveProduction);

          nonLeftRecursiveProductions.push(_nonLeftRecursiveProduction);
        }
      });

      productions = [].concat(nonLeftRecursiveProductions).concat(rightRecursiveProductions);

      return productions;
    }
  }]);

  return leftRecursion;
}();

module.exports = leftRecursion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2xlZnRSZWN1cnNpb24uanMiXSwibmFtZXMiOlsiTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJyZXF1aXJlIiwiUmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uIiwiTm9uTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJsZWZ0UmVjdXJzaW9uIiwicHJvZHVjdGlvbnMiLCJub25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMiLCJyaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb25zIiwiZm9yRWFjaCIsInByb2R1Y3Rpb24iLCJpbmRleCIsImJlZ2luIiwiZW5kIiwicHJldmlvdXNOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMiLCJzbGljZSIsInByZXZpb3VzUHJvZHVjdGlvbnMiLCJpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJmcm9tUHJvZHVjdGlvbkFuZFByZXZpb3VzUHJvZHVjdGlvbnMiLCJsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiIsImZyb21JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb25BbmRQcmV2aW91c1Byb2R1Y3Rpb25zIiwiZnJvbVByb2R1Y3Rpb24iLCJub25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiIsInB1c2giLCJyaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJmcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJjb25jYXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsMEJBQTBCQyxRQUFRLDRCQUFSLENBQWhDO0FBQUEsSUFDTUMsMkJBQTJCRCxRQUFRLDZCQUFSLENBRGpDO0FBQUEsSUFFTUUsNkJBQTZCRixRQUFRLCtCQUFSLENBRm5DO0FBQUEsSUFHTUcsb0NBQW9DSCxRQUFRLHNDQUFSLENBSDFDOztJQUtNSSxhOzs7Ozs7OzhCQUNhQyxXLEVBQWE7QUFDNUIsVUFBTUMsOEJBQThCLEVBQXBDO0FBQUEsVUFDTUMsNEJBQTRCLEVBRGxDOztBQUdBRixrQkFBWUcsT0FBWixDQUFvQixVQUFTQyxVQUFULEVBQXFCQyxLQUFyQixFQUE0QjtBQUM5QyxZQUFNQyxRQUFRLENBQWQ7QUFBQSxZQUNNQyxNQUFNRixLQURaO0FBQUEsWUFDb0I7QUFDZEcsOENBQXNDUCw0QkFBNEJRLEtBQTVCLENBQWtDSCxLQUFsQyxFQUF5Q0MsR0FBekMsQ0FGNUM7QUFBQSxZQUdNRyxzQkFBc0JGLG1DQUg1QjtBQUFBLFlBR2tFO0FBQzVERyw0Q0FBb0NiLGtDQUFrQ2Msb0NBQWxDLENBQXVFUixVQUF2RSxFQUFtRk0sbUJBQW5GLENBSjFDOztBQU1BLFlBQUlDLHNDQUFzQyxJQUExQyxFQUFnRDtBQUM5QyxjQUFNRSwyQkFBMEJuQix3QkFBd0JvQiwyREFBeEIsQ0FBb0ZILGlDQUFwRixFQUF1SEQsbUJBQXZILENBQWhDOztBQUVBTix1QkFBYVMsd0JBQWIsQ0FIOEMsQ0FHUjtBQUN2Qzs7QUFFRCxZQUFNQSwwQkFBMEJuQix3QkFBd0JxQixjQUF4QixDQUF1Q1gsVUFBdkMsQ0FBaEM7O0FBRUEsWUFBSVMsNEJBQTRCLElBQWhDLEVBQXNDO0FBQ3BDLGNBQU1HLDZCQUE2QlosVUFBbkMsQ0FEb0MsQ0FDWTs7QUFFaERILHNDQUE0QmdCLElBQTVCLENBQWlDRCwwQkFBakM7QUFDRCxTQUpELE1BSU87QUFDTCxjQUFNRSwyQkFBMkJ0Qix5QkFBeUJ1QiwyQkFBekIsQ0FBcUROLHVCQUFyRCxDQUFqQztBQUFBLGNBQ01HLDhCQUE2Qm5CLDJCQUEyQnNCLDJCQUEzQixDQUF1RE4sdUJBQXZELENBRG5DOztBQUdBWCxvQ0FBMEJlLElBQTFCLENBQStCQyx3QkFBL0I7O0FBRUFqQixzQ0FBNEJnQixJQUE1QixDQUFpQ0QsMkJBQWpDO0FBQ0Q7QUFDRixPQTNCRDs7QUE2QkFoQixvQkFBYyxHQUFHb0IsTUFBSCxDQUFVbkIsMkJBQVYsRUFBdUNtQixNQUF2QyxDQUE4Q2xCLHlCQUE5QyxDQUFkOztBQUVBLGFBQU9GLFdBQVA7QUFDRDs7Ozs7O0FBR0hxQixPQUFPQyxPQUFQLEdBQWlCdkIsYUFBakIiLCJmaWxlIjoibGVmdFJlY3Vyc2lvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vbGVmdFJlY3Vyc2l2ZScpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL3JpZ2h0UmVjdXJzaXZlJyksXG4gICAgICBOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi9ub25MZWZ0UmVjdXJzaXZlJyksXG4gICAgICBJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vaW1wbGljaXRseUxlZnRSZWN1cnNpdmUnKTtcblxuY2xhc3MgbGVmdFJlY3Vyc2lvbiB7XG4gIHN0YXRpYyBlbGltaW5hdGUocHJvZHVjdGlvbnMpIHtcbiAgICBjb25zdCBub25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMgPSBbXSxcbiAgICAgICAgICByaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb25zID0gW107XG5cbiAgICBwcm9kdWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHByb2R1Y3Rpb24sIGluZGV4KSB7XG4gICAgICBjb25zdCBiZWdpbiA9IDAsXG4gICAgICAgICAgICBlbmQgPSBpbmRleCwgIC8vL1xuICAgICAgICAgICAgcHJldmlvdXNOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMgPSBub25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMuc2xpY2UoYmVnaW4sIGVuZCksXG4gICAgICAgICAgICBwcmV2aW91c1Byb2R1Y3Rpb25zID0gcHJldmlvdXNOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMsICAvLy9cbiAgICAgICAgICAgIGltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiA9IEltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbi5mcm9tUHJvZHVjdGlvbkFuZFByZXZpb3VzUHJvZHVjdGlvbnMocHJvZHVjdGlvbiwgcHJldmlvdXNQcm9kdWN0aW9ucyk7XG5cbiAgICAgIGlmIChpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgbGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gPSBMZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbi5mcm9tSW1wbGljaXRseUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uQW5kUHJldmlvdXNQcm9kdWN0aW9ucyhpbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24sIHByZXZpb3VzUHJvZHVjdGlvbnMpO1xuICAgICAgICBcbiAgICAgICAgcHJvZHVjdGlvbiA9IGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uOyAvLy9cbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgbGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gPSBMZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbi5mcm9tUHJvZHVjdGlvbihwcm9kdWN0aW9uKTtcbiAgICAgIFxuICAgICAgaWYgKGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uID09PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uID0gcHJvZHVjdGlvbjsgIC8vL1xuXG4gICAgICAgIG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9ucy5wdXNoKG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbiA9IFJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbi5mcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24obGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24pLFxuICAgICAgICAgICAgICBub25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiA9IE5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uLmZyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbihsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbik7XG5cbiAgICAgICAgcmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9ucy5wdXNoKHJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbik7XG5cbiAgICAgICAgbm9uTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb25zLnB1c2gobm9uTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcHJvZHVjdGlvbnMgPSBbXS5jb25jYXQobm9uTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb25zKS5jb25jYXQocmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9ucyk7XG5cbiAgICByZXR1cm4gcHJvZHVjdGlvbnM7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsZWZ0UmVjdXJzaW9uO1xuIl19