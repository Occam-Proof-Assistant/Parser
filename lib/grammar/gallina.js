'use strict';

var grammar = '\n\n  sentence                            ::=   assumption\n  \n                                        |   definition\n                          \n                                        |   inductive\n                          \n                                        |   fixpoint\n                          \n                                        |   assertion proof\n                            \n                            \n                            \n  assumption                          ::=   assumption_keyword assums .\n  \n  assumption_keyword                  ::=   Axiom | Conjecture\n  \n                                        |   Parameter | Parameters\n                          \n                                        |   Variable | Variables\n                          \n                                        |   Hypothesis | Hypotheses\n                            \n                            \n                            \n  assums                              ::=   assum\n  \n                                        |   assumInBrackets+\n\n  assum                               ::=   ident+ : term\n\n  assumInBrackets                     ::=   ( assum )\n                            \n                            \n                            \n  definition                          ::=   Local? Definition ident binders? colonThenTerm? := term .\n  \n                                        |   Let ident binders? colonThenTerm? := term .\n                            \n                            \n                            \n  inductive                           ::=   Inductive ind_body withThenInd_body+ .\n                          \n                                        |   CoInductive ind_body withThenInd_body+ .\n                          \n  withThenInd_body                    ::=   with ind_body\n\n  ind_body                            ::=   ident binders? : term := ind_body\'?\n  \n  ind_body\'                           ::=   |? identThenBindersThenColonThenTerm |ThenInd_body\'\'+\n  \n  |ThenInd_body\'\'                     ::=   | identThenBindersThenColonThenTerm\n  \n  identThenBindersThenColonThenTerm   ::=   ident binders? colonThenTerm?\n                            \n                            \n                            \n  fixpoint                            ::=   Fixpoint fix_body withThenfix_body+ .\n  \n                                        |   CoFixpoint cofix_body withThenCofix_body+ .\n                          \n  withThenfix_body                    ::=   with fix_body\n  \n  withThenCofix_body                  ::=   with cofix_body\n                            \n                            \n                            \n  assertion                           ::=   assertion_keyword ident binders? : term .\n\n  assertion_keyword                   ::=   Theorem | Lemma\n  \n                                        |   Remark | Fact\n                          \n                                        |   Corollary | Proposition\n                          \n                                        |   Definition | Example\n                            \n                            \n                            \n  proof                               ::=   Proof . \u2026 Qed .\n  \n                                        |   Proof . \u2026 Defined .\n                          \n                                        |   Proof . \u2026 Admitted .\n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n  term                                ::=   forall binders , term term\'\n  \n                                        |   fun binders => term term\'\n  \n                                        |   fix fix_bodies term\'\n  \n                                        |   cofix cofix_bodies term\'\n  \n                                        |   let let_body term\'\n  \n                                        |   if term dep_ret_type? then term else term term\'\n  \n                                        |   @ qualid terms? term\'\n  \n                                        |   match match_items return_type? with orEquations? end term\'\n\n                                        |   qualid term\'\n\n                                        |   sort term\'\n\n                                        |   num term\'\n\n                                        |   _ term\'\n\n                                        |   ( term ) term\'\n                          \n                          \n                          \n  term\'                               ::=   : term term\'\n  \n                                        |   <: term term\'\n  \n                                        |   :> term\'\n  \n                                        |   -> term term\'\n  \n                                        |   arg+ term\'\n  \n                                        |   % ident term\'\n  \n                                        |   \u03B5\n                          \n                          \n                          \n  let_body                            ::=   ident binders? colonThenTerm? := term in term\n  \n                                        |   fix fix_body in term\n  \n                                        |   cofix cofix_body in term\n  \n                                        |   ( names ) dep_ret_type? := term in term\n  \n                                        |   \' pattern inTerm? := term return_type? in term\n                          \n                          \n                          \n  inTerm                              ::=   in term\n  \n  terms                               ::=   term+\n\n  match_items                         ::=   match_item commaThenMatchItem*\n\n  commaThenMatchItem                  ::=   , match_item\n\n  orEquations                         ::=   |? equation orEquation*\n\n  orEquation                          ::=   | equation\n                          \n                          \n                          \n  arg                                 ::=   term\n\n                                        |   ( ident := term )\n                          \n                          \n                          \n  binders                             ::=   binder+\n                          \n                          \n                          \n  binder                              ::=   name\n\n                                        |   ( name+ : term )\n\n                                        |   ( name colonThenTerm? := term )\n                          \n                          \n                          \n  name                                ::=   ident\n\n                                        |   _\n                          \n                          \n                          \n  access_ident                        ::=   .<NO_WHITESPACE>ident                                    \n                          \n  qualid                              ::=   ident<NO_WHITESPACE>access_ident*\n                          \n                          \n                          \n  sort                                ::=   Prop | Set | Type\n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n  fix_bodies                          ::=   fix_body\n  \n                                        |   fix_body withFix_body+ for ident\n                          \n  withFix_body                        ::=   with fix_body                     \n\n  cofix_bodies                        ::=   cofix_body\n  \n                                        |   cofix_body withCofix_body+ for ident\n                          \n  withCofix_body                      ::=   with cofix_body\n                       \n                       \n                       \n  fix_body                            ::=   ident binders annotation? colonThenTerm? := term\n\n  cofix_body                          ::=   ident binders? colonThenTerm? := term\n                       \n                       \n                       \n  colonThenTerm                       ::=   : term\n                       \n                       \n                       \n  annotation                          ::=   { struct ident }\n                       \n                       \n                       \n  match_item                          ::=   term asName? inQualidPatterns?\n\n  inQualidPatterns                    ::=   in qualid patterns?\n\n  patterns                            ::=   pattern+\n  \n  dep_ret_type                        ::=   asName? return_type\n\n  asName                              ::=   as name\n                       \n                       \n                       \n  return_type                         ::=   return term\n                       \n                       \n                       \n  equation                            ::=   mult_pattern |ThenMult_pattern* => term\n\n  |ThenMult_pattern                   ::=   | mult_pattern\n                       \n                       \n                       \n  mult_pattern                        ::=   pattern commaThenPattern*\n                       \n                       \n                       \n  pattern                             ::=   @? qualid patterns pattern\'\n  \n                                        |   qualid pattern\'\n  \n                                        |   _ pattern\'\n  \n                                        |   num pattern\'\n  \n                                        |   ( or_patterns ) pattern\'\n\n  pattern\'                            ::=   as ident pattern\' \n  \n                                        |   % ident pattern\' \n  \n                                        |   \u03B5\n\n  commaThenPattern                    ::=   , pattern\n\n  or_patterns                         ::=   or_pattern commaThenOrPattern*\n\n  commaThenOrPattern                  ::=   , or_pattern\n                       \n                       \n                       \n  or_pattern                          ::=   pattern |ThenPattern*\n\n  |ThenPattern                        ::=   | pattern\n  \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,