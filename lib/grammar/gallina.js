'use strict';

var grammar = '\n\n  term                  ::=   forall binders , term\n\n\n\n\n\n\n\n\n\n\n\n\n                          |   match match_items return_type? with orEquations? end\n\n                          |   qualid\n\n                          |   sort\n\n                          |   num\n\n                          |   _\n\n                          |   ( term )\n\n  match_items           ::=   match_item commaThenMatchItem*\n\n  commaThenMatchItem    ::=   , match_item\n\n  orEquations           ::=   or? equation orEquation*\n\n  orEquation            ::=   or equation\n\n  arg                   ::=   term\n\n                          |   ( ident := term )\n\n  binders               ::=   binder+\n\n  binder                ::=\t  name\n\n                          |   ( name+ : term )\n\n                          |   ( name colonThenTerm? := term )\n\n  colonThenTerm         ::=   : term\n\n  name                  ::=   ident\n\n                          |   _\n\n  qualid                ::=   ident<NO_WHITESPACE>access_ident*\n\n  sort                  ::=   Prop | Set | Type\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  match_item            ::=   term asName? inQualidPatterns?\n\n  asName                ::=   as name\n\n  inQualidPatterns      ::=   in qualid patterns?\n\n  patterns              ::=   pattern+\n\n  return_type           ::=   return term\n\n  equation              ::=   mult_pattern orThenMult_pattern => term\n\n  mult_pattern          ::=   pattern /commaThenPattern*/\n\n  orThenMult_pattern    ::=   or mult_pattern\n\n  commaThenPattern      ::=   , pattern\n\n  pattern               ::=   qualid patterns\n\n                          |   @ qualid patterns\n\n                          |   qualid\n\n                          |   _\n\n                          |   num\n\n                          |   ( or_patterns )\n\n  or_patterns           ::=   or_pattern commaThenOrPattern*\n\n  commaThenOrPattern    ::=   , or_pattern\n\n  or_pattern            ::=   pattern orPattern*\n\n  orPattern             ::=   or pattern\n\n  or                    ::=   /|/\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2dhbGxpbmEuanMiXSwibmFtZXMiOlsiZ3JhbW1hciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLDZqRUFBSjs7QUFvSEFDLE9BQU9DLE9BQVAsR0FBaUJGLE9BQWpCIiwiZmlsZSI6ImdhbGxpbmEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBncmFtbWFyID0gYFxuXG4gIHRlcm0gICAgICAgICAgICAgICAgICA6Oj0gICBmb3JhbGwgYmluZGVycyAsIHRlcm1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIG1hdGNoIG1hdGNoX2l0ZW1zIHJldHVybl90eXBlPyB3aXRoIG9yRXF1YXRpb25zPyBlbmRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgcXVhbGlkXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIHNvcnRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgbnVtXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIF9cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgKCB0ZXJtIClcblxuICBtYXRjaF9pdGVtcyAgICAgICAgICAgOjo9ICAgbWF0Y2hfaXRlbSBjb21tYVRoZW5NYXRjaEl0ZW0qXG5cbiAgY29tbWFUaGVuTWF0Y2hJdGVtICAgIDo6PSAgICwgbWF0Y2hfaXRlbVxuXG4gIG9yRXF1YXRpb25zICAgICAgICAgICA6Oj0gICBvcj8gZXF1YXRpb24gb3JFcXVhdGlvbipcblxuICBvckVxdWF0aW9uICAgICAgICAgICAgOjo9ICAgb3IgZXF1YXRpb25cblxuICBhcmcgICAgICAgICAgICAgICAgICAgOjo9ICAgdGVybVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAoIGlkZW50IDo9IHRlcm0gKVxuXG4gIGJpbmRlcnMgICAgICAgICAgICAgICA6Oj0gICBiaW5kZXIrXG5cbiAgYmluZGVyICAgICAgICAgICAgICAgIDo6PVx0ICBuYW1lXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICggbmFtZSsgOiB0ZXJtIClcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgKCBuYW1lIGNvbG9uVGhlblRlcm0/IDo9IHRlcm0gKVxuXG4gIGNvbG9uVGhlblRlcm0gICAgICAgICA6Oj0gICA6IHRlcm1cblxuICBuYW1lICAgICAgICAgICAgICAgICAgOjo9ICAgaWRlbnRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgX1xuXG4gIHF1YWxpZCAgICAgICAgICAgICAgICA6Oj0gICBpZGVudDxOT19XSElURVNQQUNFPmFjY2Vzc19pZGVudCpcblxuICBzb3J0ICAgICAgICAgICAgICAgICAgOjo9ICAgUHJvcCB8IFNldCB8IFR5cGVcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgbWF0Y2hfaXRlbSAgICAgICAgICAgIDo6PSAgIHRlcm0gYXNOYW1lPyBpblF1YWxpZFBhdHRlcm5zP1xuXG4gIGFzTmFtZSAgICAgICAgICAgICAgICA6Oj0gICBhcyBuYW1lXG5cbiAgaW5RdWFsaWRQYXR0ZXJucyAgICAgIDo6PSAgIGluIHF1YWxpZCBwYXR0ZXJucz9cblxuICBwYXR0ZXJucyAgICAgICAgICAgICAgOjo9ICAgcGF0dGVybitcblxuICByZXR1cm5fdHlwZSAgICAgICAgICAgOjo9ICAgcmV0dXJuIHRlcm1cblxuICBlcXVhdGlvbiAgICAgICAgICAgICAgOjo9ICAgbXVsdF9wYXR0ZXJuIG9yVGhlbk11bHRfcGF0dGVybiA9PiB0ZXJtXG5cbiAgbXVsdF9wYXR0ZXJuICAgICAgICAgIDo6PSAgIHBhdHRlcm4gL2NvbW1hVGhlblBhdHRlcm4qL1xuXG4gIG9yVGhlbk11bHRfcGF0dGVybiAgICA6Oj0gICBvciBtdWx0X3BhdHRlcm5cblxuICBjb21tYVRoZW5QYXR0ZXJuICAgICAgOjo9ICAgLCBwYXR0ZXJuXG5cbiAgcGF0dGVybiAgICAgICAgICAgICAgIDo6PSAgIHF1YWxpZCBwYXR0ZXJuc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHwgICBAIHF1YWxpZCBwYXR0ZXJuc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHwgICBxdWFsaWRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgX1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHwgICBudW1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgKCBvcl9wYXR0ZXJucyApXG5cbiAgb3JfcGF0dGVybnMgICAgICAgICAgIDo6PSAgIG9yX3BhdHRlcm4gY29tbWFUaGVuT3JQYXR0ZXJuKlxuXG4gIGNvbW1hVGhlbk9yUGF0dGVybiAgICA6Oj0gICAsIG9yX3BhdHRlcm5cblxuICBvcl9wYXR0ZXJuICAgICAgICAgICAgOjo9ICAgcGF0dGVybiBvclBhdHRlcm4qXG5cbiAgb3JQYXR0ZXJuICAgICAgICAgICAgIDo6PSAgIG9yIHBhdHRlcm5cblxuICBvciAgICAgICAgICAgICAgICAgICAgOjo9ICAgL1xcfC9cblxuYDtcblxubW9kdWxlLmV4cG9ydHMgPSBncmFtbWFyO1xuIl19