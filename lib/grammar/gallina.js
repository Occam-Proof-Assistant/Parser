'use strict';

var grammar = '\n\n  term                  ::=   forall binders , term\n\n\n\n\n\n\n\n\n\n\n\n\n                          |   match match_items return_type? with orEquations? end\n\n                          |   qualid\n\n                          |   sort\n\n                          |   num\n\n                          |   _\n\n                          |   ( term )\n\n  match_items           ::=   match_item commaThenMatchItem*\n\n  commaThenMatchItem    ::=   , match_item\n\n  orEquations           ::=   |? equation orEquation*\n\n  orEquation            ::=   | equation\n\n  arg                   ::=   term\n\n                          |   ( ident := term )\n\n  binders               ::=   binder+\n\n  binder                ::=\t  name\n\n                          |   ( name+ : term )\n\n                          |   ( name colonThenTerm? := term )\n\n  colonThenTerm         ::=   : term\n\n  name                  ::=   ident\n\n                          |   _\n\n  qualid                ::=   ident<NO_WHITESPACE>access_ident*\n\n  sort                  ::=   Prop | Set | Type\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  match_item            ::=   term asName? inQualidPatterns?\n\n  asName                ::=   as name\n\n  inQualidPatterns      ::=   in qualid patterns?\n\n  patterns              ::=   pattern+\n\n  return_type           ::=   return term\n\n  equation              ::=   mult_pattern |ThenMult_pattern* => term\n\n  |ThenMult_pattern     ::=   | mult_pattern\n\n  mult_pattern          ::=   pattern commaThenPattern*\n\n  pattern               ::=   @? qualid patterns pattern\'\n  \n                          |   qualid pattern\'\n  \n                          |   _ pattern\'\n  \n                          |   num pattern\'\n  \n                          |   ( or_patterns ) pattern\'\n\n  pattern\'              ::=   as ident pattern\' \n  \n                          |   % ident pattern\' \n  \n                          |   \u03B5\n\n  commaThenPattern      ::=   , pattern\n\n  or_patterns           ::=   or_pattern commaThenOrPattern*\n\n  commaThenOrPattern    ::=   , or_pattern\n\n  or_pattern            ::=   pattern |ThenPattern*\n\n  |ThenPattern          ::=   | pattern\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2dhbGxpbmEuanMiXSwibmFtZXMiOlsiZ3JhbW1hciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLHFyRUFBSjs7QUFzSEFDLE9BQU9DLE9BQVAsR0FBaUJGLE9BQWpCIiwiZmlsZSI6ImdhbGxpbmEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBncmFtbWFyID0gYFxuXG4gIHRlcm0gICAgICAgICAgICAgICAgICA6Oj0gICBmb3JhbGwgYmluZGVycyAsIHRlcm1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIG1hdGNoIG1hdGNoX2l0ZW1zIHJldHVybl90eXBlPyB3aXRoIG9yRXF1YXRpb25zPyBlbmRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgcXVhbGlkXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIHNvcnRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgbnVtXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIF9cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgKCB0ZXJtIClcblxuICBtYXRjaF9pdGVtcyAgICAgICAgICAgOjo9ICAgbWF0Y2hfaXRlbSBjb21tYVRoZW5NYXRjaEl0ZW0qXG5cbiAgY29tbWFUaGVuTWF0Y2hJdGVtICAgIDo6PSAgICwgbWF0Y2hfaXRlbVxuXG4gIG9yRXF1YXRpb25zICAgICAgICAgICA6Oj0gICB8PyBlcXVhdGlvbiBvckVxdWF0aW9uKlxuXG4gIG9yRXF1YXRpb24gICAgICAgICAgICA6Oj0gICB8IGVxdWF0aW9uXG5cbiAgYXJnICAgICAgICAgICAgICAgICAgIDo6PSAgIHRlcm1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgKCBpZGVudCA6PSB0ZXJtIClcblxuICBiaW5kZXJzICAgICAgICAgICAgICAgOjo9ICAgYmluZGVyK1xuXG4gIGJpbmRlciAgICAgICAgICAgICAgICA6Oj1cdCAgbmFtZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAoIG5hbWUrIDogdGVybSApXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICggbmFtZSBjb2xvblRoZW5UZXJtPyA6PSB0ZXJtIClcblxuICBjb2xvblRoZW5UZXJtICAgICAgICAgOjo9ICAgOiB0ZXJtXG5cbiAgbmFtZSAgICAgICAgICAgICAgICAgIDo6PSAgIGlkZW50XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIF9cblxuICBxdWFsaWQgICAgICAgICAgICAgICAgOjo9ICAgaWRlbnQ8Tk9fV0hJVEVTUEFDRT5hY2Nlc3NfaWRlbnQqXG5cbiAgc29ydCAgICAgICAgICAgICAgICAgIDo6PSAgIFByb3AgfCBTZXQgfCBUeXBlXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gIG1hdGNoX2l0ZW0gICAgICAgICAgICA6Oj0gICB0ZXJtIGFzTmFtZT8gaW5RdWFsaWRQYXR0ZXJucz9cblxuICBhc05hbWUgICAgICAgICAgICAgICAgOjo9ICAgYXMgbmFtZVxuXG4gIGluUXVhbGlkUGF0dGVybnMgICAgICA6Oj0gICBpbiBxdWFsaWQgcGF0dGVybnM/XG5cbiAgcGF0dGVybnMgICAgICAgICAgICAgIDo6PSAgIHBhdHRlcm4rXG5cbiAgcmV0dXJuX3R5cGUgICAgICAgICAgIDo6PSAgIHJldHVybiB0ZXJtXG5cbiAgZXF1YXRpb24gICAgICAgICAgICAgIDo6PSAgIG11bHRfcGF0dGVybiB8VGhlbk11bHRfcGF0dGVybiogPT4gdGVybVxuXG4gIHxUaGVuTXVsdF9wYXR0ZXJuICAgICA6Oj0gICB8IG11bHRfcGF0dGVyblxuXG4gIG11bHRfcGF0dGVybiAgICAgICAgICA6Oj0gICBwYXR0ZXJuIGNvbW1hVGhlblBhdHRlcm4qXG5cbiAgcGF0dGVybiAgICAgICAgICAgICAgIDo6PSAgIEA/IHF1YWxpZCBwYXR0ZXJucyBwYXR0ZXJuJ1xuICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIHF1YWxpZCBwYXR0ZXJuJ1xuICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIF8gcGF0dGVybidcbiAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHwgICBudW0gcGF0dGVybidcbiAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAoIG9yX3BhdHRlcm5zICkgcGF0dGVybidcblxuICBwYXR0ZXJuJyAgICAgICAgICAgICAgOjo9ICAgYXMgaWRlbnQgcGF0dGVybicgXG4gIFxuICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgJSBpZGVudCBwYXR0ZXJuJyBcbiAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHwgICDOtVxuXG4gIGNvbW1hVGhlblBhdHRlcm4gICAgICA6Oj0gICAsIHBhdHRlcm5cblxuICBvcl9wYXR0ZXJucyAgICAgICAgICAgOjo9ICAgb3JfcGF0dGVybiBjb21tYVRoZW5PclBhdHRlcm4qXG5cbiAgY29tbWFUaGVuT3JQYXR0ZXJuICAgIDo6PSAgICwgb3JfcGF0dGVyblxuXG4gIG9yX3BhdHRlcm4gICAgICAgICAgICA6Oj0gICBwYXR0ZXJuIHxUaGVuUGF0dGVybipcblxuICB8VGhlblBhdHRlcm4gICAgICAgICAgOjo9ICAgfCBwYXR0ZXJuXG5cbmA7XG5cbm1vZHVsZS5leHBvcnRzID0gZ3JhbW1hcjtcbiJdfQ==