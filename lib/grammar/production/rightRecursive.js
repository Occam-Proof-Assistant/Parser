'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rule = require('../../common/rule'),
    Production = require('../../common/production'),
    EpsilonPart = require('../../common/part/epsilon'),
    NonTerminalNode = require('../../common/node/nonTerminal'),
    ProductionNamePart = require('../../common/part/productionName');

var RightRecursiveProduction = function (_Production) {
  _inherits(RightRecursiveProduction, _Production);

  function RightRecursiveProduction() {
    _classCallCheck(this, RightRecursiveProduction);

    return _possibleConstructorReturn(this, (RightRecursiveProduction.__proto__ || Object.getPrototypeOf(RightRecursiveProduction)).apply(this, arguments));
  }

  _createClass(RightRecursiveProduction, null, [{
    key: 'productionNamePartFromLeftRecursiveProduction',
    value: function productionNamePartFromLeftRecursiveProduction(leftRecursiveProduction) {
      var name = nameFromLeftRecursiveProduction(leftRecursiveProduction),
          noWhitespace = false,
          ///
      productionNamePart = new ProductionNamePart(name, noWhitespace);

      return productionNamePart;
    }
  }, {
    key: 'fromLeftRecursiveProduction',
    value: function fromLeftRecursiveProduction(leftRecursiveProduction) {
      var name = nameFromLeftRecursiveProduction(leftRecursiveProduction),
          rules = rulesFromLeftRecursiveProduction(leftRecursiveProduction),
          Node = NonTerminalNode,
          ///
      rightRecursiveProduction = new RightRecursiveProduction(name, rules, Node);

      return rightRecursiveProduction;
    }
  }]);

  return RightRecursiveProduction;
}(Production);

module.exports = RightRecursiveProduction;

function rulesFromLeftRecursiveProduction(leftRecursiveProduction) {
  var rightRecursiveRules = rightRecursiveRulesFromLeftRecursiveProduction(leftRecursiveProduction),
      epsilonPart = new EpsilonPart(),
      epsilonParts = [epsilonPart],
      epsilonPartRule = new Rule(epsilonParts),
      rules = [].concat(rightRecursiveRules).concat(epsilonPartRule);

  return rules;
}

function rightRecursiveRulesFromLeftRecursiveProduction(leftRecursiveProduction) {
  var productionLeftRecursiveRules = leftRecursiveProduction.getLeftRecursiveRules(),
      productionNamePart = RightRecursiveProduction.productionNamePartFromLeftRecursiveProduction(leftRecursiveProduction),
      rightRecursiveRules = productionLeftRecursiveRules.map(function (productionLeftRecursiveRule) {
    var productionLeftRecursiveRuleAllButFirstParts = productionLeftRecursiveRule.getAllButFirstParts(),
        rightRecursiveRuleParts = [].concat(productionLeftRecursiveRuleAllButFirstParts).concat(productionNamePart),
        rightRecursiveRule = new Rule(rightRecursiveRuleParts);

    return rightRecursiveRule;
  });

  return rightRecursiveRules;
}

function nameFromLeftRecursiveProduction(leftRecursiveProduction) {
  var leftRecursiveProductionName = leftRecursiveProduction.getName(),
      name = leftRecursiveProductionName + '~';

  return name;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ncmFtbWFyL3Byb2R1Y3Rpb24vcmlnaHRSZWN1cnNpdmUuanMiXSwibmFtZXMiOlsiUnVsZSIsInJlcXVpcmUiLCJQcm9kdWN0aW9uIiwiRXBzaWxvblBhcnQiLCJOb25UZXJtaW5hbE5vZGUiLCJQcm9kdWN0aW9uTmFtZVBhcnQiLCJSaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiIsIm5hbWUiLCJuYW1lRnJvbUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uIiwibm9XaGl0ZXNwYWNlIiwicHJvZHVjdGlvbk5hbWVQYXJ0IiwicnVsZXMiLCJydWxlc0Zyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiIsIk5vZGUiLCJyaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwicmlnaHRSZWN1cnNpdmVSdWxlcyIsInJpZ2h0UmVjdXJzaXZlUnVsZXNGcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJlcHNpbG9uUGFydCIsImVwc2lsb25QYXJ0cyIsImVwc2lsb25QYXJ0UnVsZSIsImNvbmNhdCIsInByb2R1Y3Rpb25MZWZ0UmVjdXJzaXZlUnVsZXMiLCJnZXRMZWZ0UmVjdXJzaXZlUnVsZXMiLCJwcm9kdWN0aW9uTmFtZVBhcnRGcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJtYXAiLCJwcm9kdWN0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGUiLCJwcm9kdWN0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVBbGxCdXRGaXJzdFBhcnRzIiwiZ2V0QWxsQnV0Rmlyc3RQYXJ0cyIsInJpZ2h0UmVjdXJzaXZlUnVsZVBhcnRzIiwicmlnaHRSZWN1cnNpdmVSdWxlIiwibGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb25OYW1lIiwiZ2V0TmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLG1CQUFSLENBQWI7QUFBQSxJQUNNQyxhQUFhRCxRQUFRLHlCQUFSLENBRG5CO0FBQUEsSUFFTUUsY0FBY0YsUUFBUSwyQkFBUixDQUZwQjtBQUFBLElBR01HLGtCQUFrQkgsUUFBUSwrQkFBUixDQUh4QjtBQUFBLElBSU1JLHFCQUFxQkosUUFBUSxrQ0FBUixDQUozQjs7SUFNTUssd0I7Ozs7Ozs7Ozs7O2tFQUNpREMsdUIsRUFBeUI7QUFDNUUsVUFBTUMsT0FBT0MsZ0NBQWdDRix1QkFBaEMsQ0FBYjtBQUFBLFVBQ01HLGVBQWUsS0FEckI7QUFBQSxVQUM0QjtBQUN0QkMsMkJBQXFCLElBQUlOLGtCQUFKLENBQXVCRyxJQUF2QixFQUE2QkUsWUFBN0IsQ0FGM0I7O0FBSUEsYUFBT0Msa0JBQVA7QUFDRDs7O2dEQUVrQ0osdUIsRUFBeUI7QUFDMUQsVUFBTUMsT0FBT0MsZ0NBQWdDRix1QkFBaEMsQ0FBYjtBQUFBLFVBQ01LLFFBQVFDLGlDQUFpQ04sdUJBQWpDLENBRGQ7QUFBQSxVQUVNTyxPQUFPVixlQUZiO0FBQUEsVUFFOEI7QUFDeEJXLGlDQUEyQixJQUFJVCx3QkFBSixDQUE2QkUsSUFBN0IsRUFBbUNJLEtBQW5DLEVBQTBDRSxJQUExQyxDQUhqQzs7QUFLQSxhQUFPQyx3QkFBUDtBQUNEOzs7O0VBaEJvQ2IsVTs7QUFtQnZDYyxPQUFPQyxPQUFQLEdBQWlCWCx3QkFBakI7O0FBRUEsU0FBU08sZ0NBQVQsQ0FBMENOLHVCQUExQyxFQUFtRTtBQUNqRSxNQUFNVyxzQkFBc0JDLCtDQUErQ1osdUJBQS9DLENBQTVCO0FBQUEsTUFDUWEsY0FBYyxJQUFJakIsV0FBSixFQUR0QjtBQUFBLE1BRVFrQixlQUFlLENBQ2JELFdBRGEsQ0FGdkI7QUFBQSxNQUtRRSxrQkFBa0IsSUFBSXRCLElBQUosQ0FBU3FCLFlBQVQsQ0FMMUI7QUFBQSxNQU1RVCxRQUFRLEdBQUdXLE1BQUgsQ0FBVUwsbUJBQVYsRUFBK0JLLE1BQS9CLENBQXNDRCxlQUF0QyxDQU5oQjs7QUFRQSxTQUFPVixLQUFQO0FBQ0Q7O0FBRUQsU0FBU08sOENBQVQsQ0FBd0RaLHVCQUF4RCxFQUFpRjtBQUMvRSxNQUFNaUIsK0JBQStCakIsd0JBQXdCa0IscUJBQXhCLEVBQXJDO0FBQUEsTUFDTWQscUJBQXFCTCx5QkFBeUJvQiw2Q0FBekIsQ0FBdUVuQix1QkFBdkUsQ0FEM0I7QUFBQSxNQUVNVyxzQkFBc0JNLDZCQUE2QkcsR0FBN0IsQ0FBaUMsVUFBU0MsMkJBQVQsRUFBc0M7QUFDM0YsUUFBTUMsOENBQThDRCw0QkFBNEJFLG1CQUE1QixFQUFwRDtBQUFBLFFBQ01DLDBCQUEwQixHQUFHUixNQUFILENBQVVNLDJDQUFWLEVBQXVETixNQUF2RCxDQUE4RFosa0JBQTlELENBRGhDO0FBQUEsUUFFTXFCLHFCQUFxQixJQUFJaEMsSUFBSixDQUFTK0IsdUJBQVQsQ0FGM0I7O0FBSUEsV0FBT0Msa0JBQVA7QUFDRCxHQU5xQixDQUY1Qjs7QUFVQSxTQUFPZCxtQkFBUDtBQUNEOztBQUVELFNBQVNULCtCQUFULENBQXlDRix1QkFBekMsRUFBa0U7QUFDaEUsTUFBTTBCLDhCQUE4QjFCLHdCQUF3QjJCLE9BQXhCLEVBQXBDO0FBQUEsTUFDTTFCLE9BQVV5QiwyQkFBVixNQUROOztBQUdBLFNBQU96QixJQUFQO0FBQ0QiLCJmaWxlIjoicmlnaHRSZWN1cnNpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJ1bGUgPSByZXF1aXJlKCcuLi8uLi9jb21tb24vcnVsZScpLFxuICAgICAgUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4uLy4uL2NvbW1vbi9wcm9kdWN0aW9uJyksXG4gICAgICBFcHNpbG9uUGFydCA9IHJlcXVpcmUoJy4uLy4uL2NvbW1vbi9wYXJ0L2Vwc2lsb24nKSxcbiAgICAgIE5vblRlcm1pbmFsTm9kZSA9IHJlcXVpcmUoJy4uLy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsJyksXG4gICAgICBQcm9kdWN0aW9uTmFtZVBhcnQgPSByZXF1aXJlKCcuLi8uLi9jb21tb24vcGFydC9wcm9kdWN0aW9uTmFtZScpO1xuXG5jbGFzcyBSaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb24gZXh0ZW5kcyBQcm9kdWN0aW9uIHtcbiAgc3RhdGljIHByb2R1Y3Rpb25OYW1lUGFydEZyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbihsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbikge1xuICAgIGNvbnN0IG5hbWUgPSBuYW1lRnJvbUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKSxcbiAgICAgICAgICBub1doaXRlc3BhY2UgPSBmYWxzZSwgLy8vXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWVQYXJ0ID0gbmV3IFByb2R1Y3Rpb25OYW1lUGFydChuYW1lLCBub1doaXRlc3BhY2UpO1xuICAgIFxuICAgIHJldHVybiBwcm9kdWN0aW9uTmFtZVBhcnQ7XG4gIH1cbiAgXG4gIHN0YXRpYyBmcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24obGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24pIHtcbiAgICBjb25zdCBuYW1lID0gbmFtZUZyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbihsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiksXG4gICAgICAgICAgcnVsZXMgPSBydWxlc0Zyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbihsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiksXG4gICAgICAgICAgTm9kZSA9IE5vblRlcm1pbmFsTm9kZSwgLy8vXG4gICAgICAgICAgcmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uID0gbmV3IFJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbihuYW1lLCBydWxlcywgTm9kZSk7XG4gICAgXG4gICAgcmV0dXJuIHJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbjtcblxuZnVuY3Rpb24gcnVsZXNGcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24obGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24pIHtcbiAgY29uc3QgcmlnaHRSZWN1cnNpdmVSdWxlcyA9IHJpZ2h0UmVjdXJzaXZlUnVsZXNGcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24obGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24pLFxuICAgICAgICAgIGVwc2lsb25QYXJ0ID0gbmV3IEVwc2lsb25QYXJ0KCksXG4gICAgICAgICAgZXBzaWxvblBhcnRzID0gW1xuICAgICAgICAgICAgZXBzaWxvblBhcnRcbiAgICAgICAgICBdLFxuICAgICAgICAgIGVwc2lsb25QYXJ0UnVsZSA9IG5ldyBSdWxlKGVwc2lsb25QYXJ0cyksXG4gICAgICAgICAgcnVsZXMgPSBbXS5jb25jYXQocmlnaHRSZWN1cnNpdmVSdWxlcykuY29uY2F0KGVwc2lsb25QYXJ0UnVsZSk7XG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG5mdW5jdGlvbiByaWdodFJlY3Vyc2l2ZVJ1bGVzRnJvbUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKSB7XG4gIGNvbnN0IHByb2R1Y3Rpb25MZWZ0UmVjdXJzaXZlUnVsZXMgPSBsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbi5nZXRMZWZ0UmVjdXJzaXZlUnVsZXMoKSxcbiAgICAgICAgcHJvZHVjdGlvbk5hbWVQYXJ0ID0gUmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uLnByb2R1Y3Rpb25OYW1lUGFydEZyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbihsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiksXG4gICAgICAgIHJpZ2h0UmVjdXJzaXZlUnVsZXMgPSBwcm9kdWN0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVzLm1hcChmdW5jdGlvbihwcm9kdWN0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGUpIHtcbiAgICAgICAgICBjb25zdCBwcm9kdWN0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVBbGxCdXRGaXJzdFBhcnRzID0gcHJvZHVjdGlvbkxlZnRSZWN1cnNpdmVSdWxlLmdldEFsbEJ1dEZpcnN0UGFydHMoKSxcbiAgICAgICAgICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGVQYXJ0cyA9IFtdLmNvbmNhdChwcm9kdWN0aW9uTGVmdFJlY3Vyc2l2ZVJ1bGVBbGxCdXRGaXJzdFBhcnRzKS5jb25jYXQocHJvZHVjdGlvbk5hbWVQYXJ0KSxcbiAgICAgICAgICAgICAgICByaWdodFJlY3Vyc2l2ZVJ1bGUgPSBuZXcgUnVsZShyaWdodFJlY3Vyc2l2ZVJ1bGVQYXJ0cyk7XG5cbiAgICAgICAgICByZXR1cm4gcmlnaHRSZWN1cnNpdmVSdWxlO1xuICAgICAgICB9KTtcblxuICByZXR1cm4gcmlnaHRSZWN1cnNpdmVSdWxlcztcbn1cblxuZnVuY3Rpb24gbmFtZUZyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbihsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbikge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbk5hbWUgPSBsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbi5nZXROYW1lKCksXG4gICAgICAgIG5hbWUgPSBgJHtsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbk5hbWV9fmA7XG5cbiAgcmV0dXJuIG5hbWU7XG59XG4iXX0=