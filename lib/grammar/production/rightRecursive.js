'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Definition = require('../../extendedBNF/definition'),
    Production = require('../../extendedBNF/production'),
    EpsilonPart = require('../../extendedBNF/part/epsilon'),
    ProductionNamePart = require('../../extendedBNF/part/productionName'),
    NonTerminalNode = require('../../common/node/nonTerminal');

var RightRecursiveProduction = function (_Production) {
  _inherits(RightRecursiveProduction, _Production);

  function RightRecursiveProduction() {
    _classCallCheck(this, RightRecursiveProduction);

    return _possibleConstructorReturn(this, (RightRecursiveProduction.__proto__ || Object.getPrototypeOf(RightRecursiveProduction)).apply(this, arguments));
  }

  _createClass(RightRecursiveProduction, null, [{
    key: 'productionNamePartFromLeftRecursiveProduction',
    value: function productionNamePartFromLeftRecursiveProduction(leftRecursiveProduction) {
      var name = nameFromLeftRecursiveProduction(leftRecursiveProduction),
          noWhitespace = false,
          ///
      productionNamePart = new ProductionNamePart(name, noWhitespace);

      return productionNamePart;
    }
  }, {
    key: 'fromLeftRecursiveProduction',
    value: function fromLeftRecursiveProduction(leftRecursiveProduction) {
      var name = nameFromLeftRecursiveProduction(leftRecursiveProduction),
          definitions = definitionsFromLeftRecursiveProduction(leftRecursiveProduction),
          Node = NonTerminalNode,
          ///
      rightRecursiveProduction = new RightRecursiveProduction(name, definitions, Node);

      return rightRecursiveProduction;
    }
  }]);

  return RightRecursiveProduction;
}(Production);

module.exports = RightRecursiveProduction;

function definitionsFromLeftRecursiveProduction(leftRecursiveProduction) {
  var rightRecursiveDefinitions = rightRecursiveDefinitionsFromLeftRecursiveProduction(leftRecursiveProduction),
      epsilonPart = new EpsilonPart(),
      epsilonParts = [epsilonPart],
      epsilonPartDefinition = new Definition(epsilonParts),
      definitions = [].concat(rightRecursiveDefinitions).concat(epsilonPartDefinition);

  return definitions;
}

function rightRecursiveDefinitionsFromLeftRecursiveProduction(leftRecursiveProduction) {
  var productionLeftRecursiveDefinitions = leftRecursiveProduction.getLeftRecursiveDefinitions(),
      productionNamePart = RightRecursiveProduction.productionNamePartFromLeftRecursiveProduction(leftRecursiveProduction),
      rightRecursiveDefinitions = productionLeftRecursiveDefinitions.map(function (productionLeftRecursiveDefinition) {
    var productionLeftRecursiveDefinitionAllButFirstParts = productionLeftRecursiveDefinition.getAllButFirstParts(),
        rightRecursiveDefinitionParts = [].concat(productionLeftRecursiveDefinitionAllButFirstParts).concat(productionNamePart),
        rightRecursiveDefinition = new Definition(rightRecursiveDefinitionParts);

    return rightRecursiveDefinition;
  });

  return rightRecursiveDefinitions;
}

function nameFromLeftRecursiveProduction(leftRecursiveProduction) {
  var leftRecursiveProductionName = leftRecursiveProduction.getName(),
      name = leftRecursiveProductionName + '~';

  return name;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ncmFtbWFyL3Byb2R1Y3Rpb24vcmlnaHRSZWN1cnNpdmUuanMiXSwibmFtZXMiOlsiRGVmaW5pdGlvbiIsInJlcXVpcmUiLCJQcm9kdWN0aW9uIiwiRXBzaWxvblBhcnQiLCJQcm9kdWN0aW9uTmFtZVBhcnQiLCJOb25UZXJtaW5hbE5vZGUiLCJSaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiIsIm5hbWUiLCJuYW1lRnJvbUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uIiwibm9XaGl0ZXNwYWNlIiwicHJvZHVjdGlvbk5hbWVQYXJ0IiwiZGVmaW5pdGlvbnMiLCJkZWZpbml0aW9uc0Zyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiIsIk5vZGUiLCJyaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwicmlnaHRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnNGcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJlcHNpbG9uUGFydCIsImVwc2lsb25QYXJ0cyIsImVwc2lsb25QYXJ0RGVmaW5pdGlvbiIsImNvbmNhdCIsInByb2R1Y3Rpb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJnZXRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJwcm9kdWN0aW9uTmFtZVBhcnRGcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJtYXAiLCJwcm9kdWN0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJwcm9kdWN0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbGxCdXRGaXJzdFBhcnRzIiwiZ2V0QWxsQnV0Rmlyc3RQYXJ0cyIsInJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzIiwicmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb25OYW1lIiwiZ2V0TmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxhQUFhQyxRQUFRLDhCQUFSLENBQW5CO0FBQUEsSUFDTUMsYUFBYUQsUUFBUSw4QkFBUixDQURuQjtBQUFBLElBRU1FLGNBQWNGLFFBQVEsZ0NBQVIsQ0FGcEI7QUFBQSxJQUdNRyxxQkFBcUJILFFBQVEsdUNBQVIsQ0FIM0I7QUFBQSxJQUlNSSxrQkFBa0JKLFFBQVEsK0JBQVIsQ0FKeEI7O0lBTU1LLHdCOzs7Ozs7Ozs7OztrRUFDaURDLHVCLEVBQXlCO0FBQzVFLFVBQU1DLE9BQU9DLGdDQUFnQ0YsdUJBQWhDLENBQWI7QUFBQSxVQUNNRyxlQUFlLEtBRHJCO0FBQUEsVUFDNEI7QUFDdEJDLDJCQUFxQixJQUFJUCxrQkFBSixDQUF1QkksSUFBdkIsRUFBNkJFLFlBQTdCLENBRjNCOztBQUlBLGFBQU9DLGtCQUFQO0FBQ0Q7OztnREFFa0NKLHVCLEVBQXlCO0FBQzFELFVBQU1DLE9BQU9DLGdDQUFnQ0YsdUJBQWhDLENBQWI7QUFBQSxVQUNNSyxjQUFjQyx1Q0FBdUNOLHVCQUF2QyxDQURwQjtBQUFBLFVBRU1PLE9BQU9ULGVBRmI7QUFBQSxVQUU4QjtBQUN4QlUsaUNBQTJCLElBQUlULHdCQUFKLENBQTZCRSxJQUE3QixFQUFtQ0ksV0FBbkMsRUFBZ0RFLElBQWhELENBSGpDOztBQUtBLGFBQU9DLHdCQUFQO0FBQ0Q7Ozs7RUFoQm9DYixVOztBQW1CdkNjLE9BQU9DLE9BQVAsR0FBaUJYLHdCQUFqQjs7QUFFQSxTQUFTTyxzQ0FBVCxDQUFnRE4sdUJBQWhELEVBQXlFO0FBQ3ZFLE1BQU1XLDRCQUE0QkMscURBQXFEWix1QkFBckQsQ0FBbEM7QUFBQSxNQUNRYSxjQUFjLElBQUlqQixXQUFKLEVBRHRCO0FBQUEsTUFFUWtCLGVBQWUsQ0FDYkQsV0FEYSxDQUZ2QjtBQUFBLE1BS1FFLHdCQUF3QixJQUFJdEIsVUFBSixDQUFlcUIsWUFBZixDQUxoQztBQUFBLE1BTVFULGNBQWMsR0FBR1csTUFBSCxDQUFVTCx5QkFBVixFQUFxQ0ssTUFBckMsQ0FBNENELHFCQUE1QyxDQU50Qjs7QUFRQSxTQUFPVixXQUFQO0FBQ0Q7O0FBRUQsU0FBU08sb0RBQVQsQ0FBOERaLHVCQUE5RCxFQUF1RjtBQUNyRixNQUFNaUIscUNBQXFDakIsd0JBQXdCa0IsMkJBQXhCLEVBQTNDO0FBQUEsTUFDTWQscUJBQXFCTCx5QkFBeUJvQiw2Q0FBekIsQ0FBdUVuQix1QkFBdkUsQ0FEM0I7QUFBQSxNQUVNVyw0QkFBNEJNLG1DQUFtQ0csR0FBbkMsQ0FBdUMsVUFBU0MsaUNBQVQsRUFBNEM7QUFDN0csUUFBTUMsb0RBQW9ERCxrQ0FBa0NFLG1CQUFsQyxFQUExRDtBQUFBLFFBQ01DLGdDQUFnQyxHQUFHUixNQUFILENBQVVNLGlEQUFWLEVBQTZETixNQUE3RCxDQUFvRVosa0JBQXBFLENBRHRDO0FBQUEsUUFFTXFCLDJCQUEyQixJQUFJaEMsVUFBSixDQUFlK0IsNkJBQWYsQ0FGakM7O0FBSUEsV0FBT0Msd0JBQVA7QUFDRCxHQU4yQixDQUZsQzs7QUFVQSxTQUFPZCx5QkFBUDtBQUNEOztBQUVELFNBQVNULCtCQUFULENBQXlDRix1QkFBekMsRUFBa0U7QUFDaEUsTUFBTTBCLDhCQUE4QjFCLHdCQUF3QjJCLE9BQXhCLEVBQXBDO0FBQUEsTUFDTTFCLE9BQVV5QiwyQkFBVixNQUROOztBQUdBLFNBQU96QixJQUFQO0FBQ0QiLCJmaWxlIjoicmlnaHRSZWN1cnNpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERlZmluaXRpb24gPSByZXF1aXJlKCcuLi8uLi9leHRlbmRlZEJORi9kZWZpbml0aW9uJyksXG4gICAgICBQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vZXh0ZW5kZWRCTkYvcHJvZHVjdGlvbicpLFxuICAgICAgRXBzaWxvblBhcnQgPSByZXF1aXJlKCcuLi8uLi9leHRlbmRlZEJORi9wYXJ0L2Vwc2lsb24nKSxcbiAgICAgIFByb2R1Y3Rpb25OYW1lUGFydCA9IHJlcXVpcmUoJy4uLy4uL2V4dGVuZGVkQk5GL3BhcnQvcHJvZHVjdGlvbk5hbWUnKSxcbiAgICAgIE5vblRlcm1pbmFsTm9kZSA9IHJlcXVpcmUoJy4uLy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsJyk7XG5cbmNsYXNzIFJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbiBleHRlbmRzIFByb2R1Y3Rpb24ge1xuICBzdGF0aWMgcHJvZHVjdGlvbk5hbWVQYXJ0RnJvbUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKSB7XG4gICAgY29uc3QgbmFtZSA9IG5hbWVGcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24obGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24pLFxuICAgICAgICAgIG5vV2hpdGVzcGFjZSA9IGZhbHNlLCAvLy9cbiAgICAgICAgICBwcm9kdWN0aW9uTmFtZVBhcnQgPSBuZXcgUHJvZHVjdGlvbk5hbWVQYXJ0KG5hbWUsIG5vV2hpdGVzcGFjZSk7XG4gICAgXG4gICAgcmV0dXJuIHByb2R1Y3Rpb25OYW1lUGFydDtcbiAgfVxuICBcbiAgc3RhdGljIGZyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbihsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbikge1xuICAgIGNvbnN0IG5hbWUgPSBuYW1lRnJvbUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKSxcbiAgICAgICAgICBkZWZpbml0aW9ucyA9IGRlZmluaXRpb25zRnJvbUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKSxcbiAgICAgICAgICBOb2RlID0gTm9uVGVybWluYWxOb2RlLCAvLy9cbiAgICAgICAgICByaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb24gPSBuZXcgUmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uKG5hbWUsIGRlZmluaXRpb25zLCBOb2RlKTtcbiAgICBcbiAgICByZXR1cm4gcmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uO1xuXG5mdW5jdGlvbiBkZWZpbml0aW9uc0Zyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbihsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbikge1xuICBjb25zdCByaWdodFJlY3Vyc2l2ZURlZmluaXRpb25zID0gcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uc0Zyb21MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbihsZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiksXG4gICAgICAgICAgZXBzaWxvblBhcnQgPSBuZXcgRXBzaWxvblBhcnQoKSxcbiAgICAgICAgICBlcHNpbG9uUGFydHMgPSBbXG4gICAgICAgICAgICBlcHNpbG9uUGFydFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZXBzaWxvblBhcnREZWZpbml0aW9uID0gbmV3IERlZmluaXRpb24oZXBzaWxvblBhcnRzKSxcbiAgICAgICAgICBkZWZpbml0aW9ucyA9IFtdLmNvbmNhdChyaWdodFJlY3Vyc2l2ZURlZmluaXRpb25zKS5jb25jYXQoZXBzaWxvblBhcnREZWZpbml0aW9uKTtcblxuICByZXR1cm4gZGVmaW5pdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnNGcm9tTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24obGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24pIHtcbiAgY29uc3QgcHJvZHVjdGlvbkxlZnRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uLmdldExlZnRSZWN1cnNpdmVEZWZpbml0aW9ucygpLFxuICAgICAgICBwcm9kdWN0aW9uTmFtZVBhcnQgPSBSaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb24ucHJvZHVjdGlvbk5hbWVQYXJ0RnJvbUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKSxcbiAgICAgICAgcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IHByb2R1Y3Rpb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMubWFwKGZ1bmN0aW9uKHByb2R1Y3Rpb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbikge1xuICAgICAgICAgIGNvbnN0IHByb2R1Y3Rpb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFsbEJ1dEZpcnN0UGFydHMgPSBwcm9kdWN0aW9uTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24uZ2V0QWxsQnV0Rmlyc3RQYXJ0cygpLFxuICAgICAgICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzID0gW10uY29uY2F0KHByb2R1Y3Rpb25MZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbkFsbEJ1dEZpcnN0UGFydHMpLmNvbmNhdChwcm9kdWN0aW9uTmFtZVBhcnQpLFxuICAgICAgICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbiA9IG5ldyBEZWZpbml0aW9uKHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzKTtcblxuICAgICAgICAgIHJldHVybiByaWdodFJlY3Vyc2l2ZURlZmluaXRpb247XG4gICAgICAgIH0pO1xuXG4gIHJldHVybiByaWdodFJlY3Vyc2l2ZURlZmluaXRpb25zO1xufVxuXG5mdW5jdGlvbiBuYW1lRnJvbUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKSB7XG4gIGNvbnN0IGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uTmFtZSA9IGxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uLmdldE5hbWUoKSxcbiAgICAgICAgbmFtZSA9IGAke2xlZnRSZWN1cnNpdmVQcm9kdWN0aW9uTmFtZX1+YDtcblxuICByZXR1cm4gbmFtZTtcbn1cbiJdfQ==