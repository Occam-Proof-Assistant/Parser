'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../../extendedBNF/production'),
    LeftRecursiveDefinition = require('../definition/leftRecursive'),
    ImplicitlyLeftRecursiveDefinition = require('../definition/implicitlyLeftRecursive');

var LeftRecursiveProduction = function (_Production) {
  _inherits(LeftRecursiveProduction, _Production);

  function LeftRecursiveProduction() {
    _classCallCheck(this, LeftRecursiveProduction);

    return _possibleConstructorReturn(this, (LeftRecursiveProduction.__proto__ || Object.getPrototypeOf(LeftRecursiveProduction)).apply(this, arguments));
  }

  _createClass(LeftRecursiveProduction, [{
    key: 'getLeftRecursiveDefinitions',
    value: function getLeftRecursiveDefinitions() {
      var name = this.getName(),
          definitions = this.getDefinitions(),
          productionName = name,
          ///
      leftRecursiveDefinitions = definitions.filter(function (definition) {
        var leftRecursiveDefinition = LeftRecursiveDefinition.fromDefinitionAndProductionName(definition, productionName),
            definitionLeftRecursive = leftRecursiveDefinition !== null;

        return definitionLeftRecursive;
      });

      return leftRecursiveDefinitions;
    }
  }, {
    key: 'getNonLeftRecursiveDefinitions',
    value: function getNonLeftRecursiveDefinitions() {
      var name = this.getName(),
          definitions = this.getDefinitions(),
          productionName = name,
          ///
      nonLeftRecursiveDefinitions = definitions.filter(function (definition) {
        var leftRecursiveDefinition = LeftRecursiveDefinition.fromDefinitionAndProductionName(definition, productionName),
            definitionNonLeftRecursive = leftRecursiveDefinition === null;

        return definitionNonLeftRecursive;
      });

      return nonLeftRecursiveDefinitions;
    }
  }], [{
    key: 'fromProduction',
    value: function fromProduction(production) {
      var leftRecursiveProduction = null;

      var productionName = production.getName(),
          productionDefinitions = production.getDefinitions(),
          someProductionDefinitionLeftRecursive = productionDefinitions.some(function (productionDefinition) {
        var definition = productionDefinition,
            ///
        leftRecursiveDefinition = LeftRecursiveDefinition.fromDefinitionAndProductionName(definition, productionName),
            productionDefinitionLeftRecursive = leftRecursiveDefinition !== null;

        return productionDefinitionLeftRecursive;
      });

      if (someProductionDefinitionLeftRecursive) {
        leftRecursiveProduction = Production.fromProduction(production, LeftRecursiveProduction);
      }

      return leftRecursiveProduction;
    }
  }, {
    key: 'fromImplicitlyLeftRecursiveProductionAndPreviousProductions',
    value: function fromImplicitlyLeftRecursiveProductionAndPreviousProductions(implicitlyLeftRecursiveProduction, previousProductions) {
      var name = implicitlyLeftRecursiveProduction.getName(),
          Node = implicitlyLeftRecursiveProduction.getNode();

      var definitions = implicitlyLeftRecursiveProduction.getDefinitions();

      previousProductions.forEach(function (previousProduction) {
        var leftRecursiveDefinitions = leftRecursiveDefinitionsFromDefinitionsAndPreviousProduction(definitions, previousProduction);

        definitions = leftRecursiveDefinitions;
      });

      var leftRecursiveProduction = new LeftRecursiveProduction(name, definitions, Node);

      return leftRecursiveProduction;
    }
  }]);

  return LeftRecursiveProduction;
}(Production);

module.exports = LeftRecursiveProduction;

function leftRecursiveDefinitionsFromDefinitionsAndPreviousProduction(definitions, previousProduction) {
  var leftRecursiveDefinitions = [];

  definitions.forEach(function (definition) {
    var implicitlyLeftRecursiveDefinition = ImplicitlyLeftRecursiveDefinition.fromDefinitionAndPreviousProduction(definition, previousProduction);

    if (implicitlyLeftRecursiveDefinition === null) {
      var leftRecursiveDefinition = definition; ///

      leftRecursiveDefinitions.push(leftRecursiveDefinition);
    } else {
      leftRecursiveDefinitions = leftRecursiveDefinitions.concat(leftRecursiveDefinitionsFromImplicitlyLeftRecursiveDefinitionAndPreviousProduction(implicitlyLeftRecursiveDefinition, previousProduction)); ///
    }
  });

  return leftRecursiveDefinitions;
}

function leftRecursiveDefinitionsFromImplicitlyLeftRecursiveDefinitionAndPreviousProduction(implicitlyLeftRecursiveDefinition, previousProduction) {
  var previousProductionDefinitions = previousProduction.getDefinitions(),
      implicitlyLeftRecursiveDefinitionAllButFirstParts = implicitlyLeftRecursiveDefinition.getAllButFirstParts(),
      leftRecursiveDefinitions = previousProductionDefinitions.map(function (previousProductionDefinition) {
    var previousProductionDefinitionParts = previousProductionDefinition.getParts(),
        leftRecursiveDefinitionParts = [].concat(previousProductionDefinitionParts).concat(implicitlyLeftRecursiveDefinitionAllButFirstParts),
        leftRecursiveDefinition = new LeftRecursiveDefinition(leftRecursiveDefinitionParts);

    return leftRecursiveDefinition;
  });

  return leftRecursiveDefinitions;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,