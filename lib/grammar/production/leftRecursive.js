'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var parserUtil = require('../../util/parser'),
    Production = require('../../common/production'),
    LeftRecursiveRule = require('../rule/leftRecursive'),
    ImplicitlyLeftRecursiveRule = require('../rule/implicitlyLeftRecursive');

var LeftRecursiveProduction = function (_Production) {
  _inherits(LeftRecursiveProduction, _Production);

  function LeftRecursiveProduction() {
    _classCallCheck(this, LeftRecursiveProduction);

    return _possibleConstructorReturn(this, (LeftRecursiveProduction.__proto__ || Object.getPrototypeOf(LeftRecursiveProduction)).apply(this, arguments));
  }

  _createClass(LeftRecursiveProduction, [{
    key: 'getLeftRecursiveRules',
    value: function getLeftRecursiveRules() {
      var name = this.getName(),
          rules = this.getRules(),
          productionName = name,
          ///
      leftRecursiveRules = rules.filter(function (rule) {
        var leftRecursiveRule = LeftRecursiveRule.fromRuleAndProductionName(rule, productionName),
            ruleLeftRecursive = leftRecursiveRule !== null;

        return ruleLeftRecursive;
      });

      return leftRecursiveRules;
    }
  }, {
    key: 'getNonLeftRecursiveRules',
    value: function getNonLeftRecursiveRules() {
      var name = this.getName(),
          rules = this.getRules(),
          productionName = name,
          ///
      nonLeftRecursiveRules = rules.filter(function (rule) {
        var leftRecursiveRule = LeftRecursiveRule.fromRuleAndProductionName(rule, productionName),
            ruleNonLeftRecursive = leftRecursiveRule === null;

        return ruleNonLeftRecursive;
      });

      return nonLeftRecursiveRules;
    }
  }], [{
    key: 'fromProduction',
    value: function fromProduction(production) {
      var leftRecursiveProduction = null;

      var productionName = production.getName(),
          productionRules = production.getRules(),
          someProductionRuleLeftRecursive = productionRules.some(function (productionRule) {
        var rule = productionRule,
            ///
        leftRecursiveRule = LeftRecursiveRule.fromRuleAndProductionName(rule, productionName),
            productionRuleLeftRecursive = leftRecursiveRule !== null;

        return productionRuleLeftRecursive;
      });

      if (someProductionRuleLeftRecursive) {
        leftRecursiveProduction = Production.fromProduction(production, LeftRecursiveProduction);
      }

      return leftRecursiveProduction;
    }
  }, {
    key: 'fromImplicitlyLeftRecursiveProductionAndPreviousProductions',
    value: function fromImplicitlyLeftRecursiveProductionAndPreviousProductions(implicitlyLeftRecursiveProduction, previousProductions) {
      var name = implicitlyLeftRecursiveProduction.getName(),
          rules = rulesFromImplicitlyLeftRecursiveProductionAndPreviousProductions(implicitlyLeftRecursiveProduction, previousProductions),
          Node = implicitlyLeftRecursiveProduction.getNode(),
          leftRecursiveProduction = new LeftRecursiveProduction(name, rules, Node);

      return leftRecursiveProduction;
    }
  }]);

  return LeftRecursiveProduction;
}(Production);

module.exports = LeftRecursiveProduction;

function rulesFromImplicitlyLeftRecursiveProductionAndPreviousProductions(implicitlyLeftRecursiveProduction, previousProductions) {
  var rules = [];

  var implicitlyLeftRecursiveProductionRules = implicitlyLeftRecursiveProduction.getRules();

  implicitlyLeftRecursiveProductionRules.forEach(function (implicitlyLeftRecursiveProductionRule) {
    var rule = implicitlyLeftRecursiveProductionRule; ///

    var implicitlyLeftRecursiveRule = ImplicitlyLeftRecursiveRule.fromRuleAndPreviousProductions(rule, previousProductions);

    if (implicitlyLeftRecursiveRule === null) {
      rules.push(rule);
    } else {
      var leftRecursiveRules = leftRecursiveRulesFromImplicitlyLeftRecursiveRuleAndPreviousProductions(implicitlyLeftRecursiveRule, previousProductions);

      rules = rules.concat(leftRecursiveRules);
    }
  });

  return rules;
}

function leftRecursiveRulesFromImplicitlyLeftRecursiveRuleAndPreviousProductions(implicitlyLeftRecursiveRule, previousProductions) {
  var previousProductionName = implicitlyLeftRecursiveRule.getPreviousProductionName(),
      previousProduction = parserUtil.findProduction(previousProductionName, previousProductions),
      previousProductionRules = previousProduction.getRules(),
      implicitlyLeftRecursiveRuleAllButFirstParts = implicitlyLeftRecursiveRule.getAllButFirstParts(),
      leftRecursiveRules = previousProductionRules.map(function (previousProductionRule) {
    var previousProductionRuleParts = previousProductionRule.getParts(),
        leftRecursiveRuleParts = [].concat(previousProductionRuleParts).concat(implicitlyLeftRecursiveRuleAllButFirstParts),
        leftRecursiveRule = new LeftRecursiveRule(leftRecursiveRuleParts);

    return leftRecursiveRule;
  });

  return leftRecursiveRules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,