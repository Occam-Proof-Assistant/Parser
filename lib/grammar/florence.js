'use strict';

var grammar = '\n\n    assertion                       ::=   rule | theorem | lemma\n    \n    \n    \n    theorem                         ::=   theoremDeclaration premise(s)? conclusion proof\n    \n    theoremDeclaration              ::=   Theorem parenthesisedLabel? <END_OF_LINE>+\n    \n    \n    \n    lemma                           ::=   lemmaDeclaration premise(s)? conclusion proof\n    \n    lemmaDeclaration                ::=   Lemma parenthesisedLabel? <END_OF_LINE>+\n    \n    \n    \n    rule                            ::=   ruleDeclaration premise(s)? conclusion proof?\n    \n    ruleDeclaration                 ::=   Rule parenthesisedLabel? <END_OF_LINE>+\n    \n    \n    \n    premise(s)                      ::=   premise | premises\n    \n    premise                         ::=   premiseDeclaration (labelled)statement\n    \n    premises                        ::=   premisesDeclaration (labelled)statement (labelled)statement+\n    \n    premiseDeclaration              ::=   Premise <END_OF_LINE>+\n    \n    premisesDeclaration             ::=   Premises <END_OF_LINE>+\n    \n    \n\n    conclusion                      ::=   conclusionDeclaration statement\n    \n    conclusionDeclaration           ::=   Conclusion <END_OF_LINE>+\n    \n    \n\n    proof                           ::=   proofDeclaration subLemmaOr(labelled)statement* therefore\n    \n    proofDeclaration                ::=   Proof <END_OF_LINE>+\n    \n    \n\n    therefore                       ::=   thereforeDeclaration (labelled)statement\n    \n    thereforeDeclaration            ::=   Therefore <END_OF_LINE>+\n    \n    \n\n    subLemmaOr(labelled)statement   ::=   subLemma | (labelled)statement\n\n    subLemma                        ::=   suppose then? hence\n    \n    \n\n    suppose                         ::=   supposeDeclaration supposition+\n    \n    supposeDeclaration              ::=   Suppose <END_OF_LINE>+\n    \n    supposition                     ::=   statement\n    \n    then                            ::=   thenDeclaration subLemmaOr(labelled)statement+\n    \n    thenDeclaration                 ::=   Then <END_OF_LINE>+\n    \n    hence                           ::=   henceDeclaration (labelled)statement\n    \n    henceDeclaration                ::=   Hence <END_OF_LINE>+\n    \n    \n    \n    (labelled)statement             ::=   labelledStatement | statement\n    \n    labelledStatement               ::=   symbol+ by label <END_OF_LINE>+\n    \n    statement                       ::=   symbol+ <END_OF_LINE>+\n    \n    symbol                          ::=   unassigned\n                                      \n                                      |   { \n                                      \n                                      |   } \n                                      \n                                      |   = \n                                      \n                                      |   : \n    \n                                      |   ( \n                                      \n                                      |   )\n    \n    \n    \n    parenthesisedLabel              ::=   (<NO_WHITESPACE>label<NO_WHITESPACE>)\n\n    label                           ::=   unassigned\n                                      \n    unassignedOrKeyword             ::=   unassigned | keyword                                      \n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2Zsb3JlbmNlLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSwwMEdBQUo7O0FBMEdBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJmbG9yZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGdyYW1tYXIgPSBgXG5cbiAgICBhc3NlcnRpb24gICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHJ1bGUgfCB0aGVvcmVtIHwgbGVtbWFcbiAgICBcbiAgICBcbiAgICBcbiAgICB0aGVvcmVtICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHRoZW9yZW1EZWNsYXJhdGlvbiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mXG4gICAgXG4gICAgdGhlb3JlbURlY2xhcmF0aW9uICAgICAgICAgICAgICA6Oj0gICBUaGVvcmVtIHBhcmVudGhlc2lzZWRMYWJlbD8gPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBcbiAgICBcbiAgICBsZW1tYSAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGxlbW1hRGVjbGFyYXRpb24gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZlxuICAgIFxuICAgIGxlbW1hRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgOjo9ICAgTGVtbWEgcGFyZW50aGVzaXNlZExhYmVsPyA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIFxuICAgIFxuICAgIHJ1bGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcnVsZURlY2xhcmF0aW9uIHByZW1pc2Uocyk/IGNvbmNsdXNpb24gcHJvb2Y/XG4gICAgXG4gICAgcnVsZURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICA6Oj0gICBSdWxlIHBhcmVudGhlc2lzZWRMYWJlbD8gPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBcbiAgICBcbiAgICBwcmVtaXNlKHMpICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByZW1pc2UgfCBwcmVtaXNlc1xuICAgIFxuICAgIHByZW1pc2UgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJlbWlzZURlY2xhcmF0aW9uIChsYWJlbGxlZClzdGF0ZW1lbnRcbiAgICBcbiAgICBwcmVtaXNlcyAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByZW1pc2VzRGVjbGFyYXRpb24gKGxhYmVsbGVkKXN0YXRlbWVudCAobGFiZWxsZWQpc3RhdGVtZW50K1xuICAgIFxuICAgIHByZW1pc2VEZWNsYXJhdGlvbiAgICAgICAgICAgICAgOjo9ICAgUHJlbWlzZSA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIHByZW1pc2VzRGVjbGFyYXRpb24gICAgICAgICAgICAgOjo9ICAgUHJlbWlzZXMgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBcblxuICAgIGNvbmNsdXNpb24gICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29uY2x1c2lvbkRlY2xhcmF0aW9uIHN0YXRlbWVudFxuICAgIFxuICAgIGNvbmNsdXNpb25EZWNsYXJhdGlvbiAgICAgICAgICAgOjo9ICAgQ29uY2x1c2lvbiA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIFxuXG4gICAgcHJvb2YgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcm9vZkRlY2xhcmF0aW9uIHN1YkxlbW1hT3IobGFiZWxsZWQpc3RhdGVtZW50KiB0aGVyZWZvcmVcbiAgICBcbiAgICBwcm9vZkRlY2xhcmF0aW9uICAgICAgICAgICAgICAgIDo6PSAgIFByb29mIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgXG5cbiAgICB0aGVyZWZvcmUgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHRoZXJlZm9yZURlY2xhcmF0aW9uIChsYWJlbGxlZClzdGF0ZW1lbnRcbiAgICBcbiAgICB0aGVyZWZvcmVEZWNsYXJhdGlvbiAgICAgICAgICAgIDo6PSAgIFRoZXJlZm9yZSA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIFxuXG4gICAgc3ViTGVtbWFPcihsYWJlbGxlZClzdGF0ZW1lbnQgICA6Oj0gICBzdWJMZW1tYSB8IChsYWJlbGxlZClzdGF0ZW1lbnRcblxuICAgIHN1YkxlbW1hICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3VwcG9zZSB0aGVuPyBoZW5jZVxuICAgIFxuICAgIFxuXG4gICAgc3VwcG9zZSAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdXBwb3NlRGVjbGFyYXRpb24gc3VwcG9zaXRpb24rXG4gICAgXG4gICAgc3VwcG9zZURlY2xhcmF0aW9uICAgICAgICAgICAgICA6Oj0gICBTdXBwb3NlIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgc3VwcG9zaXRpb24gICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdGF0ZW1lbnRcbiAgICBcbiAgICB0aGVuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHRoZW5EZWNsYXJhdGlvbiBzdWJMZW1tYU9yKGxhYmVsbGVkKXN0YXRlbWVudCtcbiAgICBcbiAgICB0aGVuRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgIDo6PSAgIFRoZW4gPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBoZW5jZSAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGhlbmNlRGVjbGFyYXRpb24gKGxhYmVsbGVkKXN0YXRlbWVudFxuICAgIFxuICAgIGhlbmNlRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgOjo9ICAgSGVuY2UgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBcbiAgICBcbiAgICAobGFiZWxsZWQpc3RhdGVtZW50ICAgICAgICAgICAgIDo6PSAgIGxhYmVsbGVkU3RhdGVtZW50IHwgc3RhdGVtZW50XG4gICAgXG4gICAgbGFiZWxsZWRTdGF0ZW1lbnQgICAgICAgICAgICAgICA6Oj0gICBzeW1ib2wrIGJ5IGxhYmVsIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgc3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzeW1ib2wrIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgc3ltYm9sICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB1bmFzc2lnbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICB9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgID0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgOiBcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICggXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgKVxuICAgIFxuICAgIFxuICAgIFxuICAgIHBhcmVudGhlc2lzZWRMYWJlbCAgICAgICAgICAgICAgOjo9ICAgKDxOT19XSElURVNQQUNFPmxhYmVsPE5PX1dISVRFU1BBQ0U+KVxuXG4gICAgbGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB1bmFzc2lnbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIHVuYXNzaWduZWRPcktleXdvcmQgICAgICAgICAgICAgOjo9ICAgdW5hc3NpZ25lZCB8IGtleXdvcmQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIFxuYDtcblxubW9kdWxlLmV4cG9ydHMgPSBncmFtbWFyO1xuIl19