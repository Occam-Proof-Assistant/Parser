'use strict';

var grammar = '\n\n    rule                            ::=   ruleDeclaration premise(s) conclusion proof?\n    \n    ruleDeclaration                 ::=   Rule /\\([^)]+\\)/ <END_OF_LINE>\n    \n    \n    \n    premise(s)                      ::=   premise | premises\n    \n    premise                         ::=   premiseDeclaration (qualified)statement\n    \n    premises                        ::=   premisesDeclaration (qualified)statement+\n    \n    premiseDeclaration              ::=   Premise <END_OF_LINE>\n    \n    premisesDeclaration             ::=   Premises <END_OF_LINE>\n    \n    \n\n    conclusion                      ::=   conclusionDeclaration statement\n    \n    conclusionDeclaration           ::=   Conclusion <END_OF_LINE>\n    \n    \n\n    proof                           ::=   proofDeclaration subLemmaOr(qualified)statement* statement\n    \n    proofDeclaration                ::=   Proof <END_OF_LINE>\n    \n    \n\n    subLemmaOr(qualified)statement  ::=   subLemma | (qualifed)statement\n\n    subLemma                        ::=   suppose then? hence\n    \n    suppose                         ::=   supposeDeclaration statement\n    \n    supposeDeclaration              ::=   Suppose <END_OF_LINE>\n    \n    then                            ::=   thenDeclaration (qualified)statement+\n    \n    thenDeclaration                 ::=   Then <END_OF_LINE>\n    \n    hence                           ::=   henceDeclaration statement\n    \n    henceDeclaration                ::=   Hence <END_OF_LINE>\n    \n    \n\n    (qualified)statement            ::=   qualifiedStatement | statement\n    \n    qualifiedStatement              ::=   statement by label\n    \n    statement                       ::=   undefined+ <END_OF_LINE>\n    \n    \n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2Zsb3JlbmNlLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSwydkRBQUo7O0FBNERBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJmbG9yZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGdyYW1tYXIgPSBgXG5cbiAgICBydWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHJ1bGVEZWNsYXJhdGlvbiBwcmVtaXNlKHMpIGNvbmNsdXNpb24gcHJvb2Y/XG4gICAgXG4gICAgcnVsZURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICA6Oj0gICBSdWxlIC9cXFxcKFteKV0rXFxcXCkvIDxFTkRfT0ZfTElORT5cbiAgICBcbiAgICBcbiAgICBcbiAgICBwcmVtaXNlKHMpICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByZW1pc2UgfCBwcmVtaXNlc1xuICAgIFxuICAgIHByZW1pc2UgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJlbWlzZURlY2xhcmF0aW9uIChxdWFsaWZpZWQpc3RhdGVtZW50XG4gICAgXG4gICAgcHJlbWlzZXMgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcmVtaXNlc0RlY2xhcmF0aW9uIChxdWFsaWZpZWQpc3RhdGVtZW50K1xuICAgIFxuICAgIHByZW1pc2VEZWNsYXJhdGlvbiAgICAgICAgICAgICAgOjo9ICAgUHJlbWlzZSA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgcHJlbWlzZXNEZWNsYXJhdGlvbiAgICAgICAgICAgICA6Oj0gICBQcmVtaXNlcyA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgXG5cbiAgICBjb25jbHVzaW9uICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbmNsdXNpb25EZWNsYXJhdGlvbiBzdGF0ZW1lbnRcbiAgICBcbiAgICBjb25jbHVzaW9uRGVjbGFyYXRpb24gICAgICAgICAgIDo6PSAgIENvbmNsdXNpb24gPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIFxuXG4gICAgcHJvb2YgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcm9vZkRlY2xhcmF0aW9uIHN1YkxlbW1hT3IocXVhbGlmaWVkKXN0YXRlbWVudCogc3RhdGVtZW50XG4gICAgXG4gICAgcHJvb2ZEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICA6Oj0gICBQcm9vZiA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgXG5cbiAgICBzdWJMZW1tYU9yKHF1YWxpZmllZClzdGF0ZW1lbnQgIDo6PSAgIHN1YkxlbW1hIHwgKHF1YWxpZmVkKXN0YXRlbWVudFxuXG4gICAgc3ViTGVtbWEgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdXBwb3NlIHRoZW4/IGhlbmNlXG4gICAgXG4gICAgc3VwcG9zZSAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdXBwb3NlRGVjbGFyYXRpb24gc3RhdGVtZW50XG4gICAgXG4gICAgc3VwcG9zZURlY2xhcmF0aW9uICAgICAgICAgICAgICA6Oj0gICBTdXBwb3NlIDxFTkRfT0ZfTElORT5cbiAgICBcbiAgICB0aGVuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHRoZW5EZWNsYXJhdGlvbiAocXVhbGlmaWVkKXN0YXRlbWVudCtcbiAgICBcbiAgICB0aGVuRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgIDo6PSAgIFRoZW4gPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIGhlbmNlICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgaGVuY2VEZWNsYXJhdGlvbiBzdGF0ZW1lbnRcbiAgICBcbiAgICBoZW5jZURlY2xhcmF0aW9uICAgICAgICAgICAgICAgIDo6PSAgIEhlbmNlIDxFTkRfT0ZfTElORT5cbiAgICBcbiAgICBcblxuICAgIChxdWFsaWZpZWQpc3RhdGVtZW50ICAgICAgICAgICAgOjo9ICAgcXVhbGlmaWVkU3RhdGVtZW50IHwgc3RhdGVtZW50XG4gICAgXG4gICAgcXVhbGlmaWVkU3RhdGVtZW50ICAgICAgICAgICAgICA6Oj0gICBzdGF0ZW1lbnQgYnkgbGFiZWxcbiAgICBcbiAgICBzdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVuZGVmaW5lZCsgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIFxuICAgIFxuYDtcblxubW9kdWxlLmV4cG9ydHMgPSBncmFtbWFyO1xuXG5cblxuIl19