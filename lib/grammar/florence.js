'use strict';

var grammar = '\n\n    assertion                       ::=   rule | theorem | lemma\n    \n    \n    \n    theorem                         ::=   theoremDeclaration premise(s)? conclusion proof\n    \n    theoremDeclaration              ::=   Theorem parenthesisedLabel? <END_OF_LINE>+\n    \n    \n    \n    lemma                           ::=   lemmaDeclaration premise(s)? conclusion proof\n    \n    lemmaDeclaration                ::=   Lemma parenthesisedLabel? <END_OF_LINE>+\n    \n    \n    \n    rule                            ::=   ruleDeclaration premise(s)? conclusion proof?\n    \n    ruleDeclaration                 ::=   Rule parenthesisedLabel? <END_OF_LINE>+\n    \n    \n    \n    premise(s)                      ::=   premise | premises\n    \n    premise                         ::=   premiseDeclaration (labelled)statement\n    \n    premises                        ::=   premisesDeclaration (labelled)statement (labelled)statement+\n    \n    premiseDeclaration              ::=   Premise <END_OF_LINE>+\n    \n    premisesDeclaration             ::=   Premises <END_OF_LINE>+\n    \n    \n\n    conclusion                      ::=   conclusionDeclaration statement\n    \n    conclusionDeclaration           ::=   Conclusion <END_OF_LINE>+\n    \n    \n\n    proof                           ::=   proofDeclaration subLemmaOr(labelled)statement* hence\n    \n    proofDeclaration                ::=   Proof <END_OF_LINE>+\n    \n    \n\n    subLemmaOr(labelled)statement   ::=   subLemma | (labelled)statement\n\n    subLemma                        ::=   suppose then? hence\n    \n    suppose                         ::=   supposeDeclaration statement\n    \n    supposeDeclaration              ::=   Suppose <END_OF_LINE>+\n    \n    then                            ::=   thenDeclaration (labelled)statement+\n    \n    thenDeclaration                 ::=   Then <END_OF_LINE>+\n    \n    hence                           ::=   henceDeclaration statement\n    \n    henceDeclaration                ::=   Hence <END_OF_LINE>+\n    \n    \n    \n    (labelled)statement             ::=   labelledStatement | statement\n    \n    labelledStatement               ::=   symbol+ by label <END_OF_LINE>+\n    \n    statement                       ::=   symbol+ <END_OF_LINE>+\n    \n    symbol                          ::=   unassigned \n    \n                                      |   ( \n                                      \n                                      |   )\n    \n    \n    \n    parenthesisedLabel              ::=   (<NO_WHITESPACE>label<NO_WHITESPACE>)\n\n    label                           ::=   unassignedOrKeyword<NO_WHITESPACE>unassignedOrKeyword+\n    \n                                      |   unassigned\n                                      \n    unassignedOrKeyword             ::=   unassigned | keyword                                      \n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2Zsb3JlbmNlLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxpMUZBQUo7O0FBMEZBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJmbG9yZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGdyYW1tYXIgPSBgXG5cbiAgICBhc3NlcnRpb24gICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHJ1bGUgfCB0aGVvcmVtIHwgbGVtbWFcbiAgICBcbiAgICBcbiAgICBcbiAgICB0aGVvcmVtICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHRoZW9yZW1EZWNsYXJhdGlvbiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mXG4gICAgXG4gICAgdGhlb3JlbURlY2xhcmF0aW9uICAgICAgICAgICAgICA6Oj0gICBUaGVvcmVtIHBhcmVudGhlc2lzZWRMYWJlbD8gPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBcbiAgICBcbiAgICBsZW1tYSAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGxlbW1hRGVjbGFyYXRpb24gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZlxuICAgIFxuICAgIGxlbW1hRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgOjo9ICAgTGVtbWEgcGFyZW50aGVzaXNlZExhYmVsPyA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIFxuICAgIFxuICAgIHJ1bGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcnVsZURlY2xhcmF0aW9uIHByZW1pc2Uocyk/IGNvbmNsdXNpb24gcHJvb2Y/XG4gICAgXG4gICAgcnVsZURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICA6Oj0gICBSdWxlIHBhcmVudGhlc2lzZWRMYWJlbD8gPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBcbiAgICBcbiAgICBwcmVtaXNlKHMpICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByZW1pc2UgfCBwcmVtaXNlc1xuICAgIFxuICAgIHByZW1pc2UgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJlbWlzZURlY2xhcmF0aW9uIChsYWJlbGxlZClzdGF0ZW1lbnRcbiAgICBcbiAgICBwcmVtaXNlcyAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByZW1pc2VzRGVjbGFyYXRpb24gKGxhYmVsbGVkKXN0YXRlbWVudCAobGFiZWxsZWQpc3RhdGVtZW50K1xuICAgIFxuICAgIHByZW1pc2VEZWNsYXJhdGlvbiAgICAgICAgICAgICAgOjo9ICAgUHJlbWlzZSA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIHByZW1pc2VzRGVjbGFyYXRpb24gICAgICAgICAgICAgOjo9ICAgUHJlbWlzZXMgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBcblxuICAgIGNvbmNsdXNpb24gICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29uY2x1c2lvbkRlY2xhcmF0aW9uIHN0YXRlbWVudFxuICAgIFxuICAgIGNvbmNsdXNpb25EZWNsYXJhdGlvbiAgICAgICAgICAgOjo9ICAgQ29uY2x1c2lvbiA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIFxuXG4gICAgcHJvb2YgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcm9vZkRlY2xhcmF0aW9uIHN1YkxlbW1hT3IobGFiZWxsZWQpc3RhdGVtZW50KiBoZW5jZVxuICAgIFxuICAgIHByb29mRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgOjo9ICAgUHJvb2YgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBcblxuICAgIHN1YkxlbW1hT3IobGFiZWxsZWQpc3RhdGVtZW50ICAgOjo9ICAgc3ViTGVtbWEgfCAobGFiZWxsZWQpc3RhdGVtZW50XG5cbiAgICBzdWJMZW1tYSAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN1cHBvc2UgdGhlbj8gaGVuY2VcbiAgICBcbiAgICBzdXBwb3NlICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN1cHBvc2VEZWNsYXJhdGlvbiBzdGF0ZW1lbnRcbiAgICBcbiAgICBzdXBwb3NlRGVjbGFyYXRpb24gICAgICAgICAgICAgIDo6PSAgIFN1cHBvc2UgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICB0aGVuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHRoZW5EZWNsYXJhdGlvbiAobGFiZWxsZWQpc3RhdGVtZW50K1xuICAgIFxuICAgIHRoZW5EZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgOjo9ICAgVGhlbiA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIGhlbmNlICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgaGVuY2VEZWNsYXJhdGlvbiBzdGF0ZW1lbnRcbiAgICBcbiAgICBoZW5jZURlY2xhcmF0aW9uICAgICAgICAgICAgICAgIDo6PSAgIEhlbmNlIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgXG4gICAgXG4gICAgKGxhYmVsbGVkKXN0YXRlbWVudCAgICAgICAgICAgICA6Oj0gICBsYWJlbGxlZFN0YXRlbWVudCB8IHN0YXRlbWVudFxuICAgIFxuICAgIGxhYmVsbGVkU3RhdGVtZW50ICAgICAgICAgICAgICAgOjo9ICAgc3ltYm9sKyBieSBsYWJlbCA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIHN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3ltYm9sKyA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIHN5bWJvbCAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdW5hc3NpZ25lZCBcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICggXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgKVxuICAgIFxuICAgIFxuICAgIFxuICAgIHBhcmVudGhlc2lzZWRMYWJlbCAgICAgICAgICAgICAgOjo9ICAgKDxOT19XSElURVNQQUNFPmxhYmVsPE5PX1dISVRFU1BBQ0U+KVxuXG4gICAgbGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB1bmFzc2lnbmVkT3JLZXl3b3JkPE5PX1dISVRFU1BBQ0U+dW5hc3NpZ25lZE9yS2V5d29yZCtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIHVuYXNzaWduZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgdW5hc3NpZ25lZE9yS2V5d29yZCAgICAgICAgICAgICA6Oj0gICB1bmFzc2lnbmVkIHwga2V5d29yZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgXG5gO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdyYW1tYXI7XG4iXX0=