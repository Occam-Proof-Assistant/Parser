'use strict';

var grammar = '\n\n    document                        ::=   assertion*\n\n    assertion                       ::=   rule | theorem | lemma\n    \n    \n    \n    theorem                         ::=   theoremDeclaration premise(s)? conclusion proof\n    \n    theoremDeclaration              ::=   Theorem parenthesisedLabel? <END_OF_LINE>+\n    \n    \n    \n    lemma                           ::=   lemmaDeclaration premise(s)? conclusion proof\n    \n    lemmaDeclaration                ::=   Lemma parenthesisedLabel? <END_OF_LINE>+\n    \n    \n    \n    rule                            ::=   ruleDeclaration premise(s)? conclusion proof?\n    \n    ruleDeclaration                 ::=   Rule parenthesisedLabel? <END_OF_LINE>+\n    \n    \n    \n    premise(s)                      ::=   premise | premises\n    \n    premise                         ::=   premiseDeclaration (labelled)statement\n    \n    premises                        ::=   premisesDeclaration (labelled)statement (labelled)statement+\n    \n    premiseDeclaration              ::=   Premise <END_OF_LINE>+\n    \n    premisesDeclaration             ::=   Premises <END_OF_LINE>+\n    \n    \n\n    conclusion                      ::=   conclusionDeclaration statement\n    \n    conclusionDeclaration           ::=   Conclusion <END_OF_LINE>+\n    \n    \n\n    proof                           ::=   proofDeclaration subLemmaOr(labelled)statement* therefore\n    \n    proofDeclaration                ::=   Proof <END_OF_LINE>+\n    \n    \n\n    therefore                       ::=   thereforeDeclaration (labelled)statement\n    \n    thereforeDeclaration            ::=   Therefore <END_OF_LINE>+\n    \n    \n\n    subLemmaOr(labelled)statement   ::=   subLemma | (labelled)statement\n\n    subLemma                        ::=   suppose then? hence\n    \n    \n\n    suppose                         ::=   supposeDeclaration supposition+\n    \n    supposeDeclaration              ::=   Suppose <END_OF_LINE>+\n    \n    supposition                     ::=   statement\n    \n    then                            ::=   thenDeclaration subLemmaOr(labelled)statement+\n    \n    thenDeclaration                 ::=   Then <END_OF_LINE>+\n    \n    hence                           ::=   henceDeclaration (labelled)statement\n    \n    henceDeclaration                ::=   Hence <END_OF_LINE>+\n    \n    \n    \n    (labelled)statement             ::=   labelledStatement | statement\n    \n    labelledStatement               ::=   symbol+ by label <END_OF_LINE>+\n    \n    statement                       ::=   symbol+ <END_OF_LINE>+\n    \n    symbol                          ::=   unassigned\n                                      \n                                      |   { \n                                      \n                                      |   } \n                                      \n                                      |   = \n                                      \n                                      |   : \n    \n                                      |   ( \n                                      \n                                      |   )\n    \n    \n    \n    parenthesisedLabel              ::=   (<NO_WHITESPACE>label<NO_WHITESPACE>)\n\n    label                           ::=   unassigned\n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2Zsb3JlbmNlLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxvdkdBQUo7O0FBMEdBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJmbG9yZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGdyYW1tYXIgPSBgXG5cbiAgICBkb2N1bWVudCAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGFzc2VydGlvbipcblxuICAgIGFzc2VydGlvbiAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcnVsZSB8IHRoZW9yZW0gfCBsZW1tYVxuICAgIFxuICAgIFxuICAgIFxuICAgIHRoZW9yZW0gICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdGhlb3JlbURlY2xhcmF0aW9uIHByZW1pc2Uocyk/IGNvbmNsdXNpb24gcHJvb2ZcbiAgICBcbiAgICB0aGVvcmVtRGVjbGFyYXRpb24gICAgICAgICAgICAgIDo6PSAgIFRoZW9yZW0gcGFyZW50aGVzaXNlZExhYmVsPyA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIFxuICAgIFxuICAgIGxlbW1hICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgbGVtbWFEZWNsYXJhdGlvbiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mXG4gICAgXG4gICAgbGVtbWFEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICA6Oj0gICBMZW1tYSBwYXJlbnRoZXNpc2VkTGFiZWw/IDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgXG4gICAgXG4gICAgcnVsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBydWxlRGVjbGFyYXRpb24gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZj9cbiAgICBcbiAgICBydWxlRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgIDo6PSAgIFJ1bGUgcGFyZW50aGVzaXNlZExhYmVsPyA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIFxuICAgIFxuICAgIHByZW1pc2UocykgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJlbWlzZSB8IHByZW1pc2VzXG4gICAgXG4gICAgcHJlbWlzZSAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcmVtaXNlRGVjbGFyYXRpb24gKGxhYmVsbGVkKXN0YXRlbWVudFxuICAgIFxuICAgIHByZW1pc2VzICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJlbWlzZXNEZWNsYXJhdGlvbiAobGFiZWxsZWQpc3RhdGVtZW50IChsYWJlbGxlZClzdGF0ZW1lbnQrXG4gICAgXG4gICAgcHJlbWlzZURlY2xhcmF0aW9uICAgICAgICAgICAgICA6Oj0gICBQcmVtaXNlIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgcHJlbWlzZXNEZWNsYXJhdGlvbiAgICAgICAgICAgICA6Oj0gICBQcmVtaXNlcyA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIFxuXG4gICAgY29uY2x1c2lvbiAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25jbHVzaW9uRGVjbGFyYXRpb24gc3RhdGVtZW50XG4gICAgXG4gICAgY29uY2x1c2lvbkRlY2xhcmF0aW9uICAgICAgICAgICA6Oj0gICBDb25jbHVzaW9uIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgXG5cbiAgICBwcm9vZiAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByb29mRGVjbGFyYXRpb24gc3ViTGVtbWFPcihsYWJlbGxlZClzdGF0ZW1lbnQqIHRoZXJlZm9yZVxuICAgIFxuICAgIHByb29mRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgOjo9ICAgUHJvb2YgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBcblxuICAgIHRoZXJlZm9yZSAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdGhlcmVmb3JlRGVjbGFyYXRpb24gKGxhYmVsbGVkKXN0YXRlbWVudFxuICAgIFxuICAgIHRoZXJlZm9yZURlY2xhcmF0aW9uICAgICAgICAgICAgOjo9ICAgVGhlcmVmb3JlIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgXG5cbiAgICBzdWJMZW1tYU9yKGxhYmVsbGVkKXN0YXRlbWVudCAgIDo6PSAgIHN1YkxlbW1hIHwgKGxhYmVsbGVkKXN0YXRlbWVudFxuXG4gICAgc3ViTGVtbWEgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdXBwb3NlIHRoZW4/IGhlbmNlXG4gICAgXG4gICAgXG5cbiAgICBzdXBwb3NlICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN1cHBvc2VEZWNsYXJhdGlvbiBzdXBwb3NpdGlvbitcbiAgICBcbiAgICBzdXBwb3NlRGVjbGFyYXRpb24gICAgICAgICAgICAgIDo6PSAgIFN1cHBvc2UgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBzdXBwb3NpdGlvbiAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN0YXRlbWVudFxuICAgIFxuICAgIHRoZW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdGhlbkRlY2xhcmF0aW9uIHN1YkxlbW1hT3IobGFiZWxsZWQpc3RhdGVtZW50K1xuICAgIFxuICAgIHRoZW5EZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgOjo9ICAgVGhlbiA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIGhlbmNlICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgaGVuY2VEZWNsYXJhdGlvbiAobGFiZWxsZWQpc3RhdGVtZW50XG4gICAgXG4gICAgaGVuY2VEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICA6Oj0gICBIZW5jZSA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIFxuICAgIFxuICAgIChsYWJlbGxlZClzdGF0ZW1lbnQgICAgICAgICAgICAgOjo9ICAgbGFiZWxsZWRTdGF0ZW1lbnQgfCBzdGF0ZW1lbnRcbiAgICBcbiAgICBsYWJlbGxlZFN0YXRlbWVudCAgICAgICAgICAgICAgIDo6PSAgIHN5bWJvbCsgYnkgbGFiZWwgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBzdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN5bWJvbCsgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBzeW1ib2wgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVuYXNzaWduZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgPSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICA6IFxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgKCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICApXG4gICAgXG4gICAgXG4gICAgXG4gICAgcGFyZW50aGVzaXNlZExhYmVsICAgICAgICAgICAgICA6Oj0gICAoPE5PX1dISVRFU1BBQ0U+bGFiZWw8Tk9fV0hJVEVTUEFDRT4pXG5cbiAgICBsYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVuYXNzaWduZWRcbiAgICBcbmA7XG5cbm1vZHVsZS5leHBvcnRzID0gZ3JhbW1hcjtcbiJdfQ==