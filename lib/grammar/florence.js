'use strict';

var grammar = '\n\n    rule                            ::=   ruleDeclaration premise(s) conclusion proof?\n    \n    ruleDeclaration                 ::=   Rule parenthesisedLabel <END_OF_LINE>\n    \n    parenthesisedLabel              ::=   /\\([^)]+\\)/\n    \n    \n    \n    premise(s)                      ::=   premise | premises\n    \n    premise                         ::=   premiseDeclaration (labelled)statement\n    \n    premises                        ::=   premisesDeclaration (labelled)statement+\n    \n    premiseDeclaration              ::=   Premise <END_OF_LINE>\n    \n    premisesDeclaration             ::=   Premises <END_OF_LINE>\n    \n    \n\n    conclusion                      ::=   conclusionDeclaration statement\n    \n    conclusionDeclaration           ::=   Conclusion <END_OF_LINE>\n    \n    \n\n    proof                           ::=   proofDeclaration subLemmaOr(labelled)statement* statement\n    \n    proofDeclaration                ::=   Proof <END_OF_LINE>\n    \n    \n\n    subLemmaOr(labelled)statement   ::=   subLemma | (labelled)statement\n\n    subLemma                        ::=   suppose then? hence\n    \n    suppose                         ::=   supposeDeclaration statement\n    \n    supposeDeclaration              ::=   Suppose <END_OF_LINE>\n    \n    then                            ::=   thenDeclaration (labelled)statement+\n    \n    thenDeclaration                 ::=   Then <END_OF_LINE>\n    \n    hence                           ::=   henceDeclaration statement\n    \n    henceDeclaration                ::=   Hence <END_OF_LINE>\n    \n    \n\n    (labelled)statement             ::=   labelledStatement | statement\n    \n    labelledStatement               ::=   undefined+ by label <END_OF_LINE>\n    \n    statement                       ::=   undefined+ <END_OF_LINE>\n    \n    label                           ::=   /[^)]+/\n    \n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2Zsb3JlbmNlLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSw0M0RBQUo7O0FBK0RBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJmbG9yZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGdyYW1tYXIgPSBgXG5cbiAgICBydWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHJ1bGVEZWNsYXJhdGlvbiBwcmVtaXNlKHMpIGNvbmNsdXNpb24gcHJvb2Y/XG4gICAgXG4gICAgcnVsZURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICA6Oj0gICBSdWxlIHBhcmVudGhlc2lzZWRMYWJlbCA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgcGFyZW50aGVzaXNlZExhYmVsICAgICAgICAgICAgICA6Oj0gICAvXFxcXChbXildK1xcXFwpL1xuICAgIFxuICAgIFxuICAgIFxuICAgIHByZW1pc2UocykgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJlbWlzZSB8IHByZW1pc2VzXG4gICAgXG4gICAgcHJlbWlzZSAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcmVtaXNlRGVjbGFyYXRpb24gKGxhYmVsbGVkKXN0YXRlbWVudFxuICAgIFxuICAgIHByZW1pc2VzICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJlbWlzZXNEZWNsYXJhdGlvbiAobGFiZWxsZWQpc3RhdGVtZW50K1xuICAgIFxuICAgIHByZW1pc2VEZWNsYXJhdGlvbiAgICAgICAgICAgICAgOjo9ICAgUHJlbWlzZSA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgcHJlbWlzZXNEZWNsYXJhdGlvbiAgICAgICAgICAgICA6Oj0gICBQcmVtaXNlcyA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgXG5cbiAgICBjb25jbHVzaW9uICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbmNsdXNpb25EZWNsYXJhdGlvbiBzdGF0ZW1lbnRcbiAgICBcbiAgICBjb25jbHVzaW9uRGVjbGFyYXRpb24gICAgICAgICAgIDo6PSAgIENvbmNsdXNpb24gPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIFxuXG4gICAgcHJvb2YgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcm9vZkRlY2xhcmF0aW9uIHN1YkxlbW1hT3IobGFiZWxsZWQpc3RhdGVtZW50KiBzdGF0ZW1lbnRcbiAgICBcbiAgICBwcm9vZkRlY2xhcmF0aW9uICAgICAgICAgICAgICAgIDo6PSAgIFByb29mIDxFTkRfT0ZfTElORT5cbiAgICBcbiAgICBcblxuICAgIHN1YkxlbW1hT3IobGFiZWxsZWQpc3RhdGVtZW50ICAgOjo9ICAgc3ViTGVtbWEgfCAobGFiZWxsZWQpc3RhdGVtZW50XG5cbiAgICBzdWJMZW1tYSAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN1cHBvc2UgdGhlbj8gaGVuY2VcbiAgICBcbiAgICBzdXBwb3NlICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN1cHBvc2VEZWNsYXJhdGlvbiBzdGF0ZW1lbnRcbiAgICBcbiAgICBzdXBwb3NlRGVjbGFyYXRpb24gICAgICAgICAgICAgIDo6PSAgIFN1cHBvc2UgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIHRoZW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdGhlbkRlY2xhcmF0aW9uIChsYWJlbGxlZClzdGF0ZW1lbnQrXG4gICAgXG4gICAgdGhlbkRlY2xhcmF0aW9uICAgICAgICAgICAgICAgICA6Oj0gICBUaGVuIDxFTkRfT0ZfTElORT5cbiAgICBcbiAgICBoZW5jZSAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGhlbmNlRGVjbGFyYXRpb24gc3RhdGVtZW50XG4gICAgXG4gICAgaGVuY2VEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICA6Oj0gICBIZW5jZSA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgXG5cbiAgICAobGFiZWxsZWQpc3RhdGVtZW50ICAgICAgICAgICAgIDo6PSAgIGxhYmVsbGVkU3RhdGVtZW50IHwgc3RhdGVtZW50XG4gICAgXG4gICAgbGFiZWxsZWRTdGF0ZW1lbnQgICAgICAgICAgICAgICA6Oj0gICB1bmRlZmluZWQrIGJ5IGxhYmVsIDxFTkRfT0ZfTElORT5cbiAgICBcbiAgICBzdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVuZGVmaW5lZCsgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIGxhYmVsICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgL1teKV0rL1xuICAgIFxuICAgIFxuYDtcblxubW9kdWxlLmV4cG9ydHMgPSBncmFtbWFyO1xuIl19