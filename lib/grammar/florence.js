'use strict';

var grammar = '\n\n    rule                            ::=   ruleDeclaration premise(s) conclusion proof?\n    \n    ruleDeclaration                 ::=   Rule /\\(/<NO_WHITESPACE>label<NO_WHITESPACE>/\\) <END_OF_LINE>\n    \n    \n    \n    premise(s)                      ::=   premise | premises\n    \n    premise                         ::=   premiseDeclaration (qualified)statement\n    \n    premises                        ::=   premisesDeclaration (qualified)statement+\n    \n    premiseDeclaration              ::=   Premise <END_OF_LINE>\n    \n    premisesDeclaration             ::=   Premises <END_OF_LINE>\n    \n    \n\n    conclusion                      ::=   conclusionDeclaration statement\n    \n    conclusionDeclaration           ::=   Conclusion <END_OF_LINE>\n    \n    \n\n    proof                           ::=   proofDeclaration subLemmaOr(qualified)statement* statement\n    \n    proofDeclaration                ::=   Proof <END_OF_LINE>\n    \n    \n\n    subLemmaOr(qualified)statement  ::=   subLemma | (qualifed)statement\n\n    subLemma                        ::=   suppose then? hence\n    \n    suppose                         ::=   supposeDeclaration statement\n    \n    supposeDeclaration              ::=   Suppose <END_OF_LINE>\n    \n    then                            ::=   thenDeclaration (qualified)statement+\n    \n    thenDeclaration                 ::=   Then <END_OF_LINE>\n    \n    hence                           ::=   henceDeclaration statement\n    \n    henceDeclaration                ::=   Hence <END_OF_LINE>\n    \n    \n\n    (qualified)statement            ::=   qualifiedStatement | statement\n    \n    qualifiedStatement              ::=   statement by label\n    \n    statement                       ::=   /\\w+/ <END_OF_LINE>\n    \n    \n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2Zsb3JlbmNlLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxzeERBQUo7O0FBNERBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJmbG9yZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGdyYW1tYXIgPSBgXG5cbiAgICBydWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHJ1bGVEZWNsYXJhdGlvbiBwcmVtaXNlKHMpIGNvbmNsdXNpb24gcHJvb2Y/XG4gICAgXG4gICAgcnVsZURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICA6Oj0gICBSdWxlIC9cXFxcKC88Tk9fV0hJVEVTUEFDRT5sYWJlbDxOT19XSElURVNQQUNFPi9cXFxcKSA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgXG4gICAgXG4gICAgcHJlbWlzZShzKSAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcmVtaXNlIHwgcHJlbWlzZXNcbiAgICBcbiAgICBwcmVtaXNlICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByZW1pc2VEZWNsYXJhdGlvbiAocXVhbGlmaWVkKXN0YXRlbWVudFxuICAgIFxuICAgIHByZW1pc2VzICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJlbWlzZXNEZWNsYXJhdGlvbiAocXVhbGlmaWVkKXN0YXRlbWVudCtcbiAgICBcbiAgICBwcmVtaXNlRGVjbGFyYXRpb24gICAgICAgICAgICAgIDo6PSAgIFByZW1pc2UgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIHByZW1pc2VzRGVjbGFyYXRpb24gICAgICAgICAgICAgOjo9ICAgUHJlbWlzZXMgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIFxuXG4gICAgY29uY2x1c2lvbiAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25jbHVzaW9uRGVjbGFyYXRpb24gc3RhdGVtZW50XG4gICAgXG4gICAgY29uY2x1c2lvbkRlY2xhcmF0aW9uICAgICAgICAgICA6Oj0gICBDb25jbHVzaW9uIDxFTkRfT0ZfTElORT5cbiAgICBcbiAgICBcblxuICAgIHByb29mICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJvb2ZEZWNsYXJhdGlvbiBzdWJMZW1tYU9yKHF1YWxpZmllZClzdGF0ZW1lbnQqIHN0YXRlbWVudFxuICAgIFxuICAgIHByb29mRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgOjo9ICAgUHJvb2YgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIFxuXG4gICAgc3ViTGVtbWFPcihxdWFsaWZpZWQpc3RhdGVtZW50ICA6Oj0gICBzdWJMZW1tYSB8IChxdWFsaWZlZClzdGF0ZW1lbnRcblxuICAgIHN1YkxlbW1hICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3VwcG9zZSB0aGVuPyBoZW5jZVxuICAgIFxuICAgIHN1cHBvc2UgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3VwcG9zZURlY2xhcmF0aW9uIHN0YXRlbWVudFxuICAgIFxuICAgIHN1cHBvc2VEZWNsYXJhdGlvbiAgICAgICAgICAgICAgOjo9ICAgU3VwcG9zZSA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgdGhlbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB0aGVuRGVjbGFyYXRpb24gKHF1YWxpZmllZClzdGF0ZW1lbnQrXG4gICAgXG4gICAgdGhlbkRlY2xhcmF0aW9uICAgICAgICAgICAgICAgICA6Oj0gICBUaGVuIDxFTkRfT0ZfTElORT5cbiAgICBcbiAgICBoZW5jZSAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGhlbmNlRGVjbGFyYXRpb24gc3RhdGVtZW50XG4gICAgXG4gICAgaGVuY2VEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICA6Oj0gICBIZW5jZSA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgXG5cbiAgICAocXVhbGlmaWVkKXN0YXRlbWVudCAgICAgICAgICAgIDo6PSAgIHF1YWxpZmllZFN0YXRlbWVudCB8IHN0YXRlbWVudFxuICAgIFxuICAgIHF1YWxpZmllZFN0YXRlbWVudCAgICAgICAgICAgICAgOjo9ICAgc3RhdGVtZW50IGJ5IGxhYmVsXG4gICAgXG4gICAgc3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAvXFxcXHcrLyA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgXG4gICAgXG5gO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdyYW1tYXI7XG5cblxuXG4iXX0=