'use strict';

var grammar = '\n\n    \n    document                                  ::=   part*\n\n    part                                      ::=   space | rule | axiom | theorem | lemma | variable(s) | constructor(s) | error\n    \n    \n    \n    space                                     ::=   <END_OF_LINE>+\n   \n    error                                     ::=   string | special | keyword | unassigned \n    \n    \n    \n    rule                                      ::=   Rule parenthesisedLabel? <END_OF_LINE>+ premise(s)? conclusion proof?\n    \n    axiom                                     ::=   Axiom parenthesisedLabel? <END_OF_LINE>+ premise(s)? conclusion\n    \n    theorem                                   ::=   Theorem parenthesisedLabel? <END_OF_LINE>+ premise(s)? conclusion proof\n        \n    lemma                                     ::=   Lemma parenthesisedLabel? <END_OF_LINE>+ premise(s)? conclusion proof\n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   Premise <END_OF_LINE>+ (labelled)statement\n    \n    premises                                  ::=   Premises <END_OF_LINE>+ (labelled)statement (labelled)statement+\n\n    conclusion                                ::=   Conclusion <END_OF_LINE>+ statement\n\n    proof                                     ::=   Proof <END_OF_LINE>+ subLemmaOr(labelled)statement* therefore\n\n    therefore                                 ::=   Therefore <END_OF_LINE>+ (labelled)statement\n    \n    \n\n    subLemmaOr(labelled)statement             ::=   subLemma | (labelled)statement\n\n    subLemma                                  ::=   suppose then? hence\n    \n    \n\n    suppose                                   ::=   Suppose <END_OF_LINE>+ statement+\n    \n    then                                      ::=   Then <END_OF_LINE>+ subLemmaOr(labelled)statement+\n    \n    hence                                     ::=   Hence <END_OF_LINE>+ (labelled)statement\n    \n    \n    \n    (labelled)statement                       ::=   labelledStatement | statement\n    \n    labelledStatement                         ::=   symbol+ by label <END_OF_LINE>+\n    \n    statement                                 ::=   symbol+ <END_OF_LINE>+\n    \n    symbol                                    ::=   unassigned | { | } | = | : | ( | )\n    \n    \n    \n    parenthesisedLabel                        ::=   (<NO_WHITESPACE>label<NO_WHITESPACE>)\n\n    label                                     ::=   unassigned\n    \n\n\n    variable(s)                               ::=   variable | variables\n\n    variables                                 ::=   Variables <END_OF_LINE>+ variable(s)Declaration(s)\n    \n    variable                                  ::=   Variable <END_OF_LINE>+ variableDeclaration\n    \n    variable(s)Declaration(s)                 ::=   variables(s)Declarations | variablesDeclaration\n\n    variables(s)Declarations                  ::=   variable(s)Declaration semiColonThenVariable(s)Declaration+\n       \n    semiColonThenVariable(s)Declaration       ::=   ; variable(s)Declaration\n    \n    variable(s)Declaration                    ::=   variablesDeclaration | variableDeclaration\n    \n    variablesDeclaration                      ::=   variableNames colonThenTypeName?\n\n    variableDeclaration                       ::=   variableName colonThenTypeName?\n\n    variableNames                             ::=   variableName commaThenVariableName+\n\n    commaThenVariableName                     ::=   , variableName    \n    \n    colonThenTypeName                         ::=   : typeName\n\n    variableName                              ::=   unassigned\n\n\n\n    constructor(s)                            ::=   constructor | constructors\n\n    constructors                              ::=   Constructors <END_OF_LINE>+ constructor(s)Declaration(s)\n    \n    constructor                               ::=   Constructor <END_OF_LINE>+ constructorDeclaration\n    \n    constructor(s)Declaration(s)              ::=   constructors(s)Declarations | constructorsDeclaration\n\n    constructors(s)Declarations               ::=   constructor(s)Declaration semiColonThenConstructor(s)Declaration+\n       \n    semiColonThenConstructor(s)Declaration    ::=   ; constructor(s)Declaration\n    \n    constructor(s)Declaration                 ::=   constructorsDeclaration | constructorDeclaration\n    \n    constructorsDeclaration                   ::=   constructorBodies colonThenTypeName?\n\n    constructorDeclaration                    ::=   constructorBody colonThenTypeName?\n\n    constructorBodies                         ::=   constructorBody commaThenConstructorBody+\n\n    commaThenConstructorBody                  ::=   , constructorBody    \n    \n    colonThenTypeName                         ::=   : typeName\n\n    constructorBody                           ::=   constructorName<NO_WHITESPACE>parenthesisedConstructorArguments?\n\n    constructorName                           ::=   unassigned\n    \n    parenthesisedConstructorArguments         ::=   (<NO_WHITESPACE>constructorArguments<NO_WHITESPACE>)\n\n    constructorArguments                      ::=   constructorArgument<NO_WHITESPACE>commaThenConstructorArgument*\n    \n    commaThenConstructorArgument              ::=   ,<NO_WHITESPACE>constructorArgument\n    \n    constructorArgument                       ::=   typeName | .. | unassigned\n    \n    \n\n    typeName                                  ::=   unassigned\n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ncmFtbWFyL2Zsb3JlbmNlLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSw2K0tBQUo7O0FBMklBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJmbG9yZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGdyYW1tYXIgPSBgXG5cbiAgICBcbiAgICBkb2N1bWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwYXJ0KlxuXG4gICAgcGFydCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3BhY2UgfCBydWxlIHwgYXhpb20gfCB0aGVvcmVtIHwgbGVtbWEgfCB2YXJpYWJsZShzKSB8IGNvbnN0cnVjdG9yKHMpIHwgZXJyb3JcbiAgICBcbiAgICBcbiAgICBcbiAgICBzcGFjZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICA8RU5EX09GX0xJTkU+K1xuICAgXG4gICAgZXJyb3IgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3RyaW5nIHwgc3BlY2lhbCB8IGtleXdvcmQgfCB1bmFzc2lnbmVkIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHJ1bGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFJ1bGUgcGFyZW50aGVzaXNlZExhYmVsPyA8RU5EX09GX0xJTkU+KyBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mP1xuICAgIFxuICAgIGF4aW9tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIEF4aW9tIHBhcmVudGhlc2lzZWRMYWJlbD8gPEVORF9PRl9MSU5FPisgcHJlbWlzZShzKT8gY29uY2x1c2lvblxuICAgIFxuICAgIHRoZW9yZW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFRoZW9yZW0gcGFyZW50aGVzaXNlZExhYmVsPyA8RU5EX09GX0xJTkU+KyBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mXG4gICAgICAgIFxuICAgIGxlbW1hICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIExlbW1hIHBhcmVudGhlc2lzZWRMYWJlbD8gPEVORF9PRl9MSU5FPisgcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZlxuICAgIFxuICAgIFxuICAgIFxuICAgIHByZW1pc2UocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByZW1pc2UgfCBwcmVtaXNlc1xuICAgIFxuICAgIHByZW1pc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFByZW1pc2UgPEVORF9PRl9MSU5FPisgKGxhYmVsbGVkKXN0YXRlbWVudFxuICAgIFxuICAgIHByZW1pc2VzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFByZW1pc2VzIDxFTkRfT0ZfTElORT4rIChsYWJlbGxlZClzdGF0ZW1lbnQgKGxhYmVsbGVkKXN0YXRlbWVudCtcblxuICAgIGNvbmNsdXNpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIENvbmNsdXNpb24gPEVORF9PRl9MSU5FPisgc3RhdGVtZW50XG5cbiAgICBwcm9vZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBQcm9vZiA8RU5EX09GX0xJTkU+KyBzdWJMZW1tYU9yKGxhYmVsbGVkKXN0YXRlbWVudCogdGhlcmVmb3JlXG5cbiAgICB0aGVyZWZvcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBUaGVyZWZvcmUgPEVORF9PRl9MSU5FPisgKGxhYmVsbGVkKXN0YXRlbWVudFxuICAgIFxuICAgIFxuXG4gICAgc3ViTGVtbWFPcihsYWJlbGxlZClzdGF0ZW1lbnQgICAgICAgICAgICAgOjo9ICAgc3ViTGVtbWEgfCAobGFiZWxsZWQpc3RhdGVtZW50XG5cbiAgICBzdWJMZW1tYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdXBwb3NlIHRoZW4/IGhlbmNlXG4gICAgXG4gICAgXG5cbiAgICBzdXBwb3NlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBTdXBwb3NlIDxFTkRfT0ZfTElORT4rIHN0YXRlbWVudCtcbiAgICBcbiAgICB0aGVuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBUaGVuIDxFTkRfT0ZfTElORT4rIHN1YkxlbW1hT3IobGFiZWxsZWQpc3RhdGVtZW50K1xuICAgIFxuICAgIGhlbmNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIEhlbmNlIDxFTkRfT0ZfTElORT4rIChsYWJlbGxlZClzdGF0ZW1lbnRcbiAgICBcbiAgICBcbiAgICBcbiAgICAobGFiZWxsZWQpc3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBsYWJlbGxlZFN0YXRlbWVudCB8IHN0YXRlbWVudFxuICAgIFxuICAgIGxhYmVsbGVkU3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN5bWJvbCsgYnkgbGFiZWwgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBzdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzeW1ib2wrIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgc3ltYm9sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdW5hc3NpZ25lZCB8IHsgfCB9IHwgPSB8IDogfCAoIHwgKVxuICAgIFxuICAgIFxuICAgIFxuICAgIHBhcmVudGhlc2lzZWRMYWJlbCAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICg8Tk9fV0hJVEVTUEFDRT5sYWJlbDxOT19XSElURVNQQUNFPilcblxuICAgIGxhYmVsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVuYXNzaWduZWRcbiAgICBcblxuXG4gICAgdmFyaWFibGUocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdmFyaWFibGUgfCB2YXJpYWJsZXNcblxuICAgIHZhcmlhYmxlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFZhcmlhYmxlcyA8RU5EX09GX0xJTkU+KyB2YXJpYWJsZShzKURlY2xhcmF0aW9uKHMpXG4gICAgXG4gICAgdmFyaWFibGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgVmFyaWFibGUgPEVORF9PRl9MSU5FPisgdmFyaWFibGVEZWNsYXJhdGlvblxuICAgIFxuICAgIHZhcmlhYmxlKHMpRGVjbGFyYXRpb24ocykgICAgICAgICAgICAgICAgIDo6PSAgIHZhcmlhYmxlcyhzKURlY2xhcmF0aW9ucyB8IHZhcmlhYmxlc0RlY2xhcmF0aW9uXG5cbiAgICB2YXJpYWJsZXMocylEZWNsYXJhdGlvbnMgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZShzKURlY2xhcmF0aW9uIHNlbWlDb2xvblRoZW5WYXJpYWJsZShzKURlY2xhcmF0aW9uK1xuICAgICAgIFxuICAgIHNlbWlDb2xvblRoZW5WYXJpYWJsZShzKURlY2xhcmF0aW9uICAgICAgIDo6PSAgIDsgdmFyaWFibGUocylEZWNsYXJhdGlvblxuICAgIFxuICAgIHZhcmlhYmxlKHMpRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgICAgIDo6PSAgIHZhcmlhYmxlc0RlY2xhcmF0aW9uIHwgdmFyaWFibGVEZWNsYXJhdGlvblxuICAgIFxuICAgIHZhcmlhYmxlc0RlY2xhcmF0aW9uICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHZhcmlhYmxlTmFtZXMgY29sb25UaGVuVHlwZU5hbWU/XG5cbiAgICB2YXJpYWJsZURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZU5hbWUgY29sb25UaGVuVHlwZU5hbWU/XG5cbiAgICB2YXJpYWJsZU5hbWVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZU5hbWUgY29tbWFUaGVuVmFyaWFibGVOYW1lK1xuXG4gICAgY29tbWFUaGVuVmFyaWFibGVOYW1lICAgICAgICAgICAgICAgICAgICAgOjo9ICAgLCB2YXJpYWJsZU5hbWUgICAgXG4gICAgXG4gICAgY29sb25UaGVuVHlwZU5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgOiB0eXBlTmFtZVxuXG4gICAgdmFyaWFibGVOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdW5hc3NpZ25lZFxuXG5cblxuICAgIGNvbnN0cnVjdG9yKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yIHwgY29uc3RydWN0b3JzXG5cbiAgICBjb25zdHJ1Y3RvcnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBDb25zdHJ1Y3RvcnMgPEVORF9PRl9MSU5FPisgY29uc3RydWN0b3IocylEZWNsYXJhdGlvbihzKVxuICAgIFxuICAgIGNvbnN0cnVjdG9yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIENvbnN0cnVjdG9yIDxFTkRfT0ZfTElORT4rIGNvbnN0cnVjdG9yRGVjbGFyYXRpb25cbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzKURlY2xhcmF0aW9uKHMpICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvcnMocylEZWNsYXJhdGlvbnMgfCBjb25zdHJ1Y3RvcnNEZWNsYXJhdGlvblxuXG4gICAgY29uc3RydWN0b3JzKHMpRGVjbGFyYXRpb25zICAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3IocylEZWNsYXJhdGlvbiBzZW1pQ29sb25UaGVuQ29uc3RydWN0b3IocylEZWNsYXJhdGlvbitcbiAgICAgICBcbiAgICBzZW1pQ29sb25UaGVuQ29uc3RydWN0b3IocylEZWNsYXJhdGlvbiAgICA6Oj0gICA7IGNvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb25cbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzKURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvcnNEZWNsYXJhdGlvbiB8IGNvbnN0cnVjdG9yRGVjbGFyYXRpb25cbiAgICBcbiAgICBjb25zdHJ1Y3RvcnNEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvckJvZGllcyBjb2xvblRoZW5UeXBlTmFtZT9cblxuICAgIGNvbnN0cnVjdG9yRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yQm9keSBjb2xvblRoZW5UeXBlTmFtZT9cblxuICAgIGNvbnN0cnVjdG9yQm9kaWVzICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yQm9keSBjb21tYVRoZW5Db25zdHJ1Y3RvckJvZHkrXG5cbiAgICBjb21tYVRoZW5Db25zdHJ1Y3RvckJvZHkgICAgICAgICAgICAgICAgICA6Oj0gICAsIGNvbnN0cnVjdG9yQm9keSAgICBcbiAgICBcbiAgICBjb2xvblRoZW5UeXBlTmFtZSAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICA6IHR5cGVOYW1lXG5cbiAgICBjb25zdHJ1Y3RvckJvZHkgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3Rvck5hbWU8Tk9fV0hJVEVTUEFDRT5wYXJlbnRoZXNpc2VkQ29uc3RydWN0b3JBcmd1bWVudHM/XG5cbiAgICBjb25zdHJ1Y3Rvck5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB1bmFzc2lnbmVkXG4gICAgXG4gICAgcGFyZW50aGVzaXNlZENvbnN0cnVjdG9yQXJndW1lbnRzICAgICAgICAgOjo9ICAgKDxOT19XSElURVNQQUNFPmNvbnN0cnVjdG9yQXJndW1lbnRzPE5PX1dISVRFU1BBQ0U+KVxuXG4gICAgY29uc3RydWN0b3JBcmd1bWVudHMgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3JBcmd1bWVudDxOT19XSElURVNQQUNFPmNvbW1hVGhlbkNvbnN0cnVjdG9yQXJndW1lbnQqXG4gICAgXG4gICAgY29tbWFUaGVuQ29uc3RydWN0b3JBcmd1bWVudCAgICAgICAgICAgICAgOjo9ICAgLDxOT19XSElURVNQQUNFPmNvbnN0cnVjdG9yQXJndW1lbnRcbiAgICBcbiAgICBjb25zdHJ1Y3RvckFyZ3VtZW50ICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB0eXBlTmFtZSB8IC4uIHwgdW5hc3NpZ25lZFxuICAgIFxuICAgIFxuXG4gICAgdHlwZU5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdW5hc3NpZ25lZFxuICAgIFxuYDtcblxubW9kdWxlLmV4cG9ydHMgPSBncmFtbWFyO1xuIl19