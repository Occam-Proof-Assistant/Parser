'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rule = require('../../extendedBNF/rule'),
    Definition = require('../../extendedBNF/definition'),
    EpsilonPart = require('../../extendedBNF/part/epsilon'),
    RuleNamePart = require('../../extendedBNF/part/ruleName'),
    NonTerminalNode = require('../../common/node/nonTerminal');

var RightRecursiveRule = function (_Rule) {
  _inherits(RightRecursiveRule, _Rule);

  function RightRecursiveRule() {
    _classCallCheck(this, RightRecursiveRule);

    return _possibleConstructorReturn(this, (RightRecursiveRule.__proto__ || Object.getPrototypeOf(RightRecursiveRule)).apply(this, arguments));
  }

  _createClass(RightRecursiveRule, null, [{
    key: 'ruleNamePartFromLeftRecursiveRule',
    value: function ruleNamePartFromLeftRecursiveRule(leftRecursiveRule) {
      var name = nameFromLeftRecursiveRule(leftRecursiveRule),
          noWhitespace = false,
          ///
      ruleNamePart = new RuleNamePart(name, noWhitespace);

      return ruleNamePart;
    }
  }, {
    key: 'fromLeftRecursiveRule',
    value: function fromLeftRecursiveRule(leftRecursiveRule) {
      var name = nameFromLeftRecursiveRule(leftRecursiveRule),
          definitions = definitionsFromLeftRecursiveRule(leftRecursiveRule),
          Node = NonTerminalNode,
          ///
      rightRecursiveRule = new RightRecursiveRule(name, definitions, Node);

      return rightRecursiveRule;
    }
  }]);

  return RightRecursiveRule;
}(Rule);

module.exports = RightRecursiveRule;

function definitionsFromLeftRecursiveRule(leftRecursiveRule) {
  var rightRecursiveDefinitions = rightRecursiveDefinitionsFromLeftRecursiveRule(leftRecursiveRule),
      epsilonPart = new EpsilonPart(),
      epsilonParts = [epsilonPart],
      epsilonPartDefinition = new Definition(epsilonParts),
      definitions = [].concat(rightRecursiveDefinitions).concat(epsilonPartDefinition);

  return definitions;
}

function rightRecursiveDefinitionsFromLeftRecursiveRule(leftRecursiveRule) {
  var ruleLeftRecursiveDefinitions = leftRecursiveRule.getLeftRecursiveDefinitions(),
      ruleNamePart = RightRecursiveRule.ruleNamePartFromLeftRecursiveRule(leftRecursiveRule),
      rightRecursiveDefinitions = ruleLeftRecursiveDefinitions.map(function (ruleLeftRecursiveDefinition) {
    var ruleLeftRecursiveDefinitionAllButFirstParts = ruleLeftRecursiveDefinition.getAllButFirstParts(),
        rightRecursiveDefinitionParts = [].concat(ruleLeftRecursiveDefinitionAllButFirstParts).concat(ruleNamePart),
        rightRecursiveDefinition = new Definition(rightRecursiveDefinitionParts);

    return rightRecursiveDefinition;
  });

  return rightRecursiveDefinitions;
}

function nameFromLeftRecursiveRule(leftRecursiveRule) {
  var leftRecursiveRuleName = leftRecursiveRule.getName(),
      name = leftRecursiveRuleName + '~';

  return name;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ncmFtbWFyL3J1bGUvcmlnaHRSZWN1cnNpdmUuanMiXSwibmFtZXMiOlsiUnVsZSIsInJlcXVpcmUiLCJEZWZpbml0aW9uIiwiRXBzaWxvblBhcnQiLCJSdWxlTmFtZVBhcnQiLCJOb25UZXJtaW5hbE5vZGUiLCJSaWdodFJlY3Vyc2l2ZVJ1bGUiLCJsZWZ0UmVjdXJzaXZlUnVsZSIsIm5hbWUiLCJuYW1lRnJvbUxlZnRSZWN1cnNpdmVSdWxlIiwibm9XaGl0ZXNwYWNlIiwicnVsZU5hbWVQYXJ0IiwiZGVmaW5pdGlvbnMiLCJkZWZpbml0aW9uc0Zyb21MZWZ0UmVjdXJzaXZlUnVsZSIsIk5vZGUiLCJyaWdodFJlY3Vyc2l2ZVJ1bGUiLCJtb2R1bGUiLCJleHBvcnRzIiwicmlnaHRSZWN1cnNpdmVEZWZpbml0aW9ucyIsInJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnNGcm9tTGVmdFJlY3Vyc2l2ZVJ1bGUiLCJlcHNpbG9uUGFydCIsImVwc2lsb25QYXJ0cyIsImVwc2lsb25QYXJ0RGVmaW5pdGlvbiIsImNvbmNhdCIsInJ1bGVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJnZXRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMiLCJydWxlTmFtZVBhcnRGcm9tTGVmdFJlY3Vyc2l2ZVJ1bGUiLCJtYXAiLCJydWxlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24iLCJydWxlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbGxCdXRGaXJzdFBhcnRzIiwiZ2V0QWxsQnV0Rmlyc3RQYXJ0cyIsInJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvblBhcnRzIiwicmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uIiwibGVmdFJlY3Vyc2l2ZVJ1bGVOYW1lIiwiZ2V0TmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLHdCQUFSLENBQWI7QUFBQSxJQUNNQyxhQUFhRCxRQUFRLDhCQUFSLENBRG5CO0FBQUEsSUFFTUUsY0FBY0YsUUFBUSxnQ0FBUixDQUZwQjtBQUFBLElBR01HLGVBQWVILFFBQVEsaUNBQVIsQ0FIckI7QUFBQSxJQUlNSSxrQkFBa0JKLFFBQVEsK0JBQVIsQ0FKeEI7O0lBTU1LLGtCOzs7Ozs7Ozs7OztzREFDcUNDLGlCLEVBQW1CO0FBQzFELFVBQU1DLE9BQU9DLDBCQUEwQkYsaUJBQTFCLENBQWI7QUFBQSxVQUNNRyxlQUFlLEtBRHJCO0FBQUEsVUFDNEI7QUFDdEJDLHFCQUFlLElBQUlQLFlBQUosQ0FBaUJJLElBQWpCLEVBQXVCRSxZQUF2QixDQUZyQjs7QUFJQSxhQUFPQyxZQUFQO0FBQ0Q7OzswQ0FFNEJKLGlCLEVBQW1CO0FBQzlDLFVBQU1DLE9BQU9DLDBCQUEwQkYsaUJBQTFCLENBQWI7QUFBQSxVQUNNSyxjQUFjQyxpQ0FBaUNOLGlCQUFqQyxDQURwQjtBQUFBLFVBRU1PLE9BQU9ULGVBRmI7QUFBQSxVQUU4QjtBQUN4QlUsMkJBQXFCLElBQUlULGtCQUFKLENBQXVCRSxJQUF2QixFQUE2QkksV0FBN0IsRUFBMENFLElBQTFDLENBSDNCOztBQUtBLGFBQU9DLGtCQUFQO0FBQ0Q7Ozs7RUFoQjhCZixJOztBQW1CakNnQixPQUFPQyxPQUFQLEdBQWlCWCxrQkFBakI7O0FBRUEsU0FBU08sZ0NBQVQsQ0FBMENOLGlCQUExQyxFQUE2RDtBQUMzRCxNQUFNVyw0QkFBNEJDLCtDQUErQ1osaUJBQS9DLENBQWxDO0FBQUEsTUFDUWEsY0FBYyxJQUFJakIsV0FBSixFQUR0QjtBQUFBLE1BRVFrQixlQUFlLENBQ2JELFdBRGEsQ0FGdkI7QUFBQSxNQUtRRSx3QkFBd0IsSUFBSXBCLFVBQUosQ0FBZW1CLFlBQWYsQ0FMaEM7QUFBQSxNQU1RVCxjQUFjLEdBQUdXLE1BQUgsQ0FBVUwseUJBQVYsRUFBcUNLLE1BQXJDLENBQTRDRCxxQkFBNUMsQ0FOdEI7O0FBUUEsU0FBT1YsV0FBUDtBQUNEOztBQUVELFNBQVNPLDhDQUFULENBQXdEWixpQkFBeEQsRUFBMkU7QUFDekUsTUFBTWlCLCtCQUErQmpCLGtCQUFrQmtCLDJCQUFsQixFQUFyQztBQUFBLE1BQ01kLGVBQWVMLG1CQUFtQm9CLGlDQUFuQixDQUFxRG5CLGlCQUFyRCxDQURyQjtBQUFBLE1BRU1XLDRCQUE0Qk0sNkJBQTZCRyxHQUE3QixDQUFpQyxVQUFTQywyQkFBVCxFQUFzQztBQUNqRyxRQUFNQyw4Q0FBOENELDRCQUE0QkUsbUJBQTVCLEVBQXBEO0FBQUEsUUFDTUMsZ0NBQWdDLEdBQUdSLE1BQUgsQ0FBVU0sMkNBQVYsRUFBdUROLE1BQXZELENBQThEWixZQUE5RCxDQUR0QztBQUFBLFFBRU1xQiwyQkFBMkIsSUFBSTlCLFVBQUosQ0FBZTZCLDZCQUFmLENBRmpDOztBQUlBLFdBQU9DLHdCQUFQO0FBQ0QsR0FOMkIsQ0FGbEM7O0FBVUEsU0FBT2QseUJBQVA7QUFDRDs7QUFFRCxTQUFTVCx5QkFBVCxDQUFtQ0YsaUJBQW5DLEVBQXNEO0FBQ3BELE1BQU0wQix3QkFBd0IxQixrQkFBa0IyQixPQUFsQixFQUE5QjtBQUFBLE1BQ00xQixPQUFVeUIscUJBQVYsTUFETjs7QUFHQSxTQUFPekIsSUFBUDtBQUNEIiwiZmlsZSI6InJpZ2h0UmVjdXJzaXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSdWxlID0gcmVxdWlyZSgnLi4vLi4vZXh0ZW5kZWRCTkYvcnVsZScpLFxuICAgICAgRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uL2V4dGVuZGVkQk5GL2RlZmluaXRpb24nKSxcbiAgICAgIEVwc2lsb25QYXJ0ID0gcmVxdWlyZSgnLi4vLi4vZXh0ZW5kZWRCTkYvcGFydC9lcHNpbG9uJyksXG4gICAgICBSdWxlTmFtZVBhcnQgPSByZXF1aXJlKCcuLi8uLi9leHRlbmRlZEJORi9wYXJ0L3J1bGVOYW1lJyksXG4gICAgICBOb25UZXJtaW5hbE5vZGUgPSByZXF1aXJlKCcuLi8uLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbCcpO1xuXG5jbGFzcyBSaWdodFJlY3Vyc2l2ZVJ1bGUgZXh0ZW5kcyBSdWxlIHtcbiAgc3RhdGljIHJ1bGVOYW1lUGFydEZyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSkge1xuICAgIGNvbnN0IG5hbWUgPSBuYW1lRnJvbUxlZnRSZWN1cnNpdmVSdWxlKGxlZnRSZWN1cnNpdmVSdWxlKSxcbiAgICAgICAgICBub1doaXRlc3BhY2UgPSBmYWxzZSwgLy8vXG4gICAgICAgICAgcnVsZU5hbWVQYXJ0ID0gbmV3IFJ1bGVOYW1lUGFydChuYW1lLCBub1doaXRlc3BhY2UpO1xuICAgIFxuICAgIHJldHVybiBydWxlTmFtZVBhcnQ7XG4gIH1cbiAgXG4gIHN0YXRpYyBmcm9tTGVmdFJlY3Vyc2l2ZVJ1bGUobGVmdFJlY3Vyc2l2ZVJ1bGUpIHtcbiAgICBjb25zdCBuYW1lID0gbmFtZUZyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSBkZWZpbml0aW9uc0Zyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgICAgTm9kZSA9IE5vblRlcm1pbmFsTm9kZSwgLy8vXG4gICAgICAgICAgcmlnaHRSZWN1cnNpdmVSdWxlID0gbmV3IFJpZ2h0UmVjdXJzaXZlUnVsZShuYW1lLCBkZWZpbml0aW9ucywgTm9kZSk7XG4gICAgXG4gICAgcmV0dXJuIHJpZ2h0UmVjdXJzaXZlUnVsZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJpZ2h0UmVjdXJzaXZlUnVsZTtcblxuZnVuY3Rpb24gZGVmaW5pdGlvbnNGcm9tTGVmdFJlY3Vyc2l2ZVJ1bGUobGVmdFJlY3Vyc2l2ZVJ1bGUpIHtcbiAgY29uc3QgcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9ucyA9IHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnNGcm9tTGVmdFJlY3Vyc2l2ZVJ1bGUobGVmdFJlY3Vyc2l2ZVJ1bGUpLFxuICAgICAgICAgIGVwc2lsb25QYXJ0ID0gbmV3IEVwc2lsb25QYXJ0KCksXG4gICAgICAgICAgZXBzaWxvblBhcnRzID0gW1xuICAgICAgICAgICAgZXBzaWxvblBhcnRcbiAgICAgICAgICBdLFxuICAgICAgICAgIGVwc2lsb25QYXJ0RGVmaW5pdGlvbiA9IG5ldyBEZWZpbml0aW9uKGVwc2lsb25QYXJ0cyksXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSBbXS5jb25jYXQocmlnaHRSZWN1cnNpdmVEZWZpbml0aW9ucykuY29uY2F0KGVwc2lsb25QYXJ0RGVmaW5pdGlvbik7XG5cbiAgcmV0dXJuIGRlZmluaXRpb25zO1xufVxuXG5mdW5jdGlvbiByaWdodFJlY3Vyc2l2ZURlZmluaXRpb25zRnJvbUxlZnRSZWN1cnNpdmVSdWxlKGxlZnRSZWN1cnNpdmVSdWxlKSB7XG4gIGNvbnN0IHJ1bGVMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBsZWZ0UmVjdXJzaXZlUnVsZS5nZXRMZWZ0UmVjdXJzaXZlRGVmaW5pdGlvbnMoKSxcbiAgICAgICAgcnVsZU5hbWVQYXJ0ID0gUmlnaHRSZWN1cnNpdmVSdWxlLnJ1bGVOYW1lUGFydEZyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSksXG4gICAgICAgIHJpZ2h0UmVjdXJzaXZlRGVmaW5pdGlvbnMgPSBydWxlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25zLm1hcChmdW5jdGlvbihydWxlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb24pIHtcbiAgICAgICAgICBjb25zdCBydWxlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbGxCdXRGaXJzdFBhcnRzID0gcnVsZUxlZnRSZWN1cnNpdmVEZWZpbml0aW9uLmdldEFsbEJ1dEZpcnN0UGFydHMoKSxcbiAgICAgICAgICAgICAgICByaWdodFJlY3Vyc2l2ZURlZmluaXRpb25QYXJ0cyA9IFtdLmNvbmNhdChydWxlTGVmdFJlY3Vyc2l2ZURlZmluaXRpb25BbGxCdXRGaXJzdFBhcnRzKS5jb25jYXQocnVsZU5hbWVQYXJ0KSxcbiAgICAgICAgICAgICAgICByaWdodFJlY3Vyc2l2ZURlZmluaXRpb24gPSBuZXcgRGVmaW5pdGlvbihyaWdodFJlY3Vyc2l2ZURlZmluaXRpb25QYXJ0cyk7XG5cbiAgICAgICAgICByZXR1cm4gcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9uO1xuICAgICAgICB9KTtcblxuICByZXR1cm4gcmlnaHRSZWN1cnNpdmVEZWZpbml0aW9ucztcbn1cblxuZnVuY3Rpb24gbmFtZUZyb21MZWZ0UmVjdXJzaXZlUnVsZShsZWZ0UmVjdXJzaXZlUnVsZSkge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZU5hbWUgPSBsZWZ0UmVjdXJzaXZlUnVsZS5nZXROYW1lKCksXG4gICAgICAgIG5hbWUgPSBgJHtsZWZ0UmVjdXJzaXZlUnVsZU5hbWV9fmA7XG5cbiAgcmV0dXJuIG5hbWU7XG59XG4iXX0=