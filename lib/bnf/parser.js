'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CommonParser = require('../common/parser'),
    PartProduction = require('./production/part'),
    GroupProduction = require('./production/group'),
    EndOfLineProduction = require('./production/endOfLine'),
    DefinitionProduction = require('./production/definition'),
    DefinitionsProduction = require('./production/definitions'),
    ProductionProduction = require('./production/production'),
    ProductionsProduction = require('./production/productions'),
    OptionalPartProduction = require('./production/optionalPart'),
    NoWhitespaceProduction = require('./production/noWhitespace'),
    ProductionNameProduction = require('./production/productionName'),
    TerminalSymbolProduction = require('./production/terminalSymbol'),
    RegularExpressionProduction = require('./production/regularExpression'),
    SignificantTokenTypeProduction = require('./production/significantTokenType'),
    RightRecursiveOptionalPartProduction = require('./production/rightRecursiveOptionalPart');

var BNFParser = function (_CommonParser) {
  _inherits(BNFParser, _CommonParser);

  function BNFParser() {
    _classCallCheck(this, BNFParser);

    return _possibleConstructorReturn(this, (BNFParser.__proto__ || Object.getPrototypeOf(BNFParser)).apply(this, arguments));
  }

  _createClass(BNFParser, null, [{
    key: 'fromNothing',
    value: function fromNothing() {
      var partProduction = new PartProduction(),
          groupProduction = new GroupProduction(),
          endOfLineProduction = new EndOfLineProduction(),
          definitionProduction = new DefinitionProduction(),
          definitionsProduction = new DefinitionsProduction(),
          productionProduction = new ProductionProduction(),
          productionsProduction = new ProductionsProduction(),
          optionalPartProduction = new OptionalPartProduction(),
          noWhitespaceProduction = new NoWhitespaceProduction(),
          productionNameProduction = new ProductionNameProduction(),
          terminalSymbolProduction = new TerminalSymbolProduction(),
          regularExpressionProduction = new RegularExpressionProduction(),
          significantTokenTypeProduction = new SignificantTokenTypeProduction(),
          rightRecursiveOptionalPartProduction = new RightRecursiveOptionalPartProduction(),
          productions = [productionsProduction, productionProduction, definitionsProduction, definitionProduction, partProduction, optionalPartProduction, rightRecursiveOptionalPartProduction, groupProduction, productionNameProduction, regularExpressionProduction, significantTokenTypeProduction, terminalSymbolProduction, noWhitespaceProduction, endOfLineProduction],
          bnfParser = new BNFParser(productions);

      return bnfParser;
    }
  }]);

  return BNFParser;
}(CommonParser);

module.exports = BNFParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ibmYvcGFyc2VyLmpzIl0sIm5hbWVzIjpbIkNvbW1vblBhcnNlciIsInJlcXVpcmUiLCJQYXJ0UHJvZHVjdGlvbiIsIkdyb3VwUHJvZHVjdGlvbiIsIkVuZE9mTGluZVByb2R1Y3Rpb24iLCJEZWZpbml0aW9uUHJvZHVjdGlvbiIsIkRlZmluaXRpb25zUHJvZHVjdGlvbiIsIlByb2R1Y3Rpb25Qcm9kdWN0aW9uIiwiUHJvZHVjdGlvbnNQcm9kdWN0aW9uIiwiT3B0aW9uYWxQYXJ0UHJvZHVjdGlvbiIsIk5vV2hpdGVzcGFjZVByb2R1Y3Rpb24iLCJQcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb24iLCJUZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb24iLCJSZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb24iLCJTaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb24iLCJSaWdodFJlY3Vyc2l2ZU9wdGlvbmFsUGFydFByb2R1Y3Rpb24iLCJCTkZQYXJzZXIiLCJwYXJ0UHJvZHVjdGlvbiIsImdyb3VwUHJvZHVjdGlvbiIsImVuZE9mTGluZVByb2R1Y3Rpb24iLCJkZWZpbml0aW9uUHJvZHVjdGlvbiIsImRlZmluaXRpb25zUHJvZHVjdGlvbiIsInByb2R1Y3Rpb25Qcm9kdWN0aW9uIiwicHJvZHVjdGlvbnNQcm9kdWN0aW9uIiwib3B0aW9uYWxQYXJ0UHJvZHVjdGlvbiIsIm5vV2hpdGVzcGFjZVByb2R1Y3Rpb24iLCJwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb24iLCJ0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb24iLCJyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb24iLCJzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb24iLCJyaWdodFJlY3Vyc2l2ZU9wdGlvbmFsUGFydFByb2R1Y3Rpb24iLCJwcm9kdWN0aW9ucyIsImJuZlBhcnNlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsZUFBZUMsUUFBUSxrQkFBUixDQUFyQjtBQUFBLElBQ01DLGlCQUFpQkQsUUFBUSxtQkFBUixDQUR2QjtBQUFBLElBRU1FLGtCQUFrQkYsUUFBUSxvQkFBUixDQUZ4QjtBQUFBLElBR01HLHNCQUFzQkgsUUFBUSx3QkFBUixDQUg1QjtBQUFBLElBSU1JLHVCQUF1QkosUUFBUSx5QkFBUixDQUo3QjtBQUFBLElBS01LLHdCQUF3QkwsUUFBUSwwQkFBUixDQUw5QjtBQUFBLElBTU1NLHVCQUF1Qk4sUUFBUSx5QkFBUixDQU43QjtBQUFBLElBT01PLHdCQUF3QlAsUUFBUSwwQkFBUixDQVA5QjtBQUFBLElBUU1RLHlCQUF5QlIsUUFBUSwyQkFBUixDQVIvQjtBQUFBLElBU01TLHlCQUF5QlQsUUFBUSwyQkFBUixDQVQvQjtBQUFBLElBVU1VLDJCQUEyQlYsUUFBUSw2QkFBUixDQVZqQztBQUFBLElBV01XLDJCQUEyQlgsUUFBUSw2QkFBUixDQVhqQztBQUFBLElBWU1ZLDhCQUE4QlosUUFBUSxnQ0FBUixDQVpwQztBQUFBLElBYU1hLGlDQUFpQ2IsUUFBUSxtQ0FBUixDQWJ2QztBQUFBLElBY01jLHVDQUF1Q2QsUUFBUSx5Q0FBUixDQWQ3Qzs7SUFnQk1lLFM7Ozs7Ozs7Ozs7O2tDQUNpQjtBQUNuQixVQUFNQyxpQkFBaUIsSUFBSWYsY0FBSixFQUF2QjtBQUFBLFVBQ01nQixrQkFBa0IsSUFBSWYsZUFBSixFQUR4QjtBQUFBLFVBRU1nQixzQkFBc0IsSUFBSWYsbUJBQUosRUFGNUI7QUFBQSxVQUdNZ0IsdUJBQXVCLElBQUlmLG9CQUFKLEVBSDdCO0FBQUEsVUFJTWdCLHdCQUF3QixJQUFJZixxQkFBSixFQUo5QjtBQUFBLFVBS01nQix1QkFBdUIsSUFBSWYsb0JBQUosRUFMN0I7QUFBQSxVQU1NZ0Isd0JBQXdCLElBQUlmLHFCQUFKLEVBTjlCO0FBQUEsVUFPTWdCLHlCQUF5QixJQUFJZixzQkFBSixFQVAvQjtBQUFBLFVBUU1nQix5QkFBeUIsSUFBSWYsc0JBQUosRUFSL0I7QUFBQSxVQVNNZ0IsMkJBQTJCLElBQUlmLHdCQUFKLEVBVGpDO0FBQUEsVUFVTWdCLDJCQUEyQixJQUFJZix3QkFBSixFQVZqQztBQUFBLFVBV01nQiw4QkFBOEIsSUFBSWYsMkJBQUosRUFYcEM7QUFBQSxVQVlNZ0IsaUNBQWlDLElBQUlmLDhCQUFKLEVBWnZDO0FBQUEsVUFhTWdCLHVDQUF1QyxJQUFJZixvQ0FBSixFQWI3QztBQUFBLFVBY01nQixjQUFjLENBQ1pSLHFCQURZLEVBRVpELG9CQUZZLEVBR1pELHFCQUhZLEVBSVpELG9CQUpZLEVBS1pILGNBTFksRUFNWk8sc0JBTlksRUFPWk0sb0NBUFksRUFRWlosZUFSWSxFQVNaUSx3QkFUWSxFQVVaRSwyQkFWWSxFQVdaQyw4QkFYWSxFQVlaRix3QkFaWSxFQWFaRixzQkFiWSxFQWNaTixtQkFkWSxDQWRwQjtBQUFBLFVBOEJNYSxZQUFZLElBQUloQixTQUFKLENBQWNlLFdBQWQsQ0E5QmxCOztBQWdDQSxhQUFPQyxTQUFQO0FBQ0Q7Ozs7RUFuQ3FCaEMsWTs7QUFzQ3hCaUMsT0FBT0MsT0FBUCxHQUFpQmxCLFNBQWpCIiwiZmlsZSI6InBhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ29tbW9uUGFyc2VyID0gcmVxdWlyZSgnLi4vY29tbW9uL3BhcnNlcicpLFxuICAgICAgUGFydFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vcGFydCcpLFxuICAgICAgR3JvdXBQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL2dyb3VwJyksXG4gICAgICBFbmRPZkxpbmVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL2VuZE9mTGluZScpLFxuICAgICAgRGVmaW5pdGlvblByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vZGVmaW5pdGlvbicpLFxuICAgICAgRGVmaW5pdGlvbnNQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL2RlZmluaXRpb25zJyksXG4gICAgICBQcm9kdWN0aW9uUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi9wcm9kdWN0aW9uJyksXG4gICAgICBQcm9kdWN0aW9uc1Byb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vcHJvZHVjdGlvbnMnKSxcbiAgICAgIE9wdGlvbmFsUGFydFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vb3B0aW9uYWxQYXJ0JyksXG4gICAgICBOb1doaXRlc3BhY2VQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL25vV2hpdGVzcGFjZScpLFxuICAgICAgUHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL3Byb2R1Y3Rpb25OYW1lJyksXG4gICAgICBUZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vdGVybWluYWxTeW1ib2wnKSxcbiAgICAgIFJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi9yZWd1bGFyRXhwcmVzc2lvbicpLFxuICAgICAgU2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL3NpZ25pZmljYW50VG9rZW5UeXBlJyksXG4gICAgICBSaWdodFJlY3Vyc2l2ZU9wdGlvbmFsUGFydFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vcmlnaHRSZWN1cnNpdmVPcHRpb25hbFBhcnQnKTtcblxuY2xhc3MgQk5GUGFyc2VyIGV4dGVuZHMgQ29tbW9uUGFyc2VyIHtcbiAgc3RhdGljIGZyb21Ob3RoaW5nKCkge1xuICAgIGNvbnN0IHBhcnRQcm9kdWN0aW9uID0gbmV3IFBhcnRQcm9kdWN0aW9uKCksXG4gICAgICAgICAgZ3JvdXBQcm9kdWN0aW9uID0gbmV3IEdyb3VwUHJvZHVjdGlvbigpLFxuICAgICAgICAgIGVuZE9mTGluZVByb2R1Y3Rpb24gPSBuZXcgRW5kT2ZMaW5lUHJvZHVjdGlvbigpLFxuICAgICAgICAgIGRlZmluaXRpb25Qcm9kdWN0aW9uID0gbmV3IERlZmluaXRpb25Qcm9kdWN0aW9uKCksXG4gICAgICAgICAgZGVmaW5pdGlvbnNQcm9kdWN0aW9uID0gbmV3IERlZmluaXRpb25zUHJvZHVjdGlvbigpLFxuICAgICAgICAgIHByb2R1Y3Rpb25Qcm9kdWN0aW9uID0gbmV3IFByb2R1Y3Rpb25Qcm9kdWN0aW9uKCksXG4gICAgICAgICAgcHJvZHVjdGlvbnNQcm9kdWN0aW9uID0gbmV3IFByb2R1Y3Rpb25zUHJvZHVjdGlvbigpLFxuICAgICAgICAgIG9wdGlvbmFsUGFydFByb2R1Y3Rpb24gPSBuZXcgT3B0aW9uYWxQYXJ0UHJvZHVjdGlvbigpLFxuICAgICAgICAgIG5vV2hpdGVzcGFjZVByb2R1Y3Rpb24gPSBuZXcgTm9XaGl0ZXNwYWNlUHJvZHVjdGlvbigpLFxuICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb24oKSxcbiAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb24gPSBuZXcgVGVybWluYWxTeW1ib2xQcm9kdWN0aW9uKCksXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uID0gbmV3IFJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbigpLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbiA9IG5ldyBTaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb24oKSxcbiAgICAgICAgICByaWdodFJlY3Vyc2l2ZU9wdGlvbmFsUGFydFByb2R1Y3Rpb24gPSBuZXcgUmlnaHRSZWN1cnNpdmVPcHRpb25hbFBhcnRQcm9kdWN0aW9uKCksXG4gICAgICAgICAgcHJvZHVjdGlvbnMgPSBbXG4gICAgICAgICAgICBwcm9kdWN0aW9uc1Byb2R1Y3Rpb24sXG4gICAgICAgICAgICBwcm9kdWN0aW9uUHJvZHVjdGlvbixcbiAgICAgICAgICAgIGRlZmluaXRpb25zUHJvZHVjdGlvbixcbiAgICAgICAgICAgIGRlZmluaXRpb25Qcm9kdWN0aW9uLFxuICAgICAgICAgICAgcGFydFByb2R1Y3Rpb24sXG4gICAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uLFxuICAgICAgICAgICAgcmlnaHRSZWN1cnNpdmVPcHRpb25hbFBhcnRQcm9kdWN0aW9uLFxuICAgICAgICAgICAgZ3JvdXBQcm9kdWN0aW9uLFxuICAgICAgICAgICAgcHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uLFxuICAgICAgICAgICAgcmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uLFxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uLFxuICAgICAgICAgICAgdGVybWluYWxTeW1ib2xQcm9kdWN0aW9uLFxuICAgICAgICAgICAgbm9XaGl0ZXNwYWNlUHJvZHVjdGlvbixcbiAgICAgICAgICAgIGVuZE9mTGluZVByb2R1Y3Rpb25cbiAgICAgICAgICBdLFxuICAgICAgICAgIGJuZlBhcnNlciA9IG5ldyBCTkZQYXJzZXIocHJvZHVjdGlvbnMpO1xuICAgIFxuICAgIHJldHVybiBibmZQYXJzZXI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCTkZQYXJzZXI7XG4iXX0=