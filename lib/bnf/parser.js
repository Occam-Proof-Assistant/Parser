'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Parts = require('./parts'),
    Definition = require('./definition'),
    Production = require('./production'),
    cycles = require('../grammar/cycles'),
    leftRecursion = require('../grammar/leftRecursion'),
    CommonParser = require('../common/parser'),
    PartProduction = require('./production/part'),
    DefinitionProduction = require('./production/definition'),
    ProductionProduction = require('./production/production'),
    DefinitionsProduction = require('./production/definitions'),
    ProductionsProduction = require('./production/productions'),
    GroupOfPartsProduction = require('./production/groupOfParts'),
    OptionalPartProduction = require('./production/optionalPart'),
    ZeroOrMorePartsProduction = require('./production/zeroOrMoreParts'),
    OneOrMorePartsProduction = require('./production/oneOrMoreParts'),
    VerticalSpaceProduction = require('./production/verticalSpace'),
    ProductionNameProduction = require('./production/productionName'),
    WildcardSymbolProduction = require('./production/wildcardSymbol'),
    TerminalSymbolProduction = require('./production/terminalSymbol'),
    EndOfLineSymbolProduction = require('./production/endOfLineSymbol'),
    NoWhitespacePartProduction = require('./production/noWhitespacePart'),
    RegularExpressionProduction = require('./production/regularExpression'),
    SignificantTokenTypeProduction = require('./production/significantTokenType');

var BNFParser = function (_CommonParser) {
  _inherits(BNFParser, _CommonParser);

  function BNFParser() {
    _classCallCheck(this, BNFParser);

    return _possibleConstructorReturn(this, (BNFParser.__proto__ || Object.getPrototypeOf(BNFParser)).apply(this, arguments));
  }

  _createClass(BNFParser, null, [{
    key: 'generateProductions',
    value: function generateProductions(node) {
      var mappings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var productions = node !== null ? node.generateProductions(Production, Definition, Parts, mappings) : [];

      productions = cycles.eliminate(productions); ///

      productions = leftRecursion.eliminate(productions); ///

      return productions;
    }
  }, {
    key: 'fromNothing',
    value: function fromNothing() {
      var partProduction = new PartProduction(),
          definitionProduction = new DefinitionProduction(),
          productionProduction = new ProductionProduction(),
          definitionsProduction = new DefinitionsProduction(),
          productionsProduction = new ProductionsProduction(),
          groupOfPartsProduction = new GroupOfPartsProduction(),
          optionalPartProduction = new OptionalPartProduction(),
          zeroOrMorePartsProduction = new ZeroOrMorePartsProduction(),
          oneOrMorePartsProduction = new OneOrMorePartsProduction(),
          verticalSpaceProduction = new VerticalSpaceProduction(),
          productionNameProduction = new ProductionNameProduction(),
          wildcardSymbolProduction = new WildcardSymbolProduction(),
          terminalSymbolProduction = new TerminalSymbolProduction(),
          endOfLineSymbolProduction = new EndOfLineSymbolProduction(),
          noWhitespacePartProduction = new NoWhitespacePartProduction(),
          regularExpressionProduction = new RegularExpressionProduction(),
          significantTokenTypeProduction = new SignificantTokenTypeProduction();

      var productions = [productionsProduction, productionProduction, definitionsProduction, definitionProduction, noWhitespacePartProduction, optionalPartProduction, zeroOrMorePartsProduction, oneOrMorePartsProduction, groupOfPartsProduction, partProduction, verticalSpaceProduction, productionNameProduction, regularExpressionProduction, significantTokenTypeProduction, terminalSymbolProduction, endOfLineSymbolProduction, wildcardSymbolProduction];

      productions = cycles.eliminate(productions); ///

      productions = leftRecursion.eliminate(productions); ///

      var bnfParser = new BNFParser(productions);

      return bnfParser;
    }
  }]);

  return BNFParser;
}(CommonParser);

module.exports = BNFParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ibmYvcGFyc2VyLmpzIl0sIm5hbWVzIjpbIlBhcnRzIiwicmVxdWlyZSIsIkRlZmluaXRpb24iLCJQcm9kdWN0aW9uIiwiY3ljbGVzIiwibGVmdFJlY3Vyc2lvbiIsIkNvbW1vblBhcnNlciIsIlBhcnRQcm9kdWN0aW9uIiwiRGVmaW5pdGlvblByb2R1Y3Rpb24iLCJQcm9kdWN0aW9uUHJvZHVjdGlvbiIsIkRlZmluaXRpb25zUHJvZHVjdGlvbiIsIlByb2R1Y3Rpb25zUHJvZHVjdGlvbiIsIkdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb24iLCJPcHRpb25hbFBhcnRQcm9kdWN0aW9uIiwiWmVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbiIsIk9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbiIsIlZlcnRpY2FsU3BhY2VQcm9kdWN0aW9uIiwiUHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uIiwiV2lsZGNhcmRTeW1ib2xQcm9kdWN0aW9uIiwiVGVybWluYWxTeW1ib2xQcm9kdWN0aW9uIiwiRW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbiIsIk5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uIiwiUmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uIiwiU2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uIiwiQk5GUGFyc2VyIiwibm9kZSIsIm1hcHBpbmdzIiwicHJvZHVjdGlvbnMiLCJnZW5lcmF0ZVByb2R1Y3Rpb25zIiwiZWxpbWluYXRlIiwicGFydFByb2R1Y3Rpb24iLCJkZWZpbml0aW9uUHJvZHVjdGlvbiIsInByb2R1Y3Rpb25Qcm9kdWN0aW9uIiwiZGVmaW5pdGlvbnNQcm9kdWN0aW9uIiwicHJvZHVjdGlvbnNQcm9kdWN0aW9uIiwiZ3JvdXBPZlBhcnRzUHJvZHVjdGlvbiIsIm9wdGlvbmFsUGFydFByb2R1Y3Rpb24iLCJ6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uIiwib25lT3JNb3JlUGFydHNQcm9kdWN0aW9uIiwidmVydGljYWxTcGFjZVByb2R1Y3Rpb24iLCJwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb24iLCJ3aWxkY2FyZFN5bWJvbFByb2R1Y3Rpb24iLCJ0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb24iLCJlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uIiwibm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb24iLCJyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb24iLCJzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb24iLCJibmZQYXJzZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBLElBQU1BLFFBQVFDLFFBQVEsU0FBUixDQUFkO0FBQUEsSUFDTUMsYUFBYUQsUUFBUSxjQUFSLENBRG5CO0FBQUEsSUFFTUUsYUFBYUYsUUFBUSxjQUFSLENBRm5CO0FBQUEsSUFHTUcsU0FBU0gsUUFBUSxtQkFBUixDQUhmO0FBQUEsSUFJTUksZ0JBQWdCSixRQUFRLDBCQUFSLENBSnRCO0FBQUEsSUFLTUssZUFBZUwsUUFBUSxrQkFBUixDQUxyQjtBQUFBLElBTU1NLGlCQUFpQk4sUUFBUSxtQkFBUixDQU52QjtBQUFBLElBT01PLHVCQUF1QlAsUUFBUSx5QkFBUixDQVA3QjtBQUFBLElBUU1RLHVCQUF1QlIsUUFBUSx5QkFBUixDQVI3QjtBQUFBLElBU01TLHdCQUF3QlQsUUFBUSwwQkFBUixDQVQ5QjtBQUFBLElBVU1VLHdCQUF3QlYsUUFBUSwwQkFBUixDQVY5QjtBQUFBLElBV01XLHlCQUF5QlgsUUFBUSwyQkFBUixDQVgvQjtBQUFBLElBWU1ZLHlCQUF5QlosUUFBUSwyQkFBUixDQVovQjtBQUFBLElBYU1hLDRCQUE0QmIsUUFBUSw4QkFBUixDQWJsQztBQUFBLElBY01jLDJCQUEyQmQsUUFBUSw2QkFBUixDQWRqQztBQUFBLElBZU1lLDBCQUEwQmYsUUFBUSw0QkFBUixDQWZoQztBQUFBLElBZ0JNZ0IsMkJBQTJCaEIsUUFBUSw2QkFBUixDQWhCakM7QUFBQSxJQWlCTWlCLDJCQUEyQmpCLFFBQVEsNkJBQVIsQ0FqQmpDO0FBQUEsSUFrQk1rQiwyQkFBMkJsQixRQUFRLDZCQUFSLENBbEJqQztBQUFBLElBbUJNbUIsNEJBQTRCbkIsUUFBUSw4QkFBUixDQW5CbEM7QUFBQSxJQW9CTW9CLDZCQUE2QnBCLFFBQVEsK0JBQVIsQ0FwQm5DO0FBQUEsSUFxQk1xQiw4QkFBOEJyQixRQUFRLGdDQUFSLENBckJwQztBQUFBLElBc0JNc0IsaUNBQWlDdEIsUUFBUSxtQ0FBUixDQXRCdkM7O0lBd0JNdUIsUzs7Ozs7Ozs7Ozs7d0NBQ3VCQyxJLEVBQXFCO0FBQUEsVUFBZkMsUUFBZSx1RUFBSixFQUFJOztBQUM5QyxVQUFJQyxjQUFlRixTQUFTLElBQVYsR0FDRUEsS0FBS0csbUJBQUwsQ0FBeUJ6QixVQUF6QixFQUFxQ0QsVUFBckMsRUFBaURGLEtBQWpELEVBQXdEMEIsUUFBeEQsQ0FERixHQUVJLEVBRnRCOztBQUlBQyxvQkFBY3ZCLE9BQU95QixTQUFQLENBQWlCRixXQUFqQixDQUFkLENBTDhDLENBS0E7O0FBRTlDQSxvQkFBY3RCLGNBQWN3QixTQUFkLENBQXdCRixXQUF4QixDQUFkLENBUDhDLENBT087O0FBRXJELGFBQU9BLFdBQVA7QUFDRDs7O2tDQUVvQjtBQUNuQixVQUFNRyxpQkFBaUIsSUFBSXZCLGNBQUosRUFBdkI7QUFBQSxVQUNNd0IsdUJBQXVCLElBQUl2QixvQkFBSixFQUQ3QjtBQUFBLFVBRU13Qix1QkFBdUIsSUFBSXZCLG9CQUFKLEVBRjdCO0FBQUEsVUFHTXdCLHdCQUF3QixJQUFJdkIscUJBQUosRUFIOUI7QUFBQSxVQUlNd0Isd0JBQXdCLElBQUl2QixxQkFBSixFQUo5QjtBQUFBLFVBS013Qix5QkFBeUIsSUFBSXZCLHNCQUFKLEVBTC9CO0FBQUEsVUFNTXdCLHlCQUF5QixJQUFJdkIsc0JBQUosRUFOL0I7QUFBQSxVQU9Nd0IsNEJBQTRCLElBQUl2Qix5QkFBSixFQVBsQztBQUFBLFVBUU13QiwyQkFBMkIsSUFBSXZCLHdCQUFKLEVBUmpDO0FBQUEsVUFTTXdCLDBCQUEwQixJQUFJdkIsdUJBQUosRUFUaEM7QUFBQSxVQVVNd0IsMkJBQTJCLElBQUl2Qix3QkFBSixFQVZqQztBQUFBLFVBV013QiwyQkFBMkIsSUFBSXZCLHdCQUFKLEVBWGpDO0FBQUEsVUFZTXdCLDJCQUEyQixJQUFJdkIsd0JBQUosRUFaakM7QUFBQSxVQWFNd0IsNEJBQTRCLElBQUl2Qix5QkFBSixFQWJsQztBQUFBLFVBY013Qiw2QkFBNkIsSUFBSXZCLDBCQUFKLEVBZG5DO0FBQUEsVUFlTXdCLDhCQUE4QixJQUFJdkIsMkJBQUosRUFmcEM7QUFBQSxVQWdCTXdCLGlDQUFpQyxJQUFJdkIsOEJBQUosRUFoQnZDOztBQWtCQSxVQUFJSSxjQUFjLENBQ1pPLHFCQURZLEVBRVpGLG9CQUZZLEVBR1pDLHFCQUhZLEVBSVpGLG9CQUpZLEVBS1phLDBCQUxZLEVBTVpSLHNCQU5ZLEVBT1pDLHlCQVBZLEVBUVpDLHdCQVJZLEVBU1pILHNCQVRZLEVBVVpMLGNBVlksRUFXWlMsdUJBWFksRUFZWkMsd0JBWlksRUFhWkssMkJBYlksRUFjWkMsOEJBZFksRUFlWkosd0JBZlksRUFnQlpDLHlCQWhCWSxFQWlCWkYsd0JBakJZLENBQWxCOztBQW9CQWQsb0JBQWN2QixPQUFPeUIsU0FBUCxDQUFpQkYsV0FBakIsQ0FBZCxDQXZDbUIsQ0F1QzJCOztBQUU5Q0Esb0JBQWN0QixjQUFjd0IsU0FBZCxDQUF3QkYsV0FBeEIsQ0FBZCxDQXpDbUIsQ0F5Q2tDOztBQUVyRCxVQUFNb0IsWUFBWSxJQUFJdkIsU0FBSixDQUFjRyxXQUFkLENBQWxCOztBQUVBLGFBQU9vQixTQUFQO0FBQ0Q7Ozs7RUEzRHFCekMsWTs7QUE4RHhCMEMsT0FBT0MsT0FBUCxHQUFpQnpCLFNBQWpCIiwiZmlsZSI6InBhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUGFydHMgPSByZXF1aXJlKCcuL3BhcnRzJyksXG4gICAgICBEZWZpbml0aW9uID0gcmVxdWlyZSgnLi9kZWZpbml0aW9uJyksXG4gICAgICBQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uJyksXG4gICAgICBjeWNsZXMgPSByZXF1aXJlKCcuLi9ncmFtbWFyL2N5Y2xlcycpLFxuICAgICAgbGVmdFJlY3Vyc2lvbiA9IHJlcXVpcmUoJy4uL2dyYW1tYXIvbGVmdFJlY3Vyc2lvbicpLFxuICAgICAgQ29tbW9uUGFyc2VyID0gcmVxdWlyZSgnLi4vY29tbW9uL3BhcnNlcicpLFxuICAgICAgUGFydFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vcGFydCcpLFxuICAgICAgRGVmaW5pdGlvblByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vZGVmaW5pdGlvbicpLFxuICAgICAgUHJvZHVjdGlvblByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vcHJvZHVjdGlvbicpLFxuICAgICAgRGVmaW5pdGlvbnNQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL2RlZmluaXRpb25zJyksXG4gICAgICBQcm9kdWN0aW9uc1Byb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vcHJvZHVjdGlvbnMnKSxcbiAgICAgIEdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vZ3JvdXBPZlBhcnRzJyksXG4gICAgICBPcHRpb25hbFBhcnRQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL29wdGlvbmFsUGFydCcpLFxuICAgICAgWmVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi96ZXJvT3JNb3JlUGFydHMnKSxcbiAgICAgIE9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi9vbmVPck1vcmVQYXJ0cycpLFxuICAgICAgVmVydGljYWxTcGFjZVByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vdmVydGljYWxTcGFjZScpLFxuICAgICAgUHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL3Byb2R1Y3Rpb25OYW1lJyksXG4gICAgICBXaWxkY2FyZFN5bWJvbFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuL3Byb2R1Y3Rpb24vd2lsZGNhcmRTeW1ib2wnKSxcbiAgICAgIFRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi90ZXJtaW5hbFN5bWJvbCcpLFxuICAgICAgRW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi9lbmRPZkxpbmVTeW1ib2wnKSxcbiAgICAgIE5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL25vV2hpdGVzcGFjZVBhcnQnKSxcbiAgICAgIFJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvZHVjdGlvbi9yZWd1bGFyRXhwcmVzc2lvbicpLFxuICAgICAgU2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi9wcm9kdWN0aW9uL3NpZ25pZmljYW50VG9rZW5UeXBlJyk7XG5cbmNsYXNzIEJORlBhcnNlciBleHRlbmRzIENvbW1vblBhcnNlciB7XG4gIHN0YXRpYyBnZW5lcmF0ZVByb2R1Y3Rpb25zKG5vZGUsIG1hcHBpbmdzID0ge30pIHtcbiAgICBsZXQgcHJvZHVjdGlvbnMgPSAobm9kZSAhPT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5nZW5lcmF0ZVByb2R1Y3Rpb25zKFByb2R1Y3Rpb24sIERlZmluaXRpb24sIFBhcnRzLCBtYXBwaW5ncykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICBbXTtcblxuICAgIHByb2R1Y3Rpb25zID0gY3ljbGVzLmVsaW1pbmF0ZShwcm9kdWN0aW9ucyk7ICAvLy9cblxuICAgIHByb2R1Y3Rpb25zID0gbGVmdFJlY3Vyc2lvbi5lbGltaW5hdGUocHJvZHVjdGlvbnMpOyAgLy8vXG5cbiAgICByZXR1cm4gcHJvZHVjdGlvbnM7XG4gIH1cblxuICBzdGF0aWMgZnJvbU5vdGhpbmcoKSB7XG4gICAgY29uc3QgcGFydFByb2R1Y3Rpb24gPSBuZXcgUGFydFByb2R1Y3Rpb24oKSxcbiAgICAgICAgICBkZWZpbml0aW9uUHJvZHVjdGlvbiA9IG5ldyBEZWZpbml0aW9uUHJvZHVjdGlvbigpLFxuICAgICAgICAgIHByb2R1Y3Rpb25Qcm9kdWN0aW9uID0gbmV3IFByb2R1Y3Rpb25Qcm9kdWN0aW9uKCksXG4gICAgICAgICAgZGVmaW5pdGlvbnNQcm9kdWN0aW9uID0gbmV3IERlZmluaXRpb25zUHJvZHVjdGlvbigpLFxuICAgICAgICAgIHByb2R1Y3Rpb25zUHJvZHVjdGlvbiA9IG5ldyBQcm9kdWN0aW9uc1Byb2R1Y3Rpb24oKSxcbiAgICAgICAgICBncm91cE9mUGFydHNQcm9kdWN0aW9uID0gbmV3IEdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb24oKSxcbiAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uID0gbmV3IE9wdGlvbmFsUGFydFByb2R1Y3Rpb24oKSxcbiAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uID0gbmV3IFplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb24oKSxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb24gPSBuZXcgT25lT3JNb3JlUGFydHNQcm9kdWN0aW9uKCksXG4gICAgICAgICAgdmVydGljYWxTcGFjZVByb2R1Y3Rpb24gPSBuZXcgVmVydGljYWxTcGFjZVByb2R1Y3Rpb24oKSxcbiAgICAgICAgICBwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uKCksXG4gICAgICAgICAgd2lsZGNhcmRTeW1ib2xQcm9kdWN0aW9uID0gbmV3IFdpbGRjYXJkU3ltYm9sUHJvZHVjdGlvbigpLFxuICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbiA9IG5ldyBUZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb24oKSxcbiAgICAgICAgICBlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uID0gbmV3IEVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb24oKSxcbiAgICAgICAgICBub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbiA9IG5ldyBOb1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbigpLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbiA9IG5ldyBSZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb24oKSxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb24gPSBuZXcgU2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uKCk7XG5cbiAgICBsZXQgcHJvZHVjdGlvbnMgPSBbXG4gICAgICAgICAgcHJvZHVjdGlvbnNQcm9kdWN0aW9uLFxuICAgICAgICAgIHByb2R1Y3Rpb25Qcm9kdWN0aW9uLFxuICAgICAgICAgIGRlZmluaXRpb25zUHJvZHVjdGlvbixcbiAgICAgICAgICBkZWZpbml0aW9uUHJvZHVjdGlvbixcbiAgICAgICAgICBub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbixcbiAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uLFxuICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb24sXG4gICAgICAgICAgb25lT3JNb3JlUGFydHNQcm9kdWN0aW9uLFxuICAgICAgICAgIGdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb24sXG4gICAgICAgICAgcGFydFByb2R1Y3Rpb24sXG4gICAgICAgICAgdmVydGljYWxTcGFjZVByb2R1Y3Rpb24sXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbixcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb24sXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xQcm9kdWN0aW9uLFxuICAgICAgICAgIGVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb24sXG4gICAgICAgICAgd2lsZGNhcmRTeW1ib2xQcm9kdWN0aW9uXG4gICAgICAgIF07XG5cbiAgICBwcm9kdWN0aW9ucyA9IGN5Y2xlcy5lbGltaW5hdGUocHJvZHVjdGlvbnMpOyAgLy8vXG5cbiAgICBwcm9kdWN0aW9ucyA9IGxlZnRSZWN1cnNpb24uZWxpbWluYXRlKHByb2R1Y3Rpb25zKTsgIC8vL1xuXG4gICAgY29uc3QgYm5mUGFyc2VyID0gbmV3IEJORlBhcnNlcihwcm9kdWN0aW9ucyk7XG4gICAgXG4gICAgcmV0dXJuIGJuZlBhcnNlcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJORlBhcnNlcjtcbiJdfQ==