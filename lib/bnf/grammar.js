'use strict';

var grammar = '\n\n  productions              ::=  verticalSpace? production+\n  \n  production               ::=  productionName "::=" definitions\n  \n  definitions              ::=  definition ( "|" definition )*\n  \n  definition               ::=  part+ verticalSpace?\n  \n  part                     ::=  noWhitespacePart  \n                \n                             |  negatedPart  \n\n                             |  optionalPart  \n                \n                             |  zeroOrMoreParts  \n                \n                             |  oneOrMoreParts  \n                \n                             |  groupOfParts  \n                           \n                             |  productionName  \n                \n                             |  regularExpression \n                \n                             |  significantTokenType \n\n                             |  terminalSymbol\n                          \n                             |  endOfLineSymbol\n                \n  noWhitespacePart         ::=  "<NO_WHITESPACE>" part\n\n  negatedPart              ::=  "!"<NO_WHITESPACE>part\n\n  optionalPart             ::=  part<NO_WHITESPACE>"?" optionalLazyQuantifier\n                          \n  zeroOrMoreParts          ::=  part<NO_WHITESPACE>"*" optionalLazyQuantifier\n                          \n  oneOrMoreParts           ::=  part<NO_WHITESPACE>"+" optionalLazyQuantifier\n  \n  optionalLazyQuantifier   ::=  <NO_WHITESPACE>"?"?\n                          \n  groupOfParts             ::=  "(" part+ ")"\n  \n  productionName           ::=  [name]\n\n  regularExpression        ::=  [regularExpression]\n  \n  significantTokenType     ::=  [type]\n\n  terminalSymbol           ::=  [string]\n  \n  endOfLineSymbol          ::=  "<END_OF_LINE>"\n\n  verticalSpace            ::=  [endOfLine]+\n  \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9ibmYvZ3JhbW1hci5qcyJdLCJuYW1lcyI6WyJncmFtbWFyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsc3pEQUFOOztBQTREQUMsT0FBT0MsT0FBUCxHQUFpQkYsT0FBakIiLCJmaWxlIjoiZ3JhbW1hci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ3JhbW1hciA9IGBcblxuICBwcm9kdWN0aW9ucyAgICAgICAgICAgICAgOjo9ICB2ZXJ0aWNhbFNwYWNlPyBwcm9kdWN0aW9uK1xuICBcbiAgcHJvZHVjdGlvbiAgICAgICAgICAgICAgIDo6PSAgcHJvZHVjdGlvbk5hbWUgXCI6Oj1cIiBkZWZpbml0aW9uc1xuICBcbiAgZGVmaW5pdGlvbnMgICAgICAgICAgICAgIDo6PSAgZGVmaW5pdGlvbiAoIFwifFwiIGRlZmluaXRpb24gKSpcbiAgXG4gIGRlZmluaXRpb24gICAgICAgICAgICAgICA6Oj0gIHBhcnQrIHZlcnRpY2FsU3BhY2U/XG4gIFxuICBwYXJ0ICAgICAgICAgICAgICAgICAgICAgOjo9ICBub1doaXRlc3BhY2VQYXJ0ICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgbmVnYXRlZFBhcnQgIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIG9wdGlvbmFsUGFydCAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIHplcm9Pck1vcmVQYXJ0cyAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIG9uZU9yTW9yZVBhcnRzICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgZ3JvdXBPZlBhcnRzICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBwcm9kdWN0aW9uTmFtZSAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIHJlZ3VsYXJFeHByZXNzaW9uIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBzaWduaWZpY2FudFRva2VuVHlwZSBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICB0ZXJtaW5hbFN5bWJvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgZW5kT2ZMaW5lU3ltYm9sXG4gICAgICAgICAgICAgICAgXG4gIG5vV2hpdGVzcGFjZVBhcnQgICAgICAgICA6Oj0gIFwiPE5PX1dISVRFU1BBQ0U+XCIgcGFydFxuXG4gIG5lZ2F0ZWRQYXJ0ICAgICAgICAgICAgICA6Oj0gIFwiIVwiPE5PX1dISVRFU1BBQ0U+cGFydFxuXG4gIG9wdGlvbmFsUGFydCAgICAgICAgICAgICA6Oj0gIHBhcnQ8Tk9fV0hJVEVTUEFDRT5cIj9cIiBvcHRpb25hbExhenlRdWFudGlmaWVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFxuICB6ZXJvT3JNb3JlUGFydHMgICAgICAgICAgOjo9ICBwYXJ0PE5PX1dISVRFU1BBQ0U+XCIqXCIgb3B0aW9uYWxMYXp5UXVhbnRpZmllclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgb25lT3JNb3JlUGFydHMgICAgICAgICAgIDo6PSAgcGFydDxOT19XSElURVNQQUNFPlwiK1wiIG9wdGlvbmFsTGF6eVF1YW50aWZpZXJcbiAgXG4gIG9wdGlvbmFsTGF6eVF1YW50aWZpZXIgICA6Oj0gIDxOT19XSElURVNQQUNFPlwiP1wiP1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgZ3JvdXBPZlBhcnRzICAgICAgICAgICAgIDo6PSAgXCIoXCIgcGFydCsgXCIpXCJcbiAgXG4gIHByb2R1Y3Rpb25OYW1lICAgICAgICAgICA6Oj0gIFtuYW1lXVxuXG4gIHJlZ3VsYXJFeHByZXNzaW9uICAgICAgICA6Oj0gIFtyZWd1bGFyRXhwcmVzc2lvbl1cbiAgXG4gIHNpZ25pZmljYW50VG9rZW5UeXBlICAgICA6Oj0gIFt0eXBlXVxuXG4gIHRlcm1pbmFsU3ltYm9sICAgICAgICAgICA6Oj0gIFtzdHJpbmddXG4gIFxuICBlbmRPZkxpbmVTeW1ib2wgICAgICAgICAgOjo9ICBcIjxFTkRfT0ZfTElORT5cIlxuXG4gIHZlcnRpY2FsU3BhY2UgICAgICAgICAgICA6Oj0gIFtlbmRPZkxpbmVdK1xuICBcbmA7XG5cbm1vZHVsZS5leHBvcnRzID0gZ3JhbW1hcjtcbiJdfQ==