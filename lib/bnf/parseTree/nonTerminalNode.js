'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EmptyParseTree = require('../parseTree/empty'),
    ChildNodesParseTree = require('../parseTree/childNodes'),
    VerticalBranchParseTree = require('../parseTree/verticalBranch'),
    ProductionNameAndLineNumbersParseTree = require('../parseTree/productionNameAndLineNumbers');

var NonTerminalNodeParseTree = function (_VerticalBranchParseT) {
  _inherits(NonTerminalNodeParseTree, _VerticalBranchParseT);

  function NonTerminalNodeParseTree() {
    _classCallCheck(this, NonTerminalNodeParseTree);

    return _possibleConstructorReturn(this, (NonTerminalNodeParseTree.__proto__ || Object.getPrototypeOf(NonTerminalNodeParseTree)).apply(this, arguments));
  }

  _createClass(NonTerminalNodeParseTree, null, [{
    key: 'fromNonTerminalNode',
    value: function fromNonTerminalNode(nonTerminalNode) {
      var childNodes = nonTerminalNode.getChildNodes(),
          firstChildNode = first(childNodes),
          childNode = firstChildNode,
          childNodesLength = childNodes.length,
          childNodeOrNodesParseTree = childNodesLength === 1 ? childNode.getParseTree() : ChildNodesParseTree.fromChildNodes(childNodes),
          productionNameAndLineNumbersParseTree = ProductionNameAndLineNumbersParseTree.fromNonTerminalNode(nonTerminalNode),
          productionNameParseTreeVerticalBranchPosition = productionNameAndLineNumbersParseTree.getVerticalBranchPosition(),
          childNodeOrNodesParseTreeVerticalBranchPosition = childNodeOrNodesParseTree.getVerticalBranchPosition(),
          verticalBranchPositionsDifference = productionNameParseTreeVerticalBranchPosition - childNodeOrNodesParseTreeVerticalBranchPosition,
          leftMarginWidth = undefined;

      if (false) {} else if (verticalBranchPositionsDifference < 0) {
        leftMarginWidth = -verticalBranchPositionsDifference;

        productionNameAndLineNumbersParseTree.addLeftMargin(leftMarginWidth);
      } else if (verticalBranchPositionsDifference > 0) {
        leftMarginWidth = +verticalBranchPositionsDifference;

        childNodeOrNodesParseTree.addLeftMargin(leftMarginWidth);
      }

      var productionNameParseTreeWidth = productionNameAndLineNumbersParseTree.getWidth(),
          childNodeOrNodesParseTreeWidth = childNodeOrNodesParseTree.getWidth(),
          widthsDifference = productionNameParseTreeWidth - childNodeOrNodesParseTreeWidth,
          rightMarginWidth = undefined;

      if (false) {} else if (widthsDifference < 0) {
        rightMarginWidth = -widthsDifference;

        productionNameAndLineNumbersParseTree.addRightMargin(rightMarginWidth);
      } else if (widthsDifference > 0) {
        rightMarginWidth = +widthsDifference;

        childNodeOrNodesParseTree.addRightMargin(rightMarginWidth);
      }

      productionNameParseTreeVerticalBranchPosition = productionNameAndLineNumbersParseTree.getVerticalBranchPosition();

      var productionNameParseTreeDepth = productionNameAndLineNumbersParseTree.getDepth(),
          nonTerminalNodeParseTreeDepth = productionNameParseTreeDepth,
          ///
      verticalBranchPosition = productionNameParseTreeVerticalBranchPosition,
          ///
      nonTerminalNodeParseTree = EmptyParseTree.fromDepth(nonTerminalNodeParseTreeDepth, NonTerminalNodeParseTree, verticalBranchPosition);

      nonTerminalNodeParseTree.appendToRight(productionNameAndLineNumbersParseTree);
      nonTerminalNodeParseTree.appendToBottom(childNodeOrNodesParseTree);

      return nonTerminalNodeParseTree;
    }
  }]);

  return NonTerminalNodeParseTree;
}(VerticalBranchParseTree);

module.exports = NonTerminalNodeParseTree;

function first(array) {
  return array[0];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcGFyc2VUcmVlL25vblRlcm1pbmFsTm9kZS5qcyJdLCJuYW1lcyI6WyJFbXB0eVBhcnNlVHJlZSIsInJlcXVpcmUiLCJDaGlsZE5vZGVzUGFyc2VUcmVlIiwiVmVydGljYWxCcmFuY2hQYXJzZVRyZWUiLCJQcm9kdWN0aW9uTmFtZUFuZExpbmVOdW1iZXJzUGFyc2VUcmVlIiwiTm9uVGVybWluYWxOb2RlUGFyc2VUcmVlIiwibm9uVGVybWluYWxOb2RlIiwiY2hpbGROb2RlcyIsImdldENoaWxkTm9kZXMiLCJmaXJzdENoaWxkTm9kZSIsImZpcnN0IiwiY2hpbGROb2RlIiwiY2hpbGROb2Rlc0xlbmd0aCIsImxlbmd0aCIsImNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWUiLCJnZXRQYXJzZVRyZWUiLCJmcm9tQ2hpbGROb2RlcyIsInByb2R1Y3Rpb25OYW1lQW5kTGluZU51bWJlcnNQYXJzZVRyZWUiLCJmcm9tTm9uVGVybWluYWxOb2RlIiwicHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uIiwiZ2V0VmVydGljYWxCcmFuY2hQb3NpdGlvbiIsImNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uIiwidmVydGljYWxCcmFuY2hQb3NpdGlvbnNEaWZmZXJlbmNlIiwibGVmdE1hcmdpbldpZHRoIiwidW5kZWZpbmVkIiwiYWRkTGVmdE1hcmdpbiIsInByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlV2lkdGgiLCJnZXRXaWR0aCIsImNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWVXaWR0aCIsIndpZHRoc0RpZmZlcmVuY2UiLCJyaWdodE1hcmdpbldpZHRoIiwiYWRkUmlnaHRNYXJnaW4iLCJwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZURlcHRoIiwiZ2V0RGVwdGgiLCJub25UZXJtaW5hbE5vZGVQYXJzZVRyZWVEZXB0aCIsInZlcnRpY2FsQnJhbmNoUG9zaXRpb24iLCJub25UZXJtaW5hbE5vZGVQYXJzZVRyZWUiLCJmcm9tRGVwdGgiLCJhcHBlbmRUb1JpZ2h0IiwiYXBwZW5kVG9Cb3R0b20iLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJyYXkiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUEsSUFBSUEsaUJBQWlCQyxRQUFRLG9CQUFSLENBQXJCO0FBQUEsSUFDSUMsc0JBQXNCRCxRQUFRLHlCQUFSLENBRDFCO0FBQUEsSUFFSUUsMEJBQTBCRixRQUFRLDZCQUFSLENBRjlCO0FBQUEsSUFHSUcsd0NBQXdDSCxRQUFRLDJDQUFSLENBSDVDOztJQUtNSSx3Qjs7Ozs7Ozs7Ozs7d0NBQ3VCQyxlLEVBQWlCO0FBQzFDLFVBQUlDLGFBQWFELGdCQUFnQkUsYUFBaEIsRUFBakI7QUFBQSxVQUNJQyxpQkFBaUJDLE1BQU1ILFVBQU4sQ0FEckI7QUFBQSxVQUVJSSxZQUFZRixjQUZoQjtBQUFBLFVBR0lHLG1CQUFtQkwsV0FBV00sTUFIbEM7QUFBQSxVQUlJQyw0QkFBNkJGLHFCQUFxQixDQUF0QixHQUNFRCxVQUFVSSxZQUFWLEVBREYsR0FFSWIsb0JBQW9CYyxjQUFwQixDQUFtQ1QsVUFBbkMsQ0FOcEM7QUFBQSxVQU9JVSx3Q0FBd0NiLHNDQUFzQ2MsbUJBQXRDLENBQTBEWixlQUExRCxDQVA1QztBQUFBLFVBUUlhLGdEQUFnREYsc0NBQXNDRyx5QkFBdEMsRUFScEQ7QUFBQSxVQVNJQyxrREFBa0RQLDBCQUEwQk0seUJBQTFCLEVBVHREO0FBQUEsVUFVSUUsb0NBQW9DSCxnREFBZ0RFLCtDQVZ4RjtBQUFBLFVBV0lFLGtCQUFrQkMsU0FYdEI7O0FBYUEsVUFBSSxLQUFKLEVBQVcsQ0FFVixDQUZELE1BRU8sSUFBSUYsb0NBQW9DLENBQXhDLEVBQTJDO0FBQ2hEQywwQkFBa0IsQ0FBQ0QsaUNBQW5COztBQUVBTCw4Q0FBc0NRLGFBQXRDLENBQW9ERixlQUFwRDtBQUNELE9BSk0sTUFJQSxJQUFJRCxvQ0FBb0MsQ0FBeEMsRUFBMkM7QUFDaERDLDBCQUFrQixDQUFDRCxpQ0FBbkI7O0FBRUFSLGtDQUEwQlcsYUFBMUIsQ0FBd0NGLGVBQXhDO0FBQ0Q7O0FBRUQsVUFBSUcsK0JBQStCVCxzQ0FBc0NVLFFBQXRDLEVBQW5DO0FBQUEsVUFDSUMsaUNBQWlDZCwwQkFBMEJhLFFBQTFCLEVBRHJDO0FBQUEsVUFFSUUsbUJBQW1CSCwrQkFBK0JFLDhCQUZ0RDtBQUFBLFVBR0lFLG1CQUFtQk4sU0FIdkI7O0FBS0EsVUFBSSxLQUFKLEVBQVcsQ0FFVixDQUZELE1BRU8sSUFBSUssbUJBQW1CLENBQXZCLEVBQTBCO0FBQy9CQywyQkFBbUIsQ0FBQ0QsZ0JBQXBCOztBQUVBWiw4Q0FBc0NjLGNBQXRDLENBQXFERCxnQkFBckQ7QUFDRCxPQUpNLE1BSUEsSUFBSUQsbUJBQW1CLENBQXZCLEVBQTBCO0FBQy9CQywyQkFBbUIsQ0FBQ0QsZ0JBQXBCOztBQUVBZixrQ0FBMEJpQixjQUExQixDQUF5Q0QsZ0JBQXpDO0FBQ0Q7O0FBRURYLHNEQUFnREYsc0NBQXNDRyx5QkFBdEMsRUFBaEQ7O0FBRUEsVUFBSVksK0JBQStCZixzQ0FBc0NnQixRQUF0QyxFQUFuQztBQUFBLFVBQ0lDLGdDQUFnQ0YsNEJBRHBDO0FBQUEsVUFDa0U7QUFDOURHLCtCQUF5QmhCLDZDQUY3QjtBQUFBLFVBRTRFO0FBQ3hFaUIsaUNBQTJCcEMsZUFBZXFDLFNBQWYsQ0FBeUJILDZCQUF6QixFQUF3RDdCLHdCQUF4RCxFQUFrRjhCLHNCQUFsRixDQUgvQjs7QUFLQUMsK0JBQXlCRSxhQUF6QixDQUF1Q3JCLHFDQUF2QztBQUNBbUIsK0JBQXlCRyxjQUF6QixDQUF3Q3pCLHlCQUF4Qzs7QUFFQSxhQUFPc0Isd0JBQVA7QUFDRDs7OztFQXZEb0NqQyx1Qjs7QUEwRHZDcUMsT0FBT0MsT0FBUCxHQUFpQnBDLHdCQUFqQjs7QUFFQSxTQUFTSyxLQUFULENBQWVnQyxLQUFmLEVBQXNCO0FBQUUsU0FBT0EsTUFBTSxDQUFOLENBQVA7QUFBa0IiLCJmaWxlIjoibm9uVGVybWluYWxOb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRW1wdHlQYXJzZVRyZWUgPSByZXF1aXJlKCcuLi9wYXJzZVRyZWUvZW1wdHknKSxcbiAgICBDaGlsZE5vZGVzUGFyc2VUcmVlID0gcmVxdWlyZSgnLi4vcGFyc2VUcmVlL2NoaWxkTm9kZXMnKSxcbiAgICBWZXJ0aWNhbEJyYW5jaFBhcnNlVHJlZSA9IHJlcXVpcmUoJy4uL3BhcnNlVHJlZS92ZXJ0aWNhbEJyYW5jaCcpLFxuICAgIFByb2R1Y3Rpb25OYW1lQW5kTGluZU51bWJlcnNQYXJzZVRyZWUgPSByZXF1aXJlKCcuLi9wYXJzZVRyZWUvcHJvZHVjdGlvbk5hbWVBbmRMaW5lTnVtYmVycycpO1xuXG5jbGFzcyBOb25UZXJtaW5hbE5vZGVQYXJzZVRyZWUgZXh0ZW5kcyBWZXJ0aWNhbEJyYW5jaFBhcnNlVHJlZSB7XG4gIHN0YXRpYyBmcm9tTm9uVGVybWluYWxOb2RlKG5vblRlcm1pbmFsTm9kZSkge1xuICAgIHZhciBjaGlsZE5vZGVzID0gbm9uVGVybWluYWxOb2RlLmdldENoaWxkTm9kZXMoKSxcbiAgICAgICAgZmlyc3RDaGlsZE5vZGUgPSBmaXJzdChjaGlsZE5vZGVzKSxcbiAgICAgICAgY2hpbGROb2RlID0gZmlyc3RDaGlsZE5vZGUsXG4gICAgICAgIGNoaWxkTm9kZXNMZW5ndGggPSBjaGlsZE5vZGVzLmxlbmd0aCxcbiAgICAgICAgY2hpbGROb2RlT3JOb2Rlc1BhcnNlVHJlZSA9IChjaGlsZE5vZGVzTGVuZ3RoID09PSAxKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5nZXRQYXJzZVRyZWUoKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hpbGROb2Rlc1BhcnNlVHJlZS5mcm9tQ2hpbGROb2RlcyhjaGlsZE5vZGVzKSxcbiAgICAgICAgcHJvZHVjdGlvbk5hbWVBbmRMaW5lTnVtYmVyc1BhcnNlVHJlZSA9IFByb2R1Y3Rpb25OYW1lQW5kTGluZU51bWJlcnNQYXJzZVRyZWUuZnJvbU5vblRlcm1pbmFsTm9kZShub25UZXJtaW5hbE5vZGUpLFxuICAgICAgICBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZVZlcnRpY2FsQnJhbmNoUG9zaXRpb24gPSBwcm9kdWN0aW9uTmFtZUFuZExpbmVOdW1iZXJzUGFyc2VUcmVlLmdldFZlcnRpY2FsQnJhbmNoUG9zaXRpb24oKSxcbiAgICAgICAgY2hpbGROb2RlT3JOb2Rlc1BhcnNlVHJlZVZlcnRpY2FsQnJhbmNoUG9zaXRpb24gPSBjaGlsZE5vZGVPck5vZGVzUGFyc2VUcmVlLmdldFZlcnRpY2FsQnJhbmNoUG9zaXRpb24oKSxcbiAgICAgICAgdmVydGljYWxCcmFuY2hQb3NpdGlvbnNEaWZmZXJlbmNlID0gcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uIC0gY2hpbGROb2RlT3JOb2Rlc1BhcnNlVHJlZVZlcnRpY2FsQnJhbmNoUG9zaXRpb24sXG4gICAgICAgIGxlZnRNYXJnaW5XaWR0aCA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChmYWxzZSkge1xuXG4gICAgfSBlbHNlIGlmICh2ZXJ0aWNhbEJyYW5jaFBvc2l0aW9uc0RpZmZlcmVuY2UgPCAwKSB7XG4gICAgICBsZWZ0TWFyZ2luV2lkdGggPSAtdmVydGljYWxCcmFuY2hQb3NpdGlvbnNEaWZmZXJlbmNlO1xuXG4gICAgICBwcm9kdWN0aW9uTmFtZUFuZExpbmVOdW1iZXJzUGFyc2VUcmVlLmFkZExlZnRNYXJnaW4obGVmdE1hcmdpbldpZHRoKTtcbiAgICB9IGVsc2UgaWYgKHZlcnRpY2FsQnJhbmNoUG9zaXRpb25zRGlmZmVyZW5jZSA+IDApIHtcbiAgICAgIGxlZnRNYXJnaW5XaWR0aCA9ICt2ZXJ0aWNhbEJyYW5jaFBvc2l0aW9uc0RpZmZlcmVuY2U7XG5cbiAgICAgIGNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWUuYWRkTGVmdE1hcmdpbihsZWZ0TWFyZ2luV2lkdGgpO1xuICAgIH1cblxuICAgIHZhciBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZVdpZHRoID0gcHJvZHVjdGlvbk5hbWVBbmRMaW5lTnVtYmVyc1BhcnNlVHJlZS5nZXRXaWR0aCgpLFxuICAgICAgICBjaGlsZE5vZGVPck5vZGVzUGFyc2VUcmVlV2lkdGggPSBjaGlsZE5vZGVPck5vZGVzUGFyc2VUcmVlLmdldFdpZHRoKCksXG4gICAgICAgIHdpZHRoc0RpZmZlcmVuY2UgPSBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZVdpZHRoIC0gY2hpbGROb2RlT3JOb2Rlc1BhcnNlVHJlZVdpZHRoLFxuICAgICAgICByaWdodE1hcmdpbldpZHRoID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKGZhbHNlKSB7XG5cbiAgICB9IGVsc2UgaWYgKHdpZHRoc0RpZmZlcmVuY2UgPCAwKSB7XG4gICAgICByaWdodE1hcmdpbldpZHRoID0gLXdpZHRoc0RpZmZlcmVuY2U7XG4gICAgICBcbiAgICAgIHByb2R1Y3Rpb25OYW1lQW5kTGluZU51bWJlcnNQYXJzZVRyZWUuYWRkUmlnaHRNYXJnaW4ocmlnaHRNYXJnaW5XaWR0aCk7XG4gICAgfSBlbHNlIGlmICh3aWR0aHNEaWZmZXJlbmNlID4gMCkge1xuICAgICAgcmlnaHRNYXJnaW5XaWR0aCA9ICt3aWR0aHNEaWZmZXJlbmNlO1xuXG4gICAgICBjaGlsZE5vZGVPck5vZGVzUGFyc2VUcmVlLmFkZFJpZ2h0TWFyZ2luKHJpZ2h0TWFyZ2luV2lkdGgpO1xuICAgIH1cblxuICAgIHByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlVmVydGljYWxCcmFuY2hQb3NpdGlvbiA9IHByb2R1Y3Rpb25OYW1lQW5kTGluZU51bWJlcnNQYXJzZVRyZWUuZ2V0VmVydGljYWxCcmFuY2hQb3NpdGlvbigpO1xuXG4gICAgdmFyIHByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlRGVwdGggPSBwcm9kdWN0aW9uTmFtZUFuZExpbmVOdW1iZXJzUGFyc2VUcmVlLmdldERlcHRoKCksXG4gICAgICAgIG5vblRlcm1pbmFsTm9kZVBhcnNlVHJlZURlcHRoID0gcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVEZXB0aCwgLy8vXG4gICAgICAgIHZlcnRpY2FsQnJhbmNoUG9zaXRpb24gPSBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZVZlcnRpY2FsQnJhbmNoUG9zaXRpb24sIC8vL1xuICAgICAgICBub25UZXJtaW5hbE5vZGVQYXJzZVRyZWUgPSBFbXB0eVBhcnNlVHJlZS5mcm9tRGVwdGgobm9uVGVybWluYWxOb2RlUGFyc2VUcmVlRGVwdGgsIE5vblRlcm1pbmFsTm9kZVBhcnNlVHJlZSwgdmVydGljYWxCcmFuY2hQb3NpdGlvbik7XG5cbiAgICBub25UZXJtaW5hbE5vZGVQYXJzZVRyZWUuYXBwZW5kVG9SaWdodChwcm9kdWN0aW9uTmFtZUFuZExpbmVOdW1iZXJzUGFyc2VUcmVlKTtcbiAgICBub25UZXJtaW5hbE5vZGVQYXJzZVRyZWUuYXBwZW5kVG9Cb3R0b20oY2hpbGROb2RlT3JOb2Rlc1BhcnNlVHJlZSk7XG5cbiAgICByZXR1cm4gbm9uVGVybWluYWxOb2RlUGFyc2VUcmVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTm9uVGVybWluYWxOb2RlUGFyc2VUcmVlO1xuXG5mdW5jdGlvbiBmaXJzdChhcnJheSkgeyByZXR1cm4gYXJyYXlbMF07IH1cbiJdfQ==