'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EmptyParseTree = require('../parseTree/empty'),
    ChildNodesParseTree = require('../parseTree/childNodes'),
    VerticalBranchParseTree = require('../parseTree/verticalBranch'),
    ProductionNameAndLineNumbersParseTree = require('../parseTree/productionNameAndLineNumbers');

var NonTerminalNodeParseTree = function (_VerticalBranchParseT) {
  _inherits(NonTerminalNodeParseTree, _VerticalBranchParseT);

  function NonTerminalNodeParseTree() {
    _classCallCheck(this, NonTerminalNodeParseTree);

    return _possibleConstructorReturn(this, (NonTerminalNodeParseTree.__proto__ || Object.getPrototypeOf(NonTerminalNodeParseTree)).apply(this, arguments));
  }

  _createClass(NonTerminalNodeParseTree, null, [{
    key: 'fromNonTerminalNode',
    value: function fromNonTerminalNode(nonTerminalNode) {
      var childNodes = nonTerminalNode.getChildNodes(),
          firstChildNode = first(childNodes),
          childNode = firstChildNode,
          childNodesLength = childNodes.length,
          childNodeOrNodesParseTree = childNodesLength === 1 ? childNode.getParseTree() : ChildNodesParseTree.fromChildNodes(childNodes);

      var productionNameAndLineNumbersParseTree = ProductionNameAndLineNumbersParseTree.fromNonTerminalNode(nonTerminalNode),
          productionNameParseTreeVerticalBranchPosition = productionNameAndLineNumbersParseTree.getVerticalBranchPosition(),
          childNodeOrNodesParseTreeVerticalBranchPosition = childNodeOrNodesParseTree.getVerticalBranchPosition(),
          verticalBranchPositionsDifference = productionNameParseTreeVerticalBranchPosition - childNodeOrNodesParseTreeVerticalBranchPosition,
          leftMarginWidth = undefined;

      if (false) {} else if (verticalBranchPositionsDifference < 0) {
        leftMarginWidth = -verticalBranchPositionsDifference;

        productionNameAndLineNumbersParseTree.addLeftMargin(leftMarginWidth);
      } else if (verticalBranchPositionsDifference > 0) {
        leftMarginWidth = +verticalBranchPositionsDifference;

        childNodeOrNodesParseTree.addLeftMargin(leftMarginWidth);
      }

      var productionNameParseTreeWidth = productionNameAndLineNumbersParseTree.getWidth(),
          childNodeOrNodesParseTreeWidth = childNodeOrNodesParseTree.getWidth(),
          widthsDifference = productionNameParseTreeWidth - childNodeOrNodesParseTreeWidth,
          rightMarginWidth = undefined;

      if (false) {} else if (widthsDifference < 0) {
        rightMarginWidth = -widthsDifference;

        productionNameAndLineNumbersParseTree.addRightMargin(rightMarginWidth);
      } else if (widthsDifference > 0) {
        rightMarginWidth = +widthsDifference;

        childNodeOrNodesParseTree.addRightMargin(rightMarginWidth);
      }

      productionNameParseTreeVerticalBranchPosition = productionNameAndLineNumbersParseTree.getVerticalBranchPosition();

      var productionNameParseTreeDepth = productionNameAndLineNumbersParseTree.getDepth(),
          nonTerminalNodeParseTreeDepth = productionNameParseTreeDepth,
          ///
      verticalBranchPosition = productionNameParseTreeVerticalBranchPosition,
          ///
      nonTerminalNodeParseTree = EmptyParseTree.fromDepth(nonTerminalNodeParseTreeDepth, NonTerminalNodeParseTree, verticalBranchPosition);

      nonTerminalNodeParseTree.appendToRight(productionNameAndLineNumbersParseTree);
      nonTerminalNodeParseTree.appendToBottom(childNodeOrNodesParseTree);

      return nonTerminalNodeParseTree;
    }
  }]);

  return NonTerminalNodeParseTree;
}(VerticalBranchParseTree);

module.exports = NonTerminalNodeParseTree;

function first(array) {
  return array[0];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcGFyc2VUcmVlL25vblRlcm1pbmFsTm9kZS5qcyJdLCJuYW1lcyI6WyJFbXB0eVBhcnNlVHJlZSIsInJlcXVpcmUiLCJDaGlsZE5vZGVzUGFyc2VUcmVlIiwiVmVydGljYWxCcmFuY2hQYXJzZVRyZWUiLCJQcm9kdWN0aW9uTmFtZUFuZExpbmVOdW1iZXJzUGFyc2VUcmVlIiwiTm9uVGVybWluYWxOb2RlUGFyc2VUcmVlIiwibm9uVGVybWluYWxOb2RlIiwiY2hpbGROb2RlcyIsImdldENoaWxkTm9kZXMiLCJmaXJzdENoaWxkTm9kZSIsImZpcnN0IiwiY2hpbGROb2RlIiwiY2hpbGROb2Rlc0xlbmd0aCIsImxlbmd0aCIsImNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWUiLCJnZXRQYXJzZVRyZWUiLCJmcm9tQ2hpbGROb2RlcyIsInByb2R1Y3Rpb25OYW1lQW5kTGluZU51bWJlcnNQYXJzZVRyZWUiLCJmcm9tTm9uVGVybWluYWxOb2RlIiwicHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uIiwiZ2V0VmVydGljYWxCcmFuY2hQb3NpdGlvbiIsImNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uIiwidmVydGljYWxCcmFuY2hQb3NpdGlvbnNEaWZmZXJlbmNlIiwibGVmdE1hcmdpbldpZHRoIiwidW5kZWZpbmVkIiwiYWRkTGVmdE1hcmdpbiIsInByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlV2lkdGgiLCJnZXRXaWR0aCIsImNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWVXaWR0aCIsIndpZHRoc0RpZmZlcmVuY2UiLCJyaWdodE1hcmdpbldpZHRoIiwiYWRkUmlnaHRNYXJnaW4iLCJwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZURlcHRoIiwiZ2V0RGVwdGgiLCJub25UZXJtaW5hbE5vZGVQYXJzZVRyZWVEZXB0aCIsInZlcnRpY2FsQnJhbmNoUG9zaXRpb24iLCJub25UZXJtaW5hbE5vZGVQYXJzZVRyZWUiLCJmcm9tRGVwdGgiLCJhcHBlbmRUb1JpZ2h0IiwiYXBwZW5kVG9Cb3R0b20iLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJyYXkiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUEsSUFBSUEsaUJBQWlCQyxRQUFRLG9CQUFSLENBQXJCO0FBQUEsSUFDSUMsc0JBQXNCRCxRQUFRLHlCQUFSLENBRDFCO0FBQUEsSUFFSUUsMEJBQTBCRixRQUFRLDZCQUFSLENBRjlCO0FBQUEsSUFHSUcsd0NBQXdDSCxRQUFRLDJDQUFSLENBSDVDOztJQUtNSSx3Qjs7Ozs7Ozs7Ozs7d0NBQ3VCQyxlLEVBQWlCO0FBQzFDLFVBQUlDLGFBQWFELGdCQUFnQkUsYUFBaEIsRUFBakI7QUFBQSxVQUNJQyxpQkFBaUJDLE1BQU1ILFVBQU4sQ0FEckI7QUFBQSxVQUVJSSxZQUFZRixjQUZoQjtBQUFBLFVBR0lHLG1CQUFtQkwsV0FBV00sTUFIbEM7QUFBQSxVQUlJQyw0QkFBNkJGLHFCQUFxQixDQUF0QixHQUNFRCxVQUFVSSxZQUFWLEVBREYsR0FFSWIsb0JBQW9CYyxjQUFwQixDQUFtQ1QsVUFBbkMsQ0FOcEM7O0FBUUEsVUFBSVUsd0NBQXdDYixzQ0FBc0NjLG1CQUF0QyxDQUEwRFosZUFBMUQsQ0FBNUM7QUFBQSxVQUNJYSxnREFBZ0RGLHNDQUFzQ0cseUJBQXRDLEVBRHBEO0FBQUEsVUFFSUMsa0RBQWtEUCwwQkFBMEJNLHlCQUExQixFQUZ0RDtBQUFBLFVBR0lFLG9DQUFvQ0gsZ0RBQWdERSwrQ0FIeEY7QUFBQSxVQUlJRSxrQkFBa0JDLFNBSnRCOztBQU1BLFVBQUksS0FBSixFQUFXLENBRVYsQ0FGRCxNQUVPLElBQUlGLG9DQUFvQyxDQUF4QyxFQUEyQztBQUNoREMsMEJBQWtCLENBQUNELGlDQUFuQjs7QUFFQUwsOENBQXNDUSxhQUF0QyxDQUFvREYsZUFBcEQ7QUFDRCxPQUpNLE1BSUEsSUFBSUQsb0NBQW9DLENBQXhDLEVBQTJDO0FBQ2hEQywwQkFBa0IsQ0FBQ0QsaUNBQW5COztBQUVBUixrQ0FBMEJXLGFBQTFCLENBQXdDRixlQUF4QztBQUNEOztBQUVELFVBQUlHLCtCQUErQlQsc0NBQXNDVSxRQUF0QyxFQUFuQztBQUFBLFVBQ0lDLGlDQUFpQ2QsMEJBQTBCYSxRQUExQixFQURyQztBQUFBLFVBRUlFLG1CQUFtQkgsK0JBQStCRSw4QkFGdEQ7QUFBQSxVQUdJRSxtQkFBbUJOLFNBSHZCOztBQUtBLFVBQUksS0FBSixFQUFXLENBRVYsQ0FGRCxNQUVPLElBQUlLLG1CQUFtQixDQUF2QixFQUEwQjtBQUMvQkMsMkJBQW1CLENBQUNELGdCQUFwQjs7QUFFQVosOENBQXNDYyxjQUF0QyxDQUFxREQsZ0JBQXJEO0FBQ0QsT0FKTSxNQUlBLElBQUlELG1CQUFtQixDQUF2QixFQUEwQjtBQUMvQkMsMkJBQW1CLENBQUNELGdCQUFwQjs7QUFFQWYsa0NBQTBCaUIsY0FBMUIsQ0FBeUNELGdCQUF6QztBQUNEOztBQUVEWCxzREFBZ0RGLHNDQUFzQ0cseUJBQXRDLEVBQWhEOztBQUVBLFVBQUlZLCtCQUErQmYsc0NBQXNDZ0IsUUFBdEMsRUFBbkM7QUFBQSxVQUNJQyxnQ0FBZ0NGLDRCQURwQztBQUFBLFVBQ2tFO0FBQzlERywrQkFBeUJoQiw2Q0FGN0I7QUFBQSxVQUU0RTtBQUN4RWlCLGlDQUEyQnBDLGVBQWVxQyxTQUFmLENBQXlCSCw2QkFBekIsRUFBd0Q3Qix3QkFBeEQsRUFBa0Y4QixzQkFBbEYsQ0FIL0I7O0FBS0FDLCtCQUF5QkUsYUFBekIsQ0FBdUNyQixxQ0FBdkM7QUFDQW1CLCtCQUF5QkcsY0FBekIsQ0FBd0N6Qix5QkFBeEM7O0FBRUEsYUFBT3NCLHdCQUFQO0FBQ0Q7Ozs7RUF4RG9DakMsdUI7O0FBMkR2Q3FDLE9BQU9DLE9BQVAsR0FBaUJwQyx3QkFBakI7O0FBRUEsU0FBU0ssS0FBVCxDQUFlZ0MsS0FBZixFQUFzQjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCIiwiZmlsZSI6Im5vblRlcm1pbmFsTm9kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEVtcHR5UGFyc2VUcmVlID0gcmVxdWlyZSgnLi4vcGFyc2VUcmVlL2VtcHR5JyksXG4gICAgQ2hpbGROb2Rlc1BhcnNlVHJlZSA9IHJlcXVpcmUoJy4uL3BhcnNlVHJlZS9jaGlsZE5vZGVzJyksXG4gICAgVmVydGljYWxCcmFuY2hQYXJzZVRyZWUgPSByZXF1aXJlKCcuLi9wYXJzZVRyZWUvdmVydGljYWxCcmFuY2gnKSxcbiAgICBQcm9kdWN0aW9uTmFtZUFuZExpbmVOdW1iZXJzUGFyc2VUcmVlID0gcmVxdWlyZSgnLi4vcGFyc2VUcmVlL3Byb2R1Y3Rpb25OYW1lQW5kTGluZU51bWJlcnMnKTtcblxuY2xhc3MgTm9uVGVybWluYWxOb2RlUGFyc2VUcmVlIGV4dGVuZHMgVmVydGljYWxCcmFuY2hQYXJzZVRyZWUge1xuICBzdGF0aWMgZnJvbU5vblRlcm1pbmFsTm9kZShub25UZXJtaW5hbE5vZGUpIHtcbiAgICB2YXIgY2hpbGROb2RlcyA9IG5vblRlcm1pbmFsTm9kZS5nZXRDaGlsZE5vZGVzKCksXG4gICAgICAgIGZpcnN0Q2hpbGROb2RlID0gZmlyc3QoY2hpbGROb2RlcyksXG4gICAgICAgIGNoaWxkTm9kZSA9IGZpcnN0Q2hpbGROb2RlLFxuICAgICAgICBjaGlsZE5vZGVzTGVuZ3RoID0gY2hpbGROb2Rlcy5sZW5ndGgsXG4gICAgICAgIGNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWUgPSAoY2hpbGROb2Rlc0xlbmd0aCA9PT0gMSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUuZ2V0UGFyc2VUcmVlKCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoaWxkTm9kZXNQYXJzZVRyZWUuZnJvbUNoaWxkTm9kZXMoY2hpbGROb2Rlcyk7XG4gICAgXG4gICAgdmFyIHByb2R1Y3Rpb25OYW1lQW5kTGluZU51bWJlcnNQYXJzZVRyZWUgPSBQcm9kdWN0aW9uTmFtZUFuZExpbmVOdW1iZXJzUGFyc2VUcmVlLmZyb21Ob25UZXJtaW5hbE5vZGUobm9uVGVybWluYWxOb2RlKSxcbiAgICAgICAgcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uID0gcHJvZHVjdGlvbk5hbWVBbmRMaW5lTnVtYmVyc1BhcnNlVHJlZS5nZXRWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uKCksXG4gICAgICAgIGNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uID0gY2hpbGROb2RlT3JOb2Rlc1BhcnNlVHJlZS5nZXRWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uKCksXG4gICAgICAgIHZlcnRpY2FsQnJhbmNoUG9zaXRpb25zRGlmZmVyZW5jZSA9IHByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlVmVydGljYWxCcmFuY2hQb3NpdGlvbiAtIGNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uLFxuICAgICAgICBsZWZ0TWFyZ2luV2lkdGggPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZmFsc2UpIHtcblxuICAgIH0gZWxzZSBpZiAodmVydGljYWxCcmFuY2hQb3NpdGlvbnNEaWZmZXJlbmNlIDwgMCkge1xuICAgICAgbGVmdE1hcmdpbldpZHRoID0gLXZlcnRpY2FsQnJhbmNoUG9zaXRpb25zRGlmZmVyZW5jZTtcblxuICAgICAgcHJvZHVjdGlvbk5hbWVBbmRMaW5lTnVtYmVyc1BhcnNlVHJlZS5hZGRMZWZ0TWFyZ2luKGxlZnRNYXJnaW5XaWR0aCk7XG4gICAgfSBlbHNlIGlmICh2ZXJ0aWNhbEJyYW5jaFBvc2l0aW9uc0RpZmZlcmVuY2UgPiAwKSB7XG4gICAgICBsZWZ0TWFyZ2luV2lkdGggPSArdmVydGljYWxCcmFuY2hQb3NpdGlvbnNEaWZmZXJlbmNlO1xuXG4gICAgICBjaGlsZE5vZGVPck5vZGVzUGFyc2VUcmVlLmFkZExlZnRNYXJnaW4obGVmdE1hcmdpbldpZHRoKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVXaWR0aCA9IHByb2R1Y3Rpb25OYW1lQW5kTGluZU51bWJlcnNQYXJzZVRyZWUuZ2V0V2lkdGgoKSxcbiAgICAgICAgY2hpbGROb2RlT3JOb2Rlc1BhcnNlVHJlZVdpZHRoID0gY2hpbGROb2RlT3JOb2Rlc1BhcnNlVHJlZS5nZXRXaWR0aCgpLFxuICAgICAgICB3aWR0aHNEaWZmZXJlbmNlID0gcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVXaWR0aCAtIGNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWVXaWR0aCxcbiAgICAgICAgcmlnaHRNYXJnaW5XaWR0aCA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChmYWxzZSkge1xuXG4gICAgfSBlbHNlIGlmICh3aWR0aHNEaWZmZXJlbmNlIDwgMCkge1xuICAgICAgcmlnaHRNYXJnaW5XaWR0aCA9IC13aWR0aHNEaWZmZXJlbmNlO1xuICAgICAgXG4gICAgICBwcm9kdWN0aW9uTmFtZUFuZExpbmVOdW1iZXJzUGFyc2VUcmVlLmFkZFJpZ2h0TWFyZ2luKHJpZ2h0TWFyZ2luV2lkdGgpO1xuICAgIH0gZWxzZSBpZiAod2lkdGhzRGlmZmVyZW5jZSA+IDApIHtcbiAgICAgIHJpZ2h0TWFyZ2luV2lkdGggPSArd2lkdGhzRGlmZmVyZW5jZTtcblxuICAgICAgY2hpbGROb2RlT3JOb2Rlc1BhcnNlVHJlZS5hZGRSaWdodE1hcmdpbihyaWdodE1hcmdpbldpZHRoKTtcbiAgICB9XG5cbiAgICBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZVZlcnRpY2FsQnJhbmNoUG9zaXRpb24gPSBwcm9kdWN0aW9uTmFtZUFuZExpbmVOdW1iZXJzUGFyc2VUcmVlLmdldFZlcnRpY2FsQnJhbmNoUG9zaXRpb24oKTtcblxuICAgIHZhciBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZURlcHRoID0gcHJvZHVjdGlvbk5hbWVBbmRMaW5lTnVtYmVyc1BhcnNlVHJlZS5nZXREZXB0aCgpLFxuICAgICAgICBub25UZXJtaW5hbE5vZGVQYXJzZVRyZWVEZXB0aCA9IHByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlRGVwdGgsIC8vL1xuICAgICAgICB2ZXJ0aWNhbEJyYW5jaFBvc2l0aW9uID0gcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uLCAvLy9cbiAgICAgICAgbm9uVGVybWluYWxOb2RlUGFyc2VUcmVlID0gRW1wdHlQYXJzZVRyZWUuZnJvbURlcHRoKG5vblRlcm1pbmFsTm9kZVBhcnNlVHJlZURlcHRoLCBOb25UZXJtaW5hbE5vZGVQYXJzZVRyZWUsIHZlcnRpY2FsQnJhbmNoUG9zaXRpb24pO1xuXG4gICAgbm9uVGVybWluYWxOb2RlUGFyc2VUcmVlLmFwcGVuZFRvUmlnaHQocHJvZHVjdGlvbk5hbWVBbmRMaW5lTnVtYmVyc1BhcnNlVHJlZSk7XG4gICAgbm9uVGVybWluYWxOb2RlUGFyc2VUcmVlLmFwcGVuZFRvQm90dG9tKGNoaWxkTm9kZU9yTm9kZXNQYXJzZVRyZWUpO1xuXG4gICAgcmV0dXJuIG5vblRlcm1pbmFsTm9kZVBhcnNlVHJlZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5vblRlcm1pbmFsTm9kZVBhcnNlVHJlZTtcblxuZnVuY3Rpb24gZmlyc3QoYXJyYXkpIHsgcmV0dXJuIGFycmF5WzBdOyB9XG4iXX0=