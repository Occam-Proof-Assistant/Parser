'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../production'),
    ProductionNameRule = require('../rule/productionName'),
    NonTerminalNode = require('../../common/node/nonTerminal');

var PartProduction = function (_Production) {
  _inherits(PartProduction, _Production);

  function PartProduction() {
    _classCallCheck(this, PartProduction);

    var groupProductionName = 'group',
        endOfLineProductionName = 'endOfLine',
        noWhitespaceProductionName = 'noWhitespace',
        terminalSymbolProductionName = 'terminalSymbol',
        productionNameProductionName = 'productionName',
        regularExpressionProductionName = 'regularExpression',
        significantTokenTypeProductionName = 'significantTokenType',
        groupProductionNameRule = new ProductionNameRule(groupProductionName),
        endOfLineProductionNameRule = new ProductionNameRule(endOfLineProductionName),
        noWhitespaceProductionNameRule = new ProductionNameRule(noWhitespaceProductionName),
        terminalSymbolProductionNameRule = new ProductionNameRule(terminalSymbolProductionName),
        productionNameProductionNameRule = new ProductionNameRule(productionNameProductionName),
        regularExpressionProductionNameRule = new ProductionNameRule(regularExpressionProductionName),
        significantTokenTypeProductionNameRule = new ProductionNameRule(significantTokenTypeProductionName),
        name = 'part',
        rules = [groupProductionNameRule, productionNameProductionNameRule, regularExpressionProductionNameRule, significantTokenTypeProductionNameRule, terminalSymbolProductionNameRule, noWhitespaceProductionNameRule, endOfLineProductionNameRule],
        Node = NonTerminalNode;

    return _possibleConstructorReturn(this, (PartProduction.__proto__ || Object.getPrototypeOf(PartProduction)).call(this, name, rules, Node));
  }

  return PartProduction;
}(Production);

module.exports = PartProduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcHJvZHVjdGlvbi9wYXJ0LmpzIl0sIm5hbWVzIjpbIlByb2R1Y3Rpb24iLCJyZXF1aXJlIiwiUHJvZHVjdGlvbk5hbWVSdWxlIiwiTm9uVGVybWluYWxOb2RlIiwiUGFydFByb2R1Y3Rpb24iLCJncm91cFByb2R1Y3Rpb25OYW1lIiwiZW5kT2ZMaW5lUHJvZHVjdGlvbk5hbWUiLCJub1doaXRlc3BhY2VQcm9kdWN0aW9uTmFtZSIsInRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWUiLCJwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lIiwicmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZSIsInNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWUiLCJncm91cFByb2R1Y3Rpb25OYW1lUnVsZSIsImVuZE9mTGluZVByb2R1Y3Rpb25OYW1lUnVsZSIsIm5vV2hpdGVzcGFjZVByb2R1Y3Rpb25OYW1lUnVsZSIsInRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWVSdWxlIiwicHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZVJ1bGUiLCJyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lUnVsZSIsInNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWVSdWxlIiwibmFtZSIsInJ1bGVzIiwiTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBLElBQU1BLGFBQWFDLFFBQVEsZUFBUixDQUFuQjtBQUFBLElBQ01DLHFCQUFxQkQsUUFBUSx3QkFBUixDQUQzQjtBQUFBLElBRU1FLGtCQUFrQkYsUUFBUSwrQkFBUixDQUZ4Qjs7SUFJTUcsYzs7O0FBQ0osNEJBQWM7QUFBQTs7QUFDWixRQUFNQyxzQkFBc0IsT0FBNUI7QUFBQSxRQUNNQywwQkFBMEIsV0FEaEM7QUFBQSxRQUVNQyw2QkFBNkIsY0FGbkM7QUFBQSxRQUdNQywrQkFBK0IsZ0JBSHJDO0FBQUEsUUFJTUMsK0JBQStCLGdCQUpyQztBQUFBLFFBS01DLGtDQUFrQyxtQkFMeEM7QUFBQSxRQU1NQyxxQ0FBcUMsc0JBTjNDO0FBQUEsUUFPTUMsMEJBQTBCLElBQUlWLGtCQUFKLENBQXVCRyxtQkFBdkIsQ0FQaEM7QUFBQSxRQVFNUSw4QkFBOEIsSUFBSVgsa0JBQUosQ0FBdUJJLHVCQUF2QixDQVJwQztBQUFBLFFBU01RLGlDQUFpQyxJQUFJWixrQkFBSixDQUF1QkssMEJBQXZCLENBVHZDO0FBQUEsUUFVTVEsbUNBQW1DLElBQUliLGtCQUFKLENBQXVCTSw0QkFBdkIsQ0FWekM7QUFBQSxRQVdNUSxtQ0FBbUMsSUFBSWQsa0JBQUosQ0FBdUJPLDRCQUF2QixDQVh6QztBQUFBLFFBWU1RLHNDQUFzQyxJQUFJZixrQkFBSixDQUF1QlEsK0JBQXZCLENBWjVDO0FBQUEsUUFhTVEseUNBQXlDLElBQUloQixrQkFBSixDQUF1QlMsa0NBQXZCLENBYi9DO0FBQUEsUUFjTVEsT0FBTyxNQWRiO0FBQUEsUUFlTUMsUUFBUSxDQUNOUix1QkFETSxFQUVOSSxnQ0FGTSxFQUdOQyxtQ0FITSxFQUlOQyxzQ0FKTSxFQUtOSCxnQ0FMTSxFQU1ORCw4QkFOTSxFQU9ORCwyQkFQTSxDQWZkO0FBQUEsUUF3Qk1RLE9BQU9sQixlQXhCYjs7QUFEWSwySEEyQk5nQixJQTNCTSxFQTJCQUMsS0EzQkEsRUEyQk9DLElBM0JQO0FBNEJiOzs7RUE3QjBCckIsVTs7QUFnQzdCc0IsT0FBT0MsT0FBUCxHQUFpQm5CLGNBQWpCIiwiZmlsZSI6InBhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuLi9wcm9kdWN0aW9uJyksXG4gICAgICBQcm9kdWN0aW9uTmFtZVJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3Byb2R1Y3Rpb25OYW1lJyksXG4gICAgICBOb25UZXJtaW5hbE5vZGUgPSByZXF1aXJlKCcuLi8uLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbCcpO1xuXG5jbGFzcyBQYXJ0UHJvZHVjdGlvbiBleHRlbmRzIFByb2R1Y3Rpb24ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBncm91cFByb2R1Y3Rpb25OYW1lID0gJ2dyb3VwJyxcbiAgICAgICAgICBlbmRPZkxpbmVQcm9kdWN0aW9uTmFtZSA9ICdlbmRPZkxpbmUnLFxuICAgICAgICAgIG5vV2hpdGVzcGFjZVByb2R1Y3Rpb25OYW1lID0gJ25vV2hpdGVzcGFjZScsXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZSA9ICd0ZXJtaW5hbFN5bWJvbCcsXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZSA9ICdwcm9kdWN0aW9uTmFtZScsXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZSA9ICdyZWd1bGFyRXhwcmVzc2lvbicsXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZSA9ICdzaWduaWZpY2FudFRva2VuVHlwZScsXG4gICAgICAgICAgZ3JvdXBQcm9kdWN0aW9uTmFtZVJ1bGUgPSBuZXcgUHJvZHVjdGlvbk5hbWVSdWxlKGdyb3VwUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIGVuZE9mTGluZVByb2R1Y3Rpb25OYW1lUnVsZSA9IG5ldyBQcm9kdWN0aW9uTmFtZVJ1bGUoZW5kT2ZMaW5lUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIG5vV2hpdGVzcGFjZVByb2R1Y3Rpb25OYW1lUnVsZSA9IG5ldyBQcm9kdWN0aW9uTmFtZVJ1bGUobm9XaGl0ZXNwYWNlUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWVSdWxlID0gbmV3IFByb2R1Y3Rpb25OYW1lUnVsZSh0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lUnVsZSA9IG5ldyBQcm9kdWN0aW9uTmFtZVJ1bGUocHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZVJ1bGUgPSBuZXcgUHJvZHVjdGlvbk5hbWVSdWxlKHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWVSdWxlID0gbmV3IFByb2R1Y3Rpb25OYW1lUnVsZShzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBuYW1lID0gJ3BhcnQnLFxuICAgICAgICAgIHJ1bGVzID0gW1xuICAgICAgICAgICAgZ3JvdXBQcm9kdWN0aW9uTmFtZVJ1bGUsXG4gICAgICAgICAgICBwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lUnVsZSxcbiAgICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWVSdWxlLFxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZVJ1bGUsXG4gICAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lUnVsZSxcbiAgICAgICAgICAgIG5vV2hpdGVzcGFjZVByb2R1Y3Rpb25OYW1lUnVsZSxcbiAgICAgICAgICAgIGVuZE9mTGluZVByb2R1Y3Rpb25OYW1lUnVsZVxuICAgICAgICAgIF0sXG4gICAgICAgICAgTm9kZSA9IE5vblRlcm1pbmFsTm9kZTtcbiAgICBcbiAgICBzdXBlcihuYW1lLCBydWxlcywgTm9kZSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRQcm9kdWN0aW9uO1xuIl19