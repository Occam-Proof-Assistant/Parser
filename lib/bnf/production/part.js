'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../production'),
    PartNode = require('../node/part'),
    ProductionNameDefinition = require('../definition/productionName');

var PartProduction = function (_Production) {
  _inherits(PartProduction, _Production);

  function PartProduction() {
    _classCallCheck(this, PartProduction);

    var groupOfPartsProductionName = 'groupOfParts',
        optionalPartProductionName = 'optionalPart',
        oneOrMorePartsProductionName = 'oneOrMoreParts',
        zeroOrMorePartsProductionName = 'zeroOrMoreParts',
        terminalSymbolProductionName = 'terminalSymbol',
        endOfLineSymbolProductionName = 'endOfLineSymbol',
        wildcardSymbolProductionName = 'wildcardSymbol',
        productionNameProductionName = 'productionName',
        noWhitespacePartProductionName = 'noWhitespacePart',
        regularExpressionProductionName = 'regularExpression',
        significantTokenTypeProductionName = 'significantTokenType',
        groupOfPartsProductionNameDefinition = new ProductionNameDefinition(groupOfPartsProductionName),
        optionalPartProductionNameDefinition = new ProductionNameDefinition(optionalPartProductionName),
        oneOrMorePartsProductionNameDefinition = new ProductionNameDefinition(oneOrMorePartsProductionName),
        zeroOrMorePartsProductionNameDefinition = new ProductionNameDefinition(zeroOrMorePartsProductionName),
        terminalSymbolProductionNameDefinition = new ProductionNameDefinition(terminalSymbolProductionName),
        endOfLineSymbolProductionNameDefinition = new ProductionNameDefinition(endOfLineSymbolProductionName),
        wildcardSymbolProductionNameDefinition = new ProductionNameDefinition(wildcardSymbolProductionName),
        productionNameProductionNameDefinition = new ProductionNameDefinition(productionNameProductionName),
        noWhitespacePartProductionNameDefinition = new ProductionNameDefinition(noWhitespacePartProductionName),
        regularExpressionProductionNameDefinition = new ProductionNameDefinition(regularExpressionProductionName),
        significantTokenTypeProductionNameDefinition = new ProductionNameDefinition(significantTokenTypeProductionName),
        name = 'part',
        definitions = [noWhitespacePartProductionNameDefinition, optionalPartProductionNameDefinition, zeroOrMorePartsProductionNameDefinition, oneOrMorePartsProductionNameDefinition, groupOfPartsProductionNameDefinition, productionNameProductionNameDefinition, regularExpressionProductionNameDefinition, significantTokenTypeProductionNameDefinition, terminalSymbolProductionNameDefinition, endOfLineSymbolProductionNameDefinition, wildcardSymbolProductionNameDefinition],
        Node = PartNode;

    return _possibleConstructorReturn(this, (PartProduction.__proto__ || Object.getPrototypeOf(PartProduction)).call(this, name, definitions, Node));
  }

  return PartProduction;
}(Production);

module.exports = PartProduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcHJvZHVjdGlvbi9wYXJ0LmpzIl0sIm5hbWVzIjpbIlByb2R1Y3Rpb24iLCJyZXF1aXJlIiwiUGFydE5vZGUiLCJQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJQYXJ0UHJvZHVjdGlvbiIsImdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lIiwib3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWUiLCJvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lIiwiemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUiLCJ0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lIiwiZW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbk5hbWUiLCJ3aWxkY2FyZFN5bWJvbFByb2R1Y3Rpb25OYW1lIiwicHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZSIsIm5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZSIsInJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWUiLCJzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lIiwiZ3JvdXBPZlBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwib3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwib25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJ6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJ0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsImVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIndpbGRjYXJkU3ltYm9sUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwicHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwicmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIm5hbWUiLCJkZWZpbml0aW9ucyIsIk5vZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQSxJQUFNQSxhQUFhQyxRQUFRLGVBQVIsQ0FBbkI7QUFBQSxJQUNNQyxXQUFXRCxRQUFRLGNBQVIsQ0FEakI7QUFBQSxJQUVNRSwyQkFBMkJGLFFBQVEsOEJBQVIsQ0FGakM7O0lBSU1HLGM7OztBQUNKLDRCQUFjO0FBQUE7O0FBQ1osUUFBTUMsNkJBQTZCLGNBQW5DO0FBQUEsUUFDTUMsNkJBQTZCLGNBRG5DO0FBQUEsUUFFTUMsK0JBQStCLGdCQUZyQztBQUFBLFFBR01DLGdDQUFnQyxpQkFIdEM7QUFBQSxRQUlNQywrQkFBK0IsZ0JBSnJDO0FBQUEsUUFLTUMsZ0NBQWdDLGlCQUx0QztBQUFBLFFBTU1DLCtCQUErQixnQkFOckM7QUFBQSxRQU9NQywrQkFBK0IsZ0JBUHJDO0FBQUEsUUFRTUMsaUNBQWlDLGtCQVJ2QztBQUFBLFFBU01DLGtDQUFrQyxtQkFUeEM7QUFBQSxRQVVNQyxxQ0FBcUMsc0JBVjNDO0FBQUEsUUFXTUMsdUNBQXVDLElBQUliLHdCQUFKLENBQTZCRSwwQkFBN0IsQ0FYN0M7QUFBQSxRQVlNWSx1Q0FBdUMsSUFBSWQsd0JBQUosQ0FBNkJHLDBCQUE3QixDQVo3QztBQUFBLFFBYU1ZLHlDQUF5QyxJQUFJZix3QkFBSixDQUE2QkksNEJBQTdCLENBYi9DO0FBQUEsUUFjTVksMENBQTBDLElBQUloQix3QkFBSixDQUE2QkssNkJBQTdCLENBZGhEO0FBQUEsUUFlTVkseUNBQXlDLElBQUlqQix3QkFBSixDQUE2Qk0sNEJBQTdCLENBZi9DO0FBQUEsUUFnQk1ZLDBDQUEwQyxJQUFJbEIsd0JBQUosQ0FBNkJPLDZCQUE3QixDQWhCaEQ7QUFBQSxRQWlCTVkseUNBQXlDLElBQUluQix3QkFBSixDQUE2QlEsNEJBQTdCLENBakIvQztBQUFBLFFBa0JNWSx5Q0FBeUMsSUFBSXBCLHdCQUFKLENBQTZCUyw0QkFBN0IsQ0FsQi9DO0FBQUEsUUFtQk1ZLDJDQUEyQyxJQUFJckIsd0JBQUosQ0FBNkJVLDhCQUE3QixDQW5CakQ7QUFBQSxRQW9CTVksNENBQTRDLElBQUl0Qix3QkFBSixDQUE2QlcsK0JBQTdCLENBcEJsRDtBQUFBLFFBcUJNWSwrQ0FBK0MsSUFBSXZCLHdCQUFKLENBQTZCWSxrQ0FBN0IsQ0FyQnJEO0FBQUEsUUFzQk1ZLE9BQU8sTUF0QmI7QUFBQSxRQXVCTUMsY0FBYyxDQUNaSix3Q0FEWSxFQUVaUCxvQ0FGWSxFQUdaRSx1Q0FIWSxFQUlaRCxzQ0FKWSxFQUtaRixvQ0FMWSxFQU1aTyxzQ0FOWSxFQU9aRSx5Q0FQWSxFQVFaQyw0Q0FSWSxFQVNaTixzQ0FUWSxFQVVaQyx1Q0FWWSxFQVdaQyxzQ0FYWSxDQXZCcEI7QUFBQSxRQW9DTU8sT0FBTzNCLFFBcENiOztBQURZLDJIQXVDTnlCLElBdkNNLEVBdUNBQyxXQXZDQSxFQXVDYUMsSUF2Q2I7QUF3Q2I7OztFQXpDMEI3QixVOztBQTRDN0I4QixPQUFPQyxPQUFQLEdBQWlCM0IsY0FBakIiLCJmaWxlIjoicGFydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4uL3Byb2R1Y3Rpb24nKSxcbiAgICAgIFBhcnROb2RlID0gcmVxdWlyZSgnLi4vbm9kZS9wYXJ0JyksXG4gICAgICBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3Byb2R1Y3Rpb25OYW1lJyk7XG5cbmNsYXNzIFBhcnRQcm9kdWN0aW9uIGV4dGVuZHMgUHJvZHVjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lID0gJ2dyb3VwT2ZQYXJ0cycsXG4gICAgICAgICAgb3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWUgPSAnb3B0aW9uYWxQYXJ0JyxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lID0gJ29uZU9yTW9yZVBhcnRzJyxcbiAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSA9ICd6ZXJvT3JNb3JlUGFydHMnLFxuICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWUgPSAndGVybWluYWxTeW1ib2wnLFxuICAgICAgICAgIGVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lID0gJ2VuZE9mTGluZVN5bWJvbCcsXG4gICAgICAgICAgd2lsZGNhcmRTeW1ib2xQcm9kdWN0aW9uTmFtZSA9ICd3aWxkY2FyZFN5bWJvbCcsXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZSA9ICdwcm9kdWN0aW9uTmFtZScsXG4gICAgICAgICAgbm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb25OYW1lID0gJ25vV2hpdGVzcGFjZVBhcnQnLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWUgPSAncmVndWxhckV4cHJlc3Npb24nLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWUgPSAnc2lnbmlmaWNhbnRUb2tlblR5cGUnLFxuICAgICAgICAgIGdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oZ3JvdXBPZlBhcnRzUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24ob3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIG9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24odGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgZW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgd2lsZGNhcmRTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHdpbGRjYXJkU3ltYm9sUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgbmFtZSA9ICdwYXJ0JyxcbiAgICAgICAgICBkZWZpbml0aW9ucyA9IFtcbiAgICAgICAgICAgIG5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgcmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgZW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgd2lsZGNhcmRTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb25cbiAgICAgICAgICBdLFxuICAgICAgICAgIE5vZGUgPSBQYXJ0Tm9kZTtcbiAgICBcbiAgICBzdXBlcihuYW1lLCBkZWZpbml0aW9ucywgTm9kZSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRQcm9kdWN0aW9uO1xuIl19