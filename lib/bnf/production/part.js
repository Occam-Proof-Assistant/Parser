'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../production'),
    NonTerminalNode = require('../../common/node/nonTerminal'),
    ProductionNameDefinition = require('../definition/productionName');

var PartProduction = function (_Production) {
  _inherits(PartProduction, _Production);

  function PartProduction() {
    _classCallCheck(this, PartProduction);

    var groupProductionName = 'group',
        negatedPartProductionName = 'negatedPart',
        optionalPartProductionName = 'optionalPart',
        oneOrMorePartsProductionName = 'oneOrMoreParts',
        zeroOrMorePartsProductionName = 'zeroOrMoreParts',
        terminalSymbolProductionName = 'terminalSymbol',
        endOfLineSymbolProductionName = 'endOfLineSymbol',
        productionNameProductionName = 'productionName',
        noWhitespacePartProductionName = 'noWhitespacePart',
        regularExpressionProductionName = 'regularExpression',
        significantTokenTypeProductionName = 'significantTokenType',
        groupProductionNameDefinition = new ProductionNameDefinition(groupProductionName),
        negatedPartProductionNameDefinition = new ProductionNameDefinition(negatedPartProductionName),
        optionalPartProductionNameDefinition = new ProductionNameDefinition(optionalPartProductionName),
        oneOrMorePartsProductionNameDefinition = new ProductionNameDefinition(oneOrMorePartsProductionName),
        zeroOrMorePartsProductionNameDefinition = new ProductionNameDefinition(zeroOrMorePartsProductionName),
        terminalSymbolProductionNameDefinition = new ProductionNameDefinition(terminalSymbolProductionName),
        endOfLineSymbolProductionNameDefinition = new ProductionNameDefinition(endOfLineSymbolProductionName),
        productionNameProductionNameDefinition = new ProductionNameDefinition(productionNameProductionName),
        noWhitespacePartProductionNameDefinition = new ProductionNameDefinition(noWhitespacePartProductionName),
        regularExpressionProductionNameDefinition = new ProductionNameDefinition(regularExpressionProductionName),
        significantTokenTypeProductionNameDefinition = new ProductionNameDefinition(significantTokenTypeProductionName),
        name = 'part',
        definitions = [noWhitespacePartProductionNameDefinition, negatedPartProductionNameDefinition, optionalPartProductionNameDefinition, oneOrMorePartsProductionNameDefinition, zeroOrMorePartsProductionNameDefinition, groupProductionNameDefinition, productionNameProductionNameDefinition, regularExpressionProductionNameDefinition, significantTokenTypeProductionNameDefinition, terminalSymbolProductionNameDefinition, endOfLineSymbolProductionNameDefinition],
        Node = NonTerminalNode;

    return _possibleConstructorReturn(this, (PartProduction.__proto__ || Object.getPrototypeOf(PartProduction)).call(this, name, definitions, Node));
  }

  return PartProduction;
}(Production);

module.exports = PartProduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcHJvZHVjdGlvbi9wYXJ0LmpzIl0sIm5hbWVzIjpbIlByb2R1Y3Rpb24iLCJyZXF1aXJlIiwiTm9uVGVybWluYWxOb2RlIiwiUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwiUGFydFByb2R1Y3Rpb24iLCJncm91cFByb2R1Y3Rpb25OYW1lIiwibmVnYXRlZFBhcnRQcm9kdWN0aW9uTmFtZSIsIm9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lIiwib25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSIsInplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lIiwidGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZSIsImVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lIiwicHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZSIsIm5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZSIsInJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWUiLCJzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lIiwiZ3JvdXBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJuZWdhdGVkUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIm9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIm9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwiemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwidGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIm5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsInNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwibmFtZSIsImRlZmluaXRpb25zIiwiTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBLElBQU1BLGFBQWFDLFFBQVEsZUFBUixDQUFuQjtBQUFBLElBQ01DLGtCQUFrQkQsUUFBUSwrQkFBUixDQUR4QjtBQUFBLElBRU1FLDJCQUEyQkYsUUFBUSw4QkFBUixDQUZqQzs7SUFJTUcsYzs7O0FBQ0osNEJBQWM7QUFBQTs7QUFDWixRQUFNQyxzQkFBc0IsT0FBNUI7QUFBQSxRQUNNQyw0QkFBNEIsYUFEbEM7QUFBQSxRQUVNQyw2QkFBNkIsY0FGbkM7QUFBQSxRQUdNQywrQkFBK0IsZ0JBSHJDO0FBQUEsUUFJTUMsZ0NBQWdDLGlCQUp0QztBQUFBLFFBS01DLCtCQUErQixnQkFMckM7QUFBQSxRQU1NQyxnQ0FBZ0MsaUJBTnRDO0FBQUEsUUFPTUMsK0JBQStCLGdCQVByQztBQUFBLFFBUU1DLGlDQUFpQyxrQkFSdkM7QUFBQSxRQVNNQyxrQ0FBa0MsbUJBVHhDO0FBQUEsUUFVTUMscUNBQXFDLHNCQVYzQztBQUFBLFFBV01DLGdDQUFnQyxJQUFJYix3QkFBSixDQUE2QkUsbUJBQTdCLENBWHRDO0FBQUEsUUFZTVksc0NBQXNDLElBQUlkLHdCQUFKLENBQTZCRyx5QkFBN0IsQ0FaNUM7QUFBQSxRQWFNWSx1Q0FBdUMsSUFBSWYsd0JBQUosQ0FBNkJJLDBCQUE3QixDQWI3QztBQUFBLFFBY01ZLHlDQUF5QyxJQUFJaEIsd0JBQUosQ0FBNkJLLDRCQUE3QixDQWQvQztBQUFBLFFBZU1ZLDBDQUEwQyxJQUFJakIsd0JBQUosQ0FBNkJNLDZCQUE3QixDQWZoRDtBQUFBLFFBZ0JNWSx5Q0FBeUMsSUFBSWxCLHdCQUFKLENBQTZCTyw0QkFBN0IsQ0FoQi9DO0FBQUEsUUFpQk1ZLDBDQUEwQyxJQUFJbkIsd0JBQUosQ0FBNkJRLDZCQUE3QixDQWpCaEQ7QUFBQSxRQWtCTVkseUNBQXlDLElBQUlwQix3QkFBSixDQUE2QlMsNEJBQTdCLENBbEIvQztBQUFBLFFBbUJNWSwyQ0FBMkMsSUFBSXJCLHdCQUFKLENBQTZCVSw4QkFBN0IsQ0FuQmpEO0FBQUEsUUFvQk1ZLDRDQUE0QyxJQUFJdEIsd0JBQUosQ0FBNkJXLCtCQUE3QixDQXBCbEQ7QUFBQSxRQXFCTVksK0NBQStDLElBQUl2Qix3QkFBSixDQUE2Qlksa0NBQTdCLENBckJyRDtBQUFBLFFBc0JNWSxPQUFPLE1BdEJiO0FBQUEsUUF1Qk1DLGNBQWMsQ0FDWkosd0NBRFksRUFFWlAsbUNBRlksRUFHWkMsb0NBSFksRUFJWkMsc0NBSlksRUFLWkMsdUNBTFksRUFNWkosNkJBTlksRUFPWk8sc0NBUFksRUFRWkUseUNBUlksRUFTWkMsNENBVFksRUFVWkwsc0NBVlksRUFXWkMsdUNBWFksQ0F2QnBCO0FBQUEsUUFvQ01PLE9BQU8zQixlQXBDYjs7QUFEWSwySEF1Q055QixJQXZDTSxFQXVDQUMsV0F2Q0EsRUF1Q2FDLElBdkNiO0FBd0NiOzs7RUF6QzBCN0IsVTs7QUE0QzdCOEIsT0FBT0MsT0FBUCxHQUFpQjNCLGNBQWpCIiwiZmlsZSI6InBhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuLi9wcm9kdWN0aW9uJyksXG4gICAgICBOb25UZXJtaW5hbE5vZGUgPSByZXF1aXJlKCcuLi8uLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbCcpLFxuICAgICAgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi9wcm9kdWN0aW9uTmFtZScpO1xuXG5jbGFzcyBQYXJ0UHJvZHVjdGlvbiBleHRlbmRzIFByb2R1Y3Rpb24ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBncm91cFByb2R1Y3Rpb25OYW1lID0gJ2dyb3VwJyxcbiAgICAgICAgICBuZWdhdGVkUGFydFByb2R1Y3Rpb25OYW1lID0gJ25lZ2F0ZWRQYXJ0JyxcbiAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZSA9ICdvcHRpb25hbFBhcnQnLFxuICAgICAgICAgIG9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUgPSAnb25lT3JNb3JlUGFydHMnLFxuICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lID0gJ3plcm9Pck1vcmVQYXJ0cycsXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZSA9ICd0ZXJtaW5hbFN5bWJvbCcsXG4gICAgICAgICAgZW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbk5hbWUgPSAnZW5kT2ZMaW5lU3ltYm9sJyxcbiAgICAgICAgICBwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lID0gJ3Byb2R1Y3Rpb25OYW1lJyxcbiAgICAgICAgICBub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWUgPSAnbm9XaGl0ZXNwYWNlUGFydCcsXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZSA9ICdyZWd1bGFyRXhwcmVzc2lvbicsXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZSA9ICdzaWduaWZpY2FudFRva2VuVHlwZScsXG4gICAgICAgICAgZ3JvdXBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKGdyb3VwUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIG5lZ2F0ZWRQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihuZWdhdGVkUGFydFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24ob25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbih6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIGVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oZW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgbmFtZSA9ICdwYXJ0JyxcbiAgICAgICAgICBkZWZpbml0aW9ucyA9IFtcbiAgICAgICAgICAgIG5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBuZWdhdGVkUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIG9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgZ3JvdXBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvblxuICAgICAgICAgIF0sXG4gICAgICAgICAgTm9kZSA9IE5vblRlcm1pbmFsTm9kZTtcbiAgICBcbiAgICBzdXBlcihuYW1lLCBkZWZpbml0aW9ucywgTm9kZSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRQcm9kdWN0aW9uO1xuIl19