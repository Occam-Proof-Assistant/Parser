'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../production'),
    PartNode = require('../node/part'),
    ProductionNameDefinition = require('../definition/productionName');

var PartProduction = function (_Production) {
  _inherits(PartProduction, _Production);

  function PartProduction() {
    _classCallCheck(this, PartProduction);

    var optionalPartProductionName = 'optionalPart',
        zeroOrMorePartsProductionName = 'zeroOrMoreParts',
        oneOrMorePartsProductionName = 'oneOrMoreParts',
        groupOfPartsProductionName = 'groupOfParts',
        choiceOfPartsProductionName = 'choiceOfParts',
        terminalSymbolProductionName = 'terminalSymbol',
        endOfLineSymbolProductionName = 'endOfLineSymbol',
        wildcardSymbolProductionName = 'wildcardSymbol',
        productionNameProductionName = 'productionName',
        noWhitespacePartProductionName = 'noWhitespacePart',
        regularExpressionProductionName = 'regularExpression',
        significantTokenTypeProductionName = 'significantTokenType',
        optionalPartProductionNameDefinition = new ProductionNameDefinition(optionalPartProductionName),
        zeroOrMorePartsProductionNameDefinition = new ProductionNameDefinition(zeroOrMorePartsProductionName),
        oneOrMorePartsProductionNameDefinition = new ProductionNameDefinition(oneOrMorePartsProductionName),
        groupOfPartsProductionNameDefinition = new ProductionNameDefinition(groupOfPartsProductionName),
        choiceOfPartsProductionNameDefinition = new ProductionNameDefinition(choiceOfPartsProductionName),
        terminalSymbolProductionNameDefinition = new ProductionNameDefinition(terminalSymbolProductionName),
        endOfLineSymbolProductionNameDefinition = new ProductionNameDefinition(endOfLineSymbolProductionName),
        wildcardSymbolProductionNameDefinition = new ProductionNameDefinition(wildcardSymbolProductionName),
        productionNameProductionNameDefinition = new ProductionNameDefinition(productionNameProductionName),
        noWhitespacePartProductionNameDefinition = new ProductionNameDefinition(noWhitespacePartProductionName),
        regularExpressionProductionNameDefinition = new ProductionNameDefinition(regularExpressionProductionName),
        significantTokenTypeProductionNameDefinition = new ProductionNameDefinition(significantTokenTypeProductionName),
        name = 'part',
        definitions = [noWhitespacePartProductionNameDefinition, optionalPartProductionNameDefinition, zeroOrMorePartsProductionNameDefinition, oneOrMorePartsProductionNameDefinition, groupOfPartsProductionNameDefinition, choiceOfPartsProductionNameDefinition, productionNameProductionNameDefinition, regularExpressionProductionNameDefinition, significantTokenTypeProductionNameDefinition, terminalSymbolProductionNameDefinition, endOfLineSymbolProductionNameDefinition, wildcardSymbolProductionNameDefinition],
        Node = PartNode;

    return _possibleConstructorReturn(this, (PartProduction.__proto__ || Object.getPrototypeOf(PartProduction)).call(this, name, definitions, Node));
  }

  return PartProduction;
}(Production);

module.exports = PartProduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcHJvZHVjdGlvbi9wYXJ0LmpzIl0sIm5hbWVzIjpbIlByb2R1Y3Rpb24iLCJyZXF1aXJlIiwiUGFydE5vZGUiLCJQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJQYXJ0UHJvZHVjdGlvbiIsIm9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lIiwiemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUiLCJvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lIiwiZ3JvdXBPZlBhcnRzUHJvZHVjdGlvbk5hbWUiLCJjaG9pY2VPZlBhcnRzUHJvZHVjdGlvbk5hbWUiLCJ0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lIiwiZW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbk5hbWUiLCJ3aWxkY2FyZFN5bWJvbFByb2R1Y3Rpb25OYW1lIiwicHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZSIsIm5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZSIsInJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWUiLCJzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lIiwib3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwiemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwib25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJncm91cE9mUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJjaG9pY2VPZlBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwidGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJ3aWxkY2FyZFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsInByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwibm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsInJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwic2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJuYW1lIiwiZGVmaW5pdGlvbnMiLCJOb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUEsSUFBTUEsYUFBYUMsUUFBUSxlQUFSLENBQW5CO0FBQUEsSUFDTUMsV0FBV0QsUUFBUSxjQUFSLENBRGpCO0FBQUEsSUFFTUUsMkJBQTJCRixRQUFRLDhCQUFSLENBRmpDOztJQUlNRyxjOzs7QUFDSiw0QkFBYztBQUFBOztBQUNaLFFBQU1DLDZCQUE2QixjQUFuQztBQUFBLFFBQ01DLGdDQUFnQyxpQkFEdEM7QUFBQSxRQUVNQywrQkFBK0IsZ0JBRnJDO0FBQUEsUUFHTUMsNkJBQTZCLGNBSG5DO0FBQUEsUUFJTUMsOEJBQThCLGVBSnBDO0FBQUEsUUFLTUMsK0JBQStCLGdCQUxyQztBQUFBLFFBTU1DLGdDQUFnQyxpQkFOdEM7QUFBQSxRQU9NQywrQkFBK0IsZ0JBUHJDO0FBQUEsUUFRTUMsK0JBQStCLGdCQVJyQztBQUFBLFFBU01DLGlDQUFpQyxrQkFUdkM7QUFBQSxRQVVNQyxrQ0FBa0MsbUJBVnhDO0FBQUEsUUFXTUMscUNBQXFDLHNCQVgzQztBQUFBLFFBWU1DLHVDQUF1QyxJQUFJZCx3QkFBSixDQUE2QkUsMEJBQTdCLENBWjdDO0FBQUEsUUFhTWEsMENBQTBDLElBQUlmLHdCQUFKLENBQTZCRyw2QkFBN0IsQ0FiaEQ7QUFBQSxRQWNNYSx5Q0FBeUMsSUFBSWhCLHdCQUFKLENBQTZCSSw0QkFBN0IsQ0FkL0M7QUFBQSxRQWVNYSx1Q0FBdUMsSUFBSWpCLHdCQUFKLENBQTZCSywwQkFBN0IsQ0FmN0M7QUFBQSxRQWdCTWEsd0NBQXdDLElBQUlsQix3QkFBSixDQUE2Qk0sMkJBQTdCLENBaEI5QztBQUFBLFFBaUJNYSx5Q0FBeUMsSUFBSW5CLHdCQUFKLENBQTZCTyw0QkFBN0IsQ0FqQi9DO0FBQUEsUUFrQk1hLDBDQUEwQyxJQUFJcEIsd0JBQUosQ0FBNkJRLDZCQUE3QixDQWxCaEQ7QUFBQSxRQW1CTWEseUNBQXlDLElBQUlyQix3QkFBSixDQUE2QlMsNEJBQTdCLENBbkIvQztBQUFBLFFBb0JNYSx5Q0FBeUMsSUFBSXRCLHdCQUFKLENBQTZCVSw0QkFBN0IsQ0FwQi9DO0FBQUEsUUFxQk1hLDJDQUEyQyxJQUFJdkIsd0JBQUosQ0FBNkJXLDhCQUE3QixDQXJCakQ7QUFBQSxRQXNCTWEsNENBQTRDLElBQUl4Qix3QkFBSixDQUE2QlksK0JBQTdCLENBdEJsRDtBQUFBLFFBdUJNYSwrQ0FBK0MsSUFBSXpCLHdCQUFKLENBQTZCYSxrQ0FBN0IsQ0F2QnJEO0FBQUEsUUF3Qk1hLE9BQU8sTUF4QmI7QUFBQSxRQXlCTUMsY0FBYyxDQUNaSix3Q0FEWSxFQUVaVCxvQ0FGWSxFQUdaQyx1Q0FIWSxFQUlaQyxzQ0FKWSxFQUtaQyxvQ0FMWSxFQU1aQyxxQ0FOWSxFQU9aSSxzQ0FQWSxFQVFaRSx5Q0FSWSxFQVNaQyw0Q0FUWSxFQVVaTixzQ0FWWSxFQVdaQyx1Q0FYWSxFQVlaQyxzQ0FaWSxDQXpCcEI7QUFBQSxRQXVDTU8sT0FBTzdCLFFBdkNiOztBQURZLDJIQTBDTjJCLElBMUNNLEVBMENBQyxXQTFDQSxFQTBDYUMsSUExQ2I7QUEyQ2I7OztFQTVDMEIvQixVOztBQStDN0JnQyxPQUFPQyxPQUFQLEdBQWlCN0IsY0FBakIiLCJmaWxlIjoicGFydC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUHJvZHVjdGlvbiA9IHJlcXVpcmUoJy4uL3Byb2R1Y3Rpb24nKSxcbiAgICAgIFBhcnROb2RlID0gcmVxdWlyZSgnLi4vbm9kZS9wYXJ0JyksXG4gICAgICBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3Byb2R1Y3Rpb25OYW1lJyk7XG5cbmNsYXNzIFBhcnRQcm9kdWN0aW9uIGV4dGVuZHMgUHJvZHVjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lID0gJ29wdGlvbmFsUGFydCcsXG4gICAgICAgICAgemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUgPSAnemVyb09yTW9yZVBhcnRzJyxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lID0gJ29uZU9yTW9yZVBhcnRzJyxcbiAgICAgICAgICBncm91cE9mUGFydHNQcm9kdWN0aW9uTmFtZSA9ICdncm91cE9mUGFydHMnLFxuICAgICAgICAgIGNob2ljZU9mUGFydHNQcm9kdWN0aW9uTmFtZSA9ICdjaG9pY2VPZlBhcnRzJyxcbiAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lID0gJ3Rlcm1pbmFsU3ltYm9sJyxcbiAgICAgICAgICBlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uTmFtZSA9ICdlbmRPZkxpbmVTeW1ib2wnLFxuICAgICAgICAgIHdpbGRjYXJkU3ltYm9sUHJvZHVjdGlvbk5hbWUgPSAnd2lsZGNhcmRTeW1ib2wnLFxuICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWUgPSAncHJvZHVjdGlvbk5hbWUnLFxuICAgICAgICAgIG5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZSA9ICdub1doaXRlc3BhY2VQYXJ0JyxcbiAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lID0gJ3JlZ3VsYXJFeHByZXNzaW9uJyxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lID0gJ3NpZ25pZmljYW50VG9rZW5UeXBlJyxcbiAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24ob25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgZ3JvdXBPZlBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihncm91cE9mUGFydHNQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgY2hvaWNlT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oY2hvaWNlT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24odGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgZW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgd2lsZGNhcmRTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHdpbGRjYXJkU3ltYm9sUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgbmFtZSA9ICdwYXJ0JyxcbiAgICAgICAgICBkZWZpbml0aW9ucyA9IFtcbiAgICAgICAgICAgIG5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGdyb3VwT2ZQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGNob2ljZU9mUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHdpbGRjYXJkU3ltYm9sUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uXG4gICAgICAgICAgXSxcbiAgICAgICAgICBOb2RlID0gUGFydE5vZGU7XG4gICAgXG4gICAgc3VwZXIobmFtZSwgZGVmaW5pdGlvbnMsIE5vZGUpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJ0UHJvZHVjdGlvbjtcbiJdfQ==