'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../production'),
    NonTerminalNode = require('../../common/node/nonTerminal'),
    ProductionNameDefinition = require('../definition/productionName');

var PartProduction = function (_Production) {
  _inherits(PartProduction, _Production);

  function PartProduction() {
    _classCallCheck(this, PartProduction);

    var groupProductionName = 'group',
        endOfLineProductionName = 'endOfLine',
        optionalPartProductionName = 'optionalPart',
        oneOrMorePartsProductionName = 'oneOrMoreParts',
        zeroOrMorePartsProductionName = 'zeroOrMoreParts',
        noWhitespaceProductionName = 'noWhitespace',
        terminalSymbolProductionName = 'terminalSymbol',
        productionNameProductionName = 'productionName',
        regularExpressionProductionName = 'regularExpression',
        significantTokenTypeProductionName = 'significantTokenType',
        groupProductionNameDefinition = new ProductionNameDefinition(groupProductionName),
        endOfLineProductionNameDefinition = new ProductionNameDefinition(endOfLineProductionName),
        optionalPartProductionNameDefinition = new ProductionNameDefinition(optionalPartProductionName),
        oneOrMorePartsProductionNameDefinition = new ProductionNameDefinition(oneOrMorePartsProductionName),
        zeroOrMorePartsProductionNameDefinition = new ProductionNameDefinition(zeroOrMorePartsProductionName),
        noWhitespaceProductionNameDefinition = new ProductionNameDefinition(noWhitespaceProductionName),
        terminalSymbolProductionNameDefinition = new ProductionNameDefinition(terminalSymbolProductionName),
        productionNameProductionNameDefinition = new ProductionNameDefinition(productionNameProductionName),
        regularExpressionProductionNameDefinition = new ProductionNameDefinition(regularExpressionProductionName),
        significantTokenTypeProductionNameDefinition = new ProductionNameDefinition(significantTokenTypeProductionName),
        name = 'part',
        definitions = [optionalPartProductionNameDefinition, oneOrMorePartsProductionNameDefinition, zeroOrMorePartsProductionNameDefinition, groupProductionNameDefinition, productionNameProductionNameDefinition, regularExpressionProductionNameDefinition, significantTokenTypeProductionNameDefinition, terminalSymbolProductionNameDefinition, noWhitespaceProductionNameDefinition, endOfLineProductionNameDefinition],
        Node = NonTerminalNode;

    return _possibleConstructorReturn(this, (PartProduction.__proto__ || Object.getPrototypeOf(PartProduction)).call(this, name, definitions, Node));
  }

  return PartProduction;
}(Production);

module.exports = PartProduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcHJvZHVjdGlvbi9wYXJ0LmpzIl0sIm5hbWVzIjpbIlByb2R1Y3Rpb24iLCJyZXF1aXJlIiwiTm9uVGVybWluYWxOb2RlIiwiUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwiUGFydFByb2R1Y3Rpb24iLCJncm91cFByb2R1Y3Rpb25OYW1lIiwiZW5kT2ZMaW5lUHJvZHVjdGlvbk5hbWUiLCJvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZSIsIm9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUiLCJ6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSIsIm5vV2hpdGVzcGFjZVByb2R1Y3Rpb25OYW1lIiwidGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZSIsInByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWUiLCJyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lIiwic2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZSIsImdyb3VwUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwiZW5kT2ZMaW5lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwib3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwib25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJ6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJub1doaXRlc3BhY2VQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJ0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsInByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwicmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIm5hbWUiLCJkZWZpbml0aW9ucyIsIk5vZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQSxJQUFNQSxhQUFhQyxRQUFRLGVBQVIsQ0FBbkI7QUFBQSxJQUNNQyxrQkFBa0JELFFBQVEsK0JBQVIsQ0FEeEI7QUFBQSxJQUVNRSwyQkFBMkJGLFFBQVEsOEJBQVIsQ0FGakM7O0lBSU1HLGM7OztBQUNKLDRCQUFjO0FBQUE7O0FBQ1osUUFBTUMsc0JBQXNCLE9BQTVCO0FBQUEsUUFDTUMsMEJBQTBCLFdBRGhDO0FBQUEsUUFFTUMsNkJBQTZCLGNBRm5DO0FBQUEsUUFHTUMsK0JBQStCLGdCQUhyQztBQUFBLFFBSU1DLGdDQUFnQyxpQkFKdEM7QUFBQSxRQUtNQyw2QkFBNkIsY0FMbkM7QUFBQSxRQU1NQywrQkFBK0IsZ0JBTnJDO0FBQUEsUUFPTUMsK0JBQStCLGdCQVByQztBQUFBLFFBUU1DLGtDQUFrQyxtQkFSeEM7QUFBQSxRQVNNQyxxQ0FBcUMsc0JBVDNDO0FBQUEsUUFVTUMsZ0NBQWdDLElBQUlaLHdCQUFKLENBQTZCRSxtQkFBN0IsQ0FWdEM7QUFBQSxRQVdNVyxvQ0FBb0MsSUFBSWIsd0JBQUosQ0FBNkJHLHVCQUE3QixDQVgxQztBQUFBLFFBWU1XLHVDQUF1QyxJQUFJZCx3QkFBSixDQUE2QkksMEJBQTdCLENBWjdDO0FBQUEsUUFhTVcseUNBQXlDLElBQUlmLHdCQUFKLENBQTZCSyw0QkFBN0IsQ0FiL0M7QUFBQSxRQWNNVywwQ0FBMEMsSUFBSWhCLHdCQUFKLENBQTZCTSw2QkFBN0IsQ0FkaEQ7QUFBQSxRQWVNVyx1Q0FBdUMsSUFBSWpCLHdCQUFKLENBQTZCTywwQkFBN0IsQ0FmN0M7QUFBQSxRQWdCTVcseUNBQXlDLElBQUlsQix3QkFBSixDQUE2QlEsNEJBQTdCLENBaEIvQztBQUFBLFFBaUJNVyx5Q0FBeUMsSUFBSW5CLHdCQUFKLENBQTZCUyw0QkFBN0IsQ0FqQi9DO0FBQUEsUUFrQk1XLDRDQUE0QyxJQUFJcEIsd0JBQUosQ0FBNkJVLCtCQUE3QixDQWxCbEQ7QUFBQSxRQW1CTVcsK0NBQStDLElBQUlyQix3QkFBSixDQUE2Qlcsa0NBQTdCLENBbkJyRDtBQUFBLFFBb0JNVyxPQUFPLE1BcEJiO0FBQUEsUUFxQk1DLGNBQWMsQ0FDWlQsb0NBRFksRUFFWkMsc0NBRlksRUFHWkMsdUNBSFksRUFJWkosNkJBSlksRUFLWk8sc0NBTFksRUFNWkMseUNBTlksRUFPWkMsNENBUFksRUFRWkgsc0NBUlksRUFTWkQsb0NBVFksRUFVWkosaUNBVlksQ0FyQnBCO0FBQUEsUUFpQ01XLE9BQU96QixlQWpDYjs7QUFEWSwySEFvQ051QixJQXBDTSxFQW9DQUMsV0FwQ0EsRUFvQ2FDLElBcENiO0FBcUNiOzs7RUF0QzBCM0IsVTs7QUF5QzdCNEIsT0FBT0MsT0FBUCxHQUFpQnpCLGNBQWpCIiwiZmlsZSI6InBhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuLi9wcm9kdWN0aW9uJyksXG4gICAgICBOb25UZXJtaW5hbE5vZGUgPSByZXF1aXJlKCcuLi8uLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbCcpLFxuICAgICAgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi9wcm9kdWN0aW9uTmFtZScpO1xuXG5jbGFzcyBQYXJ0UHJvZHVjdGlvbiBleHRlbmRzIFByb2R1Y3Rpb24ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBncm91cFByb2R1Y3Rpb25OYW1lID0gJ2dyb3VwJyxcbiAgICAgICAgICBlbmRPZkxpbmVQcm9kdWN0aW9uTmFtZSA9ICdlbmRPZkxpbmUnLFxuICAgICAgICAgIG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lID0gJ29wdGlvbmFsUGFydCcsXG4gICAgICAgICAgb25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSA9ICdvbmVPck1vcmVQYXJ0cycsXG4gICAgICAgICAgemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUgPSAnemVyb09yTW9yZVBhcnRzJyxcbiAgICAgICAgICBub1doaXRlc3BhY2VQcm9kdWN0aW9uTmFtZSA9ICdub1doaXRlc3BhY2UnLFxuICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWUgPSAndGVybWluYWxTeW1ib2wnLFxuICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWUgPSAncHJvZHVjdGlvbk5hbWUnLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWUgPSAncmVndWxhckV4cHJlc3Npb24nLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWUgPSAnc2lnbmlmaWNhbnRUb2tlblR5cGUnLFxuICAgICAgICAgIGdyb3VwUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihncm91cFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBlbmRPZkxpbmVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKGVuZE9mTGluZVByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24ob25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbih6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgbm9XaGl0ZXNwYWNlUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihub1doaXRlc3BhY2VQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24ocmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIG5hbWUgPSAncGFydCcsXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSBbXG4gICAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGdyb3VwUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgcHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgdGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBub1doaXRlc3BhY2VQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBlbmRPZkxpbmVQcm9kdWN0aW9uTmFtZURlZmluaXRpb25cbiAgICAgICAgICBdLFxuICAgICAgICAgIE5vZGUgPSBOb25UZXJtaW5hbE5vZGU7XG4gICAgXG4gICAgc3VwZXIobmFtZSwgZGVmaW5pdGlvbnMsIE5vZGUpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJ0UHJvZHVjdGlvbjtcbiJdfQ==