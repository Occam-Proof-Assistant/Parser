'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../production'),
    WildcardPartRule = require('../rule/part/wildcard'),
    EndOfLinePartRule = require('../rule/part/endOfLine'),
    OptionalPartPartRule = require('../rule/part/optionalPart'),
    TerminalSymbolPartRule = require('../rule/part/terminalSymbol'),
    OneOrMorePartsPartRule = require('../rule/part/oneOrMoreParts'),
    ZeroOrMorePartsPartRule = require('../rule/part/zeroOrMoreParts'),
    RegularExpressionPartRule = require('../rule/part/regularExpression'),
    SignificantTokenTypePartRule = require('../rule/part/significantTokenType'),
    ProductionNamePartRule = require('../rule/part/productionName'),
    NonTerminalNode = require('../../common/node/nonTerminal');

var PartProduction = function (_Production) {
  _inherits(PartProduction, _Production);

  function PartProduction() {
    _classCallCheck(this, PartProduction);

    var wildcardPartRule = new WildcardPartRule(),
        endOfLinePartRule = new EndOfLinePartRule(),
        optionalPartPartRule = new OptionalPartPartRule(),
        terminalSymbolPartRule = new TerminalSymbolPartRule(),
        oneOrMorePartsPartRule = new OneOrMorePartsPartRule(),
        zeroOrMorePartsPartRule = new ZeroOrMorePartsPartRule(),
        regularExpressionPartRule = new RegularExpressionPartRule(),
        significantTokenTypePartRule = new SignificantTokenTypePartRule(),
        productionNamePartRule = new ProductionNamePartRule(),
        name = 'part',
        rules = [regularExpressionPartRule, wildcardPartRule, endOfLinePartRule, optionalPartPartRule, terminalSymbolPartRule, oneOrMorePartsPartRule, zeroOrMorePartsPartRule, significantTokenTypePartRule, productionNamePartRule],
        Node = NonTerminalNode;

    return _possibleConstructorReturn(this, (PartProduction.__proto__ || Object.getPrototypeOf(PartProduction)).call(this, name, rules, Node));
  }

  return PartProduction;
}(Production);

module.exports = PartProduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcHJvZHVjdGlvbi9wYXJ0LmpzIl0sIm5hbWVzIjpbIlByb2R1Y3Rpb24iLCJyZXF1aXJlIiwiV2lsZGNhcmRQYXJ0UnVsZSIsIkVuZE9mTGluZVBhcnRSdWxlIiwiT3B0aW9uYWxQYXJ0UGFydFJ1bGUiLCJUZXJtaW5hbFN5bWJvbFBhcnRSdWxlIiwiT25lT3JNb3JlUGFydHNQYXJ0UnVsZSIsIlplcm9Pck1vcmVQYXJ0c1BhcnRSdWxlIiwiUmVndWxhckV4cHJlc3Npb25QYXJ0UnVsZSIsIlNpZ25pZmljYW50VG9rZW5UeXBlUGFydFJ1bGUiLCJQcm9kdWN0aW9uTmFtZVBhcnRSdWxlIiwiTm9uVGVybWluYWxOb2RlIiwiUGFydFByb2R1Y3Rpb24iLCJ3aWxkY2FyZFBhcnRSdWxlIiwiZW5kT2ZMaW5lUGFydFJ1bGUiLCJvcHRpb25hbFBhcnRQYXJ0UnVsZSIsInRlcm1pbmFsU3ltYm9sUGFydFJ1bGUiLCJvbmVPck1vcmVQYXJ0c1BhcnRSdWxlIiwiemVyb09yTW9yZVBhcnRzUGFydFJ1bGUiLCJyZWd1bGFyRXhwcmVzc2lvblBhcnRSdWxlIiwic2lnbmlmaWNhbnRUb2tlblR5cGVQYXJ0UnVsZSIsInByb2R1Y3Rpb25OYW1lUGFydFJ1bGUiLCJuYW1lIiwicnVsZXMiLCJOb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUEsSUFBTUEsYUFBYUMsUUFBUSxlQUFSLENBQW5CO0FBQUEsSUFDTUMsbUJBQW1CRCxRQUFRLHVCQUFSLENBRHpCO0FBQUEsSUFFTUUsb0JBQW9CRixRQUFRLHdCQUFSLENBRjFCO0FBQUEsSUFHTUcsdUJBQXVCSCxRQUFRLDJCQUFSLENBSDdCO0FBQUEsSUFJTUkseUJBQXlCSixRQUFRLDZCQUFSLENBSi9CO0FBQUEsSUFLTUsseUJBQXlCTCxRQUFRLDZCQUFSLENBTC9CO0FBQUEsSUFNTU0sMEJBQTBCTixRQUFRLDhCQUFSLENBTmhDO0FBQUEsSUFPTU8sNEJBQTRCUCxRQUFRLGdDQUFSLENBUGxDO0FBQUEsSUFRTVEsK0JBQStCUixRQUFRLG1DQUFSLENBUnJDO0FBQUEsSUFTTVMseUJBQXlCVCxRQUFRLDZCQUFSLENBVC9CO0FBQUEsSUFVTVUsa0JBQWtCVixRQUFRLCtCQUFSLENBVnhCOztJQVlNVyxjOzs7QUFDSiw0QkFBYztBQUFBOztBQUNaLFFBQU1DLG1CQUFtQixJQUFJWCxnQkFBSixFQUF6QjtBQUFBLFFBQ01ZLG9CQUFvQixJQUFJWCxpQkFBSixFQUQxQjtBQUFBLFFBRU1ZLHVCQUF1QixJQUFJWCxvQkFBSixFQUY3QjtBQUFBLFFBR01ZLHlCQUF5QixJQUFJWCxzQkFBSixFQUgvQjtBQUFBLFFBSU1ZLHlCQUF5QixJQUFJWCxzQkFBSixFQUovQjtBQUFBLFFBS01ZLDBCQUEwQixJQUFJWCx1QkFBSixFQUxoQztBQUFBLFFBTU1ZLDRCQUE0QixJQUFJWCx5QkFBSixFQU5sQztBQUFBLFFBT01ZLCtCQUErQixJQUFJWCw0QkFBSixFQVByQztBQUFBLFFBUU1ZLHlCQUF5QixJQUFJWCxzQkFBSixFQVIvQjtBQUFBLFFBU01ZLE9BQU8sTUFUYjtBQUFBLFFBVU1DLFFBQVEsQ0FDTkoseUJBRE0sRUFFTk4sZ0JBRk0sRUFHTkMsaUJBSE0sRUFJTkMsb0JBSk0sRUFLTkMsc0JBTE0sRUFNTkMsc0JBTk0sRUFPTkMsdUJBUE0sRUFRTkUsNEJBUk0sRUFTTkMsc0JBVE0sQ0FWZDtBQUFBLFFBcUJNRyxPQUFPYixlQXJCYjs7QUFEWSwySEF3Qk5XLElBeEJNLEVBd0JBQyxLQXhCQSxFQXdCT0MsSUF4QlA7QUF5QmI7OztFQTFCMEJ4QixVOztBQTZCN0J5QixPQUFPQyxPQUFQLEdBQWlCZCxjQUFqQiIsImZpbGUiOiJwYXJ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi4vcHJvZHVjdGlvbicpLFxuICAgICAgV2lsZGNhcmRQYXJ0UnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcGFydC93aWxkY2FyZCcpLFxuICAgICAgRW5kT2ZMaW5lUGFydFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3BhcnQvZW5kT2ZMaW5lJyksXG4gICAgICBPcHRpb25hbFBhcnRQYXJ0UnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcGFydC9vcHRpb25hbFBhcnQnKSxcbiAgICAgIFRlcm1pbmFsU3ltYm9sUGFydFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3BhcnQvdGVybWluYWxTeW1ib2wnKSxcbiAgICAgIE9uZU9yTW9yZVBhcnRzUGFydFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3BhcnQvb25lT3JNb3JlUGFydHMnKSxcbiAgICAgIFplcm9Pck1vcmVQYXJ0c1BhcnRSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9wYXJ0L3plcm9Pck1vcmVQYXJ0cycpLFxuICAgICAgUmVndWxhckV4cHJlc3Npb25QYXJ0UnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcGFydC9yZWd1bGFyRXhwcmVzc2lvbicpLFxuICAgICAgU2lnbmlmaWNhbnRUb2tlblR5cGVQYXJ0UnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcGFydC9zaWduaWZpY2FudFRva2VuVHlwZScpLFxuICAgICAgUHJvZHVjdGlvbk5hbWVQYXJ0UnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcGFydC9wcm9kdWN0aW9uTmFtZScpLFxuICAgICAgTm9uVGVybWluYWxOb2RlID0gcmVxdWlyZSgnLi4vLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwnKTtcblxuY2xhc3MgUGFydFByb2R1Y3Rpb24gZXh0ZW5kcyBQcm9kdWN0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3Qgd2lsZGNhcmRQYXJ0UnVsZSA9IG5ldyBXaWxkY2FyZFBhcnRSdWxlKCksXG4gICAgICAgICAgZW5kT2ZMaW5lUGFydFJ1bGUgPSBuZXcgRW5kT2ZMaW5lUGFydFJ1bGUoKSxcbiAgICAgICAgICBvcHRpb25hbFBhcnRQYXJ0UnVsZSA9IG5ldyBPcHRpb25hbFBhcnRQYXJ0UnVsZSgpLFxuICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUGFydFJ1bGUgPSBuZXcgVGVybWluYWxTeW1ib2xQYXJ0UnVsZSgpLFxuICAgICAgICAgIG9uZU9yTW9yZVBhcnRzUGFydFJ1bGUgPSBuZXcgT25lT3JNb3JlUGFydHNQYXJ0UnVsZSgpLFxuICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1BhcnRSdWxlID0gbmV3IFplcm9Pck1vcmVQYXJ0c1BhcnRSdWxlKCksXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25QYXJ0UnVsZSA9IG5ldyBSZWd1bGFyRXhwcmVzc2lvblBhcnRSdWxlKCksXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQYXJ0UnVsZSA9IG5ldyBTaWduaWZpY2FudFRva2VuVHlwZVBhcnRSdWxlKCksXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWVQYXJ0UnVsZSA9IG5ldyBQcm9kdWN0aW9uTmFtZVBhcnRSdWxlKCksICAgIFxuICAgICAgICAgIG5hbWUgPSAncGFydCcsXG4gICAgICAgICAgcnVsZXMgPSBbXG4gICAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblBhcnRSdWxlLFxuICAgICAgICAgICAgd2lsZGNhcmRQYXJ0UnVsZSxcbiAgICAgICAgICAgIGVuZE9mTGluZVBhcnRSdWxlLFxuICAgICAgICAgICAgb3B0aW9uYWxQYXJ0UGFydFJ1bGUsXG4gICAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFBhcnRSdWxlLFxuICAgICAgICAgICAgb25lT3JNb3JlUGFydHNQYXJ0UnVsZSxcbiAgICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1BhcnRSdWxlLFxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVQYXJ0UnVsZSxcbiAgICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUGFydFJ1bGVcbiAgICAgICAgICBdLFxuICAgICAgICAgIE5vZGUgPSBOb25UZXJtaW5hbE5vZGU7XG4gICAgXG4gICAgc3VwZXIobmFtZSwgcnVsZXMsIE5vZGUpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJ0UHJvZHVjdGlvbjtcbiJdfQ==