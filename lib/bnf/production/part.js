'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../production'),
    WildcardPartRule = require('../rule/part/wildcard'),
    EndOfLinePartRule = require('../rule/part/endOfLine'),
    OptionalPartPartRule = require('../rule/part/optionalPart'),
    TerminalSymbolPartRule = require('../rule/part/terminalSymbol'),
    OneOrMorePartsPartRule = require('../rule/part/oneOrMoreParts'),
    ZeroOrMorePartsPartRule = require('../rule/part/zeroOrMoreParts'),
    RegularExpressionPartRule = require('../rule/part/regularExpression'),
    SignificantTokenTypePartRule = require('../rule/part/significantTokenType'),
    ProductionNamePartRule = require('../rule/part/productionName');

var PartProduction = function (_Production) {
  _inherits(PartProduction, _Production);

  function PartProduction() {
    _classCallCheck(this, PartProduction);

    var wildcardPartRule = new WildcardPartRule(),
        endOfLinePartRule = new EndOfLinePartRule(),
        optionalPartPartRule = new OptionalPartPartRule(),
        terminalSymbolPartRule = new TerminalSymbolPartRule(),
        oneOrMorePartsPartRule = new OneOrMorePartsPartRule(),
        zeroOrMorePartsPartRule = new ZeroOrMorePartsPartRule(),
        regularExpressionPartRule = new RegularExpressionPartRule(),
        significantTokenTypePartRule = new SignificantTokenTypePartRule(),
        productionNamePartRule = new ProductionNamePartRule(),
        name = 'part',
        rules = [wildcardPartRule, endOfLinePartRule, optionalPartPartRule, terminalSymbolPartRule, oneOrMorePartsPartRule, zeroOrMorePartsPartRule, regularExpressionPartRule, significantTokenTypePartRule, productionNamePartRule],
        Node = null;

    return _possibleConstructorReturn(this, (PartProduction.__proto__ || Object.getPrototypeOf(PartProduction)).call(this, name, rules, Node));
  }

  return PartProduction;
}(Production);

module.exports = PartProduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcHJvZHVjdGlvbi9wYXJ0LmpzIl0sIm5hbWVzIjpbIlByb2R1Y3Rpb24iLCJyZXF1aXJlIiwiV2lsZGNhcmRQYXJ0UnVsZSIsIkVuZE9mTGluZVBhcnRSdWxlIiwiT3B0aW9uYWxQYXJ0UGFydFJ1bGUiLCJUZXJtaW5hbFN5bWJvbFBhcnRSdWxlIiwiT25lT3JNb3JlUGFydHNQYXJ0UnVsZSIsIlplcm9Pck1vcmVQYXJ0c1BhcnRSdWxlIiwiUmVndWxhckV4cHJlc3Npb25QYXJ0UnVsZSIsIlNpZ25pZmljYW50VG9rZW5UeXBlUGFydFJ1bGUiLCJQcm9kdWN0aW9uTmFtZVBhcnRSdWxlIiwiUGFydFByb2R1Y3Rpb24iLCJ3aWxkY2FyZFBhcnRSdWxlIiwiZW5kT2ZMaW5lUGFydFJ1bGUiLCJvcHRpb25hbFBhcnRQYXJ0UnVsZSIsInRlcm1pbmFsU3ltYm9sUGFydFJ1bGUiLCJvbmVPck1vcmVQYXJ0c1BhcnRSdWxlIiwiemVyb09yTW9yZVBhcnRzUGFydFJ1bGUiLCJyZWd1bGFyRXhwcmVzc2lvblBhcnRSdWxlIiwic2lnbmlmaWNhbnRUb2tlblR5cGVQYXJ0UnVsZSIsInByb2R1Y3Rpb25OYW1lUGFydFJ1bGUiLCJuYW1lIiwicnVsZXMiLCJOb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUEsSUFBTUEsYUFBYUMsUUFBUSxlQUFSLENBQW5CO0FBQUEsSUFDTUMsbUJBQW1CRCxRQUFRLHVCQUFSLENBRHpCO0FBQUEsSUFFTUUsb0JBQW9CRixRQUFRLHdCQUFSLENBRjFCO0FBQUEsSUFHTUcsdUJBQXVCSCxRQUFRLDJCQUFSLENBSDdCO0FBQUEsSUFJTUkseUJBQXlCSixRQUFRLDZCQUFSLENBSi9CO0FBQUEsSUFLTUsseUJBQXlCTCxRQUFRLDZCQUFSLENBTC9CO0FBQUEsSUFNTU0sMEJBQTBCTixRQUFRLDhCQUFSLENBTmhDO0FBQUEsSUFPTU8sNEJBQTRCUCxRQUFRLGdDQUFSLENBUGxDO0FBQUEsSUFRTVEsK0JBQStCUixRQUFRLG1DQUFSLENBUnJDO0FBQUEsSUFTTVMseUJBQXlCVCxRQUFRLDZCQUFSLENBVC9COztJQVdNVSxjOzs7QUFDSiw0QkFBYztBQUFBOztBQUNaLFFBQU1DLG1CQUFtQixJQUFJVixnQkFBSixFQUF6QjtBQUFBLFFBQ01XLG9CQUFvQixJQUFJVixpQkFBSixFQUQxQjtBQUFBLFFBRU1XLHVCQUF1QixJQUFJVixvQkFBSixFQUY3QjtBQUFBLFFBR01XLHlCQUF5QixJQUFJVixzQkFBSixFQUgvQjtBQUFBLFFBSU1XLHlCQUF5QixJQUFJVixzQkFBSixFQUovQjtBQUFBLFFBS01XLDBCQUEwQixJQUFJVix1QkFBSixFQUxoQztBQUFBLFFBTU1XLDRCQUE0QixJQUFJVix5QkFBSixFQU5sQztBQUFBLFFBT01XLCtCQUErQixJQUFJViw0QkFBSixFQVByQztBQUFBLFFBUU1XLHlCQUF5QixJQUFJVixzQkFBSixFQVIvQjtBQUFBLFFBU01XLE9BQU8sTUFUYjtBQUFBLFFBVU1DLFFBQVEsQ0FDTlYsZ0JBRE0sRUFFTkMsaUJBRk0sRUFHTkMsb0JBSE0sRUFJTkMsc0JBSk0sRUFLTkMsc0JBTE0sRUFNTkMsdUJBTk0sRUFPTkMseUJBUE0sRUFRTkMsNEJBUk0sRUFTTkMsc0JBVE0sQ0FWZDtBQUFBLFFBcUJNRyxPQUFPLElBckJiOztBQURZLDJIQXdCTkYsSUF4Qk0sRUF3QkFDLEtBeEJBLEVBd0JPQyxJQXhCUDtBQXlCYjs7O0VBMUIwQnZCLFU7O0FBNkI3QndCLE9BQU9DLE9BQVAsR0FBaUJkLGNBQWpCIiwiZmlsZSI6InBhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFByb2R1Y3Rpb24gPSByZXF1aXJlKCcuLi9wcm9kdWN0aW9uJyksXG4gICAgICBXaWxkY2FyZFBhcnRSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9wYXJ0L3dpbGRjYXJkJyksXG4gICAgICBFbmRPZkxpbmVQYXJ0UnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcGFydC9lbmRPZkxpbmUnKSxcbiAgICAgIE9wdGlvbmFsUGFydFBhcnRSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9wYXJ0L29wdGlvbmFsUGFydCcpLFxuICAgICAgVGVybWluYWxTeW1ib2xQYXJ0UnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcGFydC90ZXJtaW5hbFN5bWJvbCcpLFxuICAgICAgT25lT3JNb3JlUGFydHNQYXJ0UnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUvcGFydC9vbmVPck1vcmVQYXJ0cycpLFxuICAgICAgWmVyb09yTW9yZVBhcnRzUGFydFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlL3BhcnQvemVyb09yTW9yZVBhcnRzJyksXG4gICAgICBSZWd1bGFyRXhwcmVzc2lvblBhcnRSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9wYXJ0L3JlZ3VsYXJFeHByZXNzaW9uJyksXG4gICAgICBTaWduaWZpY2FudFRva2VuVHlwZVBhcnRSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9wYXJ0L3NpZ25pZmljYW50VG9rZW5UeXBlJyksXG4gICAgICBQcm9kdWN0aW9uTmFtZVBhcnRSdWxlID0gcmVxdWlyZSgnLi4vcnVsZS9wYXJ0L3Byb2R1Y3Rpb25OYW1lJyk7XG5cbmNsYXNzIFBhcnRQcm9kdWN0aW9uIGV4dGVuZHMgUHJvZHVjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHdpbGRjYXJkUGFydFJ1bGUgPSBuZXcgV2lsZGNhcmRQYXJ0UnVsZSgpLFxuICAgICAgICAgIGVuZE9mTGluZVBhcnRSdWxlID0gbmV3IEVuZE9mTGluZVBhcnRSdWxlKCksXG4gICAgICAgICAgb3B0aW9uYWxQYXJ0UGFydFJ1bGUgPSBuZXcgT3B0aW9uYWxQYXJ0UGFydFJ1bGUoKSxcbiAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFBhcnRSdWxlID0gbmV3IFRlcm1pbmFsU3ltYm9sUGFydFJ1bGUoKSxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1BhcnRSdWxlID0gbmV3IE9uZU9yTW9yZVBhcnRzUGFydFJ1bGUoKSxcbiAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQYXJ0UnVsZSA9IG5ldyBaZXJvT3JNb3JlUGFydHNQYXJ0UnVsZSgpLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUGFydFJ1bGUgPSBuZXcgUmVndWxhckV4cHJlc3Npb25QYXJ0UnVsZSgpLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUGFydFJ1bGUgPSBuZXcgU2lnbmlmaWNhbnRUb2tlblR5cGVQYXJ0UnVsZSgpLFxuICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUGFydFJ1bGUgPSBuZXcgUHJvZHVjdGlvbk5hbWVQYXJ0UnVsZSgpLCAgICBcbiAgICAgICAgICBuYW1lID0gJ3BhcnQnLFxuICAgICAgICAgIHJ1bGVzID0gW1xuICAgICAgICAgICAgd2lsZGNhcmRQYXJ0UnVsZSxcbiAgICAgICAgICAgIGVuZE9mTGluZVBhcnRSdWxlLFxuICAgICAgICAgICAgb3B0aW9uYWxQYXJ0UGFydFJ1bGUsXG4gICAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFBhcnRSdWxlLFxuICAgICAgICAgICAgb25lT3JNb3JlUGFydHNQYXJ0UnVsZSxcbiAgICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1BhcnRSdWxlLFxuICAgICAgICAgICAgcmVndWxhckV4cHJlc3Npb25QYXJ0UnVsZSxcbiAgICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUGFydFJ1bGUsXG4gICAgICAgICAgICBwcm9kdWN0aW9uTmFtZVBhcnRSdWxlXG4gICAgICAgICAgXSxcbiAgICAgICAgICBOb2RlID0gbnVsbDtcbiAgICBcbiAgICBzdXBlcihuYW1lLCBydWxlcywgTm9kZSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRQcm9kdWN0aW9uO1xuIl19