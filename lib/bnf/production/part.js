'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Production = require('../production'),
    NonTerminalNode = require('../../common/node/nonTerminal'),
    ProductionNameDefinition = require('../definition/productionName');

var PartProduction = function (_Production) {
  _inherits(PartProduction, _Production);

  function PartProduction() {
    _classCallCheck(this, PartProduction);

    var groupProductionName = 'group',
        optionalPartProductionName = 'optionalPart',
        oneOrMorePartsProductionName = 'oneOrMoreParts',
        zeroOrMorePartsProductionName = 'zeroOrMoreParts',
        terminalSymbolProductionName = 'terminalSymbol',
        endOfLineSymbolProductionName = 'endOfLineSymbol',
        productionNameProductionName = 'productionName',
        noWhitespacePartProductionName = 'noWhitespacePart',
        regularExpressionProductionName = 'regularExpression',
        significantTokenTypeProductionName = 'significantTokenType',
        groupProductionNameDefinition = new ProductionNameDefinition(groupProductionName),
        optionalPartProductionNameDefinition = new ProductionNameDefinition(optionalPartProductionName),
        oneOrMorePartsProductionNameDefinition = new ProductionNameDefinition(oneOrMorePartsProductionName),
        zeroOrMorePartsProductionNameDefinition = new ProductionNameDefinition(zeroOrMorePartsProductionName),
        terminalSymbolProductionNameDefinition = new ProductionNameDefinition(terminalSymbolProductionName),
        endOfLineSymbolProductionNameDefinition = new ProductionNameDefinition(endOfLineSymbolProductionName),
        productionNameProductionNameDefinition = new ProductionNameDefinition(productionNameProductionName),
        noWhitespacePartProductionNameDefinition = new ProductionNameDefinition(noWhitespacePartProductionName),
        regularExpressionProductionNameDefinition = new ProductionNameDefinition(regularExpressionProductionName),
        significantTokenTypeProductionNameDefinition = new ProductionNameDefinition(significantTokenTypeProductionName),
        name = 'part',
        definitions = [noWhitespacePartProductionNameDefinition, optionalPartProductionNameDefinition, oneOrMorePartsProductionNameDefinition, zeroOrMorePartsProductionNameDefinition, groupProductionNameDefinition, productionNameProductionNameDefinition, regularExpressionProductionNameDefinition, significantTokenTypeProductionNameDefinition, terminalSymbolProductionNameDefinition, endOfLineSymbolProductionNameDefinition],
        Node = NonTerminalNode;

    return _possibleConstructorReturn(this, (PartProduction.__proto__ || Object.getPrototypeOf(PartProduction)).call(this, name, definitions, Node));
  }

  return PartProduction;
}(Production);

module.exports = PartProduction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcHJvZHVjdGlvbi9wYXJ0LmpzIl0sIm5hbWVzIjpbIlByb2R1Y3Rpb24iLCJyZXF1aXJlIiwiTm9uVGVybWluYWxOb2RlIiwiUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwiUGFydFByb2R1Y3Rpb24iLCJncm91cFByb2R1Y3Rpb25OYW1lIiwib3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWUiLCJvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lIiwiemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWUiLCJ0ZXJtaW5hbFN5bWJvbFByb2R1Y3Rpb25OYW1lIiwiZW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbk5hbWUiLCJwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lIiwibm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb25OYW1lIiwicmVndWxhckV4cHJlc3Npb25Qcm9kdWN0aW9uTmFtZSIsInNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWUiLCJncm91cFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIm9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIm9uZU9yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwiemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwidGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsIm5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24iLCJyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiIsInNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uIiwibmFtZSIsImRlZmluaXRpb25zIiwiTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBLElBQU1BLGFBQWFDLFFBQVEsZUFBUixDQUFuQjtBQUFBLElBQ01DLGtCQUFrQkQsUUFBUSwrQkFBUixDQUR4QjtBQUFBLElBRU1FLDJCQUEyQkYsUUFBUSw4QkFBUixDQUZqQzs7SUFJTUcsYzs7O0FBQ0osNEJBQWM7QUFBQTs7QUFDWixRQUFNQyxzQkFBc0IsT0FBNUI7QUFBQSxRQUNNQyw2QkFBNkIsY0FEbkM7QUFBQSxRQUVNQywrQkFBK0IsZ0JBRnJDO0FBQUEsUUFHTUMsZ0NBQWdDLGlCQUh0QztBQUFBLFFBSU1DLCtCQUErQixnQkFKckM7QUFBQSxRQUtNQyxnQ0FBZ0MsaUJBTHRDO0FBQUEsUUFNTUMsK0JBQStCLGdCQU5yQztBQUFBLFFBT01DLGlDQUFpQyxrQkFQdkM7QUFBQSxRQVFNQyxrQ0FBa0MsbUJBUnhDO0FBQUEsUUFTTUMscUNBQXFDLHNCQVQzQztBQUFBLFFBVU1DLGdDQUFnQyxJQUFJWix3QkFBSixDQUE2QkUsbUJBQTdCLENBVnRDO0FBQUEsUUFXTVcsdUNBQXVDLElBQUliLHdCQUFKLENBQTZCRywwQkFBN0IsQ0FYN0M7QUFBQSxRQVlNVyx5Q0FBeUMsSUFBSWQsd0JBQUosQ0FBNkJJLDRCQUE3QixDQVovQztBQUFBLFFBYU1XLDBDQUEwQyxJQUFJZix3QkFBSixDQUE2QkssNkJBQTdCLENBYmhEO0FBQUEsUUFjTVcseUNBQXlDLElBQUloQix3QkFBSixDQUE2Qk0sNEJBQTdCLENBZC9DO0FBQUEsUUFlTVcsMENBQTBDLElBQUlqQix3QkFBSixDQUE2Qk8sNkJBQTdCLENBZmhEO0FBQUEsUUFnQk1XLHlDQUF5QyxJQUFJbEIsd0JBQUosQ0FBNkJRLDRCQUE3QixDQWhCL0M7QUFBQSxRQWlCTVcsMkNBQTJDLElBQUluQix3QkFBSixDQUE2QlMsOEJBQTdCLENBakJqRDtBQUFBLFFBa0JNVyw0Q0FBNEMsSUFBSXBCLHdCQUFKLENBQTZCVSwrQkFBN0IsQ0FsQmxEO0FBQUEsUUFtQk1XLCtDQUErQyxJQUFJckIsd0JBQUosQ0FBNkJXLGtDQUE3QixDQW5CckQ7QUFBQSxRQW9CTVcsT0FBTyxNQXBCYjtBQUFBLFFBcUJNQyxjQUFjLENBQ1pKLHdDQURZLEVBRVpOLG9DQUZZLEVBR1pDLHNDQUhZLEVBSVpDLHVDQUpZLEVBS1pILDZCQUxZLEVBTVpNLHNDQU5ZLEVBT1pFLHlDQVBZLEVBUVpDLDRDQVJZLEVBU1pMLHNDQVRZLEVBVVpDLHVDQVZZLENBckJwQjtBQUFBLFFBaUNNTyxPQUFPekIsZUFqQ2I7O0FBRFksMkhBb0NOdUIsSUFwQ00sRUFvQ0FDLFdBcENBLEVBb0NhQyxJQXBDYjtBQXFDYjs7O0VBdEMwQjNCLFU7O0FBeUM3QjRCLE9BQU9DLE9BQVAsR0FBaUJ6QixjQUFqQiIsImZpbGUiOiJwYXJ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi4vcHJvZHVjdGlvbicpLFxuICAgICAgTm9uVGVybWluYWxOb2RlID0gcmVxdWlyZSgnLi4vLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwnKSxcbiAgICAgIFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uL2RlZmluaXRpb24vcHJvZHVjdGlvbk5hbWUnKTtcblxuY2xhc3MgUGFydFByb2R1Y3Rpb24gZXh0ZW5kcyBQcm9kdWN0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgZ3JvdXBQcm9kdWN0aW9uTmFtZSA9ICdncm91cCcsXG4gICAgICAgICAgb3B0aW9uYWxQYXJ0UHJvZHVjdGlvbk5hbWUgPSAnb3B0aW9uYWxQYXJ0JyxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lID0gJ29uZU9yTW9yZVBhcnRzJyxcbiAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSA9ICd6ZXJvT3JNb3JlUGFydHMnLFxuICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWUgPSAndGVybWluYWxTeW1ib2wnLFxuICAgICAgICAgIGVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lID0gJ2VuZE9mTGluZVN5bWJvbCcsXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZSA9ICdwcm9kdWN0aW9uTmFtZScsXG4gICAgICAgICAgbm9XaGl0ZXNwYWNlUGFydFByb2R1Y3Rpb25OYW1lID0gJ25vV2hpdGVzcGFjZVBhcnQnLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWUgPSAncmVndWxhckV4cHJlc3Npb24nLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWUgPSAnc2lnbmlmaWNhbnRUb2tlblR5cGUnLFxuICAgICAgICAgIGdyb3VwUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihncm91cFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKG9wdGlvbmFsUGFydFByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24ob25lT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgemVyb09yTW9yZVBhcnRzUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbih6ZXJvT3JNb3JlUGFydHNQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24gPSBuZXcgUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uKHRlcm1pbmFsU3ltYm9sUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIGVuZE9mTGluZVN5bWJvbFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oZW5kT2ZMaW5lU3ltYm9sUHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHByb2R1Y3Rpb25OYW1lUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihwcm9kdWN0aW9uTmFtZVByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihub1doaXRlc3BhY2VQYXJ0UHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uID0gbmV3IFByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbihyZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lKSxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbiA9IG5ldyBQcm9kdWN0aW9uTmFtZURlZmluaXRpb24oc2lnbmlmaWNhbnRUb2tlblR5cGVQcm9kdWN0aW9uTmFtZSksXG4gICAgICAgICAgbmFtZSA9ICdwYXJ0JyxcbiAgICAgICAgICBkZWZpbml0aW9ucyA9IFtcbiAgICAgICAgICAgIG5vV2hpdGVzcGFjZVBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvcHRpb25hbFBhcnRQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBvbmVPck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1Byb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGdyb3VwUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgcHJvZHVjdGlvbk5hbWVQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblByb2R1Y3Rpb25OYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUHJvZHVjdGlvbk5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgdGVybWluYWxTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBlbmRPZkxpbmVTeW1ib2xQcm9kdWN0aW9uTmFtZURlZmluaXRpb25cbiAgICAgICAgICBdLFxuICAgICAgICAgIE5vZGUgPSBOb25UZXJtaW5hbE5vZGU7XG4gICAgXG4gICAgc3VwZXIobmFtZSwgZGVmaW5pdGlvbnMsIE5vZGUpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJ0UHJvZHVjdGlvbjtcbiJdfQ==