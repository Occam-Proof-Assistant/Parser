'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rule = require('../rule'),
    ruleNames = require('../ruleNames'),
    TerminalPartNode = require('../node/part/terminal'),
    RuleNameDefinition = require('../definition/ruleName');

var TerminalPartRuleName = ruleNames.TerminalPartRuleName,
    RegularExpressionRuleName = ruleNames.RegularExpressionRuleName,
    SignificantTokenTypeRuleName = ruleNames.SignificantTokenTypeRuleName,
    TerminalSymbolRuleName = ruleNames.TerminalSymbolRuleName,
    EndOfLineRuleName = ruleNames.EndOfLineRuleName,
    EpsilonRuleName = ruleNames.EpsilonRuleName,
    WildcardRuleName = ruleNames.WildcardRuleName;

var TerminalPartRule = function (_Rule) {
  _inherits(TerminalPartRule, _Rule);

  function TerminalPartRule() {
    _classCallCheck(this, TerminalPartRule);

    var name = TerminalPartRuleName,
        epsilonRuleName = EpsilonRuleName,
        wildcardRuleName = WildcardRuleName,
        endOfLineRuleName = EndOfLineRuleName,
        terminalSymbolRuleName = TerminalSymbolRuleName,
        regularExpressionRuleName = RegularExpressionRuleName,
        significantTokenTypeRuleName = SignificantTokenTypeRuleName,
        epsilonRuleNameDefinition = new RuleNameDefinition(epsilonRuleName),
        wildcardRuleNameDefinition = new RuleNameDefinition(wildcardRuleName),
        endOfLineRuleNameDefinition = new RuleNameDefinition(endOfLineRuleName),
        terminalSymbolRuleNameDefinition = new RuleNameDefinition(terminalSymbolRuleName),
        regularExpressionRuleNameDefinition = new RuleNameDefinition(regularExpressionRuleName),
        significantTokenTypeRuleNameDefinition = new RuleNameDefinition(significantTokenTypeRuleName),
        definitions = [significantTokenTypeRuleNameDefinition, regularExpressionRuleNameDefinition, terminalSymbolRuleNameDefinition, endOfLineRuleNameDefinition, epsilonRuleNameDefinition, wildcardRuleNameDefinition],
        Node = TerminalPartNode;

    return _possibleConstructorReturn(this, (TerminalPartRule.__proto__ || Object.getPrototypeOf(TerminalPartRule)).call(this, name, definitions, Node));
  }

  return TerminalPartRule;
}(Rule);

module.exports = TerminalPartRule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcnVsZS90ZXJtaW5hbFBhcnQuanMiXSwibmFtZXMiOlsiUnVsZSIsInJlcXVpcmUiLCJydWxlTmFtZXMiLCJUZXJtaW5hbFBhcnROb2RlIiwiUnVsZU5hbWVEZWZpbml0aW9uIiwiVGVybWluYWxQYXJ0UnVsZU5hbWUiLCJSZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lIiwiU2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSIsIlRlcm1pbmFsU3ltYm9sUnVsZU5hbWUiLCJFbmRPZkxpbmVSdWxlTmFtZSIsIkVwc2lsb25SdWxlTmFtZSIsIldpbGRjYXJkUnVsZU5hbWUiLCJUZXJtaW5hbFBhcnRSdWxlIiwibmFtZSIsImVwc2lsb25SdWxlTmFtZSIsIndpbGRjYXJkUnVsZU5hbWUiLCJlbmRPZkxpbmVSdWxlTmFtZSIsInRlcm1pbmFsU3ltYm9sUnVsZU5hbWUiLCJyZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lIiwic2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSIsImVwc2lsb25SdWxlTmFtZURlZmluaXRpb24iLCJ3aWxkY2FyZFJ1bGVOYW1lRGVmaW5pdGlvbiIsImVuZE9mTGluZVJ1bGVOYW1lRGVmaW5pdGlvbiIsInRlcm1pbmFsU3ltYm9sUnVsZU5hbWVEZWZpbml0aW9uIiwicmVndWxhckV4cHJlc3Npb25SdWxlTmFtZURlZmluaXRpb24iLCJzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lRGVmaW5pdGlvbiIsImRlZmluaXRpb25zIiwiTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsU0FBUixDQUFiO0FBQUEsSUFDTUMsWUFBWUQsUUFBUSxjQUFSLENBRGxCO0FBQUEsSUFFTUUsbUJBQW1CRixRQUFRLHVCQUFSLENBRnpCO0FBQUEsSUFHTUcscUJBQXFCSCxRQUFRLHdCQUFSLENBSDNCOztJQUtRSSxvQixHQUFnS0gsUyxDQUFoS0csb0I7SUFBc0JDLHlCLEdBQTBJSixTLENBQTFJSSx5QjtJQUEyQkMsNEIsR0FBK0dMLFMsQ0FBL0dLLDRCO0lBQThCQyxzQixHQUFpRk4sUyxDQUFqRk0sc0I7SUFBd0JDLGlCLEdBQXlEUCxTLENBQXpETyxpQjtJQUFtQkMsZSxHQUFzQ1IsUyxDQUF0Q1EsZTtJQUFpQkMsZ0IsR0FBcUJULFMsQ0FBckJTLGdCOztJQUU3SUMsZ0I7OztBQUNKLDhCQUFjO0FBQUE7O0FBQ1osUUFBTUMsT0FBT1Isb0JBQWI7QUFBQSxRQUNNUyxrQkFBa0JKLGVBRHhCO0FBQUEsUUFFTUssbUJBQW1CSixnQkFGekI7QUFBQSxRQUdNSyxvQkFBb0JQLGlCQUgxQjtBQUFBLFFBSU1RLHlCQUF5QlQsc0JBSi9CO0FBQUEsUUFLTVUsNEJBQTRCWix5QkFMbEM7QUFBQSxRQU1NYSwrQkFBK0JaLDRCQU5yQztBQUFBLFFBT01hLDRCQUE0QixJQUFJaEIsa0JBQUosQ0FBdUJVLGVBQXZCLENBUGxDO0FBQUEsUUFRTU8sNkJBQTZCLElBQUlqQixrQkFBSixDQUF1QlcsZ0JBQXZCLENBUm5DO0FBQUEsUUFTTU8sOEJBQThCLElBQUlsQixrQkFBSixDQUF1QlksaUJBQXZCLENBVHBDO0FBQUEsUUFVTU8sbUNBQW1DLElBQUluQixrQkFBSixDQUF1QmEsc0JBQXZCLENBVnpDO0FBQUEsUUFXTU8sc0NBQXNDLElBQUlwQixrQkFBSixDQUF1QmMseUJBQXZCLENBWDVDO0FBQUEsUUFZTU8seUNBQXlDLElBQUlyQixrQkFBSixDQUF1QmUsNEJBQXZCLENBWi9DO0FBQUEsUUFhTU8sY0FBYyxDQUNaRCxzQ0FEWSxFQUVaRCxtQ0FGWSxFQUdaRCxnQ0FIWSxFQUlaRCwyQkFKWSxFQUtaRix5QkFMWSxFQU1aQywwQkFOWSxDQWJwQjtBQUFBLFFBcUJNTSxPQUFPeEIsZ0JBckJiOztBQURZLCtIQXdCTlUsSUF4Qk0sRUF3QkFhLFdBeEJBLEVBd0JhQyxJQXhCYjtBQXlCYjs7O0VBMUI0QjNCLEk7O0FBNkIvQjRCLE9BQU9DLE9BQVAsR0FBaUJqQixnQkFBakIiLCJmaWxlIjoidGVybWluYWxQYXJ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSdWxlID0gcmVxdWlyZSgnLi4vcnVsZScpLFxuICAgICAgcnVsZU5hbWVzID0gcmVxdWlyZSgnLi4vcnVsZU5hbWVzJyksXG4gICAgICBUZXJtaW5hbFBhcnROb2RlID0gcmVxdWlyZSgnLi4vbm9kZS9wYXJ0L3Rlcm1pbmFsJyksXG4gICAgICBSdWxlTmFtZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3J1bGVOYW1lJyk7XG5cbmNvbnN0IHsgVGVybWluYWxQYXJ0UnVsZU5hbWUsIFJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUsIFNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWUsIFRlcm1pbmFsU3ltYm9sUnVsZU5hbWUsIEVuZE9mTGluZVJ1bGVOYW1lLCBFcHNpbG9uUnVsZU5hbWUsIFdpbGRjYXJkUnVsZU5hbWUgfSA9IHJ1bGVOYW1lcztcblxuY2xhc3MgVGVybWluYWxQYXJ0UnVsZSBleHRlbmRzIFJ1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBuYW1lID0gVGVybWluYWxQYXJ0UnVsZU5hbWUsXG4gICAgICAgICAgZXBzaWxvblJ1bGVOYW1lID0gRXBzaWxvblJ1bGVOYW1lLFxuICAgICAgICAgIHdpbGRjYXJkUnVsZU5hbWUgPSBXaWxkY2FyZFJ1bGVOYW1lLFxuICAgICAgICAgIGVuZE9mTGluZVJ1bGVOYW1lID0gRW5kT2ZMaW5lUnVsZU5hbWUsXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xSdWxlTmFtZSA9IFRlcm1pbmFsU3ltYm9sUnVsZU5hbWUsXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25SdWxlTmFtZSA9IFJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUsXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSA9IFNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWUsXG4gICAgICAgICAgZXBzaWxvblJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24oZXBzaWxvblJ1bGVOYW1lKSxcbiAgICAgICAgICB3aWxkY2FyZFJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24od2lsZGNhcmRSdWxlTmFtZSksXG4gICAgICAgICAgZW5kT2ZMaW5lUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihlbmRPZkxpbmVSdWxlTmFtZSksXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKHRlcm1pbmFsU3ltYm9sUnVsZU5hbWUpLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihyZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lKSxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24oc2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSksXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSBbXG4gICAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgdGVybWluYWxTeW1ib2xSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBlbmRPZkxpbmVSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBlcHNpbG9uUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgd2lsZGNhcmRSdWxlTmFtZURlZmluaXRpb25cbiAgICAgICAgICBdLFxuICAgICAgICAgIE5vZGUgPSBUZXJtaW5hbFBhcnROb2RlO1xuICAgIFxuICAgIHN1cGVyKG5hbWUsIGRlZmluaXRpb25zLCBOb2RlKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGVybWluYWxQYXJ0UnVsZTtcbiJdfQ==