'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rule = require('../rule'),
    PartNode = require('../node/part'),
    RuleNameDefinition = require('../definition/ruleName');

var PartRule = function (_Rule) {
  _inherits(PartRule, _Rule);

  function PartRule() {
    _classCallCheck(this, PartRule);

    var noWhitespacePartRuleName = 'noWhitespacePart',
        optionalPartRuleName = 'optionalPart',
        zeroOrMorePartsRuleName = 'zeroOrMoreParts',
        oneOrMorePartsRuleName = 'oneOrMoreParts',
        groupOfPartsRuleName = 'groupOfParts',
        choiceOfPartsRuleName = 'choiceOfParts',
        ruleNameRuleName = 'ruleName',
        regularExpressionRuleName = 'regularExpression',
        significantTokenTypeRuleName = 'significantTokenType',
        terminalSymbolRuleName = 'terminalSymbol',
        endOfLineRuleName = 'endOfLine',
        epsilonRuleName = 'epsilon',
        wildcardRuleName = 'wildcard',
        noWhitespacePartRuleNameDefinition = new RuleNameDefinition(noWhitespacePartRuleName),
        optionalPartRuleNameDefinition = new RuleNameDefinition(optionalPartRuleName),
        zeroOrMorePartsRuleNameDefinition = new RuleNameDefinition(zeroOrMorePartsRuleName),
        oneOrMorePartsRuleNameDefinition = new RuleNameDefinition(oneOrMorePartsRuleName),
        groupOfPartsRuleNameDefinition = new RuleNameDefinition(groupOfPartsRuleName),
        choiceOfPartsRuleNameDefinition = new RuleNameDefinition(choiceOfPartsRuleName),
        ruleNameRuleNameDefinition = new RuleNameDefinition(ruleNameRuleName),
        regularExpressionRuleNameDefinition = new RuleNameDefinition(regularExpressionRuleName),
        significantTokenTypeRuleNameDefinition = new RuleNameDefinition(significantTokenTypeRuleName),
        terminalSymbolRuleNameDefinition = new RuleNameDefinition(terminalSymbolRuleName),
        endOfLineRuleNameDefinition = new RuleNameDefinition(endOfLineRuleName),
        epsilonRuleNameDefinition = new RuleNameDefinition(epsilonRuleName),
        wildcardRuleNameDefinition = new RuleNameDefinition(wildcardRuleName),
        name = 'part',
        definitions = [noWhitespacePartRuleNameDefinition, optionalPartRuleNameDefinition, zeroOrMorePartsRuleNameDefinition, oneOrMorePartsRuleNameDefinition, groupOfPartsRuleNameDefinition, choiceOfPartsRuleNameDefinition, ruleNameRuleNameDefinition, regularExpressionRuleNameDefinition, significantTokenTypeRuleNameDefinition, terminalSymbolRuleNameDefinition, endOfLineRuleNameDefinition, epsilonRuleNameDefinition, wildcardRuleNameDefinition],
        Node = PartNode;

    return _possibleConstructorReturn(this, (PartRule.__proto__ || Object.getPrototypeOf(PartRule)).call(this, name, definitions, Node));
  }

  return PartRule;
}(Rule);

module.exports = PartRule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcnVsZS9wYXJ0Lm9sZC5qcyJdLCJuYW1lcyI6WyJSdWxlIiwicmVxdWlyZSIsIlBhcnROb2RlIiwiUnVsZU5hbWVEZWZpbml0aW9uIiwiUGFydFJ1bGUiLCJub1doaXRlc3BhY2VQYXJ0UnVsZU5hbWUiLCJvcHRpb25hbFBhcnRSdWxlTmFtZSIsInplcm9Pck1vcmVQYXJ0c1J1bGVOYW1lIiwib25lT3JNb3JlUGFydHNSdWxlTmFtZSIsImdyb3VwT2ZQYXJ0c1J1bGVOYW1lIiwiY2hvaWNlT2ZQYXJ0c1J1bGVOYW1lIiwicnVsZU5hbWVSdWxlTmFtZSIsInJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUiLCJzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lIiwidGVybWluYWxTeW1ib2xSdWxlTmFtZSIsImVuZE9mTGluZVJ1bGVOYW1lIiwiZXBzaWxvblJ1bGVOYW1lIiwid2lsZGNhcmRSdWxlTmFtZSIsIm5vV2hpdGVzcGFjZVBhcnRSdWxlTmFtZURlZmluaXRpb24iLCJvcHRpb25hbFBhcnRSdWxlTmFtZURlZmluaXRpb24iLCJ6ZXJvT3JNb3JlUGFydHNSdWxlTmFtZURlZmluaXRpb24iLCJvbmVPck1vcmVQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbiIsImdyb3VwT2ZQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbiIsImNob2ljZU9mUGFydHNSdWxlTmFtZURlZmluaXRpb24iLCJydWxlTmFtZVJ1bGVOYW1lRGVmaW5pdGlvbiIsInJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWVEZWZpbml0aW9uIiwic2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZURlZmluaXRpb24iLCJ0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lRGVmaW5pdGlvbiIsImVuZE9mTGluZVJ1bGVOYW1lRGVmaW5pdGlvbiIsImVwc2lsb25SdWxlTmFtZURlZmluaXRpb24iLCJ3aWxkY2FyZFJ1bGVOYW1lRGVmaW5pdGlvbiIsIm5hbWUiLCJkZWZpbml0aW9ucyIsIk5vZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLFNBQVIsQ0FBYjtBQUFBLElBQ01DLFdBQVdELFFBQVEsY0FBUixDQURqQjtBQUFBLElBRU1FLHFCQUFxQkYsUUFBUSx3QkFBUixDQUYzQjs7SUFRTUcsUTs7O0FBQ0osc0JBQWM7QUFBQTs7QUFDWixRQUFNQywyQkFBMkIsa0JBQWpDO0FBQUEsUUFDTUMsdUJBQXVCLGNBRDdCO0FBQUEsUUFFTUMsMEJBQTBCLGlCQUZoQztBQUFBLFFBR01DLHlCQUF5QixnQkFIL0I7QUFBQSxRQUlNQyx1QkFBdUIsY0FKN0I7QUFBQSxRQUtNQyx3QkFBd0IsZUFMOUI7QUFBQSxRQU1NQyxtQkFBbUIsVUFOekI7QUFBQSxRQU9NQyw0QkFBNEIsbUJBUGxDO0FBQUEsUUFRTUMsK0JBQStCLHNCQVJyQztBQUFBLFFBU01DLHlCQUF5QixnQkFUL0I7QUFBQSxRQVVNQyxvQkFBb0IsV0FWMUI7QUFBQSxRQVdNQyxrQkFBa0IsU0FYeEI7QUFBQSxRQVlNQyxtQkFBbUIsVUFaekI7QUFBQSxRQWFNQyxxQ0FBcUMsSUFBSWYsa0JBQUosQ0FBdUJFLHdCQUF2QixDQWIzQztBQUFBLFFBY01jLGlDQUFpQyxJQUFJaEIsa0JBQUosQ0FBdUJHLG9CQUF2QixDQWR2QztBQUFBLFFBZU1jLG9DQUFvQyxJQUFJakIsa0JBQUosQ0FBdUJJLHVCQUF2QixDQWYxQztBQUFBLFFBZ0JNYyxtQ0FBbUMsSUFBSWxCLGtCQUFKLENBQXVCSyxzQkFBdkIsQ0FoQnpDO0FBQUEsUUFpQk1jLGlDQUFpQyxJQUFJbkIsa0JBQUosQ0FBdUJNLG9CQUF2QixDQWpCdkM7QUFBQSxRQWtCTWMsa0NBQWtDLElBQUlwQixrQkFBSixDQUF1Qk8scUJBQXZCLENBbEJ4QztBQUFBLFFBbUJNYyw2QkFBNkIsSUFBSXJCLGtCQUFKLENBQXVCUSxnQkFBdkIsQ0FuQm5DO0FBQUEsUUFvQk1jLHNDQUFzQyxJQUFJdEIsa0JBQUosQ0FBdUJTLHlCQUF2QixDQXBCNUM7QUFBQSxRQXFCTWMseUNBQXlDLElBQUl2QixrQkFBSixDQUF1QlUsNEJBQXZCLENBckIvQztBQUFBLFFBc0JNYyxtQ0FBbUMsSUFBSXhCLGtCQUFKLENBQXVCVyxzQkFBdkIsQ0F0QnpDO0FBQUEsUUF1Qk1jLDhCQUE4QixJQUFJekIsa0JBQUosQ0FBdUJZLGlCQUF2QixDQXZCcEM7QUFBQSxRQXdCTWMsNEJBQTRCLElBQUkxQixrQkFBSixDQUF1QmEsZUFBdkIsQ0F4QmxDO0FBQUEsUUF5Qk1jLDZCQUE2QixJQUFJM0Isa0JBQUosQ0FBdUJjLGdCQUF2QixDQXpCbkM7QUFBQSxRQTBCTWMsT0FBTyxNQTFCYjtBQUFBLFFBMkJNQyxjQUFjLENBQ1pkLGtDQURZLEVBRVpDLDhCQUZZLEVBR1pDLGlDQUhZLEVBSVpDLGdDQUpZLEVBS1pDLDhCQUxZLEVBTVpDLCtCQU5ZLEVBT1pDLDBCQVBZLEVBUVpDLG1DQVJZLEVBU1pDLHNDQVRZLEVBVVpDLGdDQVZZLEVBV1pDLDJCQVhZLEVBWVpDLHlCQVpZLEVBYVpDLDBCQWJZLENBM0JwQjtBQUFBLFFBMENNRyxPQUFPL0IsUUExQ2I7O0FBRFksK0dBNkNONkIsSUE3Q00sRUE2Q0FDLFdBN0NBLEVBNkNhQyxJQTdDYjtBQThDYjs7O0VBL0NvQmpDLEk7O0FBa0R2QmtDLE9BQU9DLE9BQVAsR0FBaUIvQixRQUFqQiIsImZpbGUiOiJwYXJ0Lm9sZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGUnKSxcbiAgICAgIFBhcnROb2RlID0gcmVxdWlyZSgnLi4vbm9kZS9wYXJ0JyksXG4gICAgICBSdWxlTmFtZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3J1bGVOYW1lJyk7XG5cblxuXG5cblxuY2xhc3MgUGFydFJ1bGUgZXh0ZW5kcyBSdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3Qgbm9XaGl0ZXNwYWNlUGFydFJ1bGVOYW1lID0gJ25vV2hpdGVzcGFjZVBhcnQnLFxuICAgICAgICAgIG9wdGlvbmFsUGFydFJ1bGVOYW1lID0gJ29wdGlvbmFsUGFydCcsXG4gICAgICAgICAgemVyb09yTW9yZVBhcnRzUnVsZU5hbWUgPSAnemVyb09yTW9yZVBhcnRzJyxcbiAgICAgICAgICBvbmVPck1vcmVQYXJ0c1J1bGVOYW1lID0gJ29uZU9yTW9yZVBhcnRzJyxcbiAgICAgICAgICBncm91cE9mUGFydHNSdWxlTmFtZSA9ICdncm91cE9mUGFydHMnLFxuICAgICAgICAgIGNob2ljZU9mUGFydHNSdWxlTmFtZSA9ICdjaG9pY2VPZlBhcnRzJyxcbiAgICAgICAgICBydWxlTmFtZVJ1bGVOYW1lID0gJ3J1bGVOYW1lJyxcbiAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lID0gJ3JlZ3VsYXJFeHByZXNzaW9uJyxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lID0gJ3NpZ25pZmljYW50VG9rZW5UeXBlJyxcbiAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lID0gJ3Rlcm1pbmFsU3ltYm9sJyxcbiAgICAgICAgICBlbmRPZkxpbmVSdWxlTmFtZSA9ICdlbmRPZkxpbmUnLFxuICAgICAgICAgIGVwc2lsb25SdWxlTmFtZSA9ICdlcHNpbG9uJyxcbiAgICAgICAgICB3aWxkY2FyZFJ1bGVOYW1lID0gJ3dpbGRjYXJkJyxcbiAgICAgICAgICBub1doaXRlc3BhY2VQYXJ0UnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihub1doaXRlc3BhY2VQYXJ0UnVsZU5hbWUpLFxuICAgICAgICAgIG9wdGlvbmFsUGFydFJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24ob3B0aW9uYWxQYXJ0UnVsZU5hbWUpLFxuICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24oemVyb09yTW9yZVBhcnRzUnVsZU5hbWUpLFxuICAgICAgICAgIG9uZU9yTW9yZVBhcnRzUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihvbmVPck1vcmVQYXJ0c1J1bGVOYW1lKSxcbiAgICAgICAgICBncm91cE9mUGFydHNSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKGdyb3VwT2ZQYXJ0c1J1bGVOYW1lKSxcbiAgICAgICAgICBjaG9pY2VPZlBhcnRzUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihjaG9pY2VPZlBhcnRzUnVsZU5hbWUpLFxuICAgICAgICAgIHJ1bGVOYW1lUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihydWxlTmFtZVJ1bGVOYW1lKSxcbiAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24ocmVndWxhckV4cHJlc3Npb25SdWxlTmFtZSksXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKHNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWUpLFxuICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbih0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lKSxcbiAgICAgICAgICBlbmRPZkxpbmVSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKGVuZE9mTGluZVJ1bGVOYW1lKSxcbiAgICAgICAgICBlcHNpbG9uUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihlcHNpbG9uUnVsZU5hbWUpLFxuICAgICAgICAgIHdpbGRjYXJkUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbih3aWxkY2FyZFJ1bGVOYW1lKSxcbiAgICAgICAgICBuYW1lID0gJ3BhcnQnLFxuICAgICAgICAgIGRlZmluaXRpb25zID0gW1xuICAgICAgICAgICAgbm9XaGl0ZXNwYWNlUGFydFJ1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIG9wdGlvbmFsUGFydFJ1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHplcm9Pck1vcmVQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIG9uZU9yTW9yZVBhcnRzUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgZ3JvdXBPZlBhcnRzUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgY2hvaWNlT2ZQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHJ1bGVOYW1lUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgcmVndWxhckV4cHJlc3Npb25SdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgZW5kT2ZMaW5lUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgZXBzaWxvblJ1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHdpbGRjYXJkUnVsZU5hbWVEZWZpbml0aW9uXG4gICAgICAgICAgXSxcbiAgICAgICAgICBOb2RlID0gUGFydE5vZGU7XG4gICAgXG4gICAgc3VwZXIobmFtZSwgZGVmaW5pdGlvbnMsIE5vZGUpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJ0UnVsZTtcbiJdfQ==