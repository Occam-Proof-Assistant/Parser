'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rule = require('../rule'),
    PartNode = require('../node/part'),
    ruleNames = require('../ruleNames'),
    PartRuleDefinition = require('../definition/partRule'),
    NoWhitespaceDefinition = require('../definition/noWhitespace'),
    GroupOfPartsDefinition = require('../definition/groupOfParts'),
    ChoiceOfPartsDefinition = require('../definition/choiceOfParts');

var PartRule = function (_Rule) {
  _inherits(PartRule, _Rule);

  function PartRule() {
    _classCallCheck(this, PartRule);

    var ruleNameRuleName = 'ruleName',
        regularExpressionRuleName = 'regularExpression',
        significantTokenTypeRuleName = 'significantTokenType',
        terminalSymbolRuleName = 'terminalSymbol',
        endOfLineRuleName = 'endOfLine',
        epsilonRuleName = 'epsilon',
        wildcardRuleName = 'wildcard',
        noWhitespaceDefinition = new NoWhitespaceDefinition(),
        groupOfPartsDefinition = new GroupOfPartsDefinition(),
        choiceOfPartsDefinition = new ChoiceOfPartsDefinition(),
        ruleNameRuleNamePartRuleDefinition = new PartRuleDefinition(ruleNameRuleName),
        regularExpressionRuleNamePartRuleDefinition = new PartRuleDefinition(regularExpressionRuleName),
        significantTokenTypeRuleNamePartRuleDefinition = new PartRuleDefinition(significantTokenTypeRuleName),
        terminalSymbolRuleNamePartRuleDefinition = new PartRuleDefinition(terminalSymbolRuleName),
        endOfLineRuleNamePartRuleDefinition = new PartRuleDefinition(endOfLineRuleName),
        epsilonRuleNamePartRuleDefinition = new PartRuleDefinition(epsilonRuleName),
        wildcardRuleNamePartRuleDefinition = new PartRuleDefinition(wildcardRuleName),
        name = ruleNames.PartRule,
        definitions = [noWhitespaceDefinition, groupOfPartsDefinition, choiceOfPartsDefinition, ruleNameRuleNamePartRuleDefinition, regularExpressionRuleNamePartRuleDefinition, significantTokenTypeRuleNamePartRuleDefinition, terminalSymbolRuleNamePartRuleDefinition, endOfLineRuleNamePartRuleDefinition, epsilonRuleNamePartRuleDefinition, wildcardRuleNamePartRuleDefinition],
        Node = PartNode;

    return _possibleConstructorReturn(this, (PartRule.__proto__ || Object.getPrototypeOf(PartRule)).call(this, name, definitions, Node));
  }

  return PartRule;
}(Rule);

module.exports = PartRule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcnVsZS9wYXJ0LmpzIl0sIm5hbWVzIjpbIlJ1bGUiLCJyZXF1aXJlIiwiUGFydE5vZGUiLCJydWxlTmFtZXMiLCJQYXJ0UnVsZURlZmluaXRpb24iLCJOb1doaXRlc3BhY2VEZWZpbml0aW9uIiwiR3JvdXBPZlBhcnRzRGVmaW5pdGlvbiIsIkNob2ljZU9mUGFydHNEZWZpbml0aW9uIiwiUGFydFJ1bGUiLCJydWxlTmFtZVJ1bGVOYW1lIiwicmVndWxhckV4cHJlc3Npb25SdWxlTmFtZSIsInNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWUiLCJ0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lIiwiZW5kT2ZMaW5lUnVsZU5hbWUiLCJlcHNpbG9uUnVsZU5hbWUiLCJ3aWxkY2FyZFJ1bGVOYW1lIiwibm9XaGl0ZXNwYWNlRGVmaW5pdGlvbiIsImdyb3VwT2ZQYXJ0c0RlZmluaXRpb24iLCJjaG9pY2VPZlBhcnRzRGVmaW5pdGlvbiIsInJ1bGVOYW1lUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb24iLCJyZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uIiwic2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbiIsInRlcm1pbmFsU3ltYm9sUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb24iLCJlbmRPZkxpbmVSdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbiIsImVwc2lsb25SdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbiIsIndpbGRjYXJkUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb24iLCJuYW1lIiwiZGVmaW5pdGlvbnMiLCJOb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxTQUFSLENBQWI7QUFBQSxJQUNNQyxXQUFXRCxRQUFRLGNBQVIsQ0FEakI7QUFBQSxJQUVNRSxZQUFZRixRQUFRLGNBQVIsQ0FGbEI7QUFBQSxJQUdNRyxxQkFBcUJILFFBQVEsd0JBQVIsQ0FIM0I7QUFBQSxJQUlNSSx5QkFBeUJKLFFBQVEsNEJBQVIsQ0FKL0I7QUFBQSxJQUtNSyx5QkFBeUJMLFFBQVEsNEJBQVIsQ0FML0I7QUFBQSxJQU1NTSwwQkFBMEJOLFFBQVEsNkJBQVIsQ0FOaEM7O0lBUU1PLFE7OztBQUNKLHNCQUFjO0FBQUE7O0FBQ1osUUFBTUMsbUJBQW1CLFVBQXpCO0FBQUEsUUFDTUMsNEJBQTRCLG1CQURsQztBQUFBLFFBRU1DLCtCQUErQixzQkFGckM7QUFBQSxRQUdNQyx5QkFBeUIsZ0JBSC9CO0FBQUEsUUFJTUMsb0JBQW9CLFdBSjFCO0FBQUEsUUFLTUMsa0JBQWtCLFNBTHhCO0FBQUEsUUFNTUMsbUJBQW1CLFVBTnpCO0FBQUEsUUFPTUMseUJBQXlCLElBQUlYLHNCQUFKLEVBUC9CO0FBQUEsUUFRTVkseUJBQXlCLElBQUlYLHNCQUFKLEVBUi9CO0FBQUEsUUFTTVksMEJBQTBCLElBQUlYLHVCQUFKLEVBVGhDO0FBQUEsUUFVTVkscUNBQXFDLElBQUlmLGtCQUFKLENBQXVCSyxnQkFBdkIsQ0FWM0M7QUFBQSxRQVdNVyw4Q0FBOEMsSUFBSWhCLGtCQUFKLENBQXVCTSx5QkFBdkIsQ0FYcEQ7QUFBQSxRQVlNVyxpREFBaUQsSUFBSWpCLGtCQUFKLENBQXVCTyw0QkFBdkIsQ0FadkQ7QUFBQSxRQWFNVywyQ0FBMkMsSUFBSWxCLGtCQUFKLENBQXVCUSxzQkFBdkIsQ0FiakQ7QUFBQSxRQWNNVyxzQ0FBc0MsSUFBSW5CLGtCQUFKLENBQXVCUyxpQkFBdkIsQ0FkNUM7QUFBQSxRQWVNVyxvQ0FBb0MsSUFBSXBCLGtCQUFKLENBQXVCVSxlQUF2QixDQWYxQztBQUFBLFFBZ0JNVyxxQ0FBcUMsSUFBSXJCLGtCQUFKLENBQXVCVyxnQkFBdkIsQ0FoQjNDO0FBQUEsUUFpQk1XLE9BQU92QixVQUFVSyxRQWpCdkI7QUFBQSxRQWtCTW1CLGNBQWMsQ0FDWlgsc0JBRFksRUFFWkMsc0JBRlksRUFHWkMsdUJBSFksRUFJWkMsa0NBSlksRUFLWkMsMkNBTFksRUFNWkMsOENBTlksRUFPWkMsd0NBUFksRUFRWkMsbUNBUlksRUFTWkMsaUNBVFksRUFVWkMsa0NBVlksQ0FsQnBCO0FBQUEsUUE4Qk1HLE9BQU8xQixRQTlCYjs7QUFEWSwrR0FpQ053QixJQWpDTSxFQWlDQUMsV0FqQ0EsRUFpQ2FDLElBakNiO0FBa0NiOzs7RUFuQ29CNUIsSTs7QUFzQ3ZCNkIsT0FBT0MsT0FBUCxHQUFpQnRCLFFBQWpCIiwiZmlsZSI6InBhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlJyksXG4gICAgICBQYXJ0Tm9kZSA9IHJlcXVpcmUoJy4uL25vZGUvcGFydCcpLFxuICAgICAgcnVsZU5hbWVzID0gcmVxdWlyZSgnLi4vcnVsZU5hbWVzJyksXG4gICAgICBQYXJ0UnVsZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3BhcnRSdWxlJyksXG4gICAgICBOb1doaXRlc3BhY2VEZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi9ub1doaXRlc3BhY2UnKSxcbiAgICAgIEdyb3VwT2ZQYXJ0c0RlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL2dyb3VwT2ZQYXJ0cycpLFxuICAgICAgQ2hvaWNlT2ZQYXJ0c0RlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL2Nob2ljZU9mUGFydHMnKTtcblxuY2xhc3MgUGFydFJ1bGUgZXh0ZW5kcyBSdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgcnVsZU5hbWVSdWxlTmFtZSA9ICdydWxlTmFtZScsXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25SdWxlTmFtZSA9ICdyZWd1bGFyRXhwcmVzc2lvbicsXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSA9ICdzaWduaWZpY2FudFRva2VuVHlwZScsXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xSdWxlTmFtZSA9ICd0ZXJtaW5hbFN5bWJvbCcsXG4gICAgICAgICAgZW5kT2ZMaW5lUnVsZU5hbWUgPSAnZW5kT2ZMaW5lJyxcbiAgICAgICAgICBlcHNpbG9uUnVsZU5hbWUgPSAnZXBzaWxvbicsXG4gICAgICAgICAgd2lsZGNhcmRSdWxlTmFtZSA9ICd3aWxkY2FyZCcsXG4gICAgICAgICAgbm9XaGl0ZXNwYWNlRGVmaW5pdGlvbiA9IG5ldyBOb1doaXRlc3BhY2VEZWZpbml0aW9uKCksXG4gICAgICAgICAgZ3JvdXBPZlBhcnRzRGVmaW5pdGlvbiA9IG5ldyBHcm91cE9mUGFydHNEZWZpbml0aW9uKCksXG4gICAgICAgICAgY2hvaWNlT2ZQYXJ0c0RlZmluaXRpb24gPSBuZXcgQ2hvaWNlT2ZQYXJ0c0RlZmluaXRpb24oKSxcbiAgICAgICAgICBydWxlTmFtZVJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IFBhcnRSdWxlRGVmaW5pdGlvbihydWxlTmFtZVJ1bGVOYW1lKSxcbiAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IFBhcnRSdWxlRGVmaW5pdGlvbihyZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lKSxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IFBhcnRSdWxlRGVmaW5pdGlvbihzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lKSxcbiAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IFBhcnRSdWxlRGVmaW5pdGlvbih0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lKSxcbiAgICAgICAgICBlbmRPZkxpbmVSdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbiA9IG5ldyBQYXJ0UnVsZURlZmluaXRpb24oZW5kT2ZMaW5lUnVsZU5hbWUpLFxuICAgICAgICAgIGVwc2lsb25SdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbiA9IG5ldyBQYXJ0UnVsZURlZmluaXRpb24oZXBzaWxvblJ1bGVOYW1lKSxcbiAgICAgICAgICB3aWxkY2FyZFJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IFBhcnRSdWxlRGVmaW5pdGlvbih3aWxkY2FyZFJ1bGVOYW1lKSxcbiAgICAgICAgICBuYW1lID0gcnVsZU5hbWVzLlBhcnRSdWxlLFxuICAgICAgICAgIGRlZmluaXRpb25zID0gW1xuICAgICAgICAgICAgbm9XaGl0ZXNwYWNlRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGdyb3VwT2ZQYXJ0c0RlZmluaXRpb24sXG4gICAgICAgICAgICBjaG9pY2VPZlBhcnRzRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHJ1bGVOYW1lUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb24sXG4gICAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uLFxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb24sXG4gICAgICAgICAgICBlbmRPZkxpbmVSdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGVwc2lsb25SdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHdpbGRjYXJkUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb25cbiAgICAgICAgICBdLFxuICAgICAgICAgIE5vZGUgPSBQYXJ0Tm9kZTtcbiAgICBcbiAgICBzdXBlcihuYW1lLCBkZWZpbml0aW9ucywgTm9kZSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRSdWxlO1xuIl19