'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rule = require('../rule'),
    PartNode = require('../node/part'),
    RuleNameDefinition = require('../definition/ruleName');

var PartRule = function (_Rule) {
  _inherits(PartRule, _Rule);

  function PartRule() {
    _classCallCheck(this, PartRule);

    var noWhitespacePartRuleName = 'noWhitespacePart',
        optionalPartRuleName = 'optionalPart',
        zeroOrMorePartsRuleName = 'zeroOrMoreParts',
        oneOrMorePartsRuleName = 'oneOrMoreParts',
        groupOfPartsRuleName = 'groupOfParts',
        choiceOfPartsRuleName = 'choiceOfParts',
        ruleNameRuleName = 'ruleName',
        regularExpressionRuleName = 'regularExpression',
        significantTokenTypeRuleName = 'significantTokenType',
        terminalSymbolRuleName = 'terminalSymbol',
        endOfLineRuleName = 'endOfLine',
        epsilonRuleName = 'epsilon',
        wildcardRuleName = 'wildcard',
        noWhitespacePartRuleNameDefinition = new RuleNameDefinition(noWhitespacePartRuleName),
        optionalPartRuleNameDefinition = new RuleNameDefinition(optionalPartRuleName),
        zeroOrMorePartsRuleNameDefinition = new RuleNameDefinition(zeroOrMorePartsRuleName),
        oneOrMorePartsRuleNameDefinition = new RuleNameDefinition(oneOrMorePartsRuleName),
        groupOfPartsRuleNameDefinition = new RuleNameDefinition(groupOfPartsRuleName),
        choiceOfPartsRuleNameDefinition = new RuleNameDefinition(choiceOfPartsRuleName),
        ruleNameRuleNameDefinition = new RuleNameDefinition(ruleNameRuleName),
        regularExpressionRuleNameDefinition = new RuleNameDefinition(regularExpressionRuleName),
        significantTokenTypeRuleNameDefinition = new RuleNameDefinition(significantTokenTypeRuleName),
        terminalSymbolRuleNameDefinition = new RuleNameDefinition(terminalSymbolRuleName),
        endOfLineRuleNameDefinition = new RuleNameDefinition(endOfLineRuleName),
        epsilonRuleNameDefinition = new RuleNameDefinition(epsilonRuleName),
        wildcardRuleNameDefinition = new RuleNameDefinition(wildcardRuleName),
        name = 'part',
        definitions = [noWhitespacePartRuleNameDefinition, optionalPartRuleNameDefinition, zeroOrMorePartsRuleNameDefinition, oneOrMorePartsRuleNameDefinition, groupOfPartsRuleNameDefinition, choiceOfPartsRuleNameDefinition, ruleNameRuleNameDefinition, regularExpressionRuleNameDefinition, significantTokenTypeRuleNameDefinition, terminalSymbolRuleNameDefinition, endOfLineRuleNameDefinition, epsilonRuleNameDefinition, wildcardRuleNameDefinition],
        Node = PartNode;

    return _possibleConstructorReturn(this, (PartRule.__proto__ || Object.getPrototypeOf(PartRule)).call(this, name, definitions, Node));
  }

  return PartRule;
}(Rule);

module.exports = PartRule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcnVsZS9wYXJ0LmpzIl0sIm5hbWVzIjpbIlJ1bGUiLCJyZXF1aXJlIiwiUGFydE5vZGUiLCJSdWxlTmFtZURlZmluaXRpb24iLCJQYXJ0UnVsZSIsIm5vV2hpdGVzcGFjZVBhcnRSdWxlTmFtZSIsIm9wdGlvbmFsUGFydFJ1bGVOYW1lIiwiemVyb09yTW9yZVBhcnRzUnVsZU5hbWUiLCJvbmVPck1vcmVQYXJ0c1J1bGVOYW1lIiwiZ3JvdXBPZlBhcnRzUnVsZU5hbWUiLCJjaG9pY2VPZlBhcnRzUnVsZU5hbWUiLCJydWxlTmFtZVJ1bGVOYW1lIiwicmVndWxhckV4cHJlc3Npb25SdWxlTmFtZSIsInNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWUiLCJ0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lIiwiZW5kT2ZMaW5lUnVsZU5hbWUiLCJlcHNpbG9uUnVsZU5hbWUiLCJ3aWxkY2FyZFJ1bGVOYW1lIiwibm9XaGl0ZXNwYWNlUGFydFJ1bGVOYW1lRGVmaW5pdGlvbiIsIm9wdGlvbmFsUGFydFJ1bGVOYW1lRGVmaW5pdGlvbiIsInplcm9Pck1vcmVQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbiIsIm9uZU9yTW9yZVBhcnRzUnVsZU5hbWVEZWZpbml0aW9uIiwiZ3JvdXBPZlBhcnRzUnVsZU5hbWVEZWZpbml0aW9uIiwiY2hvaWNlT2ZQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbiIsInJ1bGVOYW1lUnVsZU5hbWVEZWZpbml0aW9uIiwicmVndWxhckV4cHJlc3Npb25SdWxlTmFtZURlZmluaXRpb24iLCJzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lRGVmaW5pdGlvbiIsInRlcm1pbmFsU3ltYm9sUnVsZU5hbWVEZWZpbml0aW9uIiwiZW5kT2ZMaW5lUnVsZU5hbWVEZWZpbml0aW9uIiwiZXBzaWxvblJ1bGVOYW1lRGVmaW5pdGlvbiIsIndpbGRjYXJkUnVsZU5hbWVEZWZpbml0aW9uIiwibmFtZSIsImRlZmluaXRpb25zIiwiTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsU0FBUixDQUFiO0FBQUEsSUFDTUMsV0FBV0QsUUFBUSxjQUFSLENBRGpCO0FBQUEsSUFFTUUscUJBQXFCRixRQUFRLHdCQUFSLENBRjNCOztJQUlNRyxROzs7QUFDSixzQkFBYztBQUFBOztBQUNaLFFBQU1DLDJCQUEyQixrQkFBakM7QUFBQSxRQUNNQyx1QkFBdUIsY0FEN0I7QUFBQSxRQUVNQywwQkFBMEIsaUJBRmhDO0FBQUEsUUFHTUMseUJBQXlCLGdCQUgvQjtBQUFBLFFBSU1DLHVCQUF1QixjQUo3QjtBQUFBLFFBS01DLHdCQUF3QixlQUw5QjtBQUFBLFFBTU1DLG1CQUFtQixVQU56QjtBQUFBLFFBT01DLDRCQUE0QixtQkFQbEM7QUFBQSxRQVFNQywrQkFBK0Isc0JBUnJDO0FBQUEsUUFTTUMseUJBQXlCLGdCQVQvQjtBQUFBLFFBVU1DLG9CQUFvQixXQVYxQjtBQUFBLFFBV01DLGtCQUFrQixTQVh4QjtBQUFBLFFBWU1DLG1CQUFtQixVQVp6QjtBQUFBLFFBYU1DLHFDQUFxQyxJQUFJZixrQkFBSixDQUF1QkUsd0JBQXZCLENBYjNDO0FBQUEsUUFjTWMsaUNBQWlDLElBQUloQixrQkFBSixDQUF1Qkcsb0JBQXZCLENBZHZDO0FBQUEsUUFlTWMsb0NBQW9DLElBQUlqQixrQkFBSixDQUF1QkksdUJBQXZCLENBZjFDO0FBQUEsUUFnQk1jLG1DQUFtQyxJQUFJbEIsa0JBQUosQ0FBdUJLLHNCQUF2QixDQWhCekM7QUFBQSxRQWlCTWMsaUNBQWlDLElBQUluQixrQkFBSixDQUF1Qk0sb0JBQXZCLENBakJ2QztBQUFBLFFBa0JNYyxrQ0FBa0MsSUFBSXBCLGtCQUFKLENBQXVCTyxxQkFBdkIsQ0FsQnhDO0FBQUEsUUFtQk1jLDZCQUE2QixJQUFJckIsa0JBQUosQ0FBdUJRLGdCQUF2QixDQW5CbkM7QUFBQSxRQW9CTWMsc0NBQXNDLElBQUl0QixrQkFBSixDQUF1QlMseUJBQXZCLENBcEI1QztBQUFBLFFBcUJNYyx5Q0FBeUMsSUFBSXZCLGtCQUFKLENBQXVCVSw0QkFBdkIsQ0FyQi9DO0FBQUEsUUFzQk1jLG1DQUFtQyxJQUFJeEIsa0JBQUosQ0FBdUJXLHNCQUF2QixDQXRCekM7QUFBQSxRQXVCTWMsOEJBQThCLElBQUl6QixrQkFBSixDQUF1QlksaUJBQXZCLENBdkJwQztBQUFBLFFBd0JNYyw0QkFBNEIsSUFBSTFCLGtCQUFKLENBQXVCYSxlQUF2QixDQXhCbEM7QUFBQSxRQXlCTWMsNkJBQTZCLElBQUkzQixrQkFBSixDQUF1QmMsZ0JBQXZCLENBekJuQztBQUFBLFFBMEJNYyxPQUFPLE1BMUJiO0FBQUEsUUEyQk1DLGNBQWMsQ0FDWmQsa0NBRFksRUFFWkMsOEJBRlksRUFHWkMsaUNBSFksRUFJWkMsZ0NBSlksRUFLWkMsOEJBTFksRUFNWkMsK0JBTlksRUFPWkMsMEJBUFksRUFRWkMsbUNBUlksRUFTWkMsc0NBVFksRUFVWkMsZ0NBVlksRUFXWkMsMkJBWFksRUFZWkMseUJBWlksRUFhWkMsMEJBYlksQ0EzQnBCO0FBQUEsUUEwQ01HLE9BQU8vQixRQTFDYjs7QUFEWSwrR0E2Q042QixJQTdDTSxFQTZDQUMsV0E3Q0EsRUE2Q2FDLElBN0NiO0FBOENiOzs7RUEvQ29CakMsSTs7QUFrRHZCa0MsT0FBT0MsT0FBUCxHQUFpQi9CLFFBQWpCIiwiZmlsZSI6InBhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlJyksXG4gICAgICBQYXJ0Tm9kZSA9IHJlcXVpcmUoJy4uL25vZGUvcGFydCcpLFxuICAgICAgUnVsZU5hbWVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi9ydWxlTmFtZScpO1xuXG5jbGFzcyBQYXJ0UnVsZSBleHRlbmRzIFJ1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBub1doaXRlc3BhY2VQYXJ0UnVsZU5hbWUgPSAnbm9XaGl0ZXNwYWNlUGFydCcsXG4gICAgICAgICAgb3B0aW9uYWxQYXJ0UnVsZU5hbWUgPSAnb3B0aW9uYWxQYXJ0JyxcbiAgICAgICAgICB6ZXJvT3JNb3JlUGFydHNSdWxlTmFtZSA9ICd6ZXJvT3JNb3JlUGFydHMnLFxuICAgICAgICAgIG9uZU9yTW9yZVBhcnRzUnVsZU5hbWUgPSAnb25lT3JNb3JlUGFydHMnLFxuICAgICAgICAgIGdyb3VwT2ZQYXJ0c1J1bGVOYW1lID0gJ2dyb3VwT2ZQYXJ0cycsXG4gICAgICAgICAgY2hvaWNlT2ZQYXJ0c1J1bGVOYW1lID0gJ2Nob2ljZU9mUGFydHMnLFxuICAgICAgICAgIHJ1bGVOYW1lUnVsZU5hbWUgPSAncnVsZU5hbWUnLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUgPSAncmVndWxhckV4cHJlc3Npb24nLFxuICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWUgPSAnc2lnbmlmaWNhbnRUb2tlblR5cGUnLFxuICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUnVsZU5hbWUgPSAndGVybWluYWxTeW1ib2wnLFxuICAgICAgICAgIGVuZE9mTGluZVJ1bGVOYW1lID0gJ2VuZE9mTGluZScsXG4gICAgICAgICAgZXBzaWxvblJ1bGVOYW1lID0gJ2Vwc2lsb24nLFxuICAgICAgICAgIHdpbGRjYXJkUnVsZU5hbWUgPSAnd2lsZGNhcmQnLFxuICAgICAgICAgIG5vV2hpdGVzcGFjZVBhcnRSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKG5vV2hpdGVzcGFjZVBhcnRSdWxlTmFtZSksXG4gICAgICAgICAgb3B0aW9uYWxQYXJ0UnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihvcHRpb25hbFBhcnRSdWxlTmFtZSksXG4gICAgICAgICAgemVyb09yTW9yZVBhcnRzUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbih6ZXJvT3JNb3JlUGFydHNSdWxlTmFtZSksXG4gICAgICAgICAgb25lT3JNb3JlUGFydHNSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKG9uZU9yTW9yZVBhcnRzUnVsZU5hbWUpLFxuICAgICAgICAgIGdyb3VwT2ZQYXJ0c1J1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24oZ3JvdXBPZlBhcnRzUnVsZU5hbWUpLFxuICAgICAgICAgIGNob2ljZU9mUGFydHNSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKGNob2ljZU9mUGFydHNSdWxlTmFtZSksXG4gICAgICAgICAgcnVsZU5hbWVSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKHJ1bGVOYW1lUnVsZU5hbWUpLFxuICAgICAgICAgIHJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWVEZWZpbml0aW9uID0gbmV3IFJ1bGVOYW1lRGVmaW5pdGlvbihyZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lKSxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24oc2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSksXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKHRlcm1pbmFsU3ltYm9sUnVsZU5hbWUpLFxuICAgICAgICAgIGVuZE9mTGluZVJ1bGVOYW1lRGVmaW5pdGlvbiA9IG5ldyBSdWxlTmFtZURlZmluaXRpb24oZW5kT2ZMaW5lUnVsZU5hbWUpLFxuICAgICAgICAgIGVwc2lsb25SdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKGVwc2lsb25SdWxlTmFtZSksXG4gICAgICAgICAgd2lsZGNhcmRSdWxlTmFtZURlZmluaXRpb24gPSBuZXcgUnVsZU5hbWVEZWZpbml0aW9uKHdpbGRjYXJkUnVsZU5hbWUpLFxuICAgICAgICAgIG5hbWUgPSAncGFydCcsXG4gICAgICAgICAgZGVmaW5pdGlvbnMgPSBbXG4gICAgICAgICAgICBub1doaXRlc3BhY2VQYXJ0UnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgb3B0aW9uYWxQYXJ0UnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgemVyb09yTW9yZVBhcnRzUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgb25lT3JNb3JlUGFydHNSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBncm91cE9mUGFydHNSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBjaG9pY2VPZlBhcnRzUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgcnVsZU5hbWVSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgdGVybWluYWxTeW1ib2xSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBlbmRPZkxpbmVSdWxlTmFtZURlZmluaXRpb24sXG4gICAgICAgICAgICBlcHNpbG9uUnVsZU5hbWVEZWZpbml0aW9uLFxuICAgICAgICAgICAgd2lsZGNhcmRSdWxlTmFtZURlZmluaXRpb25cbiAgICAgICAgICBdLFxuICAgICAgICAgIE5vZGUgPSBQYXJ0Tm9kZTtcbiAgICBcbiAgICBzdXBlcihuYW1lLCBkZWZpbml0aW9ucywgTm9kZSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRSdWxlO1xuIl19