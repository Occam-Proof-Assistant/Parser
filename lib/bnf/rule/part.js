'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rule = require('../rule'),
    PartNode = require('../node/part'),
    ruleNames = require('../ruleNames'),
    PartRuleDefinition = require('../definition/partRule'),
    NoWhitespacePartRuleDefinition = require('../definition/partRule/noWhitespace'),
    GroupOfPartsPartRuleDefinition = require('../definition/partRule/groupOfParts'),
    ChoiceOfPartsPartRuleDefinition = require('../definition/partRule/choiceOfParts');

var PartRuleName = ruleNames.PartRuleName,
    EpsilonRuleName = ruleNames.EpsilonRuleName,
    WildcardRuleName = ruleNames.WildcardRuleName,
    RuleNameRuleName = ruleNames.RuleNameRuleName,
    EndOfLineRuleName = ruleNames.EndOfLineRuleName,
    TerminalSymbolRuleName = ruleNames.TerminalSymbolRuleName,
    RegularExpressionRuleName = ruleNames.RegularExpressionRuleName,
    SignificantTokenTypeRuleName = ruleNames.SignificantTokenTypeRuleName;

var PartRule = function (_Rule) {
  _inherits(PartRule, _Rule);

  function PartRule() {
    _classCallCheck(this, PartRule);

    var ruleNameRuleName = RuleNameRuleName,
        regularExpressionRuleName = RegularExpressionRuleName,
        significantTokenTypeRuleName = SignificantTokenTypeRuleName,
        terminalSymbolRuleName = TerminalSymbolRuleName,
        endOfLineRuleName = EndOfLineRuleName,
        epsilonRuleName = EpsilonRuleName,
        wildcardRuleName = WildcardRuleName,
        noWhitespacePartRuleDefinition = new NoWhitespacePartRuleDefinition(),
        groupOfPartsPartRuleDefinition = new GroupOfPartsPartRuleDefinition(),
        choiceOfPartsPartRuleDefinition = new ChoiceOfPartsPartRuleDefinition(),
        ruleNameRuleNamePartRuleDefinition = new PartRuleDefinition(ruleNameRuleName),
        regularExpressionRuleNamePartRuleDefinition = new PartRuleDefinition(regularExpressionRuleName),
        significantTokenTypeRuleNamePartRuleDefinition = new PartRuleDefinition(significantTokenTypeRuleName),
        terminalSymbolRuleNamePartRuleDefinition = new PartRuleDefinition(terminalSymbolRuleName),
        endOfLineRuleNamePartRuleDefinition = new PartRuleDefinition(endOfLineRuleName),
        epsilonRuleNamePartRuleDefinition = new PartRuleDefinition(epsilonRuleName),
        wildcardRuleNamePartRuleDefinition = new PartRuleDefinition(wildcardRuleName),
        name = PartRuleName,
        definitions = [noWhitespacePartRuleDefinition, groupOfPartsPartRuleDefinition, choiceOfPartsPartRuleDefinition, ruleNameRuleNamePartRuleDefinition, regularExpressionRuleNamePartRuleDefinition, significantTokenTypeRuleNamePartRuleDefinition, terminalSymbolRuleNamePartRuleDefinition, endOfLineRuleNamePartRuleDefinition, epsilonRuleNamePartRuleDefinition, wildcardRuleNamePartRuleDefinition],
        Node = PartNode;

    return _possibleConstructorReturn(this, (PartRule.__proto__ || Object.getPrototypeOf(PartRule)).call(this, name, definitions, Node));
  }

  return PartRule;
}(Rule);

module.exports = PartRule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9ibmYvcnVsZS9wYXJ0LmpzIl0sIm5hbWVzIjpbIlJ1bGUiLCJyZXF1aXJlIiwiUGFydE5vZGUiLCJydWxlTmFtZXMiLCJQYXJ0UnVsZURlZmluaXRpb24iLCJOb1doaXRlc3BhY2VQYXJ0UnVsZURlZmluaXRpb24iLCJHcm91cE9mUGFydHNQYXJ0UnVsZURlZmluaXRpb24iLCJDaG9pY2VPZlBhcnRzUGFydFJ1bGVEZWZpbml0aW9uIiwiUGFydFJ1bGVOYW1lIiwiRXBzaWxvblJ1bGVOYW1lIiwiV2lsZGNhcmRSdWxlTmFtZSIsIlJ1bGVOYW1lUnVsZU5hbWUiLCJFbmRPZkxpbmVSdWxlTmFtZSIsIlRlcm1pbmFsU3ltYm9sUnVsZU5hbWUiLCJSZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lIiwiU2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSIsIlBhcnRSdWxlIiwicnVsZU5hbWVSdWxlTmFtZSIsInJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUiLCJzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lIiwidGVybWluYWxTeW1ib2xSdWxlTmFtZSIsImVuZE9mTGluZVJ1bGVOYW1lIiwiZXBzaWxvblJ1bGVOYW1lIiwid2lsZGNhcmRSdWxlTmFtZSIsIm5vV2hpdGVzcGFjZVBhcnRSdWxlRGVmaW5pdGlvbiIsImdyb3VwT2ZQYXJ0c1BhcnRSdWxlRGVmaW5pdGlvbiIsImNob2ljZU9mUGFydHNQYXJ0UnVsZURlZmluaXRpb24iLCJydWxlTmFtZVJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uIiwicmVndWxhckV4cHJlc3Npb25SdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbiIsInNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb24iLCJ0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uIiwiZW5kT2ZMaW5lUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb24iLCJlcHNpbG9uUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb24iLCJ3aWxkY2FyZFJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uIiwibmFtZSIsImRlZmluaXRpb25zIiwiTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsU0FBUixDQUFiO0FBQUEsSUFDTUMsV0FBV0QsUUFBUSxjQUFSLENBRGpCO0FBQUEsSUFFTUUsWUFBWUYsUUFBUSxjQUFSLENBRmxCO0FBQUEsSUFHTUcscUJBQXFCSCxRQUFRLHdCQUFSLENBSDNCO0FBQUEsSUFJTUksaUNBQWlDSixRQUFRLHFDQUFSLENBSnZDO0FBQUEsSUFLTUssaUNBQWlDTCxRQUFRLHFDQUFSLENBTHZDO0FBQUEsSUFNTU0sa0NBQWtDTixRQUFRLHNDQUFSLENBTnhDOztJQVFRTyxZLEdBQTBLTCxTLENBQTFLSyxZO0lBQWNDLGUsR0FBNEpOLFMsQ0FBNUpNLGU7SUFBaUJDLGdCLEdBQTJJUCxTLENBQTNJTyxnQjtJQUFrQkMsZ0IsR0FBeUhSLFMsQ0FBekhRLGdCO0lBQWtCQyxpQixHQUF1R1QsUyxDQUF2R1MsaUI7SUFBbUJDLHNCLEdBQW9GVixTLENBQXBGVSxzQjtJQUF3QkMseUIsR0FBNERYLFMsQ0FBNURXLHlCO0lBQTJCQyw0QixHQUFpQ1osUyxDQUFqQ1ksNEI7O0lBRTNJQyxROzs7QUFDSixzQkFBYztBQUFBOztBQUNaLFFBQU1DLG1CQUFtQk4sZ0JBQXpCO0FBQUEsUUFDTU8sNEJBQTRCSix5QkFEbEM7QUFBQSxRQUVNSywrQkFBK0JKLDRCQUZyQztBQUFBLFFBR01LLHlCQUF5QlAsc0JBSC9CO0FBQUEsUUFJTVEsb0JBQW9CVCxpQkFKMUI7QUFBQSxRQUtNVSxrQkFBa0JiLGVBTHhCO0FBQUEsUUFNTWMsbUJBQW1CYixnQkFOekI7QUFBQSxRQU9NYyxpQ0FBaUMsSUFBSW5CLDhCQUFKLEVBUHZDO0FBQUEsUUFRTW9CLGlDQUFpQyxJQUFJbkIsOEJBQUosRUFSdkM7QUFBQSxRQVNNb0Isa0NBQWtDLElBQUluQiwrQkFBSixFQVR4QztBQUFBLFFBVU1vQixxQ0FBcUMsSUFBSXZCLGtCQUFKLENBQXVCYSxnQkFBdkIsQ0FWM0M7QUFBQSxRQVdNVyw4Q0FBOEMsSUFBSXhCLGtCQUFKLENBQXVCYyx5QkFBdkIsQ0FYcEQ7QUFBQSxRQVlNVyxpREFBaUQsSUFBSXpCLGtCQUFKLENBQXVCZSw0QkFBdkIsQ0FadkQ7QUFBQSxRQWFNVywyQ0FBMkMsSUFBSTFCLGtCQUFKLENBQXVCZ0Isc0JBQXZCLENBYmpEO0FBQUEsUUFjTVcsc0NBQXNDLElBQUkzQixrQkFBSixDQUF1QmlCLGlCQUF2QixDQWQ1QztBQUFBLFFBZU1XLG9DQUFvQyxJQUFJNUIsa0JBQUosQ0FBdUJrQixlQUF2QixDQWYxQztBQUFBLFFBZ0JNVyxxQ0FBcUMsSUFBSTdCLGtCQUFKLENBQXVCbUIsZ0JBQXZCLENBaEIzQztBQUFBLFFBaUJNVyxPQUFPMUIsWUFqQmI7QUFBQSxRQWtCTTJCLGNBQWMsQ0FDWlgsOEJBRFksRUFFWkMsOEJBRlksRUFHWkMsK0JBSFksRUFJWkMsa0NBSlksRUFLWkMsMkNBTFksRUFNWkMsOENBTlksRUFPWkMsd0NBUFksRUFRWkMsbUNBUlksRUFTWkMsaUNBVFksRUFVWkMsa0NBVlksQ0FsQnBCO0FBQUEsUUE4Qk1HLE9BQU9sQyxRQTlCYjs7QUFEWSwrR0FpQ05nQyxJQWpDTSxFQWlDQUMsV0FqQ0EsRUFpQ2FDLElBakNiO0FBa0NiOzs7RUFuQ29CcEMsSTs7QUFzQ3ZCcUMsT0FBT0MsT0FBUCxHQUFpQnRCLFFBQWpCIiwiZmlsZSI6InBhcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlJyksXG4gICAgICBQYXJ0Tm9kZSA9IHJlcXVpcmUoJy4uL25vZGUvcGFydCcpLFxuICAgICAgcnVsZU5hbWVzID0gcmVxdWlyZSgnLi4vcnVsZU5hbWVzJyksXG4gICAgICBQYXJ0UnVsZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3BhcnRSdWxlJyksXG4gICAgICBOb1doaXRlc3BhY2VQYXJ0UnVsZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3BhcnRSdWxlL25vV2hpdGVzcGFjZScpLFxuICAgICAgR3JvdXBPZlBhcnRzUGFydFJ1bGVEZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vZGVmaW5pdGlvbi9wYXJ0UnVsZS9ncm91cE9mUGFydHMnKSxcbiAgICAgIENob2ljZU9mUGFydHNQYXJ0UnVsZURlZmluaXRpb24gPSByZXF1aXJlKCcuLi9kZWZpbml0aW9uL3BhcnRSdWxlL2Nob2ljZU9mUGFydHMnKTtcblxuY29uc3QgeyBQYXJ0UnVsZU5hbWUsIEVwc2lsb25SdWxlTmFtZSwgV2lsZGNhcmRSdWxlTmFtZSwgUnVsZU5hbWVSdWxlTmFtZSwgRW5kT2ZMaW5lUnVsZU5hbWUsIFRlcm1pbmFsU3ltYm9sUnVsZU5hbWUsIFJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUsIFNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWUgfSA9IHJ1bGVOYW1lcztcblxuY2xhc3MgUGFydFJ1bGUgZXh0ZW5kcyBSdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgcnVsZU5hbWVSdWxlTmFtZSA9IFJ1bGVOYW1lUnVsZU5hbWUsXG4gICAgICAgICAgcmVndWxhckV4cHJlc3Npb25SdWxlTmFtZSA9IFJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUsXG4gICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSA9IFNpZ25pZmljYW50VG9rZW5UeXBlUnVsZU5hbWUsXG4gICAgICAgICAgdGVybWluYWxTeW1ib2xSdWxlTmFtZSA9IFRlcm1pbmFsU3ltYm9sUnVsZU5hbWUsXG4gICAgICAgICAgZW5kT2ZMaW5lUnVsZU5hbWUgPSBFbmRPZkxpbmVSdWxlTmFtZSxcbiAgICAgICAgICBlcHNpbG9uUnVsZU5hbWUgPSBFcHNpbG9uUnVsZU5hbWUsXG4gICAgICAgICAgd2lsZGNhcmRSdWxlTmFtZSA9IFdpbGRjYXJkUnVsZU5hbWUsXG4gICAgICAgICAgbm9XaGl0ZXNwYWNlUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IE5vV2hpdGVzcGFjZVBhcnRSdWxlRGVmaW5pdGlvbigpLFxuICAgICAgICAgIGdyb3VwT2ZQYXJ0c1BhcnRSdWxlRGVmaW5pdGlvbiA9IG5ldyBHcm91cE9mUGFydHNQYXJ0UnVsZURlZmluaXRpb24oKSxcbiAgICAgICAgICBjaG9pY2VPZlBhcnRzUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IENob2ljZU9mUGFydHNQYXJ0UnVsZURlZmluaXRpb24oKSxcbiAgICAgICAgICBydWxlTmFtZVJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IFBhcnRSdWxlRGVmaW5pdGlvbihydWxlTmFtZVJ1bGVOYW1lKSxcbiAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IFBhcnRSdWxlRGVmaW5pdGlvbihyZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lKSxcbiAgICAgICAgICBzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IFBhcnRSdWxlRGVmaW5pdGlvbihzaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lKSxcbiAgICAgICAgICB0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IFBhcnRSdWxlRGVmaW5pdGlvbih0ZXJtaW5hbFN5bWJvbFJ1bGVOYW1lKSxcbiAgICAgICAgICBlbmRPZkxpbmVSdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbiA9IG5ldyBQYXJ0UnVsZURlZmluaXRpb24oZW5kT2ZMaW5lUnVsZU5hbWUpLFxuICAgICAgICAgIGVwc2lsb25SdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbiA9IG5ldyBQYXJ0UnVsZURlZmluaXRpb24oZXBzaWxvblJ1bGVOYW1lKSxcbiAgICAgICAgICB3aWxkY2FyZFJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uID0gbmV3IFBhcnRSdWxlRGVmaW5pdGlvbih3aWxkY2FyZFJ1bGVOYW1lKSxcbiAgICAgICAgICBuYW1lID0gUGFydFJ1bGVOYW1lLFxuICAgICAgICAgIGRlZmluaXRpb25zID0gW1xuICAgICAgICAgICAgbm9XaGl0ZXNwYWNlUGFydFJ1bGVEZWZpbml0aW9uLFxuICAgICAgICAgICAgZ3JvdXBPZlBhcnRzUGFydFJ1bGVEZWZpbml0aW9uLFxuICAgICAgICAgICAgY2hvaWNlT2ZQYXJ0c1BhcnRSdWxlRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHJ1bGVOYW1lUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb24sXG4gICAgICAgICAgICByZWd1bGFyRXhwcmVzc2lvblJ1bGVOYW1lUGFydFJ1bGVEZWZpbml0aW9uLFxuICAgICAgICAgICAgc2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHRlcm1pbmFsU3ltYm9sUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb24sXG4gICAgICAgICAgICBlbmRPZkxpbmVSdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbixcbiAgICAgICAgICAgIGVwc2lsb25SdWxlTmFtZVBhcnRSdWxlRGVmaW5pdGlvbixcbiAgICAgICAgICAgIHdpbGRjYXJkUnVsZU5hbWVQYXJ0UnVsZURlZmluaXRpb25cbiAgICAgICAgICBdLFxuICAgICAgICAgIE5vZGUgPSBQYXJ0Tm9kZTtcbiAgICBcbiAgICBzdXBlcihuYW1lLCBkZWZpbml0aW9ucywgTm9kZSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRSdWxlO1xuIl19