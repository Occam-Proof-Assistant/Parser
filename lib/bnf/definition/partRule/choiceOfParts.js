'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var lexers = require('occam-lexers');

var ruleNames = require('../../ruleNames'),
    Definition = require('../../definition'),
    RuleNamePart = require('../../part/nonTerminal/ruleName'),
    GroupOfPartsPart = require('../../part/nonTerminal/groupOfParts'),
    OneOrMorePartsPart = require('../../part/nonTerminal/oneOrMoreParts'),
    TerminalSymbolPart = require('../../part/terminal/terminalSymbol');

var BNFLexer = lexers.BNFLexer,
    specialSymbols = BNFLexer.specialSymbols,
    verticalBar = specialSymbols.verticalBar,
    openBracket = specialSymbols.openBracket,
    closeBracket = specialSymbols.closeBracket,
    PartRuleName = ruleNames.PartRuleName,
    RightRecursivePartRuleName = ruleNames.RightRecursivePartRuleName;

var ChoiceOfPartsPartRuleDefinition = function (_Definition) {
  _inherits(ChoiceOfPartsPartRuleDefinition, _Definition);

  function ChoiceOfPartsPartRuleDefinition() {
    _classCallCheck(this, ChoiceOfPartsPartRuleDefinition);

    var lookAhead = false,
        noWhitespace = false,
        partRuleName = PartRuleName,
        rightRecursivePartRuleName = RightRecursivePartRuleName,
        verticalBarTerminalSymbolContent = verticalBar,
        openBracketTerminalSymbolContent = openBracket,
        closeBracketTerminalSymbolContent = closeBracket,
        partRuleNamePart = new RuleNamePart(partRuleName, lookAhead, noWhitespace),
        rightRecursivePartRuleNamePart = new RuleNamePart(rightRecursivePartRuleName, lookAhead, noWhitespace),
        verticalBarTerminalSymbolPart = new TerminalSymbolPart(verticalBarTerminalSymbolContent, noWhitespace),
        openBracketTerminalSymbolPart = new TerminalSymbolPart(openBracketTerminalSymbolContent, noWhitespace),
        closeBracketTerminalSymbolPart = new TerminalSymbolPart(closeBracketTerminalSymbolContent, noWhitespace),
        verticalBarTerminalSymbolThenPartRuleNameParts = [verticalBarTerminalSymbolPart, partRuleNamePart],
        groupOfPartsPart = new GroupOfPartsPart(verticalBarTerminalSymbolThenPartRuleNameParts),
        oneOrMoreGroupOfPartsPart = new OneOrMorePartsPart(groupOfPartsPart),
        parts = [openBracketTerminalSymbolPart, partRuleNamePart, oneOrMoreGroupOfPartsPart, closeBracketTerminalSymbolPart, rightRecursivePartRuleNamePart];

    return _possibleConstructorReturn(this, (ChoiceOfPartsPartRuleDefinition.__proto__ || Object.getPrototypeOf(ChoiceOfPartsPartRuleDefinition)).call(this, parts));
  }

  return ChoiceOfPartsPartRuleDefinition;
}(Definition);

module.exports = ChoiceOfPartsPartRuleDefinition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2VzNi9ibmYvZGVmaW5pdGlvbi9wYXJ0UnVsZS9jaG9pY2VPZlBhcnRzLmpzIl0sIm5hbWVzIjpbImxleGVycyIsInJlcXVpcmUiLCJydWxlTmFtZXMiLCJEZWZpbml0aW9uIiwiUnVsZU5hbWVQYXJ0IiwiR3JvdXBPZlBhcnRzUGFydCIsIk9uZU9yTW9yZVBhcnRzUGFydCIsIlRlcm1pbmFsU3ltYm9sUGFydCIsIkJORkxleGVyIiwic3BlY2lhbFN5bWJvbHMiLCJ2ZXJ0aWNhbEJhciIsIm9wZW5CcmFja2V0IiwiY2xvc2VCcmFja2V0IiwiUGFydFJ1bGVOYW1lIiwiUmlnaHRSZWN1cnNpdmVQYXJ0UnVsZU5hbWUiLCJDaG9pY2VPZlBhcnRzUGFydFJ1bGVEZWZpbml0aW9uIiwibG9va0FoZWFkIiwibm9XaGl0ZXNwYWNlIiwicGFydFJ1bGVOYW1lIiwicmlnaHRSZWN1cnNpdmVQYXJ0UnVsZU5hbWUiLCJ2ZXJ0aWNhbEJhclRlcm1pbmFsU3ltYm9sQ29udGVudCIsIm9wZW5CcmFja2V0VGVybWluYWxTeW1ib2xDb250ZW50IiwiY2xvc2VCcmFja2V0VGVybWluYWxTeW1ib2xDb250ZW50IiwicGFydFJ1bGVOYW1lUGFydCIsInJpZ2h0UmVjdXJzaXZlUGFydFJ1bGVOYW1lUGFydCIsInZlcnRpY2FsQmFyVGVybWluYWxTeW1ib2xQYXJ0Iiwib3BlbkJyYWNrZXRUZXJtaW5hbFN5bWJvbFBhcnQiLCJjbG9zZUJyYWNrZXRUZXJtaW5hbFN5bWJvbFBhcnQiLCJ2ZXJ0aWNhbEJhclRlcm1pbmFsU3ltYm9sVGhlblBhcnRSdWxlTmFtZVBhcnRzIiwiZ3JvdXBPZlBhcnRzUGFydCIsIm9uZU9yTW9yZUdyb3VwT2ZQYXJ0c1BhcnQiLCJwYXJ0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBLElBQU1BLFNBQVNDLFFBQVEsY0FBUixDQUFmOztBQUVBLElBQU1DLFlBQVlELFFBQVEsaUJBQVIsQ0FBbEI7QUFBQSxJQUNNRSxhQUFhRixRQUFRLGtCQUFSLENBRG5CO0FBQUEsSUFFTUcsZUFBZUgsUUFBUSxpQ0FBUixDQUZyQjtBQUFBLElBR01JLG1CQUFtQkosUUFBUSxxQ0FBUixDQUh6QjtBQUFBLElBSU1LLHFCQUFxQkwsUUFBUSx1Q0FBUixDQUozQjtBQUFBLElBS01NLHFCQUFxQk4sUUFBUSxvQ0FBUixDQUwzQjs7QUFPTSxJQUFFTyxRQUFGLEdBQWVSLE1BQWYsQ0FBRVEsUUFBRjtBQUFBLElBQ0VDLGNBREYsR0FDcUJELFFBRHJCLENBQ0VDLGNBREY7QUFBQSxJQUVFQyxXQUZGLEdBRTZDRCxjQUY3QyxDQUVFQyxXQUZGO0FBQUEsSUFFZUMsV0FGZixHQUU2Q0YsY0FGN0MsQ0FFZUUsV0FGZjtBQUFBLElBRTRCQyxZQUY1QixHQUU2Q0gsY0FGN0MsQ0FFNEJHLFlBRjVCO0FBQUEsSUFHRUMsWUFIRixHQUcrQ1gsU0FIL0MsQ0FHRVcsWUFIRjtBQUFBLElBR2dCQywwQkFIaEIsR0FHK0NaLFNBSC9DLENBR2dCWSwwQkFIaEI7O0lBS0FDLCtCOzs7QUFDSiw2Q0FBYztBQUFBOztBQUNaLFFBQU1DLFlBQVksS0FBbEI7QUFBQSxRQUNNQyxlQUFlLEtBRHJCO0FBQUEsUUFFTUMsZUFBZUwsWUFGckI7QUFBQSxRQUdNTSw2QkFBNkJMLDBCQUhuQztBQUFBLFFBSU1NLG1DQUFtQ1YsV0FKekM7QUFBQSxRQUtNVyxtQ0FBbUNWLFdBTHpDO0FBQUEsUUFNTVcsb0NBQW9DVixZQU4xQztBQUFBLFFBT01XLG1CQUFtQixJQUFJbkIsWUFBSixDQUFpQmMsWUFBakIsRUFBK0JGLFNBQS9CLEVBQTBDQyxZQUExQyxDQVB6QjtBQUFBLFFBUU1PLGlDQUFpQyxJQUFJcEIsWUFBSixDQUFpQmUsMEJBQWpCLEVBQTZDSCxTQUE3QyxFQUF3REMsWUFBeEQsQ0FSdkM7QUFBQSxRQVNNUSxnQ0FBZ0MsSUFBSWxCLGtCQUFKLENBQXVCYSxnQ0FBdkIsRUFBeURILFlBQXpELENBVHRDO0FBQUEsUUFVTVMsZ0NBQWdDLElBQUluQixrQkFBSixDQUF1QmMsZ0NBQXZCLEVBQXlESixZQUF6RCxDQVZ0QztBQUFBLFFBV01VLGlDQUFpQyxJQUFJcEIsa0JBQUosQ0FBdUJlLGlDQUF2QixFQUEwREwsWUFBMUQsQ0FYdkM7QUFBQSxRQVlNVyxpREFBaUQsQ0FDL0NILDZCQUQrQyxFQUUvQ0YsZ0JBRitDLENBWnZEO0FBQUEsUUFnQk1NLG1CQUFtQixJQUFJeEIsZ0JBQUosQ0FBcUJ1Qiw4Q0FBckIsQ0FoQnpCO0FBQUEsUUFpQk1FLDRCQUE0QixJQUFJeEIsa0JBQUosQ0FBdUJ1QixnQkFBdkIsQ0FqQmxDO0FBQUEsUUFrQk1FLFFBQVEsQ0FDTkwsNkJBRE0sRUFFTkgsZ0JBRk0sRUFHTk8seUJBSE0sRUFJTkgsOEJBSk0sRUFLTkgsOEJBTE0sQ0FsQmQ7O0FBRFksNkpBMkJOTyxLQTNCTTtBQTRCYjs7O0VBN0IyQzVCLFU7O0FBZ0M5QzZCLE9BQU9DLE9BQVAsR0FBaUJsQiwrQkFBakIiLCJmaWxlIjoiY2hvaWNlT2ZQYXJ0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyk7XG5cbmNvbnN0IHJ1bGVOYW1lcyA9IHJlcXVpcmUoJy4uLy4uL3J1bGVOYW1lcycpLFxuICAgICAgRGVmaW5pdGlvbiA9IHJlcXVpcmUoJy4uLy4uL2RlZmluaXRpb24nKSxcbiAgICAgIFJ1bGVOYW1lUGFydCA9IHJlcXVpcmUoJy4uLy4uL3BhcnQvbm9uVGVybWluYWwvcnVsZU5hbWUnKSxcbiAgICAgIEdyb3VwT2ZQYXJ0c1BhcnQgPSByZXF1aXJlKCcuLi8uLi9wYXJ0L25vblRlcm1pbmFsL2dyb3VwT2ZQYXJ0cycpLFxuICAgICAgT25lT3JNb3JlUGFydHNQYXJ0ID0gcmVxdWlyZSgnLi4vLi4vcGFydC9ub25UZXJtaW5hbC9vbmVPck1vcmVQYXJ0cycpLFxuICAgICAgVGVybWluYWxTeW1ib2xQYXJ0ID0gcmVxdWlyZSgnLi4vLi4vcGFydC90ZXJtaW5hbC90ZXJtaW5hbFN5bWJvbCcpO1xuXG5jb25zdCB7IEJORkxleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IHNwZWNpYWxTeW1ib2xzIH0gPSBCTkZMZXhlcixcbiAgICAgIHsgdmVydGljYWxCYXIsIG9wZW5CcmFja2V0LCBjbG9zZUJyYWNrZXQgfSA9IHNwZWNpYWxTeW1ib2xzLFxuICAgICAgeyBQYXJ0UnVsZU5hbWUsIFJpZ2h0UmVjdXJzaXZlUGFydFJ1bGVOYW1lIH0gPSBydWxlTmFtZXM7XG5cbmNsYXNzIENob2ljZU9mUGFydHNQYXJ0UnVsZURlZmluaXRpb24gZXh0ZW5kcyBEZWZpbml0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgbG9va0FoZWFkID0gZmFsc2UsXG4gICAgICAgICAgbm9XaGl0ZXNwYWNlID0gZmFsc2UsXG4gICAgICAgICAgcGFydFJ1bGVOYW1lID0gUGFydFJ1bGVOYW1lLFxuICAgICAgICAgIHJpZ2h0UmVjdXJzaXZlUGFydFJ1bGVOYW1lID0gUmlnaHRSZWN1cnNpdmVQYXJ0UnVsZU5hbWUsXG4gICAgICAgICAgdmVydGljYWxCYXJUZXJtaW5hbFN5bWJvbENvbnRlbnQgPSB2ZXJ0aWNhbEJhcixcbiAgICAgICAgICBvcGVuQnJhY2tldFRlcm1pbmFsU3ltYm9sQ29udGVudCA9IG9wZW5CcmFja2V0LFxuICAgICAgICAgIGNsb3NlQnJhY2tldFRlcm1pbmFsU3ltYm9sQ29udGVudCA9IGNsb3NlQnJhY2tldCxcbiAgICAgICAgICBwYXJ0UnVsZU5hbWVQYXJ0ID0gbmV3IFJ1bGVOYW1lUGFydChwYXJ0UnVsZU5hbWUsIGxvb2tBaGVhZCwgbm9XaGl0ZXNwYWNlKSxcbiAgICAgICAgICByaWdodFJlY3Vyc2l2ZVBhcnRSdWxlTmFtZVBhcnQgPSBuZXcgUnVsZU5hbWVQYXJ0KHJpZ2h0UmVjdXJzaXZlUGFydFJ1bGVOYW1lLCBsb29rQWhlYWQsIG5vV2hpdGVzcGFjZSksXG4gICAgICAgICAgdmVydGljYWxCYXJUZXJtaW5hbFN5bWJvbFBhcnQgPSBuZXcgVGVybWluYWxTeW1ib2xQYXJ0KHZlcnRpY2FsQmFyVGVybWluYWxTeW1ib2xDb250ZW50LCBub1doaXRlc3BhY2UpLFxuICAgICAgICAgIG9wZW5CcmFja2V0VGVybWluYWxTeW1ib2xQYXJ0ID0gbmV3IFRlcm1pbmFsU3ltYm9sUGFydChvcGVuQnJhY2tldFRlcm1pbmFsU3ltYm9sQ29udGVudCwgbm9XaGl0ZXNwYWNlKSxcbiAgICAgICAgICBjbG9zZUJyYWNrZXRUZXJtaW5hbFN5bWJvbFBhcnQgPSBuZXcgVGVybWluYWxTeW1ib2xQYXJ0KGNsb3NlQnJhY2tldFRlcm1pbmFsU3ltYm9sQ29udGVudCwgbm9XaGl0ZXNwYWNlKSxcbiAgICAgICAgICB2ZXJ0aWNhbEJhclRlcm1pbmFsU3ltYm9sVGhlblBhcnRSdWxlTmFtZVBhcnRzID0gW1xuICAgICAgICAgICAgdmVydGljYWxCYXJUZXJtaW5hbFN5bWJvbFBhcnQsXG4gICAgICAgICAgICBwYXJ0UnVsZU5hbWVQYXJ0XG4gICAgICAgICAgXSxcbiAgICAgICAgICBncm91cE9mUGFydHNQYXJ0ID0gbmV3IEdyb3VwT2ZQYXJ0c1BhcnQodmVydGljYWxCYXJUZXJtaW5hbFN5bWJvbFRoZW5QYXJ0UnVsZU5hbWVQYXJ0cyksXG4gICAgICAgICAgb25lT3JNb3JlR3JvdXBPZlBhcnRzUGFydCA9IG5ldyBPbmVPck1vcmVQYXJ0c1BhcnQoZ3JvdXBPZlBhcnRzUGFydCksXG4gICAgICAgICAgcGFydHMgPSBbXG4gICAgICAgICAgICBvcGVuQnJhY2tldFRlcm1pbmFsU3ltYm9sUGFydCxcbiAgICAgICAgICAgIHBhcnRSdWxlTmFtZVBhcnQsXG4gICAgICAgICAgICBvbmVPck1vcmVHcm91cE9mUGFydHNQYXJ0LFxuICAgICAgICAgICAgY2xvc2VCcmFja2V0VGVybWluYWxTeW1ib2xQYXJ0LFxuICAgICAgICAgICAgcmlnaHRSZWN1cnNpdmVQYXJ0UnVsZU5hbWVQYXJ0XG4gICAgICAgICAgXTtcbiAgICBcbiAgICBzdXBlcihwYXJ0cylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENob2ljZU9mUGFydHNQYXJ0UnVsZURlZmluaXRpb247XG4iXX0=