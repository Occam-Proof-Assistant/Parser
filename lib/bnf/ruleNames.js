"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignificantTokenTypeRuleName = exports.ZeroOrMoreQuantifierRuleName = exports.OneOrMoreQuantifierRuleName = exports.OptionalQuantifierRuleName = exports.RegularExpressionRuleName = exports.LookAheadModifierRuleName = exports.NoWhitespacePartRuleName = exports.SequenceOfPartsRuleName = exports.NonTerminalPartRuleName = exports.TerminalSymbolRuleName = exports.ChoiceOfPartsRuleName = exports.TerminalPartRuleName = exports.DefinitionsRuleName = exports.QuantifierRuleName = exports.DefinitionRuleName = exports.EndOfLineRuleName = exports.WildcardRuleName = exports.DocumentRuleName = exports.RuleNameRuleName = exports.EpsilonRuleName = exports.ErrorRuleName = exports.RuleRuleName = exports.PartRuleName = exports.NameRuleName = void 0;
var NameRuleName = "name";
exports.NameRuleName = NameRuleName;
var PartRuleName = "part";
exports.PartRuleName = PartRuleName;
var RuleRuleName = "rule";
exports.RuleRuleName = RuleRuleName;
var ErrorRuleName = "error";
exports.ErrorRuleName = ErrorRuleName;
var EpsilonRuleName = "epsilon";
exports.EpsilonRuleName = EpsilonRuleName;
var RuleNameRuleName = "ruleName";
exports.RuleNameRuleName = RuleNameRuleName;
var DocumentRuleName = "document";
exports.DocumentRuleName = DocumentRuleName;
var WildcardRuleName = "wildcard";
exports.WildcardRuleName = WildcardRuleName;
var EndOfLineRuleName = "endOfLine";
exports.EndOfLineRuleName = EndOfLineRuleName;
var DefinitionRuleName = "definition";
exports.DefinitionRuleName = DefinitionRuleName;
var QuantifierRuleName = "quantifier";
exports.QuantifierRuleName = QuantifierRuleName;
var DefinitionsRuleName = "definitions";
exports.DefinitionsRuleName = DefinitionsRuleName;
var TerminalPartRuleName = "terminalPart";
exports.TerminalPartRuleName = TerminalPartRuleName;
var ChoiceOfPartsRuleName = "choiceOfParts";
exports.ChoiceOfPartsRuleName = ChoiceOfPartsRuleName;
var TerminalSymbolRuleName = "terminalSymbol";
exports.TerminalSymbolRuleName = TerminalSymbolRuleName;
var NonTerminalPartRuleName = "nonTerminalPart";
exports.NonTerminalPartRuleName = NonTerminalPartRuleName;
var SequenceOfPartsRuleName = "sequenceOfParts";
exports.SequenceOfPartsRuleName = SequenceOfPartsRuleName;
var NoWhitespacePartRuleName = "noWhitespacePart";
exports.NoWhitespacePartRuleName = NoWhitespacePartRuleName;
var LookAheadModifierRuleName = "lookAheadModifier";
exports.LookAheadModifierRuleName = LookAheadModifierRuleName;
var RegularExpressionRuleName = "regularExpression";
exports.RegularExpressionRuleName = RegularExpressionRuleName;
var OptionalQuantifierRuleName = "optionalQuantifier";
exports.OptionalQuantifierRuleName = OptionalQuantifierRuleName;
var OneOrMoreQuantifierRuleName = "oneOrMoreQuantifier";
exports.OneOrMoreQuantifierRuleName = OneOrMoreQuantifierRuleName;
var ZeroOrMoreQuantifierRuleName = "zeroOrMoreQuantifier";
exports.ZeroOrMoreQuantifierRuleName = ZeroOrMoreQuantifierRuleName;
var SignificantTokenTypeRuleName = "significantTokenType";
exports.SignificantTokenTypeRuleName = SignificantTokenTypeRuleName;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ibmYvcnVsZU5hbWVzLmpzIl0sIm5hbWVzIjpbIk5hbWVSdWxlTmFtZSIsIlBhcnRSdWxlTmFtZSIsIlJ1bGVSdWxlTmFtZSIsIkVycm9yUnVsZU5hbWUiLCJFcHNpbG9uUnVsZU5hbWUiLCJSdWxlTmFtZVJ1bGVOYW1lIiwiRG9jdW1lbnRSdWxlTmFtZSIsIldpbGRjYXJkUnVsZU5hbWUiLCJFbmRPZkxpbmVSdWxlTmFtZSIsIkRlZmluaXRpb25SdWxlTmFtZSIsIlF1YW50aWZpZXJSdWxlTmFtZSIsIkRlZmluaXRpb25zUnVsZU5hbWUiLCJUZXJtaW5hbFBhcnRSdWxlTmFtZSIsIkNob2ljZU9mUGFydHNSdWxlTmFtZSIsIlRlcm1pbmFsU3ltYm9sUnVsZU5hbWUiLCJOb25UZXJtaW5hbFBhcnRSdWxlTmFtZSIsIlNlcXVlbmNlT2ZQYXJ0c1J1bGVOYW1lIiwiTm9XaGl0ZXNwYWNlUGFydFJ1bGVOYW1lIiwiTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSIsIlJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUiLCJPcHRpb25hbFF1YW50aWZpZXJSdWxlTmFtZSIsIk9uZU9yTW9yZVF1YW50aWZpZXJSdWxlTmFtZSIsIlplcm9Pck1vcmVRdWFudGlmaWVyUnVsZU5hbWUiLCJTaWduaWZpY2FudFRva2VuVHlwZVJ1bGVOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7OztBQUVMLEdBQUssQ0FBQyxZQUFZLEdBQUcsQ0FBTTtRQUFyQixZQUFZLEdBQVosWUFBWTtBQUNsQixHQUFLLENBQUMsWUFBWSxHQUFHLENBQU07UUFBckIsWUFBWSxHQUFaLFlBQVk7QUFDbEIsR0FBSyxDQUFDLFlBQVksR0FBRyxDQUFNO1FBQXJCLFlBQVksR0FBWixZQUFZO0FBQ2xCLEdBQUssQ0FBQyxhQUFhLEdBQUcsQ0FBTztRQUF2QixhQUFhLEdBQWIsYUFBYTtBQUNuQixHQUFLLENBQUMsZUFBZSxHQUFHLENBQVM7UUFBM0IsZUFBZSxHQUFmLGVBQWU7QUFDckIsR0FBSyxDQUFDLGdCQUFnQixHQUFHLENBQVU7UUFBN0IsZ0JBQWdCLEdBQWhCLGdCQUFnQjtBQUN0QixHQUFLLENBQUMsZ0JBQWdCLEdBQUcsQ0FBVTtRQUE3QixnQkFBZ0IsR0FBaEIsZ0JBQWdCO0FBQ3RCLEdBQUssQ0FBQyxnQkFBZ0IsR0FBRyxDQUFVO1FBQTdCLGdCQUFnQixHQUFoQixnQkFBZ0I7QUFDdEIsR0FBSyxDQUFDLGlCQUFpQixHQUFHLENBQVc7UUFBL0IsaUJBQWlCLEdBQWpCLGlCQUFpQjtBQUN2QixHQUFLLENBQUMsa0JBQWtCLEdBQUcsQ0FBWTtRQUFqQyxrQkFBa0IsR0FBbEIsa0JBQWtCO0FBQ3hCLEdBQUssQ0FBQyxrQkFBa0IsR0FBRyxDQUFZO1FBQWpDLGtCQUFrQixHQUFsQixrQkFBa0I7QUFDeEIsR0FBSyxDQUFDLG1CQUFtQixHQUFHLENBQWE7UUFBbkMsbUJBQW1CLEdBQW5CLG1CQUFtQjtBQUN6QixHQUFLLENBQUMsb0JBQW9CLEdBQUcsQ0FBYztRQUFyQyxvQkFBb0IsR0FBcEIsb0JBQW9CO0FBQzFCLEdBQUssQ0FBQyxxQkFBcUIsR0FBRyxDQUFlO1FBQXZDLHFCQUFxQixHQUFyQixxQkFBcUI7QUFDM0IsR0FBSyxDQUFDLHNCQUFzQixHQUFHLENBQWdCO1FBQXpDLHNCQUFzQixHQUF0QixzQkFBc0I7QUFDNUIsR0FBSyxDQUFDLHVCQUF1QixHQUFHLENBQWlCO1FBQTNDLHVCQUF1QixHQUF2Qix1QkFBdUI7QUFDN0IsR0FBSyxDQUFDLHVCQUF1QixHQUFHLENBQWlCO1FBQTNDLHVCQUF1QixHQUF2Qix1QkFBdUI7QUFDN0IsR0FBSyxDQUFDLHdCQUF3QixHQUFHLENBQWtCO1FBQTdDLHdCQUF3QixHQUF4Qix3QkFBd0I7QUFDOUIsR0FBSyxDQUFDLHlCQUF5QixHQUFHLENBQW1CO1FBQS9DLHlCQUF5QixHQUF6Qix5QkFBeUI7QUFDL0IsR0FBSyxDQUFDLHlCQUF5QixHQUFHLENBQW1CO1FBQS9DLHlCQUF5QixHQUF6Qix5QkFBeUI7QUFDL0IsR0FBSyxDQUFDLDBCQUEwQixHQUFHLENBQW9CO1FBQWpELDBCQUEwQixHQUExQiwwQkFBMEI7QUFDaEMsR0FBSyxDQUFDLDJCQUEyQixHQUFHLENBQXFCO1FBQW5ELDJCQUEyQixHQUEzQiwyQkFBMkI7QUFDakMsR0FBSyxDQUFDLDRCQUE0QixHQUFHLENBQXNCO1FBQXJELDRCQUE0QixHQUE1Qiw0QkFBNEI7QUFDbEMsR0FBSyxDQUFDLDRCQUE0QixHQUFHLENBQXNCO1FBQXJELDRCQUE0QixHQUE1Qiw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGNvbnN0IE5hbWVSdWxlTmFtZSA9IFwibmFtZVwiO1xuZXhwb3J0IGNvbnN0IFBhcnRSdWxlTmFtZSA9IFwicGFydFwiO1xuZXhwb3J0IGNvbnN0IFJ1bGVSdWxlTmFtZSA9IFwicnVsZVwiO1xuZXhwb3J0IGNvbnN0IEVycm9yUnVsZU5hbWUgPSBcImVycm9yXCI7XG5leHBvcnQgY29uc3QgRXBzaWxvblJ1bGVOYW1lID0gXCJlcHNpbG9uXCI7XG5leHBvcnQgY29uc3QgUnVsZU5hbWVSdWxlTmFtZSA9IFwicnVsZU5hbWVcIjtcbmV4cG9ydCBjb25zdCBEb2N1bWVudFJ1bGVOYW1lID0gXCJkb2N1bWVudFwiO1xuZXhwb3J0IGNvbnN0IFdpbGRjYXJkUnVsZU5hbWUgPSBcIndpbGRjYXJkXCI7XG5leHBvcnQgY29uc3QgRW5kT2ZMaW5lUnVsZU5hbWUgPSBcImVuZE9mTGluZVwiO1xuZXhwb3J0IGNvbnN0IERlZmluaXRpb25SdWxlTmFtZSA9IFwiZGVmaW5pdGlvblwiO1xuZXhwb3J0IGNvbnN0IFF1YW50aWZpZXJSdWxlTmFtZSA9IFwicXVhbnRpZmllclwiO1xuZXhwb3J0IGNvbnN0IERlZmluaXRpb25zUnVsZU5hbWUgPSBcImRlZmluaXRpb25zXCI7XG5leHBvcnQgY29uc3QgVGVybWluYWxQYXJ0UnVsZU5hbWUgPSBcInRlcm1pbmFsUGFydFwiO1xuZXhwb3J0IGNvbnN0IENob2ljZU9mUGFydHNSdWxlTmFtZSA9IFwiY2hvaWNlT2ZQYXJ0c1wiO1xuZXhwb3J0IGNvbnN0IFRlcm1pbmFsU3ltYm9sUnVsZU5hbWUgPSBcInRlcm1pbmFsU3ltYm9sXCI7XG5leHBvcnQgY29uc3QgTm9uVGVybWluYWxQYXJ0UnVsZU5hbWUgPSBcIm5vblRlcm1pbmFsUGFydFwiO1xuZXhwb3J0IGNvbnN0IFNlcXVlbmNlT2ZQYXJ0c1J1bGVOYW1lID0gXCJzZXF1ZW5jZU9mUGFydHNcIjtcbmV4cG9ydCBjb25zdCBOb1doaXRlc3BhY2VQYXJ0UnVsZU5hbWUgPSBcIm5vV2hpdGVzcGFjZVBhcnRcIjtcbmV4cG9ydCBjb25zdCBMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lID0gXCJsb29rQWhlYWRNb2RpZmllclwiO1xuZXhwb3J0IGNvbnN0IFJlZ3VsYXJFeHByZXNzaW9uUnVsZU5hbWUgPSBcInJlZ3VsYXJFeHByZXNzaW9uXCI7XG5leHBvcnQgY29uc3QgT3B0aW9uYWxRdWFudGlmaWVyUnVsZU5hbWUgPSBcIm9wdGlvbmFsUXVhbnRpZmllclwiO1xuZXhwb3J0IGNvbnN0IE9uZU9yTW9yZVF1YW50aWZpZXJSdWxlTmFtZSA9IFwib25lT3JNb3JlUXVhbnRpZmllclwiO1xuZXhwb3J0IGNvbnN0IFplcm9Pck1vcmVRdWFudGlmaWVyUnVsZU5hbWUgPSBcInplcm9Pck1vcmVRdWFudGlmaWVyXCI7XG5leHBvcnQgY29uc3QgU2lnbmlmaWNhbnRUb2tlblR5cGVSdWxlTmFtZSA9IFwic2lnbmlmaWNhbnRUb2tlblR5cGVcIjtcblxuIl19