'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easy = require('easy'),
    lexers = require('occam-lexers');

var Example = require('../example'),
    grammar = require('../florence/grammar'),
    mappings = require('../florence/mappings'),
    FlorenceParser = require('../florence/parser');

var Checkbox = easy.Checkbox,
    Textarea = easy.Textarea,
    FlorenceLexer = lexers.FlorenceLexer;


var mappingsCheckboxSelector = '#mappings',
    productionNameTextareaSelector = '#productionName',
    adjustedBNFGrammarTextareaSelector = 'textarea#adjustedBNFGrammar';

var florenceLexer = FlorenceLexer.fromNothing();

var productionName = void 0,
    mappingsCheckbox = void 0,
    productionNameTextarea = void 0,
    adjustedBNFGrammarTextarea = void 0;

var FlorenceExample = function () {
  function FlorenceExample() {
    _classCallCheck(this, FlorenceExample);
  }

  _createClass(FlorenceExample, null, [{
    key: 'run',
    value: function run() {
      mappingsCheckbox = new Checkbox(mappingsCheckboxSelector);
      productionNameTextarea = new Textarea(productionNameTextareaSelector);
      adjustedBNFGrammarTextarea = new Textarea(adjustedBNFGrammarTextareaSelector);

      mappingsCheckbox.onChange(update);

      productionNameTextarea.onKeyUp(update);

      Example.onContentTextareaKeyUp(update);

      update();
    }
  }]);

  return FlorenceExample;
}();

module.exports = FlorenceExample;

function update() {
  var mappingsCheckboxChecked = mappingsCheckbox.isChecked();

  if (mappingsCheckboxChecked) {
    var productionNameTextareaValue = productionNameTextarea.getValue(),
        _productionName = productionNameTextareaValue,
        ///
    _mappings = {},
        florenceParser = FlorenceParser.fromGrammarAndMappings(grammar, _mappings),
        production = florenceParser.findProduction(_productionName);

    updateAdjustedBNFGrammar(florenceParser);

    Example.updateParseTreeTextarea(florenceLexer, florenceParser, production);
  } else {
    var _florenceParser = FlorenceParser.fromGrammarAndMappings(grammar, mappings);

    updateAdjustedBNFGrammar(_florenceParser);

    Example.updateParseTreeTextarea(florenceLexer, _florenceParser);
  }
}

function updateAdjustedBNFGrammar(florenceParser) {
  var florenceParserString = florenceParser.toString(),
      adjustedBNFGrammarTextareaValue = florenceParserString; ///

  adjustedBNFGrammarTextarea.setValue(adjustedBNFGrammarTextareaValue);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9mbG9yZW5jZS5qcyJdLCJuYW1lcyI6WyJlYXN5IiwicmVxdWlyZSIsImxleGVycyIsIkV4YW1wbGUiLCJncmFtbWFyIiwibWFwcGluZ3MiLCJGbG9yZW5jZVBhcnNlciIsIkNoZWNrYm94IiwiVGV4dGFyZWEiLCJGbG9yZW5jZUxleGVyIiwibWFwcGluZ3NDaGVja2JveFNlbGVjdG9yIiwicHJvZHVjdGlvbk5hbWVUZXh0YXJlYVNlbGVjdG9yIiwiYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWFTZWxlY3RvciIsImZsb3JlbmNlTGV4ZXIiLCJmcm9tTm90aGluZyIsInByb2R1Y3Rpb25OYW1lIiwibWFwcGluZ3NDaGVja2JveCIsInByb2R1Y3Rpb25OYW1lVGV4dGFyZWEiLCJhZGp1c3RlZEJORkdyYW1tYXJUZXh0YXJlYSIsIkZsb3JlbmNlRXhhbXBsZSIsIm9uQ2hhbmdlIiwidXBkYXRlIiwib25LZXlVcCIsIm9uQ29udGVudFRleHRhcmVhS2V5VXAiLCJtb2R1bGUiLCJleHBvcnRzIiwibWFwcGluZ3NDaGVja2JveENoZWNrZWQiLCJpc0NoZWNrZWQiLCJwcm9kdWN0aW9uTmFtZVRleHRhcmVhVmFsdWUiLCJnZXRWYWx1ZSIsImZsb3JlbmNlUGFyc2VyIiwiZnJvbUdyYW1tYXJBbmRNYXBwaW5ncyIsInByb2R1Y3Rpb24iLCJmaW5kUHJvZHVjdGlvbiIsInVwZGF0ZUFkanVzdGVkQk5GR3JhbW1hciIsInVwZGF0ZVBhcnNlVHJlZVRleHRhcmVhIiwiZmxvcmVuY2VQYXJzZXJTdHJpbmciLCJ0b1N0cmluZyIsImFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhVmFsdWUiLCJzZXRWYWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsTUFBUixDQUFiO0FBQUEsSUFDTUMsU0FBU0QsUUFBUSxjQUFSLENBRGY7O0FBR0EsSUFBTUUsVUFBVUYsUUFBUSxZQUFSLENBQWhCO0FBQUEsSUFDTUcsVUFBVUgsUUFBUSxxQkFBUixDQURoQjtBQUFBLElBRU1JLFdBQVdKLFFBQVEsc0JBQVIsQ0FGakI7QUFBQSxJQUdNSyxpQkFBaUJMLFFBQVEsb0JBQVIsQ0FIdkI7O0lBS1FNLFEsR0FBdUJQLEksQ0FBdkJPLFE7SUFBVUMsUSxHQUFhUixJLENBQWJRLFE7SUFDVkMsYSxHQUFrQlAsTSxDQUFsQk8sYTs7O0FBRVIsSUFBTUMsMkJBQTJCLFdBQWpDO0FBQUEsSUFDTUMsaUNBQWlDLGlCQUR2QztBQUFBLElBRU1DLHFDQUFxQyw2QkFGM0M7O0FBSUEsSUFBTUMsZ0JBQWdCSixjQUFjSyxXQUFkLEVBQXRCOztBQUVBLElBQUlDLHVCQUFKO0FBQUEsSUFDSUMseUJBREo7QUFBQSxJQUVJQywrQkFGSjtBQUFBLElBR0lDLG1DQUhKOztJQUtNQyxlOzs7Ozs7OzBCQUNTO0FBQ1hILHlCQUFtQixJQUFJVCxRQUFKLENBQWFHLHdCQUFiLENBQW5CO0FBQ0FPLCtCQUF5QixJQUFJVCxRQUFKLENBQWFHLDhCQUFiLENBQXpCO0FBQ0FPLG1DQUE2QixJQUFJVixRQUFKLENBQWFJLGtDQUFiLENBQTdCOztBQUVBSSx1QkFBaUJJLFFBQWpCLENBQTBCQyxNQUExQjs7QUFFQUosNkJBQXVCSyxPQUF2QixDQUErQkQsTUFBL0I7O0FBRUFsQixjQUFRb0Isc0JBQVIsQ0FBK0JGLE1BQS9COztBQUVBQTtBQUNEOzs7Ozs7QUFHSEcsT0FBT0MsT0FBUCxHQUFpQk4sZUFBakI7O0FBRUEsU0FBU0UsTUFBVCxHQUFrQjtBQUNoQixNQUFNSywwQkFBMEJWLGlCQUFpQlcsU0FBakIsRUFBaEM7O0FBRUEsTUFBSUQsdUJBQUosRUFBNkI7QUFDM0IsUUFBTUUsOEJBQThCWCx1QkFBdUJZLFFBQXZCLEVBQXBDO0FBQUEsUUFDTWQsa0JBQWlCYSwyQkFEdkI7QUFBQSxRQUNvRDtBQUM5Q3ZCLGdCQUFXLEVBRmpCO0FBQUEsUUFHTXlCLGlCQUFpQnhCLGVBQWV5QixzQkFBZixDQUFzQzNCLE9BQXRDLEVBQStDQyxTQUEvQyxDQUh2QjtBQUFBLFFBSU0yQixhQUFhRixlQUFlRyxjQUFmLENBQThCbEIsZUFBOUIsQ0FKbkI7O0FBTUFtQiw2QkFBeUJKLGNBQXpCOztBQUVBM0IsWUFBUWdDLHVCQUFSLENBQWdDdEIsYUFBaEMsRUFBK0NpQixjQUEvQyxFQUErREUsVUFBL0Q7QUFDRCxHQVZELE1BVU87QUFDTCxRQUFNRixrQkFBaUJ4QixlQUFleUIsc0JBQWYsQ0FBc0MzQixPQUF0QyxFQUErQ0MsUUFBL0MsQ0FBdkI7O0FBRUE2Qiw2QkFBeUJKLGVBQXpCOztBQUVBM0IsWUFBUWdDLHVCQUFSLENBQWdDdEIsYUFBaEMsRUFBK0NpQixlQUEvQztBQUNEO0FBQ0Y7O0FBRUQsU0FBU0ksd0JBQVQsQ0FBa0NKLGNBQWxDLEVBQWtEO0FBQ2hELE1BQU1NLHVCQUF1Qk4sZUFBZU8sUUFBZixFQUE3QjtBQUFBLE1BQ01DLGtDQUFrQ0Ysb0JBRHhDLENBRGdELENBRWU7O0FBRS9EbEIsNkJBQTJCcUIsUUFBM0IsQ0FBb0NELCtCQUFwQztBQUNEIiwiZmlsZSI6ImZsb3JlbmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBlYXN5ID0gcmVxdWlyZSgnZWFzeScpLFxuICAgICAgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyk7XG5cbmNvbnN0IEV4YW1wbGUgPSByZXF1aXJlKCcuLi9leGFtcGxlJyksXG4gICAgICBncmFtbWFyID0gcmVxdWlyZSgnLi4vZmxvcmVuY2UvZ3JhbW1hcicpLFxuICAgICAgbWFwcGluZ3MgPSByZXF1aXJlKCcuLi9mbG9yZW5jZS9tYXBwaW5ncycpLFxuICAgICAgRmxvcmVuY2VQYXJzZXIgPSByZXF1aXJlKCcuLi9mbG9yZW5jZS9wYXJzZXInKTtcblxuY29uc3QgeyBDaGVja2JveCwgVGV4dGFyZWEgfSA9IGVhc3ksXG4gICAgICB7IEZsb3JlbmNlTGV4ZXIgfSA9IGxleGVycztcblxuY29uc3QgbWFwcGluZ3NDaGVja2JveFNlbGVjdG9yID0gJyNtYXBwaW5ncycsXG4gICAgICBwcm9kdWN0aW9uTmFtZVRleHRhcmVhU2VsZWN0b3IgPSAnI3Byb2R1Y3Rpb25OYW1lJyxcbiAgICAgIGFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhU2VsZWN0b3IgPSAndGV4dGFyZWEjYWRqdXN0ZWRCTkZHcmFtbWFyJztcblxuY29uc3QgZmxvcmVuY2VMZXhlciA9IEZsb3JlbmNlTGV4ZXIuZnJvbU5vdGhpbmcoKTtcblxubGV0IHByb2R1Y3Rpb25OYW1lLFxuICAgIG1hcHBpbmdzQ2hlY2tib3gsXG4gICAgcHJvZHVjdGlvbk5hbWVUZXh0YXJlYSxcbiAgICBhZGp1c3RlZEJORkdyYW1tYXJUZXh0YXJlYTtcblxuY2xhc3MgRmxvcmVuY2VFeGFtcGxlIHtcbiAgc3RhdGljIHJ1bigpIHtcbiAgICBtYXBwaW5nc0NoZWNrYm94ID0gbmV3IENoZWNrYm94KG1hcHBpbmdzQ2hlY2tib3hTZWxlY3Rvcik7XG4gICAgcHJvZHVjdGlvbk5hbWVUZXh0YXJlYSA9IG5ldyBUZXh0YXJlYShwcm9kdWN0aW9uTmFtZVRleHRhcmVhU2VsZWN0b3IpO1xuICAgIGFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhID0gbmV3IFRleHRhcmVhKGFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhU2VsZWN0b3IpO1xuXG4gICAgbWFwcGluZ3NDaGVja2JveC5vbkNoYW5nZSh1cGRhdGUpO1xuXG4gICAgcHJvZHVjdGlvbk5hbWVUZXh0YXJlYS5vbktleVVwKHVwZGF0ZSk7XG5cbiAgICBFeGFtcGxlLm9uQ29udGVudFRleHRhcmVhS2V5VXAodXBkYXRlKTtcblxuICAgIHVwZGF0ZSgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmxvcmVuY2VFeGFtcGxlO1xuXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIGNvbnN0IG1hcHBpbmdzQ2hlY2tib3hDaGVja2VkID0gbWFwcGluZ3NDaGVja2JveC5pc0NoZWNrZWQoKTtcblxuICBpZiAobWFwcGluZ3NDaGVja2JveENoZWNrZWQpIHtcbiAgICBjb25zdCBwcm9kdWN0aW9uTmFtZVRleHRhcmVhVmFsdWUgPSBwcm9kdWN0aW9uTmFtZVRleHRhcmVhLmdldFZhbHVlKCksXG4gICAgICAgICAgcHJvZHVjdGlvbk5hbWUgPSBwcm9kdWN0aW9uTmFtZVRleHRhcmVhVmFsdWUsIC8vL1xuICAgICAgICAgIG1hcHBpbmdzID0ge30sXG4gICAgICAgICAgZmxvcmVuY2VQYXJzZXIgPSBGbG9yZW5jZVBhcnNlci5mcm9tR3JhbW1hckFuZE1hcHBpbmdzKGdyYW1tYXIsIG1hcHBpbmdzKSxcbiAgICAgICAgICBwcm9kdWN0aW9uID0gZmxvcmVuY2VQYXJzZXIuZmluZFByb2R1Y3Rpb24ocHJvZHVjdGlvbk5hbWUpO1xuXG4gICAgdXBkYXRlQWRqdXN0ZWRCTkZHcmFtbWFyKGZsb3JlbmNlUGFyc2VyKTtcblxuICAgIEV4YW1wbGUudXBkYXRlUGFyc2VUcmVlVGV4dGFyZWEoZmxvcmVuY2VMZXhlciwgZmxvcmVuY2VQYXJzZXIsIHByb2R1Y3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGZsb3JlbmNlUGFyc2VyID0gRmxvcmVuY2VQYXJzZXIuZnJvbUdyYW1tYXJBbmRNYXBwaW5ncyhncmFtbWFyLCBtYXBwaW5ncyk7XG5cbiAgICB1cGRhdGVBZGp1c3RlZEJORkdyYW1tYXIoZmxvcmVuY2VQYXJzZXIpO1xuXG4gICAgRXhhbXBsZS51cGRhdGVQYXJzZVRyZWVUZXh0YXJlYShmbG9yZW5jZUxleGVyLCBmbG9yZW5jZVBhcnNlcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQWRqdXN0ZWRCTkZHcmFtbWFyKGZsb3JlbmNlUGFyc2VyKSB7XG4gIGNvbnN0IGZsb3JlbmNlUGFyc2VyU3RyaW5nID0gZmxvcmVuY2VQYXJzZXIudG9TdHJpbmcoKSxcbiAgICAgICAgYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IGZsb3JlbmNlUGFyc2VyU3RyaW5nOyAgLy8vXG5cbiAgYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWEuc2V0VmFsdWUoYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWFWYWx1ZSk7XG59XG5cbiJdfQ==