'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easy = require('easy'),
    lexers = require('occam-lexers');

var Example = require('../example'),
    grammar = require('../florence/grammar'),
    mappings = require('../florence/mappings'),
    FlorenceParser = require('../florence/parser');

var Checkbox = easy.Checkbox,
    Textarea = easy.Textarea,
    FlorenceLexer = lexers.FlorenceLexer;


var mappingsCheckboxSelector = '#mappings',
    productionNameTextareaSelector = '#productionName';

var florenceLexer = FlorenceLexer.fromNothing();

var productionName = void 0,
    mappingsCheckbox = void 0,
    productionNameTextarea = void 0;

var FlorenceExample = function () {
  function FlorenceExample() {
    _classCallCheck(this, FlorenceExample);
  }

  _createClass(FlorenceExample, null, [{
    key: 'run',
    value: function run() {
      mappingsCheckbox = new Checkbox(mappingsCheckboxSelector);
      productionNameTextarea = new Textarea(productionNameTextareaSelector);

      var bnfGrammarTextareaValue = grammar; ///

      Example.setBNFGrammarTextareaValue(bnfGrammarTextareaValue);

      mappingsCheckbox.onChange(update);

      productionNameTextarea.onKeyUp(update);

      Example.onBNFGrammarTextareaKeyUp(update);

      Example.onContentTextareaKeyUp(update);

      update();
    }
  }]);

  return FlorenceExample;
}();

module.exports = FlorenceExample;

function update() {
  var florenceParser = void 0;

  var mappingsCheckboxChecked = mappingsCheckbox.isChecked();

  if (mappingsCheckboxChecked) {
    florenceParser = FlorenceParser.fromGrammarAndMappings(grammar, mappings);
  } else {
    var _mappings = {};

    florenceParser = FlorenceParser.fromGrammarAndMappings(grammar, _mappings);
  }

  var productionNameTextareaValue = productionNameTextarea.getValue(),
      productionName = productionNameTextareaValue,
      ///
  production = florenceParser.findProduction(productionName);

  Example.updateParseTreeTextarea(florenceLexer, florenceParser, production);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9mbG9yZW5jZS5qcyJdLCJuYW1lcyI6WyJlYXN5IiwicmVxdWlyZSIsImxleGVycyIsIkV4YW1wbGUiLCJncmFtbWFyIiwibWFwcGluZ3MiLCJGbG9yZW5jZVBhcnNlciIsIkNoZWNrYm94IiwiVGV4dGFyZWEiLCJGbG9yZW5jZUxleGVyIiwibWFwcGluZ3NDaGVja2JveFNlbGVjdG9yIiwicHJvZHVjdGlvbk5hbWVUZXh0YXJlYVNlbGVjdG9yIiwiZmxvcmVuY2VMZXhlciIsImZyb21Ob3RoaW5nIiwicHJvZHVjdGlvbk5hbWUiLCJtYXBwaW5nc0NoZWNrYm94IiwicHJvZHVjdGlvbk5hbWVUZXh0YXJlYSIsIkZsb3JlbmNlRXhhbXBsZSIsImJuZkdyYW1tYXJUZXh0YXJlYVZhbHVlIiwic2V0Qk5GR3JhbW1hclRleHRhcmVhVmFsdWUiLCJvbkNoYW5nZSIsInVwZGF0ZSIsIm9uS2V5VXAiLCJvbkJORkdyYW1tYXJUZXh0YXJlYUtleVVwIiwib25Db250ZW50VGV4dGFyZWFLZXlVcCIsIm1vZHVsZSIsImV4cG9ydHMiLCJmbG9yZW5jZVBhcnNlciIsIm1hcHBpbmdzQ2hlY2tib3hDaGVja2VkIiwiaXNDaGVja2VkIiwiZnJvbUdyYW1tYXJBbmRNYXBwaW5ncyIsInByb2R1Y3Rpb25OYW1lVGV4dGFyZWFWYWx1ZSIsImdldFZhbHVlIiwicHJvZHVjdGlvbiIsImZpbmRQcm9kdWN0aW9uIiwidXBkYXRlUGFyc2VUcmVlVGV4dGFyZWEiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjtBQUFBLElBQ01DLFNBQVNELFFBQVEsY0FBUixDQURmOztBQUdBLElBQU1FLFVBQVVGLFFBQVEsWUFBUixDQUFoQjtBQUFBLElBQ01HLFVBQVVILFFBQVEscUJBQVIsQ0FEaEI7QUFBQSxJQUVNSSxXQUFXSixRQUFRLHNCQUFSLENBRmpCO0FBQUEsSUFHTUssaUJBQWlCTCxRQUFRLG9CQUFSLENBSHZCOztJQUtRTSxRLEdBQXVCUCxJLENBQXZCTyxRO0lBQVVDLFEsR0FBYVIsSSxDQUFiUSxRO0lBQ1ZDLGEsR0FBa0JQLE0sQ0FBbEJPLGE7OztBQUVSLElBQU1DLDJCQUEyQixXQUFqQztBQUFBLElBQ01DLGlDQUFpQyxpQkFEdkM7O0FBR0EsSUFBTUMsZ0JBQWdCSCxjQUFjSSxXQUFkLEVBQXRCOztBQUVBLElBQUlDLHVCQUFKO0FBQUEsSUFDSUMseUJBREo7QUFBQSxJQUVJQywrQkFGSjs7SUFJTUMsZTs7Ozs7OzswQkFDUztBQUNYRix5QkFBbUIsSUFBSVIsUUFBSixDQUFhRyx3QkFBYixDQUFuQjtBQUNBTSwrQkFBeUIsSUFBSVIsUUFBSixDQUFhRyw4QkFBYixDQUF6Qjs7QUFFQSxVQUFNTywwQkFBMEJkLE9BQWhDLENBSlcsQ0FJK0I7O0FBRTFDRCxjQUFRZ0IsMEJBQVIsQ0FBbUNELHVCQUFuQzs7QUFFQUgsdUJBQWlCSyxRQUFqQixDQUEwQkMsTUFBMUI7O0FBRUFMLDZCQUF1Qk0sT0FBdkIsQ0FBK0JELE1BQS9COztBQUVBbEIsY0FBUW9CLHlCQUFSLENBQWtDRixNQUFsQzs7QUFFQWxCLGNBQVFxQixzQkFBUixDQUErQkgsTUFBL0I7O0FBRUFBO0FBQ0Q7Ozs7OztBQUdISSxPQUFPQyxPQUFQLEdBQWlCVCxlQUFqQjs7QUFFQSxTQUFTSSxNQUFULEdBQWtCO0FBQ2hCLE1BQUlNLHVCQUFKOztBQUVBLE1BQU1DLDBCQUEwQmIsaUJBQWlCYyxTQUFqQixFQUFoQzs7QUFFQSxNQUFJRCx1QkFBSixFQUE2QjtBQUMzQkQscUJBQWlCckIsZUFBZXdCLHNCQUFmLENBQXNDMUIsT0FBdEMsRUFBK0NDLFFBQS9DLENBQWpCO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsUUFBTUEsWUFBVyxFQUFqQjs7QUFFQXNCLHFCQUFpQnJCLGVBQWV3QixzQkFBZixDQUFzQzFCLE9BQXRDLEVBQStDQyxTQUEvQyxDQUFqQjtBQUNEOztBQUVELE1BQU0wQiw4QkFBOEJmLHVCQUF1QmdCLFFBQXZCLEVBQXBDO0FBQUEsTUFDTWxCLGlCQUFpQmlCLDJCQUR2QjtBQUFBLE1BQ29EO0FBQzlDRSxlQUFhTixlQUFlTyxjQUFmLENBQThCcEIsY0FBOUIsQ0FGbkI7O0FBSUFYLFVBQVFnQyx1QkFBUixDQUFnQ3ZCLGFBQWhDLEVBQStDZSxjQUEvQyxFQUErRE0sVUFBL0Q7QUFDRCIsImZpbGUiOiJmbG9yZW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZWFzeSA9IHJlcXVpcmUoJ2Vhc3knKSxcbiAgICAgIGxleGVycyA9IHJlcXVpcmUoJ29jY2FtLWxleGVycycpO1xuXG5jb25zdCBFeGFtcGxlID0gcmVxdWlyZSgnLi4vZXhhbXBsZScpLFxuICAgICAgZ3JhbW1hciA9IHJlcXVpcmUoJy4uL2Zsb3JlbmNlL2dyYW1tYXInKSxcbiAgICAgIG1hcHBpbmdzID0gcmVxdWlyZSgnLi4vZmxvcmVuY2UvbWFwcGluZ3MnKSxcbiAgICAgIEZsb3JlbmNlUGFyc2VyID0gcmVxdWlyZSgnLi4vZmxvcmVuY2UvcGFyc2VyJyk7XG5cbmNvbnN0IHsgQ2hlY2tib3gsIFRleHRhcmVhIH0gPSBlYXN5LFxuICAgICAgeyBGbG9yZW5jZUxleGVyIH0gPSBsZXhlcnM7XG5cbmNvbnN0IG1hcHBpbmdzQ2hlY2tib3hTZWxlY3RvciA9ICcjbWFwcGluZ3MnLFxuICAgICAgcHJvZHVjdGlvbk5hbWVUZXh0YXJlYVNlbGVjdG9yID0gJyNwcm9kdWN0aW9uTmFtZSc7XG5cbmNvbnN0IGZsb3JlbmNlTGV4ZXIgPSBGbG9yZW5jZUxleGVyLmZyb21Ob3RoaW5nKCk7XG5cbmxldCBwcm9kdWN0aW9uTmFtZSxcbiAgICBtYXBwaW5nc0NoZWNrYm94LFxuICAgIHByb2R1Y3Rpb25OYW1lVGV4dGFyZWE7XG5cbmNsYXNzIEZsb3JlbmNlRXhhbXBsZSB7XG4gIHN0YXRpYyBydW4oKSB7XG4gICAgbWFwcGluZ3NDaGVja2JveCA9IG5ldyBDaGVja2JveChtYXBwaW5nc0NoZWNrYm94U2VsZWN0b3IpO1xuICAgIHByb2R1Y3Rpb25OYW1lVGV4dGFyZWEgPSBuZXcgVGV4dGFyZWEocHJvZHVjdGlvbk5hbWVUZXh0YXJlYVNlbGVjdG9yKTtcblxuICAgIGNvbnN0IGJuZkdyYW1tYXJUZXh0YXJlYVZhbHVlID0gZ3JhbW1hcjsgIC8vL1xuXG4gICAgRXhhbXBsZS5zZXRCTkZHcmFtbWFyVGV4dGFyZWFWYWx1ZShibmZHcmFtbWFyVGV4dGFyZWFWYWx1ZSk7XG5cbiAgICBtYXBwaW5nc0NoZWNrYm94Lm9uQ2hhbmdlKHVwZGF0ZSk7XG5cbiAgICBwcm9kdWN0aW9uTmFtZVRleHRhcmVhLm9uS2V5VXAodXBkYXRlKTtcblxuICAgIEV4YW1wbGUub25CTkZHcmFtbWFyVGV4dGFyZWFLZXlVcCh1cGRhdGUpO1xuXG4gICAgRXhhbXBsZS5vbkNvbnRlbnRUZXh0YXJlYUtleVVwKHVwZGF0ZSk7XG5cbiAgICB1cGRhdGUoKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZsb3JlbmNlRXhhbXBsZTtcblxuZnVuY3Rpb24gdXBkYXRlKCkge1xuICBsZXQgZmxvcmVuY2VQYXJzZXI7XG4gIFxuICBjb25zdCBtYXBwaW5nc0NoZWNrYm94Q2hlY2tlZCA9IG1hcHBpbmdzQ2hlY2tib3guaXNDaGVja2VkKCk7XG5cbiAgaWYgKG1hcHBpbmdzQ2hlY2tib3hDaGVja2VkKSB7XG4gICAgZmxvcmVuY2VQYXJzZXIgPSBGbG9yZW5jZVBhcnNlci5mcm9tR3JhbW1hckFuZE1hcHBpbmdzKGdyYW1tYXIsIG1hcHBpbmdzKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBtYXBwaW5ncyA9IHt9O1xuICAgIFxuICAgIGZsb3JlbmNlUGFyc2VyID0gRmxvcmVuY2VQYXJzZXIuZnJvbUdyYW1tYXJBbmRNYXBwaW5ncyhncmFtbWFyLCBtYXBwaW5ncyk7XG4gIH1cblxuICBjb25zdCBwcm9kdWN0aW9uTmFtZVRleHRhcmVhVmFsdWUgPSBwcm9kdWN0aW9uTmFtZVRleHRhcmVhLmdldFZhbHVlKCksXG4gICAgICAgIHByb2R1Y3Rpb25OYW1lID0gcHJvZHVjdGlvbk5hbWVUZXh0YXJlYVZhbHVlLCAvLy9cbiAgICAgICAgcHJvZHVjdGlvbiA9IGZsb3JlbmNlUGFyc2VyLmZpbmRQcm9kdWN0aW9uKHByb2R1Y3Rpb25OYW1lKTtcblxuICBFeGFtcGxlLnVwZGF0ZVBhcnNlVHJlZVRleHRhcmVhKGZsb3JlbmNlTGV4ZXIsIGZsb3JlbmNlUGFyc2VyLCBwcm9kdWN0aW9uKTtcbn1cbiJdfQ==