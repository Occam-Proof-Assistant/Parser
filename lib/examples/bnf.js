'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easy = require('easy'),
    lexers = require('occam-lexers');

var Example = require('../example'),
    grammar = require('../bnf/grammar'),
    BNFParser = require('../bnf/parser');

var Textarea = easy.Textarea,
    BNFLexer = lexers.BNFLexer;


var lexicalGrammarTextareaSelector = 'textarea#lexicalGrammar',
    adjustedBNFGrammarTextareaSelector = 'textarea#adjustedBNFGrammar',
    lexicalGrammar = BNFLexer.grammar;

var lexicalGrammarTextarea = void 0,
    adjustedBNFGrammarTextarea = void 0,
    bnfLexer = null,
    bnfParser = null;

var BNFExample = function () {
     function BNFExample() {
          _classCallCheck(this, BNFExample);
     }

     _createClass(BNFExample, null, [{
          key: 'run',
          value: function run() {
               lexicalGrammarTextarea = new Textarea(lexicalGrammarTextareaSelector);
               adjustedBNFGrammarTextarea = new Textarea(adjustedBNFGrammarTextareaSelector);

               var lexicalGrammarTextareaValue = JSON.stringify(lexicalGrammar, null, '  '),
                   ///
               bnfGrammarTextareaValue = grammar,
                   ///
               contentTextareaValue = '\n\n     document                                                      ::=   header? verticalSpace? body?\n\n\n\n     header                                                        ::=   includeDirective+\n\n     verticalSpace                                                 ::=   <END_OF_LINE>+\n\n     body                                                          ::=   part+\n\n\n\n     rule                                                          ::=   "Rule" labels? <END_OF_LINE> premiseOrPremises? conclusion proof?\n\n     axiom                                                         ::=   "Axiom" labels? <END_OF_LINE> standaloneStatement\n\n     lemma                                                         ::=   "Lemma" labels? <END_OF_LINE> standaloneStatement proof?\n\n     theorem                                                       ::=   "Theorem" labels? <END_OF_LINE> standaloneStatement proof?\n\n\n\n     typeDeclaration                                               ::=   "Type" type\n\n     typesDeclaration                                              ::=   "Types" types\n\n     dependentTypeDeclaration                                      ::=   "DependentType" dependentType\n\n     dependentTypesDeclaration                                     ::=   "DependentTypes" dependentTypes \n\n     constructorDeclaration                                        ::=   "Constructor" constructor\n\n     constructorsDeclaration                                       ::=   "Constructors" constructors\n\n     variableDeclaration                                           ::=   "Variable" variable\n\n     variablesDeclaration                                          ::=   "Variables" variables\n\n     metaVariableDeclaration                                       ::=   "MetaVariable" metaVariable\n\n     metaVariablesDeclaration                                      ::=   "MetaVariables" metaVariables\n\n     qualifiedMetaVariableDeclaration                              ::=   "QualifiedMetaVariable" qualifiedMetaVariable\n\n     qualifiedMetaVariablesDeclaration                             ::=   "QualifiedMetaVariables" qualifiedMetaVariables\n\n\n\n     part                                                          ::=   verticalSpace\n\n                                                                     |   rule\n                                                                \n                                                                     |   axiom\n                                                                \n                                                                     |   lemma\n                                                                \n                                                                     |   theorem\n                                                                \n                                                                     |   typeDeclaration\n                                                                \n                                                                     |   typesDeclaration\n                                                                \n                                                                     |   dependentTypeDeclaration\n                                                                \n                                                                     |   dependentTypesDeclaration\n                                                                \n                                                                     |   constructorDeclaration\n                                                                \n                                                                     |   constructorsDeclaration\n                                                                \n                                                                     |   variableDeclaration\n                                                                \n                                                                     |   variablesDeclaration\n                                                                \n                                                                     |   metavariableDeclaration\n                                                                \n                                                                     |   metavariablesDeclaration\n                                                                \n                                                                     |   qualifiedMetavariableDeclaration\n                                                                \n                                                                     |   qualifiedMetavariablesDeclaration\n                                                                     \n                                                                     \n                                                                     \n  includeDirective                                                 ::=   "include"<NO_WHITESPACE>"("<NO_WHITESPACE>[string]<NO_WHITESPACE>")" <END_OF_LINE>\n\n\n\n   premiseOrPremises                                               ::=   premise | premises\n\n\n\n   type                                                            ::=   typeName\n   \n   types                                                           ::=   type(<NO_WHITESPACE>","<NO_WHITESPACE>type)*\n\n   dependentType                                                   ::=   dependentTypeName<NO_WHITESPACE>"("<NO_WHITESPACE>typeName<NO_WHITESPACE>")"\n   \n   dependentTypes                                                  ::=   dependentType(<NO_WHITESPACE>","<NO_WHITESPACE>dependentType)*\n   \n   constructor                                                     ::=   constructorName<NO_WHITESPACE>"("<NO_WHITESPACE>types<NO_WHITESPACE>")"\n   \n   constructors                                                    ::=   constructor(<NO_WHITESPACE>","<NO_WHITESPACE>constructor)*\n   \n   variable                                                        ::=   variableName(<NO_WHITESPACE>":"type)?\n   \n   variables                                                       ::=   variable(<NO_WHITESPACE>","<NO_WHITESPACE>variable)*\n   \n   metaVariable                                                    ::=   metaVariableName\n\n   metaVariables                                                   ::=   metaVariable(<NO_WHITESPACE>","<NO_WHITESPACE>metaVariable)*\n   \n   qualifiedMetaVariable                                           ::=   qualifiedMetaVariableName\n   \n   qualifiedMetaVariables                                          ::=   qualifiedMetaVariable(<NO_WHITESPACE>","<NO_WHITESPACE>qualifiedMetaVariable)*\n   \n   \n   \n   label                                                           ::=   labelName(<NO_WHITESPACE>"("<NO_WHITESPACE>terms<NO_WHITESPACE>")")?\n\n\n\n   typeName                                                        ::=   name\n\n   dependentTypeName                                               ::=   name\n\n   constructorName                                                 ::=   name\n\n   variableName                                                    ::=   name\n\n   metaVariableName                                                ::=   name\n\n   qualifiedMetaVariableName                                       ::=   name\n   \n   labelName                                                       ::=   name\n\n   name                                                            ::=   /\\w+/\n   \n\n    \n'; ///

               /*
               
               
               
               
               
               
                   premise(s)                                                    ::=   premise | premises
                 premise                                                       ::=   "Premise" <END_OF_LINE> unjustifiedStatementOrUnknown
                 premises                                                      ::=   "Premises" <END_OF_LINE> unjustifiedStatementOrUnknown unjustifiedStatementOrUnknown+
                 conclusion                                                    ::=   "Conclusion" <END_OF_LINE> (un)justifiedStatementOrUnknown
                   proof                                                         ::=   "Proof" <END_OF_LINE> (abridged)ProofDerivation
                 (abridged)ProofDerivation                                     ::=   proofDerivation | abridgedProofDerivation
                 abridgedProofDerivation                                       ::=   (un)justifiedStatementOrUnknown
                 proofDerivation                                               ::=   derivation therefore
                 derivation                                                    ::=   subDerivation+
                 therefore                                                     ::=   "Therefore" <END_OF_LINE> (un)justifiedStatementOrUnknown
                 subDerivation                                                 ::=   subLemma | (un)justifiedStatementOrUnknown
                   subLemma                                                      ::=   suppose then? hence unjustifiedStatementOrUnknown? verticalSpace?
                 suppose                                                       ::=   "Suppose" <END_OF_LINE> unjustifiedStatementOrUnknown+
                 then                                                          ::=   "Then" <END_OF_LINE> derivation
                 hence                                                         ::=   "Hence" <END_OF_LINE> (un)justifiedStatementOrUnknown
                   (un)justifiedStatementOrUnknown                               ::=   justifiedStatement | unjustifiedStatement | unknown
                 unjustifiedStatementOrUnknown                                 ::=   unjustifiedStatement | unknown
                 unjustifiedStatement                                          ::=   statement <END_OF_LINE>
                 justifiedStatement                                            ::=   statement justification <END_OF_LINE>
                 justification                                                 ::=   byOrFrom reference
                 byOrFrom                                                      ::=   "by" | "from"
                 reference                                                     ::=   referenceName<NO_WHITESPACE>parenthesisedTermList?
                 referenceName                                                 ::=   name
                   statement                                                     ::=   proofAssertion | typeAssertion | equality | expression
                   proofAssertion                                                ::=   (qualified)Metavariable "::" (qualified)Metavariable
                 typeAssertion                                                 ::=   expression ":" type
                 equality                                                      ::=   expression "=" expression
                 expression                                                    ::=   term | (qualified)Metavariable
                   term                                                          ::=   compoundTerm | variableName
                 compoundTerm                                                  ::=   constructorName<NO_WHITESPACE>parenthesisedTermList?
                   parenthesisedTermList                                         ::=   "("<NO_WHITESPACE>termList<NO_WHITESPACE>")"
                 termList                                                      ::=   term<NO_WHITESPACE>commaThenTerm*
                 commaThenTerm                                                 ::=   ","<NO_WHITESPACE>term
                   name                                                          ::=   /\\w+/
                   unknown                                                       ::=   specialUnassignedOrMinorKeywords+ <END_OF_LINE>
                 specialUnassignedOrMinorKeywords                              ::=   [special] | [unassigned] | "by" | "from"
               
                error                                                         ::=   *
                 */

               lexicalGrammarTextarea.setValue(lexicalGrammarTextareaValue);

               Example.setBNFGrammarTextareaValue(bnfGrammarTextareaValue);

               Example.setContentTextareaValue(contentTextareaValue);

               Example.onBNFGrammarTextareaKeyUp(update);

               Example.onContentTextareaKeyUp(update);

               lexicalGrammarTextarea.onKeyUp(update);

               update();
          }
     }]);

     return BNFExample;
}();

function update() {
     updateBNFLexer();

     updateBNFParser();

     updateAdjustedBNFGrammar();

     if (bnfLexer !== null) {
          var production = null,
              node = Example.updateParseTreeTextarea(bnfLexer, bnfParser, production),
              productionsNode = node; ///

          BNFParser.generateProductions(productionsNode);
     } else {
          Example.clearParseTreeTextarea();
     }
}

module.exports = BNFExample;

function updateBNFLexer() {
     var lexicalGrammarTextareaValue = lexicalGrammarTextarea.getValue();

     var lexicalGrammar = null;

     try {
          lexicalGrammar = JSON.parse(lexicalGrammarTextareaValue);
     } catch (error) {}

     var lexicalGrammarValid = lexicalGrammar !== null;

     if (lexicalGrammarValid) {
          bnfLexer = BNFLexer.fromGrammar(lexicalGrammar);

          lexicalGrammarTextarea.removeClass('error');
     } else {
          lexicalGrammarTextarea.addClass('error');

          bnfLexer = null;
     }
}

function updateBNFParser() {
     bnfParser = BNFParser.fromNothing();
}

function updateAdjustedBNFGrammar() {
     var productions = bnfParser.getProductions(),
         maximumProductionNameLength = productions.reduce(function (maximumProductionNameLength, production) {
          var productionName = production.getName(),
              productionNameLength = productionName.length;

          maximumProductionNameLength = Math.max(maximumProductionNameLength, productionNameLength);

          return maximumProductionNameLength;
     }, 0),
         adjustedBNFGrammarTextareaValue = productions.reduce(function (adjustedBNFGrammarTextarea, production) {
          var productionString = production.toString(maximumProductionNameLength);

          adjustedBNFGrammarTextarea += productionString;

          return adjustedBNFGrammarTextarea;
     }, []);

     adjustedBNFGrammarTextarea.setValue(adjustedBNFGrammarTextareaValue);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,