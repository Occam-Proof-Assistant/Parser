'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easy = require('easy'),
    lexers = require('occam-lexers');

var Example = require('../example'),
    grammar = require('../bnf/grammar'),
    BNFParser = require('../bnf/parser');

var Textarea = easy.Textarea,
    BNFLexer = lexers.BNFLexer;


var lexicalGrammarTextareaSelector = 'textarea#lexicalGrammar',
    adjustedBNFGrammarTextareaSelector = 'textarea#adjustedBNFGrammar',
    lexicalGrammar = BNFLexer.grammar;

var lexicalGrammarTextarea = void 0,
    adjustedBNFGrammarTextarea = void 0,
    bnfLexer = null,
    bnfParser = null;

var BNFExample = function () {
  function BNFExample() {
    _classCallCheck(this, BNFExample);
  }

  _createClass(BNFExample, null, [{
    key: 'run',
    value: function run() {
      lexicalGrammarTextarea = new Textarea(lexicalGrammarTextareaSelector);
      adjustedBNFGrammarTextarea = new Textarea(adjustedBNFGrammarTextareaSelector);

      var lexicalGrammarTextareaValue = JSON.stringify(lexicalGrammar, null, '  '),
          ///
      bnfGrammarTextareaValue = grammar,
          ///
      contentTextareaValue = grammar; ///

      lexicalGrammarTextarea.setValue(lexicalGrammarTextareaValue);

      Example.setBNFGrammarTextareaValue(bnfGrammarTextareaValue);

      Example.setContentTextareaValue(contentTextareaValue);

      Example.onContentTextareaKeyUp(update);

      Example.onBNFGrammarTextareaKeyUp(update);

      lexicalGrammarTextarea.onKeyUp(update);

      update();
    }
  }]);

  return BNFExample;
}();

function update() {
  updateBNFLexer();

  updateBNFParser();

  updateAdjustedBNFGrammar();

  if (bnfLexer !== null) {
    var production = null,
        node = Example.updateParseTreeTextarea(bnfLexer, bnfParser, production),
        productionsNode = node; ///

    BNFParser.generateProductions(productionsNode);
  } else {
    Example.clearParseTreeTextarea();
  }
}

module.exports = BNFExample;

function updateBNFLexer() {
  var lexicalGrammarTextareaValue = lexicalGrammarTextarea.getValue();

  var lexicalGrammar = null;

  try {
    lexicalGrammar = JSON.parse(lexicalGrammarTextareaValue);
  } catch (error) {}

  var lexicalGrammarValid = lexicalGrammar !== null;

  if (lexicalGrammarValid) {
    bnfLexer = BNFLexer.fromGrammar(lexicalGrammar);

    lexicalGrammarTextarea.removeClass('error');
  } else {
    lexicalGrammarTextarea.addClass('error');

    bnfLexer = null;
  }
}

function updateBNFParser() {
  bnfParser = BNFParser.fromNothing();
}

function updateAdjustedBNFGrammar() {
  var bnfParserString = bnfParser.toString(),
      adjustedBNFGrammarTextareaValue = bnfParserString; ///

  adjustedBNFGrammarTextarea.setValue(adjustedBNFGrammarTextareaValue);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9ibmYuanMiXSwibmFtZXMiOlsiZWFzeSIsInJlcXVpcmUiLCJsZXhlcnMiLCJFeGFtcGxlIiwiZ3JhbW1hciIsIkJORlBhcnNlciIsIlRleHRhcmVhIiwiQk5GTGV4ZXIiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhU2VsZWN0b3IiLCJhZGp1c3RlZEJORkdyYW1tYXJUZXh0YXJlYVNlbGVjdG9yIiwibGV4aWNhbEdyYW1tYXIiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhIiwiYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWEiLCJibmZMZXhlciIsImJuZlBhcnNlciIsIkJORkV4YW1wbGUiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwiYm5mR3JhbW1hclRleHRhcmVhVmFsdWUiLCJjb250ZW50VGV4dGFyZWFWYWx1ZSIsInNldFZhbHVlIiwic2V0Qk5GR3JhbW1hclRleHRhcmVhVmFsdWUiLCJzZXRDb250ZW50VGV4dGFyZWFWYWx1ZSIsIm9uQ29udGVudFRleHRhcmVhS2V5VXAiLCJ1cGRhdGUiLCJvbkJORkdyYW1tYXJUZXh0YXJlYUtleVVwIiwib25LZXlVcCIsInVwZGF0ZUJORkxleGVyIiwidXBkYXRlQk5GUGFyc2VyIiwidXBkYXRlQWRqdXN0ZWRCTkZHcmFtbWFyIiwicHJvZHVjdGlvbiIsIm5vZGUiLCJ1cGRhdGVQYXJzZVRyZWVUZXh0YXJlYSIsInByb2R1Y3Rpb25zTm9kZSIsImdlbmVyYXRlUHJvZHVjdGlvbnMiLCJjbGVhclBhcnNlVHJlZVRleHRhcmVhIiwibW9kdWxlIiwiZXhwb3J0cyIsImdldFZhbHVlIiwicGFyc2UiLCJlcnJvciIsImxleGljYWxHcmFtbWFyVmFsaWQiLCJmcm9tR3JhbW1hciIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJmcm9tTm90aGluZyIsImJuZlBhcnNlclN0cmluZyIsInRvU3RyaW5nIiwiYWRqdXN0ZWRCTkZHcmFtbWFyVGV4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QUFFMURuQyw2QkFBMkJTLFFBQTNCLENBQW9DNEIsK0JBQXBDO0FBQ0QiLCJmaWxlIjoiYm5mLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBlYXN5ID0gcmVxdWlyZSgnZWFzeScpLFxuICAgICAgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyk7XG5cbmNvbnN0IEV4YW1wbGUgPSByZXF1aXJlKCcuLi9leGFtcGxlJyksXG4gICAgICBncmFtbWFyID0gcmVxdWlyZSgnLi4vYm5mL2dyYW1tYXInKSxcbiAgICAgIEJORlBhcnNlciA9IHJlcXVpcmUoJy4uL2JuZi9wYXJzZXInKTtcblxuY29uc3QgeyBUZXh0YXJlYSB9ID0gZWFzeSxcbiAgICAgIHsgQk5GTGV4ZXIgfSA9IGxleGVycztcblxuY29uc3QgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYVNlbGVjdG9yID0gJ3RleHRhcmVhI2xleGljYWxHcmFtbWFyJyxcbiAgICAgIGFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhU2VsZWN0b3IgPSAndGV4dGFyZWEjYWRqdXN0ZWRCTkZHcmFtbWFyJyxcbiAgICAgIGxleGljYWxHcmFtbWFyID0gQk5GTGV4ZXIuZ3JhbW1hcjtcblxubGV0IGxleGljYWxHcmFtbWFyVGV4dGFyZWEsXG4gICAgYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWEsXG4gICAgYm5mTGV4ZXIgPSBudWxsLFxuICAgIGJuZlBhcnNlciA9IG51bGw7XG5cbmNsYXNzIEJORkV4YW1wbGUge1xuICBzdGF0aWMgcnVuKCkge1xuICAgIGxleGljYWxHcmFtbWFyVGV4dGFyZWEgPSBuZXcgVGV4dGFyZWEobGV4aWNhbEdyYW1tYXJUZXh0YXJlYVNlbGVjdG9yKTtcbiAgICBhZGp1c3RlZEJORkdyYW1tYXJUZXh0YXJlYSA9IG5ldyBUZXh0YXJlYShhZGp1c3RlZEJORkdyYW1tYXJUZXh0YXJlYVNlbGVjdG9yKTtcblxuICAgIGNvbnN0IGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KGxleGljYWxHcmFtbWFyLCBudWxsLCAnICAnKSwgLy8vXG4gICAgICAgICAgYm5mR3JhbW1hclRleHRhcmVhVmFsdWUgPSBncmFtbWFyLCAgLy8vXG4gICAgICAgICAgY29udGVudFRleHRhcmVhVmFsdWUgPSBncmFtbWFyOyAvLy9cblxuICAgIGxleGljYWxHcmFtbWFyVGV4dGFyZWEuc2V0VmFsdWUobGV4aWNhbEdyYW1tYXJUZXh0YXJlYVZhbHVlKTtcblxuICAgIEV4YW1wbGUuc2V0Qk5GR3JhbW1hclRleHRhcmVhVmFsdWUoYm5mR3JhbW1hclRleHRhcmVhVmFsdWUpO1xuXG4gICAgRXhhbXBsZS5zZXRDb250ZW50VGV4dGFyZWFWYWx1ZShjb250ZW50VGV4dGFyZWFWYWx1ZSk7XG5cbiAgICBFeGFtcGxlLm9uQ29udGVudFRleHRhcmVhS2V5VXAodXBkYXRlKTtcblxuICAgIEV4YW1wbGUub25CTkZHcmFtbWFyVGV4dGFyZWFLZXlVcCh1cGRhdGUpO1xuXG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5vbktleVVwKHVwZGF0ZSk7XG5cbiAgICB1cGRhdGUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIHVwZGF0ZUJORkxleGVyKCk7XG5cbiAgdXBkYXRlQk5GUGFyc2VyKCk7XG5cbiAgdXBkYXRlQWRqdXN0ZWRCTkZHcmFtbWFyKCk7XG5cbiAgaWYgKGJuZkxleGVyICE9PSBudWxsKSB7XG4gICAgY29uc3QgcHJvZHVjdGlvbiA9IG51bGwsXG4gICAgICAgICAgbm9kZSA9IEV4YW1wbGUudXBkYXRlUGFyc2VUcmVlVGV4dGFyZWEoYm5mTGV4ZXIsIGJuZlBhcnNlciwgcHJvZHVjdGlvbiksXG4gICAgICAgICAgcHJvZHVjdGlvbnNOb2RlID0gbm9kZTsgLy8vXG5cbiAgICBCTkZQYXJzZXIuZ2VuZXJhdGVQcm9kdWN0aW9ucyhwcm9kdWN0aW9uc05vZGUpO1xuICB9IGVsc2Uge1xuICAgIEV4YW1wbGUuY2xlYXJQYXJzZVRyZWVUZXh0YXJlYSgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQk5GRXhhbXBsZTtcblxuZnVuY3Rpb24gdXBkYXRlQk5GTGV4ZXIoKSB7XG4gIGNvbnN0IGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IGxleGljYWxHcmFtbWFyVGV4dGFyZWEuZ2V0VmFsdWUoKTtcblxuICBsZXQgbGV4aWNhbEdyYW1tYXIgPSBudWxsO1xuXG4gIHRyeSB7XG4gICAgbGV4aWNhbEdyYW1tYXIgPSBKU09OLnBhcnNlKGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fVxuXG4gIGNvbnN0IGxleGljYWxHcmFtbWFyVmFsaWQgPSAobGV4aWNhbEdyYW1tYXIgIT09IG51bGwpO1xuXG4gIGlmIChsZXhpY2FsR3JhbW1hclZhbGlkKSB7XG4gICAgYm5mTGV4ZXIgPSBCTkZMZXhlci5mcm9tR3JhbW1hcihsZXhpY2FsR3JhbW1hcik7XG5cbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLnJlbW92ZUNsYXNzKCdlcnJvcicpO1xuICB9IGVsc2Uge1xuICAgIGxleGljYWxHcmFtbWFyVGV4dGFyZWEuYWRkQ2xhc3MoJ2Vycm9yJyk7XG5cbiAgICBibmZMZXhlciA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQk5GUGFyc2VyKCkge1xuICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQWRqdXN0ZWRCTkZHcmFtbWFyKCkge1xuICBjb25zdCBibmZQYXJzZXJTdHJpbmcgPSBibmZQYXJzZXIudG9TdHJpbmcoKSxcbiAgICAgICAgYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IGJuZlBhcnNlclN0cmluZzsgIC8vL1xuXG4gIGFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhLnNldFZhbHVlKGFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhVmFsdWUpO1xufVxuIl19