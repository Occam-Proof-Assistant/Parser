'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easy = require('easy'),
    lexers = require('occam-lexers');

var Example = require('../example'),
    grammar = require('../bnf/grammar'),
    BNFParser = require('../bnf/parser');

var Textarea = easy.Textarea,
    BNFLexer = lexers.BNFLexer;


var lexicalGrammarTextareaSelector = 'textarea#lexicalGrammar',
    lexicalGrammar = BNFLexer.grammar;

var lexicalGrammarTextarea = void 0,
    bnfLexer = null,
    bnfParser = null;

var BNFExample = function () {
  function BNFExample() {
    _classCallCheck(this, BNFExample);
  }

  _createClass(BNFExample, null, [{
    key: 'run',
    value: function run() {
      lexicalGrammarTextarea = new Textarea(lexicalGrammarTextareaSelector);

      var lexicalGrammarTextareaValue = JSON.stringify(lexicalGrammar, null, '  '),
          ///
      bnfGrammarTextareaValue = grammar,
          ///
      contentTextareaValue = grammar; ///

      lexicalGrammarTextarea.setValue(lexicalGrammarTextareaValue);

      Example.setBNFGrammarTextareaValue(bnfGrammarTextareaValue);

      Example.setContentTextareaValue(contentTextareaValue);

      Example.onContentTextareaKeyUp(update);

      Example.onBNFGrammarTextareaKeyUp(update);

      lexicalGrammarTextarea.onKeyUp(update);

      update();
    }
  }]);

  return BNFExample;
}();

function update() {
  updateBNFLexer();

  updateBNFParser();

  if (bnfLexer !== null) {
    var production = null,
        node = Example.updateParseTreeTextarea(bnfLexer, bnfParser, production),
        productionsNode = node; ///

    BNFParser.generateProductions(productionsNode);
  } else {
    Example.clearParseTreeTextarea();
  }
}

module.exports = BNFExample;

function updateBNFLexer() {
  var lexicalGrammarTextareaValue = lexicalGrammarTextarea.getValue();

  var lexicalGrammar = null;

  try {
    lexicalGrammar = JSON.parse(lexicalGrammarTextareaValue);
  } catch (error) {}

  var lexicalGrammarValid = lexicalGrammar !== null;

  if (lexicalGrammarValid) {
    bnfLexer = BNFLexer.fromGrammar(lexicalGrammar);

    lexicalGrammarTextarea.removeClass('error');
  } else {
    lexicalGrammarTextarea.addClass('error');

    bnfLexer = null;
  }
}

function updateBNFParser() {
  bnfParser = BNFParser.fromNothing();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9ibmYuanMiXSwibmFtZXMiOlsiZWFzeSIsInJlcXVpcmUiLCJsZXhlcnMiLCJFeGFtcGxlIiwiZ3JhbW1hciIsIkJORlBhcnNlciIsIlRleHRhcmVhIiwiQk5GTGV4ZXIiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhU2VsZWN0b3IiLCJsZXhpY2FsR3JhbW1hciIsImxleGljYWxHcmFtbWFyVGV4dGFyZWEiLCJibmZMZXhlciIsImJuZlBhcnNlciIsIkJORkV4YW1wbGUiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwiYm5mR3JhbW1hclRleHRhcmVhVmFsdWUiLCJjb250ZW50VGV4dGFyZWFWYWx1ZSIsInNldFZhbHVlIiwic2V0Qk5GR3JhbW1hclRleHRhcmVhVmFsdWUiLCJzZXRDb250ZW50VGV4dGFyZWFWYWx1ZSIsIm9uQ29udGVudFRleHRhcmVhS2V5VXAiLCJ1cGRhdGUiLCJvbkJORkdyYW1tYXJUZXh0YXJlYUtleVVwIiwib25LZXlVcCIsInVwZGF0ZUJORkxleGVyIiwidXBkYXRlQk5GUGFyc2VyIiwicHJvZHVjdGlvbiIsIm5vZGUiLCJ1cGRhdGVQYXJzZVRyZWVUZXh0YXJlYSIsInByb2R1Y3Rpb25zTm9kZSIsImdlbmVyYXRlUHJvZHVjdGlvbnMiLCJjbGVhclBhcnNlVHJlZVRleHRhcmVhIiwibW9kdWxlIiwiZXhwb3J0cyIsImdldFZhbHVlIiwicGFyc2UiLCJlcnJvciIsImxleGljYWxHcmFtbWFyVmFsaWQiLCJmcm9tR3JhbW1hciIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJmcm9tTm90aGluZyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLE9BQU9DLFFBQVEsTUFBUixDQUFiO0FBQUEsSUFDTUMsU0FBU0QsUUFBUSxjQUFSLENBRGY7O0FBR0EsSUFBTUUsVUFBVUYsUUFBUSxZQUFSLENBQWhCO0FBQUEsSUFDTUcsVUFBVUgsUUFBUSxnQkFBUixDQURoQjtBQUFBLElBRU1JLFlBQVlKLFFBQVEsZUFBUixDQUZsQjs7QUFJTSxJQUFFSyxRQUFGLEdBQWVOLElBQWYsQ0FBRU0sUUFBRjtBQUFBLElBQ0VDLFFBREYsR0FDZUwsTUFEZixDQUNFSyxRQURGOzs7QUFHTixJQUFNQyxpQ0FBaUMseUJBQXZDO0FBQUEsSUFDTUMsaUJBQWlCRixTQUFTSCxPQURoQzs7QUFHQSxJQUFJTSwrQkFBSjtBQUFBLElBQ0lDLFdBQVcsSUFEZjtBQUFBLElBRUlDLFlBQVksSUFGaEI7O0lBSU1DLFU7Ozs7Ozs7MEJBQ1M7QUFDWEgsK0JBQXlCLElBQUlKLFFBQUosQ0FBYUUsOEJBQWIsQ0FBekI7O0FBRUEsVUFBTU0sOEJBQThCQyxLQUFLQyxTQUFMLENBQWVQLGNBQWYsRUFBK0IsSUFBL0IsRUFBcUMsSUFBckMsQ0FBcEM7QUFBQSxVQUFnRjtBQUMxRVEsZ0NBQTBCYixPQURoQztBQUFBLFVBQzBDO0FBQ3BDYyw2QkFBdUJkLE9BRjdCLENBSFcsQ0FLMkI7O0FBRXRDTSw2QkFBdUJTLFFBQXZCLENBQWdDTCwyQkFBaEM7O0FBRUFYLGNBQVFpQiwwQkFBUixDQUFtQ0gsdUJBQW5DOztBQUVBZCxjQUFRa0IsdUJBQVIsQ0FBZ0NILG9CQUFoQzs7QUFFQWYsY0FBUW1CLHNCQUFSLENBQStCQyxNQUEvQjs7QUFFQXBCLGNBQVFxQix5QkFBUixDQUFrQ0QsTUFBbEM7O0FBRUFiLDZCQUF1QmUsT0FBdkIsQ0FBK0JGLE1BQS9COztBQUVBQTtBQUNEOzs7Ozs7QUFHSCxTQUFTQSxNQUFULEdBQWtCO0FBQ2hCRzs7QUFFQUM7O0FBRUEsTUFBSWhCLGFBQWEsSUFBakIsRUFBdUI7QUFDckIsUUFBTWlCLGFBQWEsSUFBbkI7QUFBQSxRQUNNQyxPQUFPMUIsUUFBUTJCLHVCQUFSLENBQWdDbkIsUUFBaEMsRUFBMENDLFNBQTFDLEVBQXFEZ0IsVUFBckQsQ0FEYjtBQUFBLFFBRU1HLGtCQUFrQkYsSUFGeEIsQ0FEcUIsQ0FHUzs7QUFFOUJ4QixjQUFVMkIsbUJBQVYsQ0FBOEJELGVBQTlCO0FBQ0QsR0FORCxNQU1PO0FBQ0w1QixZQUFROEIsc0JBQVI7QUFDRDtBQUNGOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCdEIsVUFBakI7O0FBRUEsU0FBU2EsY0FBVCxHQUEwQjtBQUN4QixNQUFNWiw4QkFBOEJKLHVCQUF1QjBCLFFBQXZCLEVBQXBDOztBQUVBLE1BQUkzQixpQkFBaUIsSUFBckI7O0FBRUEsTUFBSTtBQUNGQSxxQkFBaUJNLEtBQUtzQixLQUFMLENBQVd2QiwyQkFBWCxDQUFqQjtBQUNELEdBRkQsQ0FFRSxPQUFPd0IsS0FBUCxFQUFjLENBQUU7O0FBRWxCLE1BQU1DLHNCQUF1QjlCLG1CQUFtQixJQUFoRDs7QUFFQSxNQUFJOEIsbUJBQUosRUFBeUI7QUFDdkI1QixlQUFXSixTQUFTaUMsV0FBVCxDQUFxQi9CLGNBQXJCLENBQVg7O0FBRUFDLDJCQUF1QitCLFdBQXZCLENBQW1DLE9BQW5DO0FBQ0QsR0FKRCxNQUlPO0FBQ0wvQiwyQkFBdUJnQyxRQUF2QixDQUFnQyxPQUFoQzs7QUFFQS9CLGVBQVcsSUFBWDtBQUNEO0FBQ0Y7O0FBRUQsU0FBU2dCLGVBQVQsR0FBMkI7QUFDekJmLGNBQVlQLFVBQVVzQyxXQUFWLEVBQVo7QUFDRCIsImZpbGUiOiJibmYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGVhc3kgPSByZXF1aXJlKCdlYXN5JyksXG4gICAgICBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKTtcblxuY29uc3QgRXhhbXBsZSA9IHJlcXVpcmUoJy4uL2V4YW1wbGUnKSxcbiAgICAgIGdyYW1tYXIgPSByZXF1aXJlKCcuLi9ibmYvZ3JhbW1hcicpLFxuICAgICAgQk5GUGFyc2VyID0gcmVxdWlyZSgnLi4vYm5mL3BhcnNlcicpO1xuXG5jb25zdCB7IFRleHRhcmVhIH0gPSBlYXN5LFxuICAgICAgeyBCTkZMZXhlciB9ID0gbGV4ZXJzO1xuXG5jb25zdCBsZXhpY2FsR3JhbW1hclRleHRhcmVhU2VsZWN0b3IgPSAndGV4dGFyZWEjbGV4aWNhbEdyYW1tYXInLFxuICAgICAgbGV4aWNhbEdyYW1tYXIgPSBCTkZMZXhlci5ncmFtbWFyO1xuXG5sZXQgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYSxcbiAgICBibmZMZXhlciA9IG51bGwsXG4gICAgYm5mUGFyc2VyID0gbnVsbDtcblxuY2xhc3MgQk5GRXhhbXBsZSB7XG4gIHN0YXRpYyBydW4oKSB7XG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYSA9IG5ldyBUZXh0YXJlYShsZXhpY2FsR3JhbW1hclRleHRhcmVhU2VsZWN0b3IpO1xuXG4gICAgY29uc3QgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYVZhbHVlID0gSlNPTi5zdHJpbmdpZnkobGV4aWNhbEdyYW1tYXIsIG51bGwsICcgICcpLCAvLy9cbiAgICAgICAgICBibmZHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IGdyYW1tYXIsICAvLy9cbiAgICAgICAgICBjb250ZW50VGV4dGFyZWFWYWx1ZSA9IGdyYW1tYXI7IC8vL1xuXG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5zZXRWYWx1ZShsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUpO1xuXG4gICAgRXhhbXBsZS5zZXRCTkZHcmFtbWFyVGV4dGFyZWFWYWx1ZShibmZHcmFtbWFyVGV4dGFyZWFWYWx1ZSk7XG5cbiAgICBFeGFtcGxlLnNldENvbnRlbnRUZXh0YXJlYVZhbHVlKGNvbnRlbnRUZXh0YXJlYVZhbHVlKTtcblxuICAgIEV4YW1wbGUub25Db250ZW50VGV4dGFyZWFLZXlVcCh1cGRhdGUpO1xuXG4gICAgRXhhbXBsZS5vbkJORkdyYW1tYXJUZXh0YXJlYUtleVVwKHVwZGF0ZSk7XG5cbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLm9uS2V5VXAodXBkYXRlKTtcblxuICAgIHVwZGF0ZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgdXBkYXRlQk5GTGV4ZXIoKTtcblxuICB1cGRhdGVCTkZQYXJzZXIoKTtcblxuICBpZiAoYm5mTGV4ZXIgIT09IG51bGwpIHtcbiAgICBjb25zdCBwcm9kdWN0aW9uID0gbnVsbCxcbiAgICAgICAgICBub2RlID0gRXhhbXBsZS51cGRhdGVQYXJzZVRyZWVUZXh0YXJlYShibmZMZXhlciwgYm5mUGFyc2VyLCBwcm9kdWN0aW9uKSxcbiAgICAgICAgICBwcm9kdWN0aW9uc05vZGUgPSBub2RlOyAvLy9cblxuICAgIEJORlBhcnNlci5nZW5lcmF0ZVByb2R1Y3Rpb25zKHByb2R1Y3Rpb25zTm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgRXhhbXBsZS5jbGVhclBhcnNlVHJlZVRleHRhcmVhKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCTkZFeGFtcGxlO1xuXG5mdW5jdGlvbiB1cGRhdGVCTkZMZXhlcigpIHtcbiAgY29uc3QgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYVZhbHVlID0gbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5nZXRWYWx1ZSgpO1xuXG4gIGxldCBsZXhpY2FsR3JhbW1hciA9IG51bGw7XG5cbiAgdHJ5IHtcbiAgICBsZXhpY2FsR3JhbW1hciA9IEpTT04ucGFyc2UobGV4aWNhbEdyYW1tYXJUZXh0YXJlYVZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHt9XG5cbiAgY29uc3QgbGV4aWNhbEdyYW1tYXJWYWxpZCA9IChsZXhpY2FsR3JhbW1hciAhPT0gbnVsbCk7XG5cbiAgaWYgKGxleGljYWxHcmFtbWFyVmFsaWQpIHtcbiAgICBibmZMZXhlciA9IEJORkxleGVyLmZyb21HcmFtbWFyKGxleGljYWxHcmFtbWFyKTtcblxuICAgIGxleGljYWxHcmFtbWFyVGV4dGFyZWEucmVtb3ZlQ2xhc3MoJ2Vycm9yJyk7XG4gIH0gZWxzZSB7XG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5hZGRDbGFzcygnZXJyb3InKTtcblxuICAgIGJuZkxleGVyID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVCTkZQYXJzZXIoKSB7XG4gIGJuZlBhcnNlciA9IEJORlBhcnNlci5mcm9tTm90aGluZygpO1xufVxuIl19