'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easy = require('easy'),
    lexers = require('occam-lexers');

var Example = require('../example'),
    grammar = require('../bnf/grammar'),
    BNFParser = require('../bnf/parser');

var Textarea = easy.Textarea,
    BNFLexer = lexers.BNFLexer;


var lexicalGrammarTextareaSelector = 'textarea#lexicalGrammar',
    adjustedBNFGrammarTextareaSelector = 'textarea#adjustedBNFGrammar',
    lexicalGrammar = BNFLexer.grammar;

var lexicalGrammarTextarea = void 0,
    adjustedBNFGrammarTextarea = void 0,
    bnfLexer = null,
    bnfParser = null;

var BNFExample = function () {
  function BNFExample() {
    _classCallCheck(this, BNFExample);
  }

  _createClass(BNFExample, null, [{
    key: 'run',
    value: function run() {
      lexicalGrammarTextarea = new Textarea(lexicalGrammarTextareaSelector);
      adjustedBNFGrammarTextarea = new Textarea(adjustedBNFGrammarTextareaSelector);

      var lexicalGrammarTextareaValue = JSON.stringify(lexicalGrammar, null, '  '),
          ///
      contentTextareaValue = grammar; ///

      lexicalGrammarTextarea.setValue(lexicalGrammarTextareaValue);

      Example.setContentTextareaValue(contentTextareaValue);

      Example.onContentTextareaKeyUp(update);

      lexicalGrammarTextarea.onKeyUp(update);

      update();
    }
  }]);

  return BNFExample;
}();

function update() {
  updateBNFLexer();

  updateBNFParser();

  updateAdjustedBNFGrammar();

  if (bnfLexer !== null) {
    var production = null,
        node = Example.updateParseTreeTextarea(bnfLexer, bnfParser, production),
        productionsNode = node; ///

    BNFParser.generateProductions(productionsNode);
  } else {
    Example.clearParseTreeTextarea();
  }
}

module.exports = BNFExample;

function updateBNFLexer() {
  var lexicalGrammarTextareaValue = lexicalGrammarTextarea.getValue();

  var lexicalGrammar = null;

  try {
    lexicalGrammar = JSON.parse(lexicalGrammarTextareaValue);
  } catch (error) {}

  var lexicalGrammarValid = lexicalGrammar !== null;

  if (lexicalGrammarValid) {
    bnfLexer = BNFLexer.fromGrammar(lexicalGrammar);

    lexicalGrammarTextarea.removeClass('error');
  } else {
    lexicalGrammarTextarea.addClass('error');

    bnfLexer = null;
  }
}

function updateBNFParser() {
  bnfParser = BNFParser.fromNothing();
}

function updateAdjustedBNFGrammar() {
  var bnfParserString = bnfParser.toString(),
      adjustedBNFGrammarTextareaValue = bnfParserString; ///

  adjustedBNFGrammarTextarea.setValue(adjustedBNFGrammarTextareaValue);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9ibmYuanMiXSwibmFtZXMiOlsiZWFzeSIsInJlcXVpcmUiLCJsZXhlcnMiLCJFeGFtcGxlIiwiZ3JhbW1hciIsIkJORlBhcnNlciIsIlRleHRhcmVhIiwiQk5GTGV4ZXIiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhU2VsZWN0b3IiLCJhZGp1c3RlZEJORkdyYW1tYXJUZXh0YXJlYVNlbGVjdG9yIiwibGV4aWNhbEdyYW1tYXIiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhIiwiYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWEiLCJibmZMZXhlciIsImJuZlBhcnNlciIsIkJORkV4YW1wbGUiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwiY29udGVudFRleHRhcmVhVmFsdWUiLCJzZXRWYWx1ZSIsInNldENvbnRlbnRUZXh0YXJlYVZhbHVlIiwib25Db250ZW50VGV4dGFyZWFLZXlVcCIsInVwZGF0ZSIsIm9uS2V5VXAiLCJ1cGRhdGVCTkZMZXhlciIsInVwZGF0ZUJORlBhcnNlciIsInVwZGF0ZUFkanVzdGVkQk5GR3JhbW1hciIsInByb2R1Y3Rpb24iLCJub2RlIiwidXBkYXRlUGFyc2VUcmVlVGV4dGFyZWEiLCJwcm9kdWN0aW9uc05vZGUiLCJnZW5lcmF0ZVByb2R1Y3Rpb25zIiwiY2xlYXJQYXJzZVRyZWVUZXh0YXJlYSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRWYWx1ZSIsInBhcnNlIiwiZXJyb3IiLCJsZXhpY2FsR3JhbW1hclZhbGlkIiwiZnJvbUdyYW1tYXIiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXJTdHJpbmciLCJ0b1N0cmluZyIsImFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhVmFsdWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjtBQUFBLElBQ01DLFNBQVNELFFBQVEsY0FBUixDQURmOztBQUdBLElBQU1FLFVBQVVGLFFBQVEsWUFBUixDQUFoQjtBQUFBLElBQ01HLFVBQVVILFFBQVEsZ0JBQVIsQ0FEaEI7QUFBQSxJQUVNSSxZQUFZSixRQUFRLGVBQVIsQ0FGbEI7O0FBSU0sSUFBRUssUUFBRixHQUFlTixJQUFmLENBQUVNLFFBQUY7QUFBQSxJQUNFQyxRQURGLEdBQ2VMLE1BRGYsQ0FDRUssUUFERjs7O0FBR04sSUFBTUMsaUNBQWlDLHlCQUF2QztBQUFBLElBQ01DLHFDQUFxQyw2QkFEM0M7QUFBQSxJQUVNQyxpQkFBaUJILFNBQVNILE9BRmhDOztBQUlBLElBQUlPLCtCQUFKO0FBQUEsSUFDSUMsbUNBREo7QUFBQSxJQUVJQyxXQUFXLElBRmY7QUFBQSxJQUdJQyxZQUFZLElBSGhCOztJQUtNQyxVOzs7Ozs7OzBCQUNTO0FBQ1hKLCtCQUF5QixJQUFJTCxRQUFKLENBQWFFLDhCQUFiLENBQXpCO0FBQ0FJLG1DQUE2QixJQUFJTixRQUFKLENBQWFHLGtDQUFiLENBQTdCOztBQUVBLFVBQU1PLDhCQUE4QkMsS0FBS0MsU0FBTCxDQUFlUixjQUFmLEVBQStCLElBQS9CLEVBQXFDLElBQXJDLENBQXBDO0FBQUEsVUFBZ0Y7QUFDMUVTLDZCQUF1QmYsT0FEN0IsQ0FKVyxDQUsyQjs7QUFFdENPLDZCQUF1QlMsUUFBdkIsQ0FBZ0NKLDJCQUFoQzs7QUFFQWIsY0FBUWtCLHVCQUFSLENBQWdDRixvQkFBaEM7O0FBRUFoQixjQUFRbUIsc0JBQVIsQ0FBK0JDLE1BQS9COztBQUVBWiw2QkFBdUJhLE9BQXZCLENBQStCRCxNQUEvQjs7QUFFQUE7QUFDRDs7Ozs7O0FBR0gsU0FBU0EsTUFBVCxHQUFrQjtBQUNoQkU7O0FBRUFDOztBQUVBQzs7QUFFQSxNQUFJZCxhQUFhLElBQWpCLEVBQXVCO0FBQ3JCLFFBQU1lLGFBQWEsSUFBbkI7QUFBQSxRQUNNQyxPQUFPMUIsUUFBUTJCLHVCQUFSLENBQWdDakIsUUFBaEMsRUFBMENDLFNBQTFDLEVBQXFEYyxVQUFyRCxDQURiO0FBQUEsUUFFTUcsa0JBQWtCRixJQUZ4QixDQURxQixDQUdTOztBQUU5QnhCLGNBQVUyQixtQkFBVixDQUE4QkQsZUFBOUI7QUFDRCxHQU5ELE1BTU87QUFDTDVCLFlBQVE4QixzQkFBUjtBQUNEO0FBQ0Y7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUJwQixVQUFqQjs7QUFFQSxTQUFTVSxjQUFULEdBQTBCO0FBQ3hCLE1BQU1ULDhCQUE4QkwsdUJBQXVCeUIsUUFBdkIsRUFBcEM7O0FBRUEsTUFBSTFCLGlCQUFpQixJQUFyQjs7QUFFQSxNQUFJO0FBQ0ZBLHFCQUFpQk8sS0FBS29CLEtBQUwsQ0FBV3JCLDJCQUFYLENBQWpCO0FBQ0QsR0FGRCxDQUVFLE9BQU9zQixLQUFQLEVBQWMsQ0FBRTs7QUFFbEIsTUFBTUMsc0JBQXVCN0IsbUJBQW1CLElBQWhEOztBQUVBLE1BQUk2QixtQkFBSixFQUF5QjtBQUN2QjFCLGVBQVdOLFNBQVNpQyxXQUFULENBQXFCOUIsY0FBckIsQ0FBWDs7QUFFQUMsMkJBQXVCOEIsV0FBdkIsQ0FBbUMsT0FBbkM7QUFDRCxHQUpELE1BSU87QUFDTDlCLDJCQUF1QitCLFFBQXZCLENBQWdDLE9BQWhDOztBQUVBN0IsZUFBVyxJQUFYO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTYSxlQUFULEdBQTJCO0FBQ3pCWixjQUFZVCxVQUFVc0MsV0FBVixFQUFaO0FBQ0Q7O0FBRUQsU0FBU2hCLHdCQUFULEdBQW9DO0FBQ2xDLE1BQU1pQixrQkFBa0I5QixVQUFVK0IsUUFBVixFQUF4QjtBQUFBLE1BQ01DLGtDQUFrQ0YsZUFEeEMsQ0FEa0MsQ0FFd0I7O0FBRTFEaEMsNkJBQTJCUSxRQUEzQixDQUFvQzBCLCtCQUFwQztBQUNEIiwiZmlsZSI6ImJuZi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZWFzeSA9IHJlcXVpcmUoJ2Vhc3knKSxcbiAgICAgIGxleGVycyA9IHJlcXVpcmUoJ29jY2FtLWxleGVycycpO1xuXG5jb25zdCBFeGFtcGxlID0gcmVxdWlyZSgnLi4vZXhhbXBsZScpLFxuICAgICAgZ3JhbW1hciA9IHJlcXVpcmUoJy4uL2JuZi9ncmFtbWFyJyksXG4gICAgICBCTkZQYXJzZXIgPSByZXF1aXJlKCcuLi9ibmYvcGFyc2VyJyk7XG5cbmNvbnN0IHsgVGV4dGFyZWEgfSA9IGVhc3ksXG4gICAgICB7IEJORkxleGVyIH0gPSBsZXhlcnM7XG5cbmNvbnN0IGxleGljYWxHcmFtbWFyVGV4dGFyZWFTZWxlY3RvciA9ICd0ZXh0YXJlYSNsZXhpY2FsR3JhbW1hcicsXG4gICAgICBhZGp1c3RlZEJORkdyYW1tYXJUZXh0YXJlYVNlbGVjdG9yID0gJ3RleHRhcmVhI2FkanVzdGVkQk5GR3JhbW1hcicsXG4gICAgICBsZXhpY2FsR3JhbW1hciA9IEJORkxleGVyLmdyYW1tYXI7XG5cbmxldCBsZXhpY2FsR3JhbW1hclRleHRhcmVhLFxuICAgIGFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhLFxuICAgIGJuZkxleGVyID0gbnVsbCxcbiAgICBibmZQYXJzZXIgPSBudWxsO1xuXG5jbGFzcyBCTkZFeGFtcGxlIHtcbiAgc3RhdGljIHJ1bigpIHtcbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhID0gbmV3IFRleHRhcmVhKGxleGljYWxHcmFtbWFyVGV4dGFyZWFTZWxlY3Rvcik7XG4gICAgYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWEgPSBuZXcgVGV4dGFyZWEoYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWFTZWxlY3Rvcik7XG5cbiAgICBjb25zdCBsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUgPSBKU09OLnN0cmluZ2lmeShsZXhpY2FsR3JhbW1hciwgbnVsbCwgJyAgJyksIC8vL1xuICAgICAgICAgIGNvbnRlbnRUZXh0YXJlYVZhbHVlID0gZ3JhbW1hcjsgLy8vXG5cbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLnNldFZhbHVlKGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSk7XG5cbiAgICBFeGFtcGxlLnNldENvbnRlbnRUZXh0YXJlYVZhbHVlKGNvbnRlbnRUZXh0YXJlYVZhbHVlKTtcblxuICAgIEV4YW1wbGUub25Db250ZW50VGV4dGFyZWFLZXlVcCh1cGRhdGUpO1xuXG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5vbktleVVwKHVwZGF0ZSk7XG5cbiAgICB1cGRhdGUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIHVwZGF0ZUJORkxleGVyKCk7XG5cbiAgdXBkYXRlQk5GUGFyc2VyKCk7XG5cbiAgdXBkYXRlQWRqdXN0ZWRCTkZHcmFtbWFyKCk7XG5cbiAgaWYgKGJuZkxleGVyICE9PSBudWxsKSB7XG4gICAgY29uc3QgcHJvZHVjdGlvbiA9IG51bGwsXG4gICAgICAgICAgbm9kZSA9IEV4YW1wbGUudXBkYXRlUGFyc2VUcmVlVGV4dGFyZWEoYm5mTGV4ZXIsIGJuZlBhcnNlciwgcHJvZHVjdGlvbiksXG4gICAgICAgICAgcHJvZHVjdGlvbnNOb2RlID0gbm9kZTsgLy8vXG5cbiAgICBCTkZQYXJzZXIuZ2VuZXJhdGVQcm9kdWN0aW9ucyhwcm9kdWN0aW9uc05vZGUpO1xuICB9IGVsc2Uge1xuICAgIEV4YW1wbGUuY2xlYXJQYXJzZVRyZWVUZXh0YXJlYSgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQk5GRXhhbXBsZTtcblxuZnVuY3Rpb24gdXBkYXRlQk5GTGV4ZXIoKSB7XG4gIGNvbnN0IGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IGxleGljYWxHcmFtbWFyVGV4dGFyZWEuZ2V0VmFsdWUoKTtcblxuICBsZXQgbGV4aWNhbEdyYW1tYXIgPSBudWxsO1xuXG4gIHRyeSB7XG4gICAgbGV4aWNhbEdyYW1tYXIgPSBKU09OLnBhcnNlKGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fVxuXG4gIGNvbnN0IGxleGljYWxHcmFtbWFyVmFsaWQgPSAobGV4aWNhbEdyYW1tYXIgIT09IG51bGwpO1xuXG4gIGlmIChsZXhpY2FsR3JhbW1hclZhbGlkKSB7XG4gICAgYm5mTGV4ZXIgPSBCTkZMZXhlci5mcm9tR3JhbW1hcihsZXhpY2FsR3JhbW1hcik7XG5cbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLnJlbW92ZUNsYXNzKCdlcnJvcicpO1xuICB9IGVsc2Uge1xuICAgIGxleGljYWxHcmFtbWFyVGV4dGFyZWEuYWRkQ2xhc3MoJ2Vycm9yJyk7XG5cbiAgICBibmZMZXhlciA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQk5GUGFyc2VyKCkge1xuICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQWRqdXN0ZWRCTkZHcmFtbWFyKCkge1xuICBjb25zdCBibmZQYXJzZXJTdHJpbmcgPSBibmZQYXJzZXIudG9TdHJpbmcoKSxcbiAgICAgICAgYWRqdXN0ZWRCTkZHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IGJuZlBhcnNlclN0cmluZzsgIC8vL1xuXG4gIGFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhLnNldFZhbHVlKGFkanVzdGVkQk5GR3JhbW1hclRleHRhcmVhVmFsdWUpO1xufVxuIl19