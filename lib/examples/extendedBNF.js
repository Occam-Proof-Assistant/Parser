'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easy = require('easy'),
    lexers = require('occam-lexers');

var Example = require('../example'),
    grammar = require('../extendedBNF/grammar'),
    ExtendedBNFParser = require('../extendedBNF/parser');

var Textarea = easy.Textarea,
    ExtendedBNFLexer = lexers.ExtendedBNFLexer;


var lexicalGrammarTextareaSelector = 'textarea#lexicalGrammar',
    lexicalGrammar = ExtendedBNFLexer.grammar;

var lexicalGrammarTextarea = void 0,
    extendedBNFLexer = null,
    extendedBNFParser = null;

var ExtendedBNFExample = function () {
  function ExtendedBNFExample() {
    _classCallCheck(this, ExtendedBNFExample);
  }

  _createClass(ExtendedBNFExample, null, [{
    key: 'run',
    value: function run() {
      lexicalGrammarTextarea = new Textarea(lexicalGrammarTextareaSelector);

      var lexicalGrammarTextareaValue = JSON.stringify(lexicalGrammar, null, '  '),
          ///
      bnfGrammarTextareaValue = grammar,
          ///
      contentTextareaValue = grammar; ///

      lexicalGrammarTextarea.setValue(lexicalGrammarTextareaValue);

      Example.setExtendedBNFGrammarTextareaValue(bnfGrammarTextareaValue);

      Example.setContentTextareaValue(contentTextareaValue);

      Example.onContentTextareaKeyUp(update);

      Example.onExtendedBNFGrammarTextareaKeyUp(update);

      lexicalGrammarTextarea.onKeyUp(update);

      update();
    }
  }]);

  return ExtendedBNFExample;
}();

function update() {
  EpdateextendedBNFLexer();

  updateExtendedBNFParser();

  if (extendedBNFLexer !== null) {
    var production = null,
        node = Example.updateParseTreeTextarea(extendedBNFLexer, extendedBNFParser, production),
        productionsNode = node; ///

    ExtendedBNFParser.generateProductions(productionsNode);
  } else {
    Example.clearParseTreeTextarea();
  }
}

module.exports = ExtendedBNFExample;

function EpdateextendedBNFLexer() {
  var lexicalGrammarTextareaValue = lexicalGrammarTextarea.getValue();

  var lexicalGrammar = null;

  try {
    lexicalGrammar = JSON.parse(lexicalGrammarTextareaValue);
  } catch (error) {}

  var lexicalGrammarValid = lexicalGrammar !== null;

  if (lexicalGrammarValid) {
    extendedBNFLexer = ExtendedBNFLexer.fromGrammar(lexicalGrammar);

    lexicalGrammarTextarea.removeClass('error');
  } else {
    lexicalGrammarTextarea.addClass('error');

    extendedBNFLexer = null;
  }
}

function updateExtendedBNFParser() {
  extendedBNFParser = ExtendedBNFParser.fromNothing();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9leHRlbmRlZEJORi5qcyJdLCJuYW1lcyI6WyJlYXN5IiwicmVxdWlyZSIsImxleGVycyIsIkV4YW1wbGUiLCJncmFtbWFyIiwiRXh0ZW5kZWRCTkZQYXJzZXIiLCJUZXh0YXJlYSIsIkV4dGVuZGVkQk5GTGV4ZXIiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhU2VsZWN0b3IiLCJsZXhpY2FsR3JhbW1hciIsImxleGljYWxHcmFtbWFyVGV4dGFyZWEiLCJleHRlbmRlZEJORkxleGVyIiwiZXh0ZW5kZWRCTkZQYXJzZXIiLCJFeHRlbmRlZEJORkV4YW1wbGUiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwiYm5mR3JhbW1hclRleHRhcmVhVmFsdWUiLCJjb250ZW50VGV4dGFyZWFWYWx1ZSIsInNldFZhbHVlIiwic2V0RXh0ZW5kZWRCTkZHcmFtbWFyVGV4dGFyZWFWYWx1ZSIsInNldENvbnRlbnRUZXh0YXJlYVZhbHVlIiwib25Db250ZW50VGV4dGFyZWFLZXlVcCIsInVwZGF0ZSIsIm9uRXh0ZW5kZWRCTkZHcmFtbWFyVGV4dGFyZWFLZXlVcCIsIm9uS2V5VXAiLCJFcGRhdGVleHRlbmRlZEJORkxleGVyIiwidXBkYXRlRXh0ZW5kZWRCTkZQYXJzZXIiLCJwcm9kdWN0aW9uIiwibm9kZSIsInVwZGF0ZVBhcnNlVHJlZVRleHRhcmVhIiwicHJvZHVjdGlvbnNOb2RlIiwiZ2VuZXJhdGVQcm9kdWN0aW9ucyIsImNsZWFyUGFyc2VUcmVlVGV4dGFyZWEiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0VmFsdWUiLCJwYXJzZSIsImVycm9yIiwibGV4aWNhbEdyYW1tYXJWYWxpZCIsImZyb21HcmFtbWFyIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImZyb21Ob3RoaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFBQSxJQUNNQyxTQUFTRCxRQUFRLGNBQVIsQ0FEZjs7QUFHQSxJQUFNRSxVQUFVRixRQUFRLFlBQVIsQ0FBaEI7QUFBQSxJQUNNRyxVQUFVSCxRQUFRLHdCQUFSLENBRGhCO0FBQUEsSUFFTUksb0JBQW9CSixRQUFRLHVCQUFSLENBRjFCOztBQUlNLElBQUVLLFFBQUYsR0FBZU4sSUFBZixDQUFFTSxRQUFGO0FBQUEsSUFDRUMsZ0JBREYsR0FDdUJMLE1BRHZCLENBQ0VLLGdCQURGOzs7QUFHTixJQUFNQyxpQ0FBaUMseUJBQXZDO0FBQUEsSUFDTUMsaUJBQWlCRixpQkFBaUJILE9BRHhDOztBQUdBLElBQUlNLCtCQUFKO0FBQUEsSUFDSUMsbUJBQW1CLElBRHZCO0FBQUEsSUFFSUMsb0JBQW9CLElBRnhCOztJQUlNQyxrQjs7Ozs7OzswQkFDUztBQUNYSCwrQkFBeUIsSUFBSUosUUFBSixDQUFhRSw4QkFBYixDQUF6Qjs7QUFFQSxVQUFNTSw4QkFBOEJDLEtBQUtDLFNBQUwsQ0FBZVAsY0FBZixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxDQUFwQztBQUFBLFVBQWdGO0FBQzFFUSxnQ0FBMEJiLE9BRGhDO0FBQUEsVUFDMEM7QUFDcENjLDZCQUF1QmQsT0FGN0IsQ0FIVyxDQUsyQjs7QUFFdENNLDZCQUF1QlMsUUFBdkIsQ0FBZ0NMLDJCQUFoQzs7QUFFQVgsY0FBUWlCLGtDQUFSLENBQTJDSCx1QkFBM0M7O0FBRUFkLGNBQVFrQix1QkFBUixDQUFnQ0gsb0JBQWhDOztBQUVBZixjQUFRbUIsc0JBQVIsQ0FBK0JDLE1BQS9COztBQUVBcEIsY0FBUXFCLGlDQUFSLENBQTBDRCxNQUExQzs7QUFFQWIsNkJBQXVCZSxPQUF2QixDQUErQkYsTUFBL0I7O0FBRUFBO0FBQ0Q7Ozs7OztBQUdILFNBQVNBLE1BQVQsR0FBa0I7QUFDaEJHOztBQUVBQzs7QUFFQSxNQUFJaEIscUJBQXFCLElBQXpCLEVBQStCO0FBQzdCLFFBQU1pQixhQUFhLElBQW5CO0FBQUEsUUFDTUMsT0FBTzFCLFFBQVEyQix1QkFBUixDQUFnQ25CLGdCQUFoQyxFQUFrREMsaUJBQWxELEVBQXFFZ0IsVUFBckUsQ0FEYjtBQUFBLFFBRU1HLGtCQUFrQkYsSUFGeEIsQ0FENkIsQ0FHQzs7QUFFOUJ4QixzQkFBa0IyQixtQkFBbEIsQ0FBc0NELGVBQXRDO0FBQ0QsR0FORCxNQU1PO0FBQ0w1QixZQUFROEIsc0JBQVI7QUFDRDtBQUNGOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCdEIsa0JBQWpCOztBQUVBLFNBQVNhLHNCQUFULEdBQWtDO0FBQ2hDLE1BQU1aLDhCQUE4QkosdUJBQXVCMEIsUUFBdkIsRUFBcEM7O0FBRUEsTUFBSTNCLGlCQUFpQixJQUFyQjs7QUFFQSxNQUFJO0FBQ0ZBLHFCQUFpQk0sS0FBS3NCLEtBQUwsQ0FBV3ZCLDJCQUFYLENBQWpCO0FBQ0QsR0FGRCxDQUVFLE9BQU93QixLQUFQLEVBQWMsQ0FBRTs7QUFFbEIsTUFBTUMsc0JBQXVCOUIsbUJBQW1CLElBQWhEOztBQUVBLE1BQUk4QixtQkFBSixFQUF5QjtBQUN2QjVCLHVCQUFtQkosaUJBQWlCaUMsV0FBakIsQ0FBNkIvQixjQUE3QixDQUFuQjs7QUFFQUMsMkJBQXVCK0IsV0FBdkIsQ0FBbUMsT0FBbkM7QUFDRCxHQUpELE1BSU87QUFDTC9CLDJCQUF1QmdDLFFBQXZCLENBQWdDLE9BQWhDOztBQUVBL0IsdUJBQW1CLElBQW5CO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTZ0IsdUJBQVQsR0FBbUM7QUFDakNmLHNCQUFvQlAsa0JBQWtCc0MsV0FBbEIsRUFBcEI7QUFDRCIsImZpbGUiOiJleHRlbmRlZEJORi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZWFzeSA9IHJlcXVpcmUoJ2Vhc3knKSxcbiAgICAgIGxleGVycyA9IHJlcXVpcmUoJ29jY2FtLWxleGVycycpO1xuXG5jb25zdCBFeGFtcGxlID0gcmVxdWlyZSgnLi4vZXhhbXBsZScpLFxuICAgICAgZ3JhbW1hciA9IHJlcXVpcmUoJy4uL2V4dGVuZGVkQk5GL2dyYW1tYXInKSxcbiAgICAgIEV4dGVuZGVkQk5GUGFyc2VyID0gcmVxdWlyZSgnLi4vZXh0ZW5kZWRCTkYvcGFyc2VyJyk7XG5cbmNvbnN0IHsgVGV4dGFyZWEgfSA9IGVhc3ksXG4gICAgICB7IEV4dGVuZGVkQk5GTGV4ZXIgfSA9IGxleGVycztcblxuY29uc3QgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYVNlbGVjdG9yID0gJ3RleHRhcmVhI2xleGljYWxHcmFtbWFyJyxcbiAgICAgIGxleGljYWxHcmFtbWFyID0gRXh0ZW5kZWRCTkZMZXhlci5ncmFtbWFyO1xuXG5sZXQgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYSxcbiAgICBleHRlbmRlZEJORkxleGVyID0gbnVsbCxcbiAgICBleHRlbmRlZEJORlBhcnNlciA9IG51bGw7XG5cbmNsYXNzIEV4dGVuZGVkQk5GRXhhbXBsZSB7XG4gIHN0YXRpYyBydW4oKSB7XG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYSA9IG5ldyBUZXh0YXJlYShsZXhpY2FsR3JhbW1hclRleHRhcmVhU2VsZWN0b3IpO1xuXG4gICAgY29uc3QgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYVZhbHVlID0gSlNPTi5zdHJpbmdpZnkobGV4aWNhbEdyYW1tYXIsIG51bGwsICcgICcpLCAvLy9cbiAgICAgICAgICBibmZHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IGdyYW1tYXIsICAvLy9cbiAgICAgICAgICBjb250ZW50VGV4dGFyZWFWYWx1ZSA9IGdyYW1tYXI7IC8vL1xuXG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5zZXRWYWx1ZShsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUpO1xuXG4gICAgRXhhbXBsZS5zZXRFeHRlbmRlZEJORkdyYW1tYXJUZXh0YXJlYVZhbHVlKGJuZkdyYW1tYXJUZXh0YXJlYVZhbHVlKTtcblxuICAgIEV4YW1wbGUuc2V0Q29udGVudFRleHRhcmVhVmFsdWUoY29udGVudFRleHRhcmVhVmFsdWUpO1xuXG4gICAgRXhhbXBsZS5vbkNvbnRlbnRUZXh0YXJlYUtleVVwKHVwZGF0ZSk7XG5cbiAgICBFeGFtcGxlLm9uRXh0ZW5kZWRCTkZHcmFtbWFyVGV4dGFyZWFLZXlVcCh1cGRhdGUpO1xuXG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5vbktleVVwKHVwZGF0ZSk7XG5cbiAgICB1cGRhdGUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIEVwZGF0ZWV4dGVuZGVkQk5GTGV4ZXIoKTtcblxuICB1cGRhdGVFeHRlbmRlZEJORlBhcnNlcigpO1xuXG4gIGlmIChleHRlbmRlZEJORkxleGVyICE9PSBudWxsKSB7XG4gICAgY29uc3QgcHJvZHVjdGlvbiA9IG51bGwsXG4gICAgICAgICAgbm9kZSA9IEV4YW1wbGUudXBkYXRlUGFyc2VUcmVlVGV4dGFyZWEoZXh0ZW5kZWRCTkZMZXhlciwgZXh0ZW5kZWRCTkZQYXJzZXIsIHByb2R1Y3Rpb24pLFxuICAgICAgICAgIHByb2R1Y3Rpb25zTm9kZSA9IG5vZGU7IC8vL1xuXG4gICAgRXh0ZW5kZWRCTkZQYXJzZXIuZ2VuZXJhdGVQcm9kdWN0aW9ucyhwcm9kdWN0aW9uc05vZGUpO1xuICB9IGVsc2Uge1xuICAgIEV4YW1wbGUuY2xlYXJQYXJzZVRyZWVUZXh0YXJlYSgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXh0ZW5kZWRCTkZFeGFtcGxlO1xuXG5mdW5jdGlvbiBFcGRhdGVleHRlbmRlZEJORkxleGVyKCkge1xuICBjb25zdCBsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUgPSBsZXhpY2FsR3JhbW1hclRleHRhcmVhLmdldFZhbHVlKCk7XG5cbiAgbGV0IGxleGljYWxHcmFtbWFyID0gbnVsbDtcblxuICB0cnkge1xuICAgIGxleGljYWxHcmFtbWFyID0gSlNPTi5wYXJzZShsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge31cblxuICBjb25zdCBsZXhpY2FsR3JhbW1hclZhbGlkID0gKGxleGljYWxHcmFtbWFyICE9PSBudWxsKTtcblxuICBpZiAobGV4aWNhbEdyYW1tYXJWYWxpZCkge1xuICAgIGV4dGVuZGVkQk5GTGV4ZXIgPSBFeHRlbmRlZEJORkxleGVyLmZyb21HcmFtbWFyKGxleGljYWxHcmFtbWFyKTtcblxuICAgIGxleGljYWxHcmFtbWFyVGV4dGFyZWEucmVtb3ZlQ2xhc3MoJ2Vycm9yJyk7XG4gIH0gZWxzZSB7XG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5hZGRDbGFzcygnZXJyb3InKTtcblxuICAgIGV4dGVuZGVkQk5GTGV4ZXIgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUV4dGVuZGVkQk5GUGFyc2VyKCkge1xuICBleHRlbmRlZEJORlBhcnNlciA9IEV4dGVuZGVkQk5GUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG59XG4iXX0=