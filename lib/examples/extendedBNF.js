'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easy = require('easy'),
    lexers = require('occam-lexers');

var Example = require('../example'),
    grammar = require('../extendedBNF/grammar'),
    ExtendedBNFParser = require('../extendedBNF/parser');

var Textarea = easy.Textarea,
    BNFLexer = lexers.BNFLexer;


var lexicalGrammarTextareaSelector = 'textarea#lexicalGrammar',
    lexicalGrammar = BNFLexer.grammar;

var lexicalGrammarTextarea = void 0,
    bnfLexer = null,
    extendedBNFParser = null;

var ExtendedBNFExample = function () {
  function ExtendedBNFExample() {
    _classCallCheck(this, ExtendedBNFExample);
  }

  _createClass(ExtendedBNFExample, null, [{
    key: 'run',
    value: function run() {
      lexicalGrammarTextarea = new Textarea(lexicalGrammarTextareaSelector);

      var lexicalGrammarTextareaValue = JSON.stringify(lexicalGrammar, null, '  '),
          ///
      bnfGrammarTextareaValue = grammar,
          ///
      contentTextareaValue = grammar; ///

      lexicalGrammarTextarea.setValue(lexicalGrammarTextareaValue);

      Example.setExtendedBNFGrammarTextareaValue(bnfGrammarTextareaValue);

      Example.setContentTextareaValue(contentTextareaValue);

      Example.onContentTextareaKeyUp(update);

      Example.onExtendedBNFGrammarTextareaKeyUp(update);

      lexicalGrammarTextarea.onKeyUp(update);

      update();
    }
  }]);

  return ExtendedBNFExample;
}();

function update() {
  updateBNFLexer();

  updateExtendedBNFParser();

  if (bnfLexer !== null) {
    var production = null,
        node = Example.updateParseTreeTextarea(bnfLexer, extendedBNFParser, production),
        productionsNode = node; ///

    ExtendedBNFParser.generateProductions(productionsNode);
  } else {
    Example.clearParseTreeTextarea();
  }
}

module.exports = ExtendedBNFExample;

function updateBNFLexer() {
  var lexicalGrammarTextareaValue = lexicalGrammarTextarea.getValue();

  var lexicalGrammar = null;

  try {
    lexicalGrammar = JSON.parse(lexicalGrammarTextareaValue);
  } catch (error) {}

  var lexicalGrammarValid = lexicalGrammar !== null;

  if (lexicalGrammarValid) {
    bnfLexer = BNFLexer.fromGrammar(lexicalGrammar);

    lexicalGrammarTextarea.removeClass('error');
  } else {
    lexicalGrammarTextarea.addClass('error');

    bnfLexer = null;
  }
}

function updateExtendedBNFParser() {
  extendedBNFParser = ExtendedBNFParser.fromNothing();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9leHRlbmRlZEJORi5qcyJdLCJuYW1lcyI6WyJlYXN5IiwicmVxdWlyZSIsImxleGVycyIsIkV4YW1wbGUiLCJncmFtbWFyIiwiRXh0ZW5kZWRCTkZQYXJzZXIiLCJUZXh0YXJlYSIsIkJORkxleGVyIiwibGV4aWNhbEdyYW1tYXJUZXh0YXJlYVNlbGVjdG9yIiwibGV4aWNhbEdyYW1tYXIiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhIiwiYm5mTGV4ZXIiLCJleHRlbmRlZEJORlBhcnNlciIsIkV4dGVuZGVkQk5GRXhhbXBsZSIsImxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJibmZHcmFtbWFyVGV4dGFyZWFWYWx1ZSIsImNvbnRlbnRUZXh0YXJlYVZhbHVlIiwic2V0VmFsdWUiLCJzZXRFeHRlbmRlZEJORkdyYW1tYXJUZXh0YXJlYVZhbHVlIiwic2V0Q29udGVudFRleHRhcmVhVmFsdWUiLCJvbkNvbnRlbnRUZXh0YXJlYUtleVVwIiwidXBkYXRlIiwib25FeHRlbmRlZEJORkdyYW1tYXJUZXh0YXJlYUtleVVwIiwib25LZXlVcCIsInVwZGF0ZUJORkxleGVyIiwidXBkYXRlRXh0ZW5kZWRCTkZQYXJzZXIiLCJwcm9kdWN0aW9uIiwibm9kZSIsInVwZGF0ZVBhcnNlVHJlZVRleHRhcmVhIiwicHJvZHVjdGlvbnNOb2RlIiwiZ2VuZXJhdGVQcm9kdWN0aW9ucyIsImNsZWFyUGFyc2VUcmVlVGV4dGFyZWEiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0VmFsdWUiLCJwYXJzZSIsImVycm9yIiwibGV4aWNhbEdyYW1tYXJWYWxpZCIsImZyb21HcmFtbWFyIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImZyb21Ob3RoaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFBQSxJQUNNQyxTQUFTRCxRQUFRLGNBQVIsQ0FEZjs7QUFHQSxJQUFNRSxVQUFVRixRQUFRLFlBQVIsQ0FBaEI7QUFBQSxJQUNNRyxVQUFVSCxRQUFRLHdCQUFSLENBRGhCO0FBQUEsSUFFTUksb0JBQW9CSixRQUFRLHVCQUFSLENBRjFCOztBQUlNLElBQUVLLFFBQUYsR0FBZU4sSUFBZixDQUFFTSxRQUFGO0FBQUEsSUFDRUMsUUFERixHQUNlTCxNQURmLENBQ0VLLFFBREY7OztBQUdOLElBQU1DLGlDQUFpQyx5QkFBdkM7QUFBQSxJQUNNQyxpQkFBaUJGLFNBQVNILE9BRGhDOztBQUdBLElBQUlNLCtCQUFKO0FBQUEsSUFDSUMsV0FBVyxJQURmO0FBQUEsSUFFSUMsb0JBQW9CLElBRnhCOztJQUlNQyxrQjs7Ozs7OzswQkFDUztBQUNYSCwrQkFBeUIsSUFBSUosUUFBSixDQUFhRSw4QkFBYixDQUF6Qjs7QUFFQSxVQUFNTSw4QkFBOEJDLEtBQUtDLFNBQUwsQ0FBZVAsY0FBZixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxDQUFwQztBQUFBLFVBQWdGO0FBQzFFUSxnQ0FBMEJiLE9BRGhDO0FBQUEsVUFDMEM7QUFDcENjLDZCQUF1QmQsT0FGN0IsQ0FIVyxDQUsyQjs7QUFFdENNLDZCQUF1QlMsUUFBdkIsQ0FBZ0NMLDJCQUFoQzs7QUFFQVgsY0FBUWlCLGtDQUFSLENBQTJDSCx1QkFBM0M7O0FBRUFkLGNBQVFrQix1QkFBUixDQUFnQ0gsb0JBQWhDOztBQUVBZixjQUFRbUIsc0JBQVIsQ0FBK0JDLE1BQS9COztBQUVBcEIsY0FBUXFCLGlDQUFSLENBQTBDRCxNQUExQzs7QUFFQWIsNkJBQXVCZSxPQUF2QixDQUErQkYsTUFBL0I7O0FBRUFBO0FBQ0Q7Ozs7OztBQUdILFNBQVNBLE1BQVQsR0FBa0I7QUFDaEJHOztBQUVBQzs7QUFFQSxNQUFJaEIsYUFBYSxJQUFqQixFQUF1QjtBQUNyQixRQUFNaUIsYUFBYSxJQUFuQjtBQUFBLFFBQ01DLE9BQU8xQixRQUFRMkIsdUJBQVIsQ0FBZ0NuQixRQUFoQyxFQUEwQ0MsaUJBQTFDLEVBQTZEZ0IsVUFBN0QsQ0FEYjtBQUFBLFFBRU1HLGtCQUFrQkYsSUFGeEIsQ0FEcUIsQ0FHUzs7QUFFOUJ4QixzQkFBa0IyQixtQkFBbEIsQ0FBc0NELGVBQXRDO0FBQ0QsR0FORCxNQU1PO0FBQ0w1QixZQUFROEIsc0JBQVI7QUFDRDtBQUNGOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCdEIsa0JBQWpCOztBQUVBLFNBQVNhLGNBQVQsR0FBMEI7QUFDeEIsTUFBTVosOEJBQThCSix1QkFBdUIwQixRQUF2QixFQUFwQzs7QUFFQSxNQUFJM0IsaUJBQWlCLElBQXJCOztBQUVBLE1BQUk7QUFDRkEscUJBQWlCTSxLQUFLc0IsS0FBTCxDQUFXdkIsMkJBQVgsQ0FBakI7QUFDRCxHQUZELENBRUUsT0FBT3dCLEtBQVAsRUFBYyxDQUFFOztBQUVsQixNQUFNQyxzQkFBdUI5QixtQkFBbUIsSUFBaEQ7O0FBRUEsTUFBSThCLG1CQUFKLEVBQXlCO0FBQ3ZCNUIsZUFBV0osU0FBU2lDLFdBQVQsQ0FBcUIvQixjQUFyQixDQUFYOztBQUVBQywyQkFBdUIrQixXQUF2QixDQUFtQyxPQUFuQztBQUNELEdBSkQsTUFJTztBQUNML0IsMkJBQXVCZ0MsUUFBdkIsQ0FBZ0MsT0FBaEM7O0FBRUEvQixlQUFXLElBQVg7QUFDRDtBQUNGOztBQUVELFNBQVNnQix1QkFBVCxHQUFtQztBQUNqQ2Ysc0JBQW9CUCxrQkFBa0JzQyxXQUFsQixFQUFwQjtBQUNEIiwiZmlsZSI6ImV4dGVuZGVkQk5GLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBlYXN5ID0gcmVxdWlyZSgnZWFzeScpLFxuICAgICAgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyk7XG5cbmNvbnN0IEV4YW1wbGUgPSByZXF1aXJlKCcuLi9leGFtcGxlJyksXG4gICAgICBncmFtbWFyID0gcmVxdWlyZSgnLi4vZXh0ZW5kZWRCTkYvZ3JhbW1hcicpLFxuICAgICAgRXh0ZW5kZWRCTkZQYXJzZXIgPSByZXF1aXJlKCcuLi9leHRlbmRlZEJORi9wYXJzZXInKTtcblxuY29uc3QgeyBUZXh0YXJlYSB9ID0gZWFzeSxcbiAgICAgIHsgQk5GTGV4ZXIgfSA9IGxleGVycztcblxuY29uc3QgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYVNlbGVjdG9yID0gJ3RleHRhcmVhI2xleGljYWxHcmFtbWFyJyxcbiAgICAgIGxleGljYWxHcmFtbWFyID0gQk5GTGV4ZXIuZ3JhbW1hcjtcblxubGV0IGxleGljYWxHcmFtbWFyVGV4dGFyZWEsXG4gICAgYm5mTGV4ZXIgPSBudWxsLFxuICAgIGV4dGVuZGVkQk5GUGFyc2VyID0gbnVsbDtcblxuY2xhc3MgRXh0ZW5kZWRCTkZFeGFtcGxlIHtcbiAgc3RhdGljIHJ1bigpIHtcbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhID0gbmV3IFRleHRhcmVhKGxleGljYWxHcmFtbWFyVGV4dGFyZWFTZWxlY3Rvcik7XG5cbiAgICBjb25zdCBsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUgPSBKU09OLnN0cmluZ2lmeShsZXhpY2FsR3JhbW1hciwgbnVsbCwgJyAgJyksIC8vL1xuICAgICAgICAgIGJuZkdyYW1tYXJUZXh0YXJlYVZhbHVlID0gZ3JhbW1hciwgIC8vL1xuICAgICAgICAgIGNvbnRlbnRUZXh0YXJlYVZhbHVlID0gZ3JhbW1hcjsgLy8vXG5cbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLnNldFZhbHVlKGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSk7XG5cbiAgICBFeGFtcGxlLnNldEV4dGVuZGVkQk5GR3JhbW1hclRleHRhcmVhVmFsdWUoYm5mR3JhbW1hclRleHRhcmVhVmFsdWUpO1xuXG4gICAgRXhhbXBsZS5zZXRDb250ZW50VGV4dGFyZWFWYWx1ZShjb250ZW50VGV4dGFyZWFWYWx1ZSk7XG5cbiAgICBFeGFtcGxlLm9uQ29udGVudFRleHRhcmVhS2V5VXAodXBkYXRlKTtcblxuICAgIEV4YW1wbGUub25FeHRlbmRlZEJORkdyYW1tYXJUZXh0YXJlYUtleVVwKHVwZGF0ZSk7XG5cbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLm9uS2V5VXAodXBkYXRlKTtcblxuICAgIHVwZGF0ZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgdXBkYXRlQk5GTGV4ZXIoKTtcblxuICB1cGRhdGVFeHRlbmRlZEJORlBhcnNlcigpO1xuXG4gIGlmIChibmZMZXhlciAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHByb2R1Y3Rpb24gPSBudWxsLFxuICAgICAgICAgIG5vZGUgPSBFeGFtcGxlLnVwZGF0ZVBhcnNlVHJlZVRleHRhcmVhKGJuZkxleGVyLCBleHRlbmRlZEJORlBhcnNlciwgcHJvZHVjdGlvbiksXG4gICAgICAgICAgcHJvZHVjdGlvbnNOb2RlID0gbm9kZTsgLy8vXG5cbiAgICBFeHRlbmRlZEJORlBhcnNlci5nZW5lcmF0ZVByb2R1Y3Rpb25zKHByb2R1Y3Rpb25zTm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgRXhhbXBsZS5jbGVhclBhcnNlVHJlZVRleHRhcmVhKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFeHRlbmRlZEJORkV4YW1wbGU7XG5cbmZ1bmN0aW9uIHVwZGF0ZUJORkxleGVyKCkge1xuICBjb25zdCBsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUgPSBsZXhpY2FsR3JhbW1hclRleHRhcmVhLmdldFZhbHVlKCk7XG5cbiAgbGV0IGxleGljYWxHcmFtbWFyID0gbnVsbDtcblxuICB0cnkge1xuICAgIGxleGljYWxHcmFtbWFyID0gSlNPTi5wYXJzZShsZXhpY2FsR3JhbW1hclRleHRhcmVhVmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge31cblxuICBjb25zdCBsZXhpY2FsR3JhbW1hclZhbGlkID0gKGxleGljYWxHcmFtbWFyICE9PSBudWxsKTtcblxuICBpZiAobGV4aWNhbEdyYW1tYXJWYWxpZCkge1xuICAgIGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbUdyYW1tYXIobGV4aWNhbEdyYW1tYXIpO1xuXG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5yZW1vdmVDbGFzcygnZXJyb3InKTtcbiAgfSBlbHNlIHtcbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLmFkZENsYXNzKCdlcnJvcicpO1xuXG4gICAgYm5mTGV4ZXIgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUV4dGVuZGVkQk5GUGFyc2VyKCkge1xuICBleHRlbmRlZEJORlBhcnNlciA9IEV4dGVuZGVkQk5GUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG59XG4iXX0=