'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easy = require('easy'),
    lexers = require('occam-lexers');

var Example = require('../example'),
    grammar = require('../basic/grammar'),
    BasicParser = require('../basic/parser');

var Textarea = easy.Textarea,
    BasicLexer = lexers.BasicLexer;


var lexicalGrammarTextareaSelector = 'textarea#lexicalGrammar',
    lexicalGrammar = BasicLexer.grammar;

var lexicalGrammarTextarea = void 0,
    basicLexer = null,
    basicParser = null;

var BasicExample = function () {
  function BasicExample() {
    _classCallCheck(this, BasicExample);
  }

  _createClass(BasicExample, null, [{
    key: 'run',
    value: function run() {
      lexicalGrammarTextarea = new Textarea(lexicalGrammarTextareaSelector);

      var bnfGrammarTextareaValue = grammar,
          ///
      lexicalGrammarTextareaValue = JSON.stringify(lexicalGrammar, null, '  '); ///

      lexicalGrammarTextarea.setValue(lexicalGrammarTextareaValue);

      Example.setBNFGrammarTextareaValue(bnfGrammarTextareaValue);

      Example.onBNFGrammarTextareaKeyUp(update);

      Example.onContentTextareaKeyUp(update);

      lexicalGrammarTextarea.onKeyUp(update);

      update();
    }
  }]);

  return BasicExample;
}();

function update() {
  updateBasicLexer();

  updateBasicParser();

  if (basicLexer !== null) {
    var production = null; ///

    Example.updateParseTreeTextarea(basicLexer, basicParser, production);
  } else {
    Example.clearParseTreeTextarea();
  }
}

module.exports = BasicExample;

function updateBasicLexer() {
  var lexicalGrammarTextareaValue = lexicalGrammarTextarea.getValue();

  var lexicalGrammar = null;

  try {
    lexicalGrammar = JSON.parse(lexicalGrammarTextareaValue);
  } catch (error) {}

  var lexicalGrammarValid = lexicalGrammar !== null;

  if (lexicalGrammarValid) {
    basicLexer = BasicLexer.fromGrammar(lexicalGrammar);

    lexicalGrammarTextarea.removeClass('error');
  } else {
    lexicalGrammarTextarea.addClass('error');

    basicLexer = null;
  }
}

function updateBasicParser() {
  var bnfGrammarTextareaValue = Example.getBNFGrammarTextareaValue(),
      bnfGrammar = bnfGrammarTextareaValue; ///

  basicParser = BasicParser.fromGrammar(bnfGrammar);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9iYXNpYy5qcyJdLCJuYW1lcyI6WyJlYXN5IiwicmVxdWlyZSIsImxleGVycyIsIkV4YW1wbGUiLCJncmFtbWFyIiwiQmFzaWNQYXJzZXIiLCJUZXh0YXJlYSIsIkJhc2ljTGV4ZXIiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhU2VsZWN0b3IiLCJsZXhpY2FsR3JhbW1hciIsImxleGljYWxHcmFtbWFyVGV4dGFyZWEiLCJiYXNpY0xleGVyIiwiYmFzaWNQYXJzZXIiLCJCYXNpY0V4YW1wbGUiLCJibmZHcmFtbWFyVGV4dGFyZWFWYWx1ZSIsImxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXRWYWx1ZSIsInNldEJORkdyYW1tYXJUZXh0YXJlYVZhbHVlIiwib25CTkZHcmFtbWFyVGV4dGFyZWFLZXlVcCIsInVwZGF0ZSIsIm9uQ29udGVudFRleHRhcmVhS2V5VXAiLCJvbktleVVwIiwidXBkYXRlQmFzaWNMZXhlciIsInVwZGF0ZUJhc2ljUGFyc2VyIiwicHJvZHVjdGlvbiIsInVwZGF0ZVBhcnNlVHJlZVRleHRhcmVhIiwiY2xlYXJQYXJzZVRyZWVUZXh0YXJlYSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRWYWx1ZSIsInBhcnNlIiwiZXJyb3IiLCJsZXhpY2FsR3JhbW1hclZhbGlkIiwiZnJvbUdyYW1tYXIiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiZ2V0Qk5GR3JhbW1hclRleHRhcmVhVmFsdWUiLCJibmZHcmFtbWFyIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFBQSxJQUNNQyxTQUFTRCxRQUFRLGNBQVIsQ0FEZjs7QUFHQSxJQUFNRSxVQUFVRixRQUFRLFlBQVIsQ0FBaEI7QUFBQSxJQUNNRyxVQUFVSCxRQUFRLGtCQUFSLENBRGhCO0FBQUEsSUFFTUksY0FBY0osUUFBUSxpQkFBUixDQUZwQjs7QUFJTSxJQUFFSyxRQUFGLEdBQWVOLElBQWYsQ0FBRU0sUUFBRjtBQUFBLElBQ0VDLFVBREYsR0FDaUJMLE1BRGpCLENBQ0VLLFVBREY7OztBQUdOLElBQU1DLGlDQUFpQyx5QkFBdkM7QUFBQSxJQUNNQyxpQkFBaUJGLFdBQVdILE9BRGxDOztBQUdBLElBQUlNLCtCQUFKO0FBQUEsSUFDSUMsYUFBYSxJQURqQjtBQUFBLElBRUlDLGNBQWMsSUFGbEI7O0lBSU1DLFk7Ozs7Ozs7MEJBQ1M7QUFDWEgsK0JBQXlCLElBQUlKLFFBQUosQ0FBYUUsOEJBQWIsQ0FBekI7O0FBRUEsVUFBTU0sMEJBQTBCVixPQUFoQztBQUFBLFVBQXlDO0FBQ25DVyxvQ0FBOEJDLEtBQUtDLFNBQUwsQ0FBZVIsY0FBZixFQUErQixJQUEvQixFQUFxQyxJQUFyQyxDQURwQyxDQUhXLENBSXFFOztBQUVoRkMsNkJBQXVCUSxRQUF2QixDQUFnQ0gsMkJBQWhDOztBQUVBWixjQUFRZ0IsMEJBQVIsQ0FBbUNMLHVCQUFuQzs7QUFFQVgsY0FBUWlCLHlCQUFSLENBQWtDQyxNQUFsQzs7QUFFQWxCLGNBQVFtQixzQkFBUixDQUErQkQsTUFBL0I7O0FBRUFYLDZCQUF1QmEsT0FBdkIsQ0FBK0JGLE1BQS9COztBQUVBQTtBQUNEOzs7Ozs7QUFHSCxTQUFTQSxNQUFULEdBQWtCO0FBQ2hCRzs7QUFFQUM7O0FBRUEsTUFBSWQsZUFBZSxJQUFuQixFQUF5QjtBQUN2QixRQUFNZSxhQUFhLElBQW5CLENBRHVCLENBQ0c7O0FBRTFCdkIsWUFBUXdCLHVCQUFSLENBQWdDaEIsVUFBaEMsRUFBNENDLFdBQTVDLEVBQXlEYyxVQUF6RDtBQUNELEdBSkQsTUFJTztBQUNMdkIsWUFBUXlCLHNCQUFSO0FBQ0Q7QUFDRjs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQmpCLFlBQWpCOztBQUVBLFNBQVNXLGdCQUFULEdBQTRCO0FBQzFCLE1BQU1ULDhCQUE4QkwsdUJBQXVCcUIsUUFBdkIsRUFBcEM7O0FBRUEsTUFBSXRCLGlCQUFpQixJQUFyQjs7QUFFQSxNQUFJO0FBQ0ZBLHFCQUFpQk8sS0FBS2dCLEtBQUwsQ0FBV2pCLDJCQUFYLENBQWpCO0FBQ0QsR0FGRCxDQUVFLE9BQU9rQixLQUFQLEVBQWMsQ0FBRTs7QUFFbEIsTUFBTUMsc0JBQXVCekIsbUJBQW1CLElBQWhEOztBQUVBLE1BQUl5QixtQkFBSixFQUF5QjtBQUN2QnZCLGlCQUFhSixXQUFXNEIsV0FBWCxDQUF1QjFCLGNBQXZCLENBQWI7O0FBRUFDLDJCQUF1QjBCLFdBQXZCLENBQW1DLE9BQW5DO0FBQ0QsR0FKRCxNQUlPO0FBQ0wxQiwyQkFBdUIyQixRQUF2QixDQUFnQyxPQUFoQzs7QUFFQTFCLGlCQUFhLElBQWI7QUFDRDtBQUNGOztBQUVELFNBQVNjLGlCQUFULEdBQTZCO0FBQzNCLE1BQU1YLDBCQUEwQlgsUUFBUW1DLDBCQUFSLEVBQWhDO0FBQUEsTUFDTUMsYUFBYXpCLHVCQURuQixDQUQyQixDQUVpQjs7QUFFNUNGLGdCQUFjUCxZQUFZOEIsV0FBWixDQUF3QkksVUFBeEIsQ0FBZDtBQUNEIiwiZmlsZSI6ImJhc2ljLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBlYXN5ID0gcmVxdWlyZSgnZWFzeScpLFxuICAgICAgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyk7XG5cbmNvbnN0IEV4YW1wbGUgPSByZXF1aXJlKCcuLi9leGFtcGxlJyksXG4gICAgICBncmFtbWFyID0gcmVxdWlyZSgnLi4vYmFzaWMvZ3JhbW1hcicpLFxuICAgICAgQmFzaWNQYXJzZXIgPSByZXF1aXJlKCcuLi9iYXNpYy9wYXJzZXInKTtcblxuY29uc3QgeyBUZXh0YXJlYSB9ID0gZWFzeSxcbiAgICAgIHsgQmFzaWNMZXhlciB9ID0gbGV4ZXJzO1xuXG5jb25zdCBsZXhpY2FsR3JhbW1hclRleHRhcmVhU2VsZWN0b3IgPSAndGV4dGFyZWEjbGV4aWNhbEdyYW1tYXInLFxuICAgICAgbGV4aWNhbEdyYW1tYXIgPSBCYXNpY0xleGVyLmdyYW1tYXI7XG5cbmxldCBsZXhpY2FsR3JhbW1hclRleHRhcmVhLFxuICAgIGJhc2ljTGV4ZXIgPSBudWxsLFxuICAgIGJhc2ljUGFyc2VyID0gbnVsbDtcblxuY2xhc3MgQmFzaWNFeGFtcGxlIHtcbiAgc3RhdGljIHJ1bigpIHtcbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhID0gbmV3IFRleHRhcmVhKGxleGljYWxHcmFtbWFyVGV4dGFyZWFTZWxlY3Rvcik7XG5cbiAgICBjb25zdCBibmZHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IGdyYW1tYXIsIC8vL1xuICAgICAgICAgIGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KGxleGljYWxHcmFtbWFyLCBudWxsLCAnICAnKTsgLy8vXG5cbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLnNldFZhbHVlKGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSk7XG5cbiAgICBFeGFtcGxlLnNldEJORkdyYW1tYXJUZXh0YXJlYVZhbHVlKGJuZkdyYW1tYXJUZXh0YXJlYVZhbHVlKTtcblxuICAgIEV4YW1wbGUub25CTkZHcmFtbWFyVGV4dGFyZWFLZXlVcCh1cGRhdGUpO1xuXG4gICAgRXhhbXBsZS5vbkNvbnRlbnRUZXh0YXJlYUtleVVwKHVwZGF0ZSk7XG5cbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLm9uS2V5VXAodXBkYXRlKTtcblxuICAgIHVwZGF0ZSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgdXBkYXRlQmFzaWNMZXhlcigpO1xuXG4gIHVwZGF0ZUJhc2ljUGFyc2VyKCk7XG5cbiAgaWYgKGJhc2ljTGV4ZXIgIT09IG51bGwpIHtcbiAgICBjb25zdCBwcm9kdWN0aW9uID0gbnVsbDsgIC8vL1xuXG4gICAgRXhhbXBsZS51cGRhdGVQYXJzZVRyZWVUZXh0YXJlYShiYXNpY0xleGVyLCBiYXNpY1BhcnNlciwgcHJvZHVjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgRXhhbXBsZS5jbGVhclBhcnNlVHJlZVRleHRhcmVhKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNpY0V4YW1wbGU7XG5cbmZ1bmN0aW9uIHVwZGF0ZUJhc2ljTGV4ZXIoKSB7XG4gIGNvbnN0IGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IGxleGljYWxHcmFtbWFyVGV4dGFyZWEuZ2V0VmFsdWUoKTtcblxuICBsZXQgbGV4aWNhbEdyYW1tYXIgPSBudWxsO1xuXG4gIHRyeSB7XG4gICAgbGV4aWNhbEdyYW1tYXIgPSBKU09OLnBhcnNlKGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fVxuXG4gIGNvbnN0IGxleGljYWxHcmFtbWFyVmFsaWQgPSAobGV4aWNhbEdyYW1tYXIgIT09IG51bGwpO1xuXG4gIGlmIChsZXhpY2FsR3JhbW1hclZhbGlkKSB7XG4gICAgYmFzaWNMZXhlciA9IEJhc2ljTGV4ZXIuZnJvbUdyYW1tYXIobGV4aWNhbEdyYW1tYXIpO1xuXG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5yZW1vdmVDbGFzcygnZXJyb3InKTtcbiAgfSBlbHNlIHtcbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLmFkZENsYXNzKCdlcnJvcicpO1xuXG4gICAgYmFzaWNMZXhlciA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQmFzaWNQYXJzZXIoKSB7XG4gIGNvbnN0IGJuZkdyYW1tYXJUZXh0YXJlYVZhbHVlID0gRXhhbXBsZS5nZXRCTkZHcmFtbWFyVGV4dGFyZWFWYWx1ZSgpLFxuICAgICAgICBibmZHcmFtbWFyID0gYm5mR3JhbW1hclRleHRhcmVhVmFsdWU7IC8vL1xuXG4gIGJhc2ljUGFyc2VyID0gQmFzaWNQYXJzZXIuZnJvbUdyYW1tYXIoYm5mR3JhbW1hcik7XG59XG4iXX0=