'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var easy = require('easy'),
    lexers = require('occam-lexers');

var Example = require('../example'),
    grammar = require('../basic/grammar'),
    BasicParser = require('../basic/parser');

var Textarea = easy.Textarea,
    BasicLexer = lexers.BasicLexer;


var lexicalGrammarTextareaSelector = 'textarea#lexicalGrammar',
    lexicalGrammar = BasicLexer.grammar;

var lexicalGrammarTextarea = void 0,
    basicLexer = null,
    basicParser = null;

var BasicExample = function () {
  function BasicExample() {
    _classCallCheck(this, BasicExample);
  }

  _createClass(BasicExample, null, [{
    key: 'run',
    value: function run() {
      lexicalGrammarTextarea = new Textarea(lexicalGrammarTextareaSelector);

      var bnfGrammarTextareaValue = grammar,
          ///
      lexicalGrammarTextareaValue = JSON.stringify(lexicalGrammar, null, '  '); ///

      lexicalGrammarTextarea.setValue(lexicalGrammarTextareaValue);

      Example.setBNFGrammarTextareaValue(bnfGrammarTextareaValue);

      Example.onBNFGrammarTextareaKeyUp(update);

      Example.onContentTextareaKeyUp(update);

      lexicalGrammarTextarea.onKeyUp(update);

      update();
    }
  }]);

  return BasicExample;
}();

function update() {
  updateBasicLexer();

  updateBasicParser();

  if (basicLexer !== null && basicParser !== null) {
    var production = null; ///

    Example.updateParseTreeTextarea(basicLexer, basicParser, production);
  } else {
    Example.clearParseTreeTextarea();
  }
}

module.exports = BasicExample;

function updateBasicLexer() {
  var lexicalGrammarTextareaValue = lexicalGrammarTextarea.getValue();

  var lexicalGrammar = null;

  try {
    lexicalGrammar = JSON.parse(lexicalGrammarTextareaValue);
  } catch (error) {}

  var lexicalGrammarValid = lexicalGrammar !== null;

  if (lexicalGrammarValid) {
    basicLexer = BasicLexer.fromGrammar(lexicalGrammar);

    lexicalGrammarTextarea.removeClass('error');
  } else {
    lexicalGrammarTextarea.addClass('error');

    basicLexer = null;
  }
}

function updateBasicParser() {
  var bnfGrammarTextareaValue = Example.getBNFGrammarTextareaValue(),
      grammar = bnfGrammarTextareaValue; ///

  basicParser = BasicParser.fromGrammar(grammar);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9leGFtcGxlcy9iYXNpYy5qcyJdLCJuYW1lcyI6WyJlYXN5IiwicmVxdWlyZSIsImxleGVycyIsIkV4YW1wbGUiLCJncmFtbWFyIiwiQmFzaWNQYXJzZXIiLCJUZXh0YXJlYSIsIkJhc2ljTGV4ZXIiLCJsZXhpY2FsR3JhbW1hclRleHRhcmVhU2VsZWN0b3IiLCJsZXhpY2FsR3JhbW1hciIsImxleGljYWxHcmFtbWFyVGV4dGFyZWEiLCJiYXNpY0xleGVyIiwiYmFzaWNQYXJzZXIiLCJCYXNpY0V4YW1wbGUiLCJibmZHcmFtbWFyVGV4dGFyZWFWYWx1ZSIsImxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXRWYWx1ZSIsInNldEJORkdyYW1tYXJUZXh0YXJlYVZhbHVlIiwib25CTkZHcmFtbWFyVGV4dGFyZWFLZXlVcCIsInVwZGF0ZSIsIm9uQ29udGVudFRleHRhcmVhS2V5VXAiLCJvbktleVVwIiwidXBkYXRlQmFzaWNMZXhlciIsInVwZGF0ZUJhc2ljUGFyc2VyIiwicHJvZHVjdGlvbiIsInVwZGF0ZVBhcnNlVHJlZVRleHRhcmVhIiwiY2xlYXJQYXJzZVRyZWVUZXh0YXJlYSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRWYWx1ZSIsInBhcnNlIiwiZXJyb3IiLCJsZXhpY2FsR3JhbW1hclZhbGlkIiwiZnJvbUdyYW1tYXIiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiZ2V0Qk5GR3JhbW1hclRleHRhcmVhVmFsdWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjtBQUFBLElBQ01DLFNBQVNELFFBQVEsY0FBUixDQURmOztBQUdBLElBQU1FLFVBQVVGLFFBQVEsWUFBUixDQUFoQjtBQUFBLElBQ01HLFVBQVVILFFBQVEsa0JBQVIsQ0FEaEI7QUFBQSxJQUVNSSxjQUFjSixRQUFRLGlCQUFSLENBRnBCOztBQUlNLElBQUVLLFFBQUYsR0FBZU4sSUFBZixDQUFFTSxRQUFGO0FBQUEsSUFDRUMsVUFERixHQUNpQkwsTUFEakIsQ0FDRUssVUFERjs7O0FBR04sSUFBTUMsaUNBQWlDLHlCQUF2QztBQUFBLElBQ01DLGlCQUFpQkYsV0FBV0gsT0FEbEM7O0FBR0EsSUFBSU0sK0JBQUo7QUFBQSxJQUNJQyxhQUFhLElBRGpCO0FBQUEsSUFFSUMsY0FBYyxJQUZsQjs7SUFJTUMsWTs7Ozs7OzswQkFDUztBQUNYSCwrQkFBeUIsSUFBSUosUUFBSixDQUFhRSw4QkFBYixDQUF6Qjs7QUFFQSxVQUFNTSwwQkFBMEJWLE9BQWhDO0FBQUEsVUFBeUM7QUFDbkNXLG9DQUE4QkMsS0FBS0MsU0FBTCxDQUFlUixjQUFmLEVBQStCLElBQS9CLEVBQXFDLElBQXJDLENBRHBDLENBSFcsQ0FJcUU7O0FBRWhGQyw2QkFBdUJRLFFBQXZCLENBQWdDSCwyQkFBaEM7O0FBRUFaLGNBQVFnQiwwQkFBUixDQUFtQ0wsdUJBQW5DOztBQUVBWCxjQUFRaUIseUJBQVIsQ0FBa0NDLE1BQWxDOztBQUVBbEIsY0FBUW1CLHNCQUFSLENBQStCRCxNQUEvQjs7QUFFQVgsNkJBQXVCYSxPQUF2QixDQUErQkYsTUFBL0I7O0FBRUFBO0FBQ0Q7Ozs7OztBQUdILFNBQVNBLE1BQVQsR0FBa0I7QUFDaEJHOztBQUVBQzs7QUFFQSxNQUFLZCxlQUFlLElBQWhCLElBQTBCQyxnQkFBZ0IsSUFBOUMsRUFBcUQ7QUFDbkQsUUFBTWMsYUFBYSxJQUFuQixDQURtRCxDQUN6Qjs7QUFFMUJ2QixZQUFRd0IsdUJBQVIsQ0FBZ0NoQixVQUFoQyxFQUE0Q0MsV0FBNUMsRUFBeURjLFVBQXpEO0FBQ0QsR0FKRCxNQUlPO0FBQ0x2QixZQUFReUIsc0JBQVI7QUFDRDtBQUNGOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCakIsWUFBakI7O0FBRUEsU0FBU1csZ0JBQVQsR0FBNEI7QUFDMUIsTUFBTVQsOEJBQThCTCx1QkFBdUJxQixRQUF2QixFQUFwQzs7QUFFQSxNQUFJdEIsaUJBQWlCLElBQXJCOztBQUVBLE1BQUk7QUFDRkEscUJBQWlCTyxLQUFLZ0IsS0FBTCxDQUFXakIsMkJBQVgsQ0FBakI7QUFDRCxHQUZELENBRUUsT0FBT2tCLEtBQVAsRUFBYyxDQUFFOztBQUVsQixNQUFNQyxzQkFBdUJ6QixtQkFBbUIsSUFBaEQ7O0FBRUEsTUFBSXlCLG1CQUFKLEVBQXlCO0FBQ3ZCdkIsaUJBQWFKLFdBQVc0QixXQUFYLENBQXVCMUIsY0FBdkIsQ0FBYjs7QUFFQUMsMkJBQXVCMEIsV0FBdkIsQ0FBbUMsT0FBbkM7QUFDRCxHQUpELE1BSU87QUFDTDFCLDJCQUF1QjJCLFFBQXZCLENBQWdDLE9BQWhDOztBQUVBMUIsaUJBQWEsSUFBYjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU2MsaUJBQVQsR0FBNkI7QUFDM0IsTUFBTVgsMEJBQTBCWCxRQUFRbUMsMEJBQVIsRUFBaEM7QUFBQSxNQUNNbEMsVUFBVVUsdUJBRGhCLENBRDJCLENBRWM7O0FBRXpDRixnQkFBY1AsWUFBWThCLFdBQVosQ0FBd0IvQixPQUF4QixDQUFkO0FBQ0QiLCJmaWxlIjoiYmFzaWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGVhc3kgPSByZXF1aXJlKCdlYXN5JyksXG4gICAgICBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKTtcblxuY29uc3QgRXhhbXBsZSA9IHJlcXVpcmUoJy4uL2V4YW1wbGUnKSxcbiAgICAgIGdyYW1tYXIgPSByZXF1aXJlKCcuLi9iYXNpYy9ncmFtbWFyJyksXG4gICAgICBCYXNpY1BhcnNlciA9IHJlcXVpcmUoJy4uL2Jhc2ljL3BhcnNlcicpO1xuXG5jb25zdCB7IFRleHRhcmVhIH0gPSBlYXN5LFxuICAgICAgeyBCYXNpY0xleGVyIH0gPSBsZXhlcnM7XG5cbmNvbnN0IGxleGljYWxHcmFtbWFyVGV4dGFyZWFTZWxlY3RvciA9ICd0ZXh0YXJlYSNsZXhpY2FsR3JhbW1hcicsXG4gICAgICBsZXhpY2FsR3JhbW1hciA9IEJhc2ljTGV4ZXIuZ3JhbW1hcjtcblxubGV0IGxleGljYWxHcmFtbWFyVGV4dGFyZWEsXG4gICAgYmFzaWNMZXhlciA9IG51bGwsXG4gICAgYmFzaWNQYXJzZXIgPSBudWxsO1xuXG5jbGFzcyBCYXNpY0V4YW1wbGUge1xuICBzdGF0aWMgcnVuKCkge1xuICAgIGxleGljYWxHcmFtbWFyVGV4dGFyZWEgPSBuZXcgVGV4dGFyZWEobGV4aWNhbEdyYW1tYXJUZXh0YXJlYVNlbGVjdG9yKTtcblxuICAgIGNvbnN0IGJuZkdyYW1tYXJUZXh0YXJlYVZhbHVlID0gZ3JhbW1hciwgLy8vXG4gICAgICAgICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYVZhbHVlID0gSlNPTi5zdHJpbmdpZnkobGV4aWNhbEdyYW1tYXIsIG51bGwsICcgICcpOyAvLy9cblxuICAgIGxleGljYWxHcmFtbWFyVGV4dGFyZWEuc2V0VmFsdWUobGV4aWNhbEdyYW1tYXJUZXh0YXJlYVZhbHVlKTtcblxuICAgIEV4YW1wbGUuc2V0Qk5GR3JhbW1hclRleHRhcmVhVmFsdWUoYm5mR3JhbW1hclRleHRhcmVhVmFsdWUpO1xuXG4gICAgRXhhbXBsZS5vbkJORkdyYW1tYXJUZXh0YXJlYUtleVVwKHVwZGF0ZSk7XG5cbiAgICBFeGFtcGxlLm9uQ29udGVudFRleHRhcmVhS2V5VXAodXBkYXRlKTtcblxuICAgIGxleGljYWxHcmFtbWFyVGV4dGFyZWEub25LZXlVcCh1cGRhdGUpO1xuXG4gICAgdXBkYXRlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlKCkge1xuICB1cGRhdGVCYXNpY0xleGVyKCk7XG5cbiAgdXBkYXRlQmFzaWNQYXJzZXIoKTtcblxuICBpZiAoKGJhc2ljTGV4ZXIgIT09IG51bGwpICYmIChiYXNpY1BhcnNlciAhPT0gbnVsbCkpIHtcbiAgICBjb25zdCBwcm9kdWN0aW9uID0gbnVsbDsgIC8vL1xuXG4gICAgRXhhbXBsZS51cGRhdGVQYXJzZVRyZWVUZXh0YXJlYShiYXNpY0xleGVyLCBiYXNpY1BhcnNlciwgcHJvZHVjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgRXhhbXBsZS5jbGVhclBhcnNlVHJlZVRleHRhcmVhKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNpY0V4YW1wbGU7XG5cbmZ1bmN0aW9uIHVwZGF0ZUJhc2ljTGV4ZXIoKSB7XG4gIGNvbnN0IGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSA9IGxleGljYWxHcmFtbWFyVGV4dGFyZWEuZ2V0VmFsdWUoKTtcblxuICBsZXQgbGV4aWNhbEdyYW1tYXIgPSBudWxsO1xuXG4gIHRyeSB7XG4gICAgbGV4aWNhbEdyYW1tYXIgPSBKU09OLnBhcnNlKGxleGljYWxHcmFtbWFyVGV4dGFyZWFWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fVxuXG4gIGNvbnN0IGxleGljYWxHcmFtbWFyVmFsaWQgPSAobGV4aWNhbEdyYW1tYXIgIT09IG51bGwpO1xuXG4gIGlmIChsZXhpY2FsR3JhbW1hclZhbGlkKSB7XG4gICAgYmFzaWNMZXhlciA9IEJhc2ljTGV4ZXIuZnJvbUdyYW1tYXIobGV4aWNhbEdyYW1tYXIpO1xuXG4gICAgbGV4aWNhbEdyYW1tYXJUZXh0YXJlYS5yZW1vdmVDbGFzcygnZXJyb3InKTtcbiAgfSBlbHNlIHtcbiAgICBsZXhpY2FsR3JhbW1hclRleHRhcmVhLmFkZENsYXNzKCdlcnJvcicpO1xuXG4gICAgYmFzaWNMZXhlciA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQmFzaWNQYXJzZXIoKSB7XG4gIGNvbnN0IGJuZkdyYW1tYXJUZXh0YXJlYVZhbHVlID0gRXhhbXBsZS5nZXRCTkZHcmFtbWFyVGV4dGFyZWFWYWx1ZSgpLFxuICAgICAgICBncmFtbWFyID0gYm5mR3JhbW1hclRleHRhcmVhVmFsdWU7IC8vL1xuXG4gIGJhc2ljUGFyc2VyID0gQmFzaWNQYXJzZXIuZnJvbUdyYW1tYXIoZ3JhbW1hcik7XG59XG4iXX0=