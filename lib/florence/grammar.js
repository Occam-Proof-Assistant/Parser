'use strict';

var grammar = '\n\n    document                                  ::=   part*\n\n    part                                      ::=   endsOfLines | rule | axiom | theorem | lemma | variable(s) | constructor(s) | type | definition | error\n   \n    error                                     ::=   string | special | keyword | unassigned \n    \n    \n    \n    rule                                      ::=   Rule parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion proof?\n    \n    axiom                                     ::=   Axiom parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion\n    \n    theorem                                   ::=   Theorem parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion proof\n        \n    lemma                                     ::=   Lemma parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion proof    \n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   Premise endsOfLines (labelled)statement\n    \n    premises                                  ::=   Premises endsOfLines (labelled)statement (labelled)statement+\n\n    conclusion                                ::=   Conclusion endsOfLines statement\n\n    proof                                     ::=   Proof endsOfLines subLemmaOr(labelled)statement* therefore\n\n    therefore                                 ::=   Therefore endsOfLines (labelled)statement\n    \n    \n\n    subLemmaOr(labelled)statement             ::=   subLemma | (labelled)statement\n\n    subLemma                                  ::=   suppose then? hence\n    \n    \n\n    suppose                                   ::=   Suppose endsOfLines statement+\n    \n    then                                      ::=   Then endsOfLines subLemmaOr(labelled)statement+\n    \n    hence                                     ::=   Hence endsOfLines (labelled)statement\n    \n    \n    \n    (labelled)statement                       ::=   labelledStatement | statement\n    \n    labelledStatement                         ::=   symbol+ by label endsOfLines\n    \n    statement                                 ::=   symbol+ endsOfLines\n    \n    symbol                                    ::=   unassigned | { | } | = | : | ( | )\n    \n    \n    \n    parenthesisedLabels                       ::=   (<NO_WHITESPACE>labels<NO_WHITESPACE>)\n    \n    labels                                    ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                            ::=   ,<NO_WHITESPACE>label\n\n    label                                     ::=   unassigned\n    \n\n\n    localVariable(s)                          ::=   variable(s)\n\n    variable(s)                               ::=   variable | variables\n\n    variables                                 ::=   Variables endsOfLines? variable(s)Declaration(s) endsOfLines\n    \n    variable                                  ::=   Variable endsOfLines? variableDeclaration endsOfLines\n    \n    variable(s)Declaration(s)                 ::=   variables(s)Declarations | variablesDeclaration\n\n    variables(s)Declarations                  ::=   variable(s)Declaration semiColonThenVariable(s)Declaration+\n       \n    semiColonThenVariable(s)Declaration       ::=   ; variable(s)Declaration\n    \n    variable(s)Declaration                    ::=   variablesDeclaration | variableDeclaration\n    \n    variablesDeclaration                      ::=   variableNames colonThenTypeName?\n\n    variableDeclaration                       ::=   variableName colonThenTypeName?\n\n    variableNames                             ::=   variableName commaThenVariableName+\n\n    commaThenVariableName                     ::=   , variableName    \n    \n    colonThenTypeName                         ::=   : typeName\n\n    variableName                              ::=   unassigned\n\n\n\n    localConstructor(s)                       ::=   constructor(s)\n\n    constructor(s)                            ::=   constructor | constructors\n\n    constructors                              ::=   Constructors endsOfLines? constructor(s)Declaration(s) endsOfLines\n    \n    constructor                               ::=   Constructor endsOfLines? constructorDeclaration endsOfLines\n    \n    constructor(s)Declaration(s)              ::=   constructors(s)Declarations | constructorsDeclaration\n\n    constructors(s)Declarations               ::=   constructor(s)Declaration semiColonThenConstructor(s)Declaration+\n       \n    semiColonThenConstructor(s)Declaration    ::=   ; constructor(s)Declaration\n    \n    constructor(s)Declaration                 ::=   constructorsDeclaration | constructorDeclaration\n    \n    constructorsDeclaration                   ::=   constructorBodies colonThenTypeName?\n\n    constructorDeclaration                    ::=   constructorBody colonThenTypeName?\n\n    constructorBodies                         ::=   constructorBody commaThenConstructorBody+\n\n    commaThenConstructorBody                  ::=   , constructorBody    \n    \n    colonThenTypeName                         ::=   : typeName\n\n    constructorBody                           ::=   constructorName<NO_WHITESPACE>parenthesisedConstructorArguments?\n\n    constructorName                           ::=   unassigned\n    \n    parenthesisedConstructorArguments         ::=   (<NO_WHITESPACE>constructorArguments<NO_WHITESPACE>)\n\n    constructorArguments                      ::=   constructorArgument<NO_WHITESPACE>commaThenConstructorArgument*\n    \n    commaThenConstructorArgument              ::=   ,<NO_WHITESPACE>constructorArgument\n    \n    constructorArgument                       ::=   typeName | .. | unassigned\n\n    \n    \n    object                                    ::=   Object endsOfLines? objectDeclaration endsOfLines\n\n    objectDeclaration                         ::=   objectLiteral : typeName\n    \n    objectLiteral                             ::=   { properties }\n    \n    properties                                ::=   property commaThenProperty*\n    \n    commaThenProperty                         ::=   , property\n    \n    property                                  ::=   propertyName : typeName\n    \n    propertyName                              ::=   unassigned\n    \n    \n    \n    type                                      ::=   Type typeName endsOfLines\n\n    typeName                                  ::=   unassigned\n\n           \n\n    endsOfLines                               ::=   <END_OF_LINE>+\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSw4aE5BQUo7O0FBb0tBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJncmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ3JhbW1hciA9IGBcblxuICAgIGRvY3VtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHBhcnQqXG5cbiAgICBwYXJ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBlbmRzT2ZMaW5lcyB8IHJ1bGUgfCBheGlvbSB8IHRoZW9yZW0gfCBsZW1tYSB8IHZhcmlhYmxlKHMpIHwgY29uc3RydWN0b3IocykgfCB0eXBlIHwgZGVmaW5pdGlvbiB8IGVycm9yXG4gICBcbiAgICBlcnJvciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdHJpbmcgfCBzcGVjaWFsIHwga2V5d29yZCB8IHVuYXNzaWduZWQgXG4gICAgXG4gICAgXG4gICAgXG4gICAgcnVsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgUnVsZSBwYXJlbnRoZXNpc2VkTGFiZWxzPyBlbmRzT2ZMaW5lcyBsb2NhbFZhcmlhYmxlKHMpPyBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mP1xuICAgIFxuICAgIGF4aW9tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIEF4aW9tIHBhcmVudGhlc2lzZWRMYWJlbHM/IGVuZHNPZkxpbmVzIGxvY2FsVmFyaWFibGUocyk/IHByZW1pc2Uocyk/IGNvbmNsdXNpb25cbiAgICBcbiAgICB0aGVvcmVtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBUaGVvcmVtIHBhcmVudGhlc2lzZWRMYWJlbHM/IGVuZHNPZkxpbmVzIGxvY2FsVmFyaWFibGUocyk/IHByZW1pc2Uocyk/IGNvbmNsdXNpb24gcHJvb2ZcbiAgICAgICAgXG4gICAgbGVtbWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgTGVtbWEgcGFyZW50aGVzaXNlZExhYmVscz8gZW5kc09mTGluZXMgbG9jYWxWYXJpYWJsZShzKT8gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBwcmVtaXNlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcmVtaXNlIHwgcHJlbWlzZXNcbiAgICBcbiAgICBwcmVtaXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBQcmVtaXNlIGVuZHNPZkxpbmVzIChsYWJlbGxlZClzdGF0ZW1lbnRcbiAgICBcbiAgICBwcmVtaXNlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBQcmVtaXNlcyBlbmRzT2ZMaW5lcyAobGFiZWxsZWQpc3RhdGVtZW50IChsYWJlbGxlZClzdGF0ZW1lbnQrXG5cbiAgICBjb25jbHVzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBDb25jbHVzaW9uIGVuZHNPZkxpbmVzIHN0YXRlbWVudFxuXG4gICAgcHJvb2YgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgUHJvb2YgZW5kc09mTGluZXMgc3ViTGVtbWFPcihsYWJlbGxlZClzdGF0ZW1lbnQqIHRoZXJlZm9yZVxuXG4gICAgdGhlcmVmb3JlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgVGhlcmVmb3JlIGVuZHNPZkxpbmVzIChsYWJlbGxlZClzdGF0ZW1lbnRcbiAgICBcbiAgICBcblxuICAgIHN1YkxlbW1hT3IobGFiZWxsZWQpc3RhdGVtZW50ICAgICAgICAgICAgIDo6PSAgIHN1YkxlbW1hIHwgKGxhYmVsbGVkKXN0YXRlbWVudFxuXG4gICAgc3ViTGVtbWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3VwcG9zZSB0aGVuPyBoZW5jZVxuICAgIFxuICAgIFxuXG4gICAgc3VwcG9zZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgU3VwcG9zZSBlbmRzT2ZMaW5lcyBzdGF0ZW1lbnQrXG4gICAgXG4gICAgdGhlbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgVGhlbiBlbmRzT2ZMaW5lcyBzdWJMZW1tYU9yKGxhYmVsbGVkKXN0YXRlbWVudCtcbiAgICBcbiAgICBoZW5jZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBIZW5jZSBlbmRzT2ZMaW5lcyAobGFiZWxsZWQpc3RhdGVtZW50XG4gICAgXG4gICAgXG4gICAgXG4gICAgKGxhYmVsbGVkKXN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgbGFiZWxsZWRTdGF0ZW1lbnQgfCBzdGF0ZW1lbnRcbiAgICBcbiAgICBsYWJlbGxlZFN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzeW1ib2wrIGJ5IGxhYmVsIGVuZHNPZkxpbmVzXG4gICAgXG4gICAgc3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3ltYm9sKyBlbmRzT2ZMaW5lc1xuICAgIFxuICAgIHN5bWJvbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVuYXNzaWduZWQgfCB7IHwgfSB8ID0gfCA6IHwgKCB8IClcbiAgICBcbiAgICBcbiAgICBcbiAgICBwYXJlbnRoZXNpc2VkTGFiZWxzICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAoPE5PX1dISVRFU1BBQ0U+bGFiZWxzPE5PX1dISVRFU1BBQ0U+KVxuICAgIFxuICAgIGxhYmVscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGxhYmVsPE5PX1dISVRFU1BBQ0U+Y29tbWFUaGVuTGFiZWwqXG4gICAgXG4gICAgY29tbWFUaGVuTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgLDxOT19XSElURVNQQUNFPmxhYmVsXG5cbiAgICBsYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB1bmFzc2lnbmVkXG4gICAgXG5cblxuICAgIGxvY2FsVmFyaWFibGUocykgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHZhcmlhYmxlKHMpXG5cbiAgICB2YXJpYWJsZShzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZSB8IHZhcmlhYmxlc1xuXG4gICAgdmFyaWFibGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgVmFyaWFibGVzIGVuZHNPZkxpbmVzPyB2YXJpYWJsZShzKURlY2xhcmF0aW9uKHMpIGVuZHNPZkxpbmVzXG4gICAgXG4gICAgdmFyaWFibGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgVmFyaWFibGUgZW5kc09mTGluZXM/IHZhcmlhYmxlRGVjbGFyYXRpb24gZW5kc09mTGluZXNcbiAgICBcbiAgICB2YXJpYWJsZShzKURlY2xhcmF0aW9uKHMpICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZXMocylEZWNsYXJhdGlvbnMgfCB2YXJpYWJsZXNEZWNsYXJhdGlvblxuXG4gICAgdmFyaWFibGVzKHMpRGVjbGFyYXRpb25zICAgICAgICAgICAgICAgICAgOjo9ICAgdmFyaWFibGUocylEZWNsYXJhdGlvbiBzZW1pQ29sb25UaGVuVmFyaWFibGUocylEZWNsYXJhdGlvbitcbiAgICAgICBcbiAgICBzZW1pQ29sb25UaGVuVmFyaWFibGUocylEZWNsYXJhdGlvbiAgICAgICA6Oj0gICA7IHZhcmlhYmxlKHMpRGVjbGFyYXRpb25cbiAgICBcbiAgICB2YXJpYWJsZShzKURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZXNEZWNsYXJhdGlvbiB8IHZhcmlhYmxlRGVjbGFyYXRpb25cbiAgICBcbiAgICB2YXJpYWJsZXNEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZU5hbWVzIGNvbG9uVGhlblR5cGVOYW1lP1xuXG4gICAgdmFyaWFibGVEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdmFyaWFibGVOYW1lIGNvbG9uVGhlblR5cGVOYW1lP1xuXG4gICAgdmFyaWFibGVOYW1lcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdmFyaWFibGVOYW1lIGNvbW1hVGhlblZhcmlhYmxlTmFtZStcblxuICAgIGNvbW1hVGhlblZhcmlhYmxlTmFtZSAgICAgICAgICAgICAgICAgICAgIDo6PSAgICwgdmFyaWFibGVOYW1lICAgIFxuICAgIFxuICAgIGNvbG9uVGhlblR5cGVOYW1lICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIDogdHlwZU5hbWVcblxuICAgIHZhcmlhYmxlTmFtZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVuYXNzaWduZWRcblxuXG5cbiAgICBsb2NhbENvbnN0cnVjdG9yKHMpICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvcihzKVxuXG4gICAgY29uc3RydWN0b3IocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3IgfCBjb25zdHJ1Y3RvcnNcblxuICAgIGNvbnN0cnVjdG9ycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIENvbnN0cnVjdG9ycyBlbmRzT2ZMaW5lcz8gY29uc3RydWN0b3IocylEZWNsYXJhdGlvbihzKSBlbmRzT2ZMaW5lc1xuICAgIFxuICAgIGNvbnN0cnVjdG9yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIENvbnN0cnVjdG9yIGVuZHNPZkxpbmVzPyBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uIGVuZHNPZkxpbmVzXG4gICAgXG4gICAgY29uc3RydWN0b3IocylEZWNsYXJhdGlvbihzKSAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3JzKHMpRGVjbGFyYXRpb25zIHwgY29uc3RydWN0b3JzRGVjbGFyYXRpb25cblxuICAgIGNvbnN0cnVjdG9ycyhzKURlY2xhcmF0aW9ucyAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb24gc2VtaUNvbG9uVGhlbkNvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb24rXG4gICAgICAgXG4gICAgc2VtaUNvbG9uVGhlbkNvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb24gICAgOjo9ICAgOyBjb25zdHJ1Y3RvcihzKURlY2xhcmF0aW9uXG4gICAgXG4gICAgY29uc3RydWN0b3IocylEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3JzRGVjbGFyYXRpb24gfCBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uXG4gICAgXG4gICAgY29uc3RydWN0b3JzRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3JCb2RpZXMgY29sb25UaGVuVHlwZU5hbWU/XG5cbiAgICBjb25zdHJ1Y3RvckRlY2xhcmF0aW9uICAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvckJvZHkgY29sb25UaGVuVHlwZU5hbWU/XG5cbiAgICBjb25zdHJ1Y3RvckJvZGllcyAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvckJvZHkgY29tbWFUaGVuQ29uc3RydWN0b3JCb2R5K1xuXG4gICAgY29tbWFUaGVuQ29uc3RydWN0b3JCb2R5ICAgICAgICAgICAgICAgICAgOjo9ICAgLCBjb25zdHJ1Y3RvckJvZHkgICAgXG4gICAgXG4gICAgY29sb25UaGVuVHlwZU5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgOiB0eXBlTmFtZVxuXG4gICAgY29uc3RydWN0b3JCb2R5ICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3JOYW1lPE5PX1dISVRFU1BBQ0U+cGFyZW50aGVzaXNlZENvbnN0cnVjdG9yQXJndW1lbnRzP1xuXG4gICAgY29uc3RydWN0b3JOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdW5hc3NpZ25lZFxuICAgIFxuICAgIHBhcmVudGhlc2lzZWRDb25zdHJ1Y3RvckFyZ3VtZW50cyAgICAgICAgIDo6PSAgICg8Tk9fV0hJVEVTUEFDRT5jb25zdHJ1Y3RvckFyZ3VtZW50czxOT19XSElURVNQQUNFPilcblxuICAgIGNvbnN0cnVjdG9yQXJndW1lbnRzICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yQXJndW1lbnQ8Tk9fV0hJVEVTUEFDRT5jb21tYVRoZW5Db25zdHJ1Y3RvckFyZ3VtZW50KlxuICAgIFxuICAgIGNvbW1hVGhlbkNvbnN0cnVjdG9yQXJndW1lbnQgICAgICAgICAgICAgIDo6PSAgICw8Tk9fV0hJVEVTUEFDRT5jb25zdHJ1Y3RvckFyZ3VtZW50XG4gICAgXG4gICAgY29uc3RydWN0b3JBcmd1bWVudCAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdHlwZU5hbWUgfCAuLiB8IHVuYXNzaWduZWRcblxuICAgIFxuICAgIFxuICAgIG9iamVjdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIE9iamVjdCBlbmRzT2ZMaW5lcz8gb2JqZWN0RGVjbGFyYXRpb24gZW5kc09mTGluZXNcblxuICAgIG9iamVjdERlY2xhcmF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIG9iamVjdExpdGVyYWwgOiB0eXBlTmFtZVxuICAgIFxuICAgIG9iamVjdExpdGVyYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHsgcHJvcGVydGllcyB9XG4gICAgXG4gICAgcHJvcGVydGllcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJvcGVydHkgY29tbWFUaGVuUHJvcGVydHkqXG4gICAgXG4gICAgY29tbWFUaGVuUHJvcGVydHkgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgLCBwcm9wZXJ0eVxuICAgIFxuICAgIHByb3BlcnR5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByb3BlcnR5TmFtZSA6IHR5cGVOYW1lXG4gICAgXG4gICAgcHJvcGVydHlOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdW5hc3NpZ25lZFxuICAgIFxuICAgIFxuICAgIFxuICAgIHR5cGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFR5cGUgdHlwZU5hbWUgZW5kc09mTGluZXNcblxuICAgIHR5cGVOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVuYXNzaWduZWRcblxuICAgICAgICAgICBcblxuICAgIGVuZHNPZkxpbmVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIDxFTkRfT0ZfTElORT4rXG5cbmA7XG5cbm1vZHVsZS5leHBvcnRzID0gZ3JhbW1hcjtcbiJdfQ==