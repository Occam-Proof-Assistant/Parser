'use strict';

var grammar = '\n\n    document                                  ::=   header? whitespace? body?\n     \n    header                                    ::=   directive+     \n     \n    body                                      ::=   part whitespaceOrPart*\n    \n    \n    \n    directive                                 ::=   includeDirective\n    \n    includeDirective                          ::=   \'include\'<NO_WHITESPACE>\'(\'<NO_WHITESPACE>[string]<NO_WHITESPACE>\')\' <END_OF_LINE>\n    \n    \n    \n    whitespaceOrPart                          ::=   whitespace | part\n    \n    part                                      ::=   rule | axiom | theorem | lemma | variable(s) | constructor(s) | type | error\n    \n    \n    \n    rule                                      ::=   \'Rule\' parenthesisedLabels? <END_OF_LINE> localVariable(s)? premise(s)? conclusion proof?\n    \n    axiom                                     ::=   \'Axiom\' parenthesisedLabels? <END_OF_LINE> localVariable(s)? premise(s)? conclusion\n    \n    theorem                                   ::=   \'Theorem\' parenthesisedLabels? <END_OF_LINE> localVariable(s)? premise(s)? conclusion proof\n        \n    lemma                                     ::=   \'Lemma\' parenthesisedLabels? <END_OF_LINE> localVariable(s)? premise(s)? conclusion proof    \n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   \'Premise\' <END_OF_LINE> (labelled)Statement\n    \n    premises                                  ::=   \'Premises\' <END_OF_LINE> (labelled)Statement (labelled)Statement+\n\n    conclusion                                ::=   \'Conclusion\' <END_OF_LINE> (labelled)Statement\n\n    proof                                     ::=   \'Proof\' <END_OF_LINE> subLemmaOr(labelled)Statement* therefore\n\n    therefore                                 ::=   \'Therefore\' <END_OF_LINE> (labelled)Statement\n    \n    \n\n    subLemmaOr(labelled)Statement             ::=   subLemma | (labelled)Statement\n\n    subLemma                                  ::=   suppose then? hence whitespace?\n    \n    \n\n    suppose                                   ::=   \'Suppose\' <END_OF_LINE> statement+\n    \n    then                                      ::=   \'Then\' <END_OF_LINE> subLemmaOr(labelled)Statement+\n    \n    hence                                     ::=   \'Hence\' <END_OF_LINE> (labelled)Statement\n    \n    \n    \n    (labelled)Statement                       ::=   labelledStatement | statement\n    \n    labelledStatement                         ::=   statementBody \'by\' label <END_OF_LINE>\n    \n    statement                                 ::=   statementBody <END_OF_LINE>\n    \n    statementBody                             ::=   specialOrUnassigned+ \n    \n    specialOrUnassigned                       ::=   [special] | [unassigned]\n    \n    \n    \n    parenthesisedLabels                       ::=   \'(\'<NO_WHITESPACE>labels<NO_WHITESPACE>\')\'\n    \n    labels                                    ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                            ::=   \',\'<NO_WHITESPACE>label\n\n    label                                     ::=   [unassigned]\n    \n\n\n    localVariable(s)                          ::=   variable(s)\n\n    variable(s)                               ::=   variable | variables\n\n    variables                                 ::=   \'Variables\' <END_OF_LINE>? variable(s)Declaration(s) <END_OF_LINE>\n    \n    variable                                  ::=   \'Variable\' <END_OF_LINE>? variableDeclaration <END_OF_LINE>\n    \n    variable(s)Declaration(s)                 ::=   variables(s)Declarations | variablesDeclaration\n\n    variables(s)Declarations                  ::=   variable(s)Declaration semiColonThenVariable(s)Declaration+\n       \n    semiColonThenVariable(s)Declaration       ::=   \';\' variable(s)Declaration\n    \n    variable(s)Declaration                    ::=   variablesDeclaration | variableDeclaration\n    \n    variablesDeclaration                      ::=   variableNames colonThenTypeName?\n\n    variableDeclaration                       ::=   variableName colonThenTypeName?\n\n    variableNames                             ::=   variableName commaThenVariableName+\n\n    commaThenVariableName                     ::=   \',\' variableName    \n    \n    colonThenTypeName                         ::=   \':\' typeName\n\n    variableName                              ::=   [unassigned]\n\n\n\n    localConstructor(s)                       ::=   constructor(s)\n\n    constructor(s)                            ::=   constructor | constructors\n\n    constructors                              ::=   \'Constructors\' <END_OF_LINE>? constructor(s)Declaration(s) <END_OF_LINE>\n    \n    constructor                               ::=   \'Constructor\' <END_OF_LINE>? constructorDeclaration <END_OF_LINE>\n    \n    constructor(s)Declaration(s)              ::=   constructors(s)Declarations | constructorsDeclaration\n\n    constructors(s)Declarations               ::=   constructor(s)Declaration semiColonThenConstructor(s)Declaration+\n       \n    semiColonThenConstructor(s)Declaration    ::=   \';\' constructor(s)Declaration\n    \n    constructor(s)Declaration                 ::=   constructorsDeclaration | constructorDeclaration\n    \n    constructorsDeclaration                   ::=   constructorBodies colonThenTypeName?\n\n    constructorDeclaration                    ::=   constructorBody colonThenTypeName?\n\n    constructorBodies                         ::=   constructorBody commaThenConstructorBody+\n\n    commaThenConstructorBody                  ::=   \',\' constructorBody    \n    \n    colonThenTypeName                         ::=   \':\' typeName\n\n    constructorBody                           ::=   constructorName<NO_WHITESPACE>parenthesisedConstructorArguments?\n\n    constructorName                           ::=   [unassigned]\n    \n    parenthesisedConstructorArguments         ::=   \'(\'<NO_WHITESPACE>constructorArguments<NO_WHITESPACE>\')\'\n\n    constructorArguments                      ::=   constructorArgument<NO_WHITESPACE>commaThenConstructorArgument*\n    \n    commaThenConstructorArgument              ::=   \',\'<NO_WHITESPACE>constructorArgument\n    \n    constructorArgument                       ::=   typeName | .. | [unassigned]\n\n    \n    \n    object                                    ::=   \'Object\' <END_OF_LINE>? objectDeclaration <END_OF_LINE>\n\n    objectDeclaration                         ::=   objectLiteral \':\' typeName\n    \n    objectLiteral                             ::=   \'{\' properties \'}\'\n    \n    properties                                ::=   property commaThenProperty*\n    \n    commaThenProperty                         ::=   \',\' property\n    \n    property                                  ::=   propertyName \':\' typeName\n    \n    propertyName                              ::=   [unassigned]\n    \n    \n    \n    type                                      ::=   \'Type\' typeName <END_OF_LINE>\n\n    typeName                                  ::=   [unassigned]\n\n\n           \n    error                                     ::=   [string] | [special] | [include] | [keyword] | [unassigned]\n     \n     \n     \n    whitespace                                ::=   <END_OF_LINE>+\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,