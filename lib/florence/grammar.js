'use strict';

var grammar = '\n\n    document                                          ::=   header? verticalSpace? body?\n                                              \n                                              \n                                              \n    header                                            ::=   includeDirective+\n    \n    includeDirective                                  ::=   \'include\'<NO_WHITESPACE>\'(\'<NO_WHITESPACE>[string]<NO_WHITESPACE>\')\' <END_OF_LINE>\n                                              \n        \n                                              \n    body                                              ::=   part+  \n        \n    part                                              ::=   type(s)Declaration\n    \n                                                        |   typedConstructor(s)Declaration \n                                                        \n                                                        |   (typed)Variable(s)Declaration\n                                                        \n                                                        |   rule \n                                                        \n                                                        |   axiom\n                                                         \n                                                        |   theorem \n                                                        \n                                                        |   lemma \n                                                        \n                                                        |   verticalSpace \n                                                        \n                                                        |   error\n                                                        \n                                                        \n                                                        \n    type(s)Declaration                                ::=   typesDeclaration | typeDeclaration \n    \n    typedConstructor(s)Declaration                    ::=   typedConstructorsDeclaration | typedConstructorDeclaration \n    \n    (typed)Variable(s)Declaration                     ::=   (typed)VariableDeclaration | (typed)VariablesDeclaration\n\n    rule                                              ::=   \'Rule\' parenthesisedLabelList? <END_OF_LINE> premise(s)? conclusion proof?\n    \n    axiom                                             ::=   \'Axiom\' parenthesisedLabelList? <END_OF_LINE> premise(s)? conclusion\n    \n    theorem                                           ::=   \'Theorem\' parenthesisedLabelList? <END_OF_LINE> premise(s)? conclusion proof\n        \n    lemma                                             ::=   \'Lemma\' parenthesisedLabelList? <END_OF_LINE> premise(s)? conclusion proof\n\n\n\n    typesDeclaration                                  ::=   \'Types\' typeList\n    \n    typeDeclaration                                   ::=   \'Type\' type\n    \n    typeList                                          ::=   type<NO_WHITESPACE>commaThenType*\n    \n    commaThenType                                     ::=   \',\'<NO_WHITESPACE>type\n\n    type                                              ::=   [unassigned]\n\n    \n    \n    typedConstructorsDeclaration                      ::=   \'Constructors\' typedConstructorList\n    \n    typedConstructorDeclaration                       ::=   \'Constructor\' typedConstructor\n\n    typedConstructorList                              ::=   typedConstructor<NO_WHITESPACE>commaThenTypedConstructor*\n    \n    commaThenTypedConstructor                         ::=   \',\'<NO_WHITESPACE>typedConstructor\n    \n    typedConstructor                                  ::=   constructor<NO_WHITESPACE>\':\'<NO_WHITESPACE>type\n    \n    constructor                                       ::=   constructorName<NO_WHITESPACE>parenthesisedTypeList?\n    \n    parenthesisedTypeList                             ::=   \'(\'<NO_WHITESPACE>typeList<NO_WHITESPACE>\')\'\n\n    constructorName                                   ::=   [unassigned]\n\n\n\n    (typed)VariablesDeclaration                       ::=   \'Variables\' (typed)VariableList\n    \n    (typed)VariableDeclaration                        ::=   \'Variable\' (typed)Variable\n\n    (typed)VariableList                               ::=   (typed)Variable<NO_WHITESPACE>commaThen(Typed)Variable*\n    \n    commaThen(Typed)Variable                          ::=   \',\'<NO_WHITESPACE>(typed)Variable\n    \n    (typed)Variable                                   ::=   typedVariable | variable\n    \n    typedVariable                                     ::=   variable<NO_WHITESPACE>\':\'<NO_WHITESPACE>type\n    \n    variable                                          ::=   variableName\n    \n    variableName                                      ::=   [unassigned]\n    \n    \n\n    parenthesisedLabelList                            ::=   \'(\'<NO_WHITESPACE>labelList<NO_WHITESPACE>\')\'\n    \n    labelList                                         ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                                    ::=   \',\'<NO_WHITESPACE>label\n    \n    \n    \n    premise(s)                                        ::=   premise | premises\n    \n    premise                                           ::=   \'Premise\' <END_OF_LINE> (un)labelledStatement\n    \n    premises                                          ::=   \'Premises\' <END_OF_LINE> (un)labelledStatement (un)labelledStatement+\n    \n    conclusion                                        ::=   \'Conclusion\' <END_OF_LINE> (un)labelledStatement\n    \n    proof                                             ::=   \'Proof\' <END_OF_LINE> subLemmaOr(un)labelledStatementThenVerticalSpace* therefore\n    \n    therefore                                         ::=   \'Therefore\' <END_OF_LINE> (un)labelledStatement\n    \n    \n    \n    subLemmaOr(un)labelledStatementThenVerticalSpace  ::=   subLemmaOr(un)labelledStatement verticalSpace?   \n    \n    subLemmaOr(un)labelledStatement                   ::=   subLemma | (un)labelledStatement\n    \n    subLemma                                          ::=   suppose then? hence\n    \n    \n    \n    suppose                                           ::=   \'Suppose\' <END_OF_LINE> unlabelledStatement+\n    \n    then                                              ::=   \'Then\' <END_OF_LINE> subLemmaOr(un)labelledStatement+\n    \n    hence                                             ::=   \'Hence\' <END_OF_LINE> (un)labelledStatement\n    \n    \n    \n    (un)labelledStatement                             ::=   unlabelledStatement | labelledStatement\n    \n    labelledStatement                                 ::=   statement \'by\' label <END_OF_LINE>  \n    \n    unlabelledStatement                               ::=   statement <END_OF_LINE>  \n    \n    statement                                         ::=   specialOrUnassigned+ \n    \n    specialOrUnassigned                               ::=   [special] | [unassigned]\n    \n    \n    \n    label                                             ::=   [unassigned]\n     \n     \n     \n    verticalSpace                                     ::=   <END_OF_LINE>+\n    \n    \n    \n    error                                             ::=   *\n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,