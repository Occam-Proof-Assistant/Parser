'use strict';

var grammar = '\n\n    document                                  ::=   header? verticalSpace? body?\n\n     \n     \n    header                                    ::=   includeDirective+\n    \n    includeDirective                          ::=   \'include\'<NO_WHITESPACE>\'(\'<NO_WHITESPACE>[string]<NO_WHITESPACE>\')\' <END_OF_LINE>\n    \n    \n    \n    body                                      ::=   partOrVerticalSpace+\n        \n    partOrVerticalSpace                       ::=   part | verticalSpace\n    \n    \n    \n    part                                      ::=   rule | axiom | theorem | lemma | variable(s) | constructor(s) | type | errors+\n    \n    \n    \n    rule                                      ::=   \'Rule\' parenthesisedLabels? <END_OF_LINE> localVariable(s)? premise(s)? conclusion proof?\n    \n    axiom                                     ::=   \'Axiom\' parenthesisedLabels? <END_OF_LINE> localVariable(s)? premise(s)? conclusion\n    \n    theorem                                   ::=   \'Theorem\' parenthesisedLabels? <END_OF_LINE> localVariable(s)? premise(s)? conclusion proof\n        \n    lemma                                     ::=   \'Lemma\' parenthesisedLabels? <END_OF_LINE> localVariable(s)? premise(s)? conclusion proof    \n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   \'Premise\' <END_OF_LINE> (labelled)Statement\n    \n    premises                                  ::=   \'Premises\' <END_OF_LINE> (labelled)Statement (labelled)Statement+\n\n    conclusion                                ::=   \'Conclusion\' <END_OF_LINE> (labelled)Statement\n\n    proof                                     ::=   \'Proof\' <END_OF_LINE> subLemmaOr(labelled)Statement* therefore\n\n    therefore                                 ::=   \'Therefore\' <END_OF_LINE> (labelled)Statement\n    \n    \n\n    subLemmaOr(labelled)Statement             ::=   subLemma | (labelled)Statement\n\n    subLemma                                  ::=   suppose then? hence verticalSpace?\n    \n    \n\n    suppose                                   ::=   \'Suppose\' <END_OF_LINE> statement+\n    \n    then                                      ::=   \'Then\' <END_OF_LINE> subLemmaOr(labelled)Statement+\n    \n    hence                                     ::=   \'Hence\' <END_OF_LINE> (labelled)Statement\n    \n    \n    \n    (labelled)Statement                       ::=   labelledStatement | statement\n    \n    labelledStatement                         ::=   statementBody \'by\' label <END_OF_LINE>\n    \n    statement                                 ::=   statementBody <END_OF_LINE>\n    \n    statementBody                             ::=   specialOrUnassigned+ \n    \n    specialOrUnassigned                       ::=   [special] | [unassigned]\n    \n    \n    \n    parenthesisedLabels                       ::=   \'(\'<NO_WHITESPACE>labels<NO_WHITESPACE>\')\'\n    \n    labels                                    ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                            ::=   \',\'<NO_WHITESPACE>label\n\n    label                                     ::=   [unassigned]\n    \n\n\n    localVariable(s)                          ::=   variable(s)\n\n    variable(s)                               ::=   variable | variables\n\n    variables                                 ::=   \'Variables\' <END_OF_LINE>? variable(s)Declaration(s) <END_OF_LINE>\n    \n    variable                                  ::=   \'Variable\' <END_OF_LINE>? variableDeclaration <END_OF_LINE>\n    \n    variable(s)Declaration(s)                 ::=   variables(s)Declarations | variablesDeclaration\n\n    variables(s)Declarations                  ::=   variable(s)Declaration semiColonThenVariable(s)Declaration+\n       \n    semiColonThenVariable(s)Declaration       ::=   \';\' variable(s)Declaration\n    \n    variable(s)Declaration                    ::=   variablesDeclaration | variableDeclaration\n    \n    variablesDeclaration                      ::=   variableNames colonThenTypeName?\n\n    variableDeclaration                       ::=   variableName colonThenTypeName?\n\n    variableNames                             ::=   variableName commaThenVariableName+\n\n    commaThenVariableName                     ::=   \',\' variableName    \n    \n    colonThenTypeName                         ::=   \':\' typeName\n\n    variableName                              ::=   [unassigned]\n\n\n\n    localConstructor(s)                       ::=   constructor(s)\n\n    constructor(s)                            ::=   constructor | constructors\n\n    constructors                              ::=   \'Constructors\' <END_OF_LINE>? constructor(s)Declaration(s) <END_OF_LINE>\n    \n    constructor                               ::=   \'Constructor\' <END_OF_LINE>? constructorDeclaration <END_OF_LINE>\n    \n    constructor(s)Declaration(s)              ::=   constructors(s)Declarations | constructorsDeclaration\n\n    constructors(s)Declarations               ::=   constructor(s)Declaration semiColonThenConstructor(s)Declaration+\n       \n    semiColonThenConstructor(s)Declaration    ::=   \';\' constructor(s)Declaration\n    \n    constructor(s)Declaration                 ::=   constructorsDeclaration | constructorDeclaration\n    \n    constructorsDeclaration                   ::=   constructorBodies colonThenTypeName?\n\n    constructorDeclaration                    ::=   constructorBody colonThenTypeName?\n\n    constructorBodies                         ::=   constructorBody commaThenConstructorBody+\n\n    commaThenConstructorBody                  ::=   \',\' constructorBody    \n    \n    colonThenTypeName                         ::=   \':\' typeName\n\n    constructorBody                           ::=   constructorName<NO_WHITESPACE>parenthesisedConstructorArguments?\n\n    constructorName                           ::=   [unassigned]\n    \n    parenthesisedConstructorArguments         ::=   \'(\'<NO_WHITESPACE>constructorArguments<NO_WHITESPACE>\')\'\n\n    constructorArguments                      ::=   constructorArgument<NO_WHITESPACE>commaThenConstructorArgument*\n    \n    commaThenConstructorArgument              ::=   \',\'<NO_WHITESPACE>constructorArgument\n    \n    constructorArgument                       ::=   typeName | .. | [unassigned]\n\n    \n    \n    object                                    ::=   \'Object\' <END_OF_LINE>? objectDeclaration <END_OF_LINE>\n\n    objectDeclaration                         ::=   objectLiteral \':\' typeName\n    \n    objectLiteral                             ::=   \'{\' properties \'}\'\n    \n    properties                                ::=   property commaThenProperty*\n    \n    commaThenProperty                         ::=   \',\' property\n    \n    property                                  ::=   propertyName \':\' typeName\n    \n    propertyName                              ::=   [unassigned]\n    \n    \n    \n    type                                      ::=   \'Type\' typeName <END_OF_LINE>\n\n    typeName                                  ::=   [unassigned]\n    \n    \n    \n    errors                                    ::=   error+ <END_OF_LINE>\n    \n    error                                     ::=   [string] | [special] | [include] | [keyword] | [unassigned]\n     \n     \n     \n    verticalSpace                             ::=   <END_OF_LINE>+\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxxM09BQUo7O0FBd0xBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJncmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ3JhbW1hciA9IGBcblxuICAgIGRvY3VtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGhlYWRlcj8gdmVydGljYWxTcGFjZT8gYm9keT9cblxuICAgICBcbiAgICAgXG4gICAgaGVhZGVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgaW5jbHVkZURpcmVjdGl2ZStcbiAgICBcbiAgICBpbmNsdWRlRGlyZWN0aXZlICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnaW5jbHVkZSc8Tk9fV0hJVEVTUEFDRT4nKCc8Tk9fV0hJVEVTUEFDRT5bc3RyaW5nXTxOT19XSElURVNQQUNFPicpJyA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgXG4gICAgXG4gICAgYm9keSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcGFydE9yVmVydGljYWxTcGFjZStcbiAgICAgICAgXG4gICAgcGFydE9yVmVydGljYWxTcGFjZSAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcGFydCB8IHZlcnRpY2FsU3BhY2VcbiAgICBcbiAgICBcbiAgICBcbiAgICBwYXJ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBydWxlIHwgYXhpb20gfCB0aGVvcmVtIHwgbGVtbWEgfCB2YXJpYWJsZShzKSB8IGNvbnN0cnVjdG9yKHMpIHwgdHlwZSB8IGVycm9ycytcbiAgICBcbiAgICBcbiAgICBcbiAgICBydWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUnVsZScgcGFyZW50aGVzaXNlZExhYmVscz8gPEVORF9PRl9MSU5FPiBsb2NhbFZhcmlhYmxlKHMpPyBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mP1xuICAgIFxuICAgIGF4aW9tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdBeGlvbScgcGFyZW50aGVzaXNlZExhYmVscz8gPEVORF9PRl9MSU5FPiBsb2NhbFZhcmlhYmxlKHMpPyBwcmVtaXNlKHMpPyBjb25jbHVzaW9uXG4gICAgXG4gICAgdGhlb3JlbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1RoZW9yZW0nIHBhcmVudGhlc2lzZWRMYWJlbHM/IDxFTkRfT0ZfTElORT4gbG9jYWxWYXJpYWJsZShzKT8gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZlxuICAgICAgICBcbiAgICBsZW1tYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnTGVtbWEnIHBhcmVudGhlc2lzZWRMYWJlbHM/IDxFTkRfT0ZfTElORT4gbG9jYWxWYXJpYWJsZShzKT8gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBwcmVtaXNlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcmVtaXNlIHwgcHJlbWlzZXNcbiAgICBcbiAgICBwcmVtaXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUHJlbWlzZScgPEVORF9PRl9MSU5FPiAobGFiZWxsZWQpU3RhdGVtZW50XG4gICAgXG4gICAgcHJlbWlzZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1ByZW1pc2VzJyA8RU5EX09GX0xJTkU+IChsYWJlbGxlZClTdGF0ZW1lbnQgKGxhYmVsbGVkKVN0YXRlbWVudCtcblxuICAgIGNvbmNsdXNpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdDb25jbHVzaW9uJyA8RU5EX09GX0xJTkU+IChsYWJlbGxlZClTdGF0ZW1lbnRcblxuICAgIHByb29mICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdQcm9vZicgPEVORF9PRl9MSU5FPiBzdWJMZW1tYU9yKGxhYmVsbGVkKVN0YXRlbWVudCogdGhlcmVmb3JlXG5cbiAgICB0aGVyZWZvcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnVGhlcmVmb3JlJyA8RU5EX09GX0xJTkU+IChsYWJlbGxlZClTdGF0ZW1lbnRcbiAgICBcbiAgICBcblxuICAgIHN1YkxlbW1hT3IobGFiZWxsZWQpU3RhdGVtZW50ICAgICAgICAgICAgIDo6PSAgIHN1YkxlbW1hIHwgKGxhYmVsbGVkKVN0YXRlbWVudFxuXG4gICAgc3ViTGVtbWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3VwcG9zZSB0aGVuPyBoZW5jZSB2ZXJ0aWNhbFNwYWNlP1xuICAgIFxuICAgIFxuXG4gICAgc3VwcG9zZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1N1cHBvc2UnIDxFTkRfT0ZfTElORT4gc3RhdGVtZW50K1xuICAgIFxuICAgIHRoZW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdUaGVuJyA8RU5EX09GX0xJTkU+IHN1YkxlbW1hT3IobGFiZWxsZWQpU3RhdGVtZW50K1xuICAgIFxuICAgIGhlbmNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdIZW5jZScgPEVORF9PRl9MSU5FPiAobGFiZWxsZWQpU3RhdGVtZW50XG4gICAgXG4gICAgXG4gICAgXG4gICAgKGxhYmVsbGVkKVN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgbGFiZWxsZWRTdGF0ZW1lbnQgfCBzdGF0ZW1lbnRcbiAgICBcbiAgICBsYWJlbGxlZFN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdGF0ZW1lbnRCb2R5ICdieScgbGFiZWwgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIHN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN0YXRlbWVudEJvZHkgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIHN0YXRlbWVudEJvZHkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHNwZWNpYWxPclVuYXNzaWduZWQrIFxuICAgIFxuICAgIHNwZWNpYWxPclVuYXNzaWduZWQgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFtzcGVjaWFsXSB8IFt1bmFzc2lnbmVkXVxuICAgIFxuICAgIFxuICAgIFxuICAgIHBhcmVudGhlc2lzZWRMYWJlbHMgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICcoJzxOT19XSElURVNQQUNFPmxhYmVsczxOT19XSElURVNQQUNFPicpJ1xuICAgIFxuICAgIGxhYmVscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGxhYmVsPE5PX1dISVRFU1BBQ0U+Y29tbWFUaGVuTGFiZWwqXG4gICAgXG4gICAgY29tbWFUaGVuTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJywnPE5PX1dISVRFU1BBQ0U+bGFiZWxcblxuICAgIGxhYmVsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFt1bmFzc2lnbmVkXVxuICAgIFxuXG5cbiAgICBsb2NhbFZhcmlhYmxlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZShzKVxuXG4gICAgdmFyaWFibGUocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdmFyaWFibGUgfCB2YXJpYWJsZXNcblxuICAgIHZhcmlhYmxlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdWYXJpYWJsZXMnIDxFTkRfT0ZfTElORT4/IHZhcmlhYmxlKHMpRGVjbGFyYXRpb24ocykgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIHZhcmlhYmxlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdWYXJpYWJsZScgPEVORF9PRl9MSU5FPj8gdmFyaWFibGVEZWNsYXJhdGlvbiA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgdmFyaWFibGUocylEZWNsYXJhdGlvbihzKSAgICAgICAgICAgICAgICAgOjo9ICAgdmFyaWFibGVzKHMpRGVjbGFyYXRpb25zIHwgdmFyaWFibGVzRGVjbGFyYXRpb25cblxuICAgIHZhcmlhYmxlcyhzKURlY2xhcmF0aW9ucyAgICAgICAgICAgICAgICAgIDo6PSAgIHZhcmlhYmxlKHMpRGVjbGFyYXRpb24gc2VtaUNvbG9uVGhlblZhcmlhYmxlKHMpRGVjbGFyYXRpb24rXG4gICAgICAgXG4gICAgc2VtaUNvbG9uVGhlblZhcmlhYmxlKHMpRGVjbGFyYXRpb24gICAgICAgOjo9ICAgJzsnIHZhcmlhYmxlKHMpRGVjbGFyYXRpb25cbiAgICBcbiAgICB2YXJpYWJsZShzKURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZXNEZWNsYXJhdGlvbiB8IHZhcmlhYmxlRGVjbGFyYXRpb25cbiAgICBcbiAgICB2YXJpYWJsZXNEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZU5hbWVzIGNvbG9uVGhlblR5cGVOYW1lP1xuXG4gICAgdmFyaWFibGVEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdmFyaWFibGVOYW1lIGNvbG9uVGhlblR5cGVOYW1lP1xuXG4gICAgdmFyaWFibGVOYW1lcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdmFyaWFibGVOYW1lIGNvbW1hVGhlblZhcmlhYmxlTmFtZStcblxuICAgIGNvbW1hVGhlblZhcmlhYmxlTmFtZSAgICAgICAgICAgICAgICAgICAgIDo6PSAgICcsJyB2YXJpYWJsZU5hbWUgICAgXG4gICAgXG4gICAgY29sb25UaGVuVHlwZU5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJzonIHR5cGVOYW1lXG5cbiAgICB2YXJpYWJsZU5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBbdW5hc3NpZ25lZF1cblxuXG5cbiAgICBsb2NhbENvbnN0cnVjdG9yKHMpICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvcihzKVxuXG4gICAgY29uc3RydWN0b3IocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3IgfCBjb25zdHJ1Y3RvcnNcblxuICAgIGNvbnN0cnVjdG9ycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdDb25zdHJ1Y3RvcnMnIDxFTkRfT0ZfTElORT4/IGNvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb24ocykgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIGNvbnN0cnVjdG9yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdDb25zdHJ1Y3RvcicgPEVORF9PRl9MSU5FPj8gY29uc3RydWN0b3JEZWNsYXJhdGlvbiA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgY29uc3RydWN0b3IocylEZWNsYXJhdGlvbihzKSAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3JzKHMpRGVjbGFyYXRpb25zIHwgY29uc3RydWN0b3JzRGVjbGFyYXRpb25cblxuICAgIGNvbnN0cnVjdG9ycyhzKURlY2xhcmF0aW9ucyAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb24gc2VtaUNvbG9uVGhlbkNvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb24rXG4gICAgICAgXG4gICAgc2VtaUNvbG9uVGhlbkNvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb24gICAgOjo9ICAgJzsnIGNvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb25cbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzKURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvcnNEZWNsYXJhdGlvbiB8IGNvbnN0cnVjdG9yRGVjbGFyYXRpb25cbiAgICBcbiAgICBjb25zdHJ1Y3RvcnNEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvckJvZGllcyBjb2xvblRoZW5UeXBlTmFtZT9cblxuICAgIGNvbnN0cnVjdG9yRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yQm9keSBjb2xvblRoZW5UeXBlTmFtZT9cblxuICAgIGNvbnN0cnVjdG9yQm9kaWVzICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yQm9keSBjb21tYVRoZW5Db25zdHJ1Y3RvckJvZHkrXG5cbiAgICBjb21tYVRoZW5Db25zdHJ1Y3RvckJvZHkgICAgICAgICAgICAgICAgICA6Oj0gICAnLCcgY29uc3RydWN0b3JCb2R5ICAgIFxuICAgIFxuICAgIGNvbG9uVGhlblR5cGVOYW1lICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICc6JyB0eXBlTmFtZVxuXG4gICAgY29uc3RydWN0b3JCb2R5ICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3JOYW1lPE5PX1dISVRFU1BBQ0U+cGFyZW50aGVzaXNlZENvbnN0cnVjdG9yQXJndW1lbnRzP1xuXG4gICAgY29uc3RydWN0b3JOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgW3VuYXNzaWduZWRdXG4gICAgXG4gICAgcGFyZW50aGVzaXNlZENvbnN0cnVjdG9yQXJndW1lbnRzICAgICAgICAgOjo9ICAgJygnPE5PX1dISVRFU1BBQ0U+Y29uc3RydWN0b3JBcmd1bWVudHM8Tk9fV0hJVEVTUEFDRT4nKSdcblxuICAgIGNvbnN0cnVjdG9yQXJndW1lbnRzICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yQXJndW1lbnQ8Tk9fV0hJVEVTUEFDRT5jb21tYVRoZW5Db25zdHJ1Y3RvckFyZ3VtZW50KlxuICAgIFxuICAgIGNvbW1hVGhlbkNvbnN0cnVjdG9yQXJndW1lbnQgICAgICAgICAgICAgIDo6PSAgICcsJzxOT19XSElURVNQQUNFPmNvbnN0cnVjdG9yQXJndW1lbnRcbiAgICBcbiAgICBjb25zdHJ1Y3RvckFyZ3VtZW50ICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB0eXBlTmFtZSB8IC4uIHwgW3VuYXNzaWduZWRdXG5cbiAgICBcbiAgICBcbiAgICBvYmplY3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnT2JqZWN0JyA8RU5EX09GX0xJTkU+PyBvYmplY3REZWNsYXJhdGlvbiA8RU5EX09GX0xJTkU+XG5cbiAgICBvYmplY3REZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBvYmplY3RMaXRlcmFsICc6JyB0eXBlTmFtZVxuICAgIFxuICAgIG9iamVjdExpdGVyYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICd7JyBwcm9wZXJ0aWVzICd9J1xuICAgIFxuICAgIHByb3BlcnRpZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByb3BlcnR5IGNvbW1hVGhlblByb3BlcnR5KlxuICAgIFxuICAgIGNvbW1hVGhlblByb3BlcnR5ICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICcsJyBwcm9wZXJ0eVxuICAgIFxuICAgIHByb3BlcnR5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByb3BlcnR5TmFtZSAnOicgdHlwZU5hbWVcbiAgICBcbiAgICBwcm9wZXJ0eU5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBbdW5hc3NpZ25lZF1cbiAgICBcbiAgICBcbiAgICBcbiAgICB0eXBlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnVHlwZScgdHlwZU5hbWUgPEVORF9PRl9MSU5FPlxuXG4gICAgdHlwZU5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgW3VuYXNzaWduZWRdXG4gICAgXG4gICAgXG4gICAgXG4gICAgZXJyb3JzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgZXJyb3IrIDxFTkRfT0ZfTElORT5cbiAgICBcbiAgICBlcnJvciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBbc3RyaW5nXSB8IFtzcGVjaWFsXSB8IFtpbmNsdWRlXSB8IFtrZXl3b3JkXSB8IFt1bmFzc2lnbmVkXVxuICAgICBcbiAgICAgXG4gICAgIFxuICAgIHZlcnRpY2FsU3BhY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIDxFTkRfT0ZfTElORT4rXG5cbmA7XG5cbm1vZHVsZS5leHBvcnRzID0gZ3JhbW1hcjtcbiJdfQ==