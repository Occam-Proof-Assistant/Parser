'use strict';

var grammar = '\n\n    document                                  ::=   part*\n\n    part                                      ::=   \u21B2 | rule | axiom | theorem | lemma | variable(s) | constructor(s) | type | definition | error\n   \n    error                                     ::=   string | special | keyword | unassigned \n    \n    \n    \n    rule                                      ::=   Rule parenthesisedLabels? \u21B2 localVariable(s)? premise(s)? conclusion proof?\n    \n    axiom                                     ::=   Axiom parenthesisedLabels? \u21B2 localVariable(s)? premise(s)? conclusion\n    \n    theorem                                   ::=   Theorem parenthesisedLabels? \u21B2 localVariable(s)? premise(s)? conclusion proof\n        \n    lemma                                     ::=   Lemma parenthesisedLabels? \u21B2 localVariable(s)? premise(s)? conclusion proof    \n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   Premise \u21B2 (labelled)statement\n    \n    premises                                  ::=   Premises \u21B2 (labelled)statement (labelled)statement+\n\n    conclusion                                ::=   Conclusion \u21B2 statement\n\n    proof                                     ::=   Proof \u21B2 subLemmaOr(labelled)statement* therefore\n\n    therefore                                 ::=   Therefore \u21B2 (labelled)statement\n    \n    \n\n    subLemmaOr(labelled)statement             ::=   subLemma | (labelled)statement\n\n    subLemma                                  ::=   suppose then? hence\n    \n    \n\n    suppose                                   ::=   Suppose \u21B2 statement+\n    \n    then                                      ::=   Then \u21B2 subLemmaOr(labelled)statement+\n    \n    hence                                     ::=   Hence \u21B2 (labelled)statement\n    \n    \n    \n    (labelled)statement                       ::=   labelledStatement | statement\n    \n    labelledStatement                         ::=   symbol+ by label \u21B2\n    \n    statement                                 ::=   symbol+ \u21B2\n    \n    symbol                                    ::=   unassigned | { | } | = | : | ( | )\n    \n    \n    \n    parenthesisedLabels                       ::=   (<NO_WHITESPACE>labels<NO_WHITESPACE>)\n    \n    labels                                    ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                            ::=   ,<NO_WHITESPACE>label\n\n    label                                     ::=   unassigned\n    \n\n\n    localVariable(s)                          ::=   variable(s)\n\n    variable(s)                               ::=   variable | variables\n\n    variables                                 ::=   Variables \u21B2? variable(s)Declaration(s) \u21B2\n    \n    variable                                  ::=   Variable \u21B2? variableDeclaration \u21B2\n    \n    variable(s)Declaration(s)                 ::=   variables(s)Declarations | variablesDeclaration\n\n    variables(s)Declarations                  ::=   variable(s)Declaration semiColonThenVariable(s)Declaration+\n       \n    semiColonThenVariable(s)Declaration       ::=   ; variable(s)Declaration\n    \n    variable(s)Declaration                    ::=   variablesDeclaration | variableDeclaration\n    \n    variablesDeclaration                      ::=   variableNames colonThenTypeName?\n\n    variableDeclaration                       ::=   variableName colonThenTypeName?\n\n    variableNames                             ::=   variableName commaThenVariableName+\n\n    commaThenVariableName                     ::=   , variableName    \n    \n    colonThenTypeName                         ::=   : typeName\n\n    variableName                              ::=   unassigned\n\n\n\n    localConstructor(s)                       ::=   constructor(s)\n\n    constructor(s)                            ::=   constructor | constructors\n\n    constructors                              ::=   Constructors \u21B2? constructor(s)Declaration(s) \u21B2\n    \n    constructor                               ::=   Constructor \u21B2? constructorDeclaration \u21B2\n    \n    constructor(s)Declaration(s)              ::=   constructors(s)Declarations | constructorsDeclaration\n\n    constructors(s)Declarations               ::=   constructor(s)Declaration semiColonThenConstructor(s)Declaration+\n       \n    semiColonThenConstructor(s)Declaration    ::=   ; constructor(s)Declaration\n    \n    constructor(s)Declaration                 ::=   constructorsDeclaration | constructorDeclaration\n    \n    constructorsDeclaration                   ::=   constructorBodies colonThenTypeName?\n\n    constructorDeclaration                    ::=   constructorBody colonThenTypeName?\n\n    constructorBodies                         ::=   constructorBody commaThenConstructorBody+\n\n    commaThenConstructorBody                  ::=   , constructorBody    \n    \n    colonThenTypeName                         ::=   : typeName\n\n    constructorBody                           ::=   constructorName<NO_WHITESPACE>parenthesisedConstructorArguments?\n\n    constructorName                           ::=   unassigned\n    \n    parenthesisedConstructorArguments         ::=   (<NO_WHITESPACE>constructorArguments<NO_WHITESPACE>)\n\n    constructorArguments                      ::=   constructorArgument<NO_WHITESPACE>commaThenConstructorArgument*\n    \n    commaThenConstructorArgument              ::=   ,<NO_WHITESPACE>constructorArgument\n    \n    constructorArgument                       ::=   typeName | .. | unassigned\n\n    \n    \n    object                                    ::=   Object \u21B2? objectDeclaration \u21B2\n\n    objectDeclaration                         ::=   objectLiteral : typeName\n    \n    objectLiteral                             ::=   { properties }\n    \n    properties                                ::=   property commaThenProperty*\n    \n    commaThenProperty                         ::=   , property\n    \n    property                                  ::=   propertyName : typeName\n    \n    propertyName                              ::=   unassigned\n    \n    \n    \n    type                                      ::=   Type typeName \u21B2\n\n    typeName                                  ::=   unassigned\n\n           \n\n    \u21B2                                         ::=   <END_OF_LINE>+\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,