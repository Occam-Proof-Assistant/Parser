'use strict';

var grammar = '\n\n    document                                  ::=   header? verticalSpace? body?\n                                              \n                                              \n                                              \n    header                                    ::=   includeDirective+\n    \n    includeDirective                          ::=   \'include\'<NO_WHITESPACE>\'(\'<NO_WHITESPACE>[string]<NO_WHITESPACE>\')\' <END_OF_LINE>\n                                              \n                                              \n    body                                      ::=   part+  \n        \n    part                                      ::=   rule | axiom | theorem | lemma | verticalSpace | error\n    \n    \n    \n    rule                                      ::=   \'Rule\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof?\n    \n    axiom                                     ::=   \'Axiom\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion\n    \n    theorem                                   ::=   \'Theorem\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof\n        \n    lemma                                     ::=   \'Lemma\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof    \n    \n    \n    \n    parenthesisedLabels                       ::=   \'(\'<NO_WHITESPACE>labels<NO_WHITESPACE>\')\'\n    \n    labels                                    ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                            ::=   \',\'<NO_WHITESPACE>label\n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   \'Premise\' <END_OF_LINE> (un)labelledStatement\n    \n    premises                                  ::=   \'Premises\' <END_OF_LINE> (un)labelledStatement (un)labelledStatement+\n    \n    conclusion                                ::=   \'Conclusion\' <END_OF_LINE> (un)labelledStatement\n    \n    proof                                     ::=   \'Proof\' <END_OF_LINE> subLemmaOr(un)labelledStatement* therefore\n    \n    therefore                                 ::=   \'Therefore\' <END_OF_LINE> (un)labelledStatement\n    \n    \n    \n    subLemmaOr(un)labelledStatement           ::=   subLemma | (un)labelledStatement\n    \n    subLemma                                  ::=   suppose then? hence verticalSpace?\n    \n    \n    \n    suppose                                   ::=   \'Suppose\' <END_OF_LINE> unlabelledStatement+\n    \n    then                                      ::=   \'Then\' <END_OF_LINE> subLemmaOr(un)labelledStatement+\n    \n    hence                                     ::=   \'Hence\' <END_OF_LINE> (un)labelledStatement\n    \n    \n    \n    (un)labelledStatement                     ::=   unlabelledStatement | labelledStatement\n    \n    labelledStatement                         ::=   statement \'by\' label <END_OF_LINE>  \n    \n    unlabelledStatement                       ::=   statement <END_OF_LINE>  \n    \n    statement                                 ::=   specialOrUnassigned+ \n    \n    specialOrUnassigned                       ::=   [special] | [unassigned]\n    \n    \n    \n    label                                     ::=   [unassigned]\n     \n     \n     \n    verticalSpace                             ::=   <END_OF_LINE>+\n    \n    \n    \n    error                                     ::=   *\n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSw4NkdBQU47O0FBdUZBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJncmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBncmFtbWFyID0gYFxuXG4gICAgZG9jdW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgaGVhZGVyPyB2ZXJ0aWNhbFNwYWNlPyBib2R5P1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGhlYWRlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGluY2x1ZGVEaXJlY3RpdmUrXG4gICAgXG4gICAgaW5jbHVkZURpcmVjdGl2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ2luY2x1ZGUnPE5PX1dISVRFU1BBQ0U+JygnPE5PX1dISVRFU1BBQ0U+W3N0cmluZ108Tk9fV0hJVEVTUEFDRT4nKScgPEVORF9PRl9MSU5FPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGJvZHkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHBhcnQrICBcbiAgICAgICAgXG4gICAgcGFydCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcnVsZSB8IGF4aW9tIHwgdGhlb3JlbSB8IGxlbW1hIHwgdmVydGljYWxTcGFjZSB8IGVycm9yXG4gICAgXG4gICAgXG4gICAgXG4gICAgcnVsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1J1bGUnIHBhcmVudGhlc2lzZWRMYWJlbHM/IDxFTkRfT0ZfTElORT4gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZj9cbiAgICBcbiAgICBheGlvbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnQXhpb20nIHBhcmVudGhlc2lzZWRMYWJlbHM/IDxFTkRfT0ZfTElORT4gcHJlbWlzZShzKT8gY29uY2x1c2lvblxuICAgIFxuICAgIHRoZW9yZW0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdUaGVvcmVtJyBwYXJlbnRoZXNpc2VkTGFiZWxzPyA8RU5EX09GX0xJTkU+IHByZW1pc2Uocyk/IGNvbmNsdXNpb24gcHJvb2ZcbiAgICAgICAgXG4gICAgbGVtbWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ0xlbW1hJyBwYXJlbnRoZXNpc2VkTGFiZWxzPyA8RU5EX09GX0xJTkU+IHByZW1pc2Uocyk/IGNvbmNsdXNpb24gcHJvb2YgICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgcGFyZW50aGVzaXNlZExhYmVscyAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJygnPE5PX1dISVRFU1BBQ0U+bGFiZWxzPE5PX1dISVRFU1BBQ0U+JyknXG4gICAgXG4gICAgbGFiZWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgbGFiZWw8Tk9fV0hJVEVTUEFDRT5jb21tYVRoZW5MYWJlbCpcbiAgICBcbiAgICBjb21tYVRoZW5MYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnLCc8Tk9fV0hJVEVTUEFDRT5sYWJlbFxuICAgIFxuICAgIFxuICAgIFxuICAgIHByZW1pc2UocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByZW1pc2UgfCBwcmVtaXNlc1xuICAgIFxuICAgIHByZW1pc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdQcmVtaXNlJyA8RU5EX09GX0xJTkU+ICh1bilsYWJlbGxlZFN0YXRlbWVudFxuICAgIFxuICAgIHByZW1pc2VzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdQcmVtaXNlcycgPEVORF9PRl9MSU5FPiAodW4pbGFiZWxsZWRTdGF0ZW1lbnQgKHVuKWxhYmVsbGVkU3RhdGVtZW50K1xuICAgIFxuICAgIGNvbmNsdXNpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdDb25jbHVzaW9uJyA8RU5EX09GX0xJTkU+ICh1bilsYWJlbGxlZFN0YXRlbWVudFxuICAgIFxuICAgIHByb29mICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdQcm9vZicgPEVORF9PRl9MSU5FPiBzdWJMZW1tYU9yKHVuKWxhYmVsbGVkU3RhdGVtZW50KiB0aGVyZWZvcmVcbiAgICBcbiAgICB0aGVyZWZvcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnVGhlcmVmb3JlJyA8RU5EX09GX0xJTkU+ICh1bilsYWJlbGxlZFN0YXRlbWVudFxuICAgIFxuICAgIFxuICAgIFxuICAgIHN1YkxlbW1hT3IodW4pbGFiZWxsZWRTdGF0ZW1lbnQgICAgICAgICAgIDo6PSAgIHN1YkxlbW1hIHwgKHVuKWxhYmVsbGVkU3RhdGVtZW50XG4gICAgXG4gICAgc3ViTGVtbWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3VwcG9zZSB0aGVuPyBoZW5jZSB2ZXJ0aWNhbFNwYWNlP1xuICAgIFxuICAgIFxuICAgIFxuICAgIHN1cHBvc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdTdXBwb3NlJyA8RU5EX09GX0xJTkU+IHVubGFiZWxsZWRTdGF0ZW1lbnQrXG4gICAgXG4gICAgdGhlbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1RoZW4nIDxFTkRfT0ZfTElORT4gc3ViTGVtbWFPcih1bilsYWJlbGxlZFN0YXRlbWVudCtcbiAgICBcbiAgICBoZW5jZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnSGVuY2UnIDxFTkRfT0ZfTElORT4gKHVuKWxhYmVsbGVkU3RhdGVtZW50XG4gICAgXG4gICAgXG4gICAgXG4gICAgKHVuKWxhYmVsbGVkU3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdW5sYWJlbGxlZFN0YXRlbWVudCB8IGxhYmVsbGVkU3RhdGVtZW50XG4gICAgXG4gICAgbGFiZWxsZWRTdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3RhdGVtZW50ICdieScgbGFiZWwgPEVORF9PRl9MSU5FPiAgXG4gICAgXG4gICAgdW5sYWJlbGxlZFN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3RhdGVtZW50IDxFTkRfT0ZfTElORT4gIFxuICAgIFxuICAgIHN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHNwZWNpYWxPclVuYXNzaWduZWQrIFxuICAgIFxuICAgIHNwZWNpYWxPclVuYXNzaWduZWQgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFtzcGVjaWFsXSB8IFt1bmFzc2lnbmVkXVxuICAgIFxuICAgIFxuICAgIFxuICAgIGxhYmVsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFt1bmFzc2lnbmVkXVxuICAgICBcbiAgICAgXG4gICAgIFxuICAgIHZlcnRpY2FsU3BhY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgXG4gICAgXG4gICAgZXJyb3IgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgKlxuICAgIFxuYDtcblxubW9kdWxlLmV4cG9ydHMgPSBncmFtbWFyO1xuIl19