'use strict';

var grammar = '\n\n    document                                  ::=   header? verticalSpace? body?\n\n     \n     \n    header                                    ::=   includeDirective+\n    \n    includeDirective                          ::=   \'include\'<NO_WHITESPACE>\'(\'<NO_WHITESPACE>[string]<NO_WHITESPACE>\')\' <END_OF_LINE>\n    \n    \n    \n    body                                      ::=   partOrVerticalSpace+\n        \n    partOrVerticalSpace                       ::=   part | verticalSpace\n    \n    \n    \n    part                                      ::=   rule | axiom | theorem | lemma | errors\n    \n    \n    \n    rule                                      ::=   \'Rule\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof?\n    \n    axiom                                     ::=   \'Axiom\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion\n    \n    theorem                                   ::=   \'Theorem\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof\n        \n    lemma                                     ::=   \'Lemma\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof    \n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   \'Premise\' <END_OF_LINE> (labelled)Statement\n    \n    premises                                  ::=   \'Premises\' <END_OF_LINE> (labelled)Statement (labelled)Statement+\n\n    conclusion                                ::=   \'Conclusion\' <END_OF_LINE> (labelled)Statement\n\n    proof                                     ::=   \'Proof\' <END_OF_LINE> subLemmaOr(labelled)Statement* therefore\n\n    therefore                                 ::=   \'Therefore\' <END_OF_LINE> (labelled)Statement\n    \n    \n\n    subLemmaOr(labelled)Statement             ::=   subLemma | (labelled)Statement\n\n    subLemma                                  ::=   suppose then? hence verticalSpace?\n    \n    \n\n    suppose                                   ::=   \'Suppose\' <END_OF_LINE> statement+\n    \n    then                                      ::=   \'Then\' <END_OF_LINE> subLemmaOr(labelled)Statement+\n    \n    hence                                     ::=   \'Hence\' <END_OF_LINE> (labelled)Statement\n    \n    \n    \n    \n    (labelled)Statement                       ::=   labelledStatementOrStatement <END_OF_LINE>\n    \n    labelledStatementOrStatement              ::=   labelledStatement | statement  \n    \n    labelledStatement                         ::=   statement \'by\' label\n    \n    statement                                 ::=   specialOrUnassigned+ \n    \n    specialOrUnassigned                       ::=   [special] | [unassigned]\n    \n    \n    \n    parenthesisedLabels                       ::=   \'(\'<NO_WHITESPACE>labels<NO_WHITESPACE>\')\'\n    \n    labels                                    ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                            ::=   \',\'<NO_WHITESPACE>label\n\n    label                                     ::=   [unassigned]\n    \n    \n    \n    errors                                    ::=   errorsThenEndOfLine+\n    \n    errorsThenEndOfLine                       ::=   error+ <END_OF_LINE>\n    \n    error                                     ::=   [string] | [special] | [include] | [keyword] | [unassigned]\n     \n     \n     \n    verticalSpace                             ::=   <END_OF_LINE>+\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSwyOEdBQUo7O0FBK0ZBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJncmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ3JhbW1hciA9IGBcblxuICAgIGRvY3VtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGhlYWRlcj8gdmVydGljYWxTcGFjZT8gYm9keT9cblxuICAgICBcbiAgICAgXG4gICAgaGVhZGVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgaW5jbHVkZURpcmVjdGl2ZStcbiAgICBcbiAgICBpbmNsdWRlRGlyZWN0aXZlICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnaW5jbHVkZSc8Tk9fV0hJVEVTUEFDRT4nKCc8Tk9fV0hJVEVTUEFDRT5bc3RyaW5nXTxOT19XSElURVNQQUNFPicpJyA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgXG4gICAgXG4gICAgYm9keSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcGFydE9yVmVydGljYWxTcGFjZStcbiAgICAgICAgXG4gICAgcGFydE9yVmVydGljYWxTcGFjZSAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcGFydCB8IHZlcnRpY2FsU3BhY2VcbiAgICBcbiAgICBcbiAgICBcbiAgICBwYXJ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBydWxlIHwgYXhpb20gfCB0aGVvcmVtIHwgbGVtbWEgfCBlcnJvcnNcbiAgICBcbiAgICBcbiAgICBcbiAgICBydWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUnVsZScgcGFyZW50aGVzaXNlZExhYmVscz8gPEVORF9PRl9MSU5FPiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mP1xuICAgIFxuICAgIGF4aW9tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdBeGlvbScgcGFyZW50aGVzaXNlZExhYmVscz8gPEVORF9PRl9MSU5FPiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uXG4gICAgXG4gICAgdGhlb3JlbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1RoZW9yZW0nIHBhcmVudGhlc2lzZWRMYWJlbHM/IDxFTkRfT0ZfTElORT4gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZlxuICAgICAgICBcbiAgICBsZW1tYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnTGVtbWEnIHBhcmVudGhlc2lzZWRMYWJlbHM/IDxFTkRfT0ZfTElORT4gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBwcmVtaXNlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcmVtaXNlIHwgcHJlbWlzZXNcbiAgICBcbiAgICBwcmVtaXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUHJlbWlzZScgPEVORF9PRl9MSU5FPiAobGFiZWxsZWQpU3RhdGVtZW50XG4gICAgXG4gICAgcHJlbWlzZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1ByZW1pc2VzJyA8RU5EX09GX0xJTkU+IChsYWJlbGxlZClTdGF0ZW1lbnQgKGxhYmVsbGVkKVN0YXRlbWVudCtcblxuICAgIGNvbmNsdXNpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdDb25jbHVzaW9uJyA8RU5EX09GX0xJTkU+IChsYWJlbGxlZClTdGF0ZW1lbnRcblxuICAgIHByb29mICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdQcm9vZicgPEVORF9PRl9MSU5FPiBzdWJMZW1tYU9yKGxhYmVsbGVkKVN0YXRlbWVudCogdGhlcmVmb3JlXG5cbiAgICB0aGVyZWZvcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnVGhlcmVmb3JlJyA8RU5EX09GX0xJTkU+IChsYWJlbGxlZClTdGF0ZW1lbnRcbiAgICBcbiAgICBcblxuICAgIHN1YkxlbW1hT3IobGFiZWxsZWQpU3RhdGVtZW50ICAgICAgICAgICAgIDo6PSAgIHN1YkxlbW1hIHwgKGxhYmVsbGVkKVN0YXRlbWVudFxuXG4gICAgc3ViTGVtbWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3VwcG9zZSB0aGVuPyBoZW5jZSB2ZXJ0aWNhbFNwYWNlP1xuICAgIFxuICAgIFxuXG4gICAgc3VwcG9zZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1N1cHBvc2UnIDxFTkRfT0ZfTElORT4gc3RhdGVtZW50K1xuICAgIFxuICAgIHRoZW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdUaGVuJyA8RU5EX09GX0xJTkU+IHN1YkxlbW1hT3IobGFiZWxsZWQpU3RhdGVtZW50K1xuICAgIFxuICAgIGhlbmNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdIZW5jZScgPEVORF9PRl9MSU5FPiAobGFiZWxsZWQpU3RhdGVtZW50XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgKGxhYmVsbGVkKVN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgbGFiZWxsZWRTdGF0ZW1lbnRPclN0YXRlbWVudCA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgbGFiZWxsZWRTdGF0ZW1lbnRPclN0YXRlbWVudCAgICAgICAgICAgICAgOjo9ICAgbGFiZWxsZWRTdGF0ZW1lbnQgfCBzdGF0ZW1lbnQgIFxuICAgIFxuICAgIGxhYmVsbGVkU3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN0YXRlbWVudCAnYnknIGxhYmVsXG4gICAgXG4gICAgc3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3BlY2lhbE9yVW5hc3NpZ25lZCsgXG4gICAgXG4gICAgc3BlY2lhbE9yVW5hc3NpZ25lZCAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgW3NwZWNpYWxdIHwgW3VuYXNzaWduZWRdXG4gICAgXG4gICAgXG4gICAgXG4gICAgcGFyZW50aGVzaXNlZExhYmVscyAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJygnPE5PX1dISVRFU1BBQ0U+bGFiZWxzPE5PX1dISVRFU1BBQ0U+JyknXG4gICAgXG4gICAgbGFiZWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgbGFiZWw8Tk9fV0hJVEVTUEFDRT5jb21tYVRoZW5MYWJlbCpcbiAgICBcbiAgICBjb21tYVRoZW5MYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnLCc8Tk9fV0hJVEVTUEFDRT5sYWJlbFxuXG4gICAgbGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgW3VuYXNzaWduZWRdXG4gICAgXG4gICAgXG4gICAgXG4gICAgZXJyb3JzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgZXJyb3JzVGhlbkVuZE9mTGluZStcbiAgICBcbiAgICBlcnJvcnNUaGVuRW5kT2ZMaW5lICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBlcnJvcisgPEVORF9PRl9MSU5FPlxuICAgIFxuICAgIGVycm9yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFtzdHJpbmddIHwgW3NwZWNpYWxdIHwgW2luY2x1ZGVdIHwgW2tleXdvcmRdIHwgW3VuYXNzaWduZWRdXG4gICAgIFxuICAgICBcbiAgICAgXG4gICAgdmVydGljYWxTcGFjZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgPEVORF9PRl9MSU5FPitcblxuYDtcblxubW9kdWxlLmV4cG9ydHMgPSBncmFtbWFyO1xuIl19