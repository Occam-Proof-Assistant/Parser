'use strict';

var grammar = '\n\n    document                                  ::=   header? verticalSpace? body?\n\n     \n     \n    header                                    ::=   includeDirective+\n    \n    includeDirective                          ::=   \'include\'<NO_WHITESPACE>\'(\'<NO_WHITESPACE>[string]<NO_WHITESPACE>\')\' <END_OF_LINE>\n    \n    \n    \n    body                                      ::=   part+  \n        \n    \n    \n    part                                      ::=   rule | axiom | theorem | lemma | verticalSpace | error\n    \n    \n    \n    rule                                      ::=   \'Rule\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof?\n    \n    axiom                                     ::=   \'Axiom\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion\n    \n    theorem                                   ::=   \'Theorem\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof\n        \n    lemma                                     ::=   \'Lemma\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof    \n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   \'Premise\' <END_OF_LINE> (un)labelledStatement\n    \n    premises                                  ::=   \'Premises\' <END_OF_LINE> (un)labelledStatement (un)labelledStatement+\n\n    conclusion                                ::=   \'Conclusion\' <END_OF_LINE> (un)labelledStatement\n\n    proof                                     ::=   \'Proof\' <END_OF_LINE> subLemmaOr(un)labelledStatement* therefore\n\n    therefore                                 ::=   \'Therefore\' <END_OF_LINE> (un)labelledStatement\n    \n    \n\n    subLemmaOr(un)labelledStatement           ::=   subLemma | (un)labelledStatement\n\n    subLemma                                  ::=   suppose then? hence verticalSpace?\n    \n    \n\n    suppose                                   ::=   \'Suppose\' <END_OF_LINE> unlabelledStatement+\n    \n    then                                      ::=   \'Then\' <END_OF_LINE> subLemmaOr(un)labelledStatement+\n    \n    hence                                     ::=   \'Hence\' <END_OF_LINE> (un)labelledStatement\n    \n    \n    \n    (un)labelledStatement                     ::=   unlabelledStatement | labelledStatement\n    \n    labelledStatement                         ::=   statement \'by\' label <END_OF_LINE>  \n\n    unlabelledStatement                       ::=   statement <END_OF_LINE>  \n    \n    statement                                 ::=   specialOrUnassigned+ \n    \n    specialOrUnassigned                       ::=   [special] | [unassigned]\n    \n    \n    \n    parenthesisedLabels                       ::=   \'(\'<NO_WHITESPACE>labels<NO_WHITESPACE>\')\'\n    \n    labels                                    ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                            ::=   \',\'<NO_WHITESPACE>label\n\n    label                                     ::=   [unassigned]\n     \n     \n     \n    verticalSpace                             ::=   <END_OF_LINE>+\n    \n    \n    \n    error                                     ::=   [string] | [special] | [include] | [keyword] | [unassigned]\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxzdkdBQUo7O0FBd0ZBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJncmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ3JhbW1hciA9IGBcblxuICAgIGRvY3VtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGhlYWRlcj8gdmVydGljYWxTcGFjZT8gYm9keT9cblxuICAgICBcbiAgICAgXG4gICAgaGVhZGVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgaW5jbHVkZURpcmVjdGl2ZStcbiAgICBcbiAgICBpbmNsdWRlRGlyZWN0aXZlICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnaW5jbHVkZSc8Tk9fV0hJVEVTUEFDRT4nKCc8Tk9fV0hJVEVTUEFDRT5bc3RyaW5nXTxOT19XSElURVNQQUNFPicpJyA8RU5EX09GX0xJTkU+XG4gICAgXG4gICAgXG4gICAgXG4gICAgYm9keSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcGFydCsgIFxuICAgICAgICBcbiAgICBcbiAgICBcbiAgICBwYXJ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBydWxlIHwgYXhpb20gfCB0aGVvcmVtIHwgbGVtbWEgfCB2ZXJ0aWNhbFNwYWNlIHwgZXJyb3JcbiAgICBcbiAgICBcbiAgICBcbiAgICBydWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUnVsZScgcGFyZW50aGVzaXNlZExhYmVscz8gPEVORF9PRl9MSU5FPiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mP1xuICAgIFxuICAgIGF4aW9tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdBeGlvbScgcGFyZW50aGVzaXNlZExhYmVscz8gPEVORF9PRl9MSU5FPiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uXG4gICAgXG4gICAgdGhlb3JlbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1RoZW9yZW0nIHBhcmVudGhlc2lzZWRMYWJlbHM/IDxFTkRfT0ZfTElORT4gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZlxuICAgICAgICBcbiAgICBsZW1tYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnTGVtbWEnIHBhcmVudGhlc2lzZWRMYWJlbHM/IDxFTkRfT0ZfTElORT4gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBwcmVtaXNlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcmVtaXNlIHwgcHJlbWlzZXNcbiAgICBcbiAgICBwcmVtaXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUHJlbWlzZScgPEVORF9PRl9MSU5FPiAodW4pbGFiZWxsZWRTdGF0ZW1lbnRcbiAgICBcbiAgICBwcmVtaXNlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUHJlbWlzZXMnIDxFTkRfT0ZfTElORT4gKHVuKWxhYmVsbGVkU3RhdGVtZW50ICh1bilsYWJlbGxlZFN0YXRlbWVudCtcblxuICAgIGNvbmNsdXNpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdDb25jbHVzaW9uJyA8RU5EX09GX0xJTkU+ICh1bilsYWJlbGxlZFN0YXRlbWVudFxuXG4gICAgcHJvb2YgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1Byb29mJyA8RU5EX09GX0xJTkU+IHN1YkxlbW1hT3IodW4pbGFiZWxsZWRTdGF0ZW1lbnQqIHRoZXJlZm9yZVxuXG4gICAgdGhlcmVmb3JlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1RoZXJlZm9yZScgPEVORF9PRl9MSU5FPiAodW4pbGFiZWxsZWRTdGF0ZW1lbnRcbiAgICBcbiAgICBcblxuICAgIHN1YkxlbW1hT3IodW4pbGFiZWxsZWRTdGF0ZW1lbnQgICAgICAgICAgIDo6PSAgIHN1YkxlbW1hIHwgKHVuKWxhYmVsbGVkU3RhdGVtZW50XG5cbiAgICBzdWJMZW1tYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdXBwb3NlIHRoZW4/IGhlbmNlIHZlcnRpY2FsU3BhY2U/XG4gICAgXG4gICAgXG5cbiAgICBzdXBwb3NlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnU3VwcG9zZScgPEVORF9PRl9MSU5FPiB1bmxhYmVsbGVkU3RhdGVtZW50K1xuICAgIFxuICAgIHRoZW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdUaGVuJyA8RU5EX09GX0xJTkU+IHN1YkxlbW1hT3IodW4pbGFiZWxsZWRTdGF0ZW1lbnQrXG4gICAgXG4gICAgaGVuY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ0hlbmNlJyA8RU5EX09GX0xJTkU+ICh1bilsYWJlbGxlZFN0YXRlbWVudFxuICAgIFxuICAgIFxuICAgIFxuICAgICh1bilsYWJlbGxlZFN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVubGFiZWxsZWRTdGF0ZW1lbnQgfCBsYWJlbGxlZFN0YXRlbWVudFxuICAgIFxuICAgIGxhYmVsbGVkU3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN0YXRlbWVudCAnYnknIGxhYmVsIDxFTkRfT0ZfTElORT4gIFxuXG4gICAgdW5sYWJlbGxlZFN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3RhdGVtZW50IDxFTkRfT0ZfTElORT4gIFxuICAgIFxuICAgIHN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHNwZWNpYWxPclVuYXNzaWduZWQrIFxuICAgIFxuICAgIHNwZWNpYWxPclVuYXNzaWduZWQgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFtzcGVjaWFsXSB8IFt1bmFzc2lnbmVkXVxuICAgIFxuICAgIFxuICAgIFxuICAgIHBhcmVudGhlc2lzZWRMYWJlbHMgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICcoJzxOT19XSElURVNQQUNFPmxhYmVsczxOT19XSElURVNQQUNFPicpJ1xuICAgIFxuICAgIGxhYmVscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGxhYmVsPE5PX1dISVRFU1BBQ0U+Y29tbWFUaGVuTGFiZWwqXG4gICAgXG4gICAgY29tbWFUaGVuTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJywnPE5PX1dISVRFU1BBQ0U+bGFiZWxcblxuICAgIGxhYmVsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFt1bmFzc2lnbmVkXVxuICAgICBcbiAgICAgXG4gICAgIFxuICAgIHZlcnRpY2FsU3BhY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIDxFTkRfT0ZfTElORT4rXG4gICAgXG4gICAgXG4gICAgXG4gICAgZXJyb3IgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgW3N0cmluZ10gfCBbc3BlY2lhbF0gfCBbaW5jbHVkZV0gfCBba2V5d29yZF0gfCBbdW5hc3NpZ25lZF1cblxuYDtcblxubW9kdWxlLmV4cG9ydHMgPSBncmFtbWFyO1xuIl19