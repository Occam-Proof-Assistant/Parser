'use strict';

var grammar = '\n\n    document                                  ::=   part*\n\n    part                                      ::=   endsOfLines | rule | axiom | theorem | lemma | variable(s) | constructor(s) | type | definition | error\n   \n    error                                     ::=   string | special | keyword | unassigned \n    \n    \n    \n    rule                                      ::=   Rule parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion proof?\n    \n    axiom                                     ::=   Axiom parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion\n    \n    theorem                                   ::=   Theorem parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion proof\n        \n    lemma                                     ::=   Lemma parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion proof    \n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   Premise endsOfLines (labelled)statement\n    \n    premises                                  ::=   Premises endsOfLines (labelled)statement+\n\n    conclusion                                ::=   Conclusion endsOfLines statement\n\n    proof                                     ::=   Proof endsOfLines subLemmaOr(labelled)statement* therefore\n\n    therefore                                 ::=   Therefore endsOfLines (labelled)statement\n    \n    \n\n    subLemmaOr(labelled)statement             ::=   subLemma | (labelled)statement\n\n    subLemma                                  ::=   suppose then? hence\n    \n    \n\n    suppose                                   ::=   Suppose endsOfLines statement+\n    \n    then                                      ::=   Then endsOfLines subLemmaOr(labelled)statement+\n    \n    hence                                     ::=   Hence endsOfLines (labelled)statement\n    \n    \n    \n    (labelled)statement                       ::=   labelledStatement | statement\n    \n    labelledStatement                         ::=   symbol+ by label endsOfLines\n    \n    statement                                 ::=   symbol+ endsOfLines\n    \n    symbol                                    ::=   unassigned | { | } | = | : | ( | )\n    \n    \n    \n    parenthesisedLabels                       ::=   (<NO_WHITESPACE>labels<NO_WHITESPACE>)\n    \n    labels                                    ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                            ::=   ,<NO_WHITESPACE>label\n\n    label                                     ::=   unassigned\n    \n\n\n    localVariable(s)                          ::=   variable(s)\n\n    variable(s)                               ::=   variable | variables\n\n    variables                                 ::=   Variables endsOfLines? variable(s)Declaration(s) endsOfLines\n    \n    variable                                  ::=   Variable endsOfLines? variableDeclaration endsOfLines\n    \n    variable(s)Declaration(s)                 ::=   variables(s)Declarations | variablesDeclaration\n\n    variables(s)Declarations                  ::=   variable(s)Declaration semiColonThenVariable(s)Declaration+\n       \n    semiColonThenVariable(s)Declaration       ::=   ; variable(s)Declaration\n    \n    variable(s)Declaration                    ::=   variablesDeclaration | variableDeclaration\n    \n    variablesDeclaration                      ::=   variableNames colonThenTypeName?\n\n    variableDeclaration                       ::=   variableName colonThenTypeName?\n\n    variableNames                             ::=   variableName commaThenVariableName+\n\n    commaThenVariableName                     ::=   , variableName    \n    \n    colonThenTypeName                         ::=   : typeName\n\n    variableName                              ::=   unassigned\n\n\n\n    localConstructor(s)                       ::=   constructor(s)\n\n    constructor(s)                            ::=   constructor | constructors\n\n    constructors                              ::=   Constructors endsOfLines? constructor(s)Declaration(s) endsOfLines\n    \n    constructor                               ::=   Constructor endsOfLines? constructorDeclaration endsOfLines\n    \n    constructor(s)Declaration(s)              ::=   constructors(s)Declarations | constructorsDeclaration\n\n    constructors(s)Declarations               ::=   constructor(s)Declaration semiColonThenConstructor(s)Declaration+\n       \n    semiColonThenConstructor(s)Declaration    ::=   ; constructor(s)Declaration\n    \n    constructor(s)Declaration                 ::=   constructorsDeclaration | constructorDeclaration\n    \n    constructorsDeclaration                   ::=   constructorBodies colonThenTypeName?\n\n    constructorDeclaration                    ::=   constructorBody colonThenTypeName?\n\n    constructorBodies                         ::=   constructorBody commaThenConstructorBody+\n\n    commaThenConstructorBody                  ::=   , constructorBody    \n    \n    colonThenTypeName                         ::=   : typeName\n\n    constructorBody                           ::=   constructorName<NO_WHITESPACE>parenthesisedConstructorArguments?\n\n    constructorName                           ::=   unassigned\n    \n    parenthesisedConstructorArguments         ::=   (<NO_WHITESPACE>constructorArguments<NO_WHITESPACE>)\n\n    constructorArguments                      ::=   constructorArgument<NO_WHITESPACE>commaThenConstructorArgument*\n    \n    commaThenConstructorArgument              ::=   ,<NO_WHITESPACE>constructorArgument\n    \n    constructorArgument                       ::=   typeName | .. | unassigned\n\n    \n    \n    object                                    ::=   Object endsOfLines? objectDeclaration endsOfLines\n\n    objectDeclaration                         ::=   objectLiteral : typeName\n    \n    objectLiteral                             ::=   { properties }\n    \n    properties                                ::=   property commaThenProperty*\n    \n    commaThenProperty                         ::=   , property\n    \n    property                                  ::=   propertyName : typeName\n    \n    propertyName                              ::=   unassigned\n    \n    \n    \n    type                                      ::=   Type typeName endsOfLines\n\n    typeName                                  ::=   unassigned\n\n           \n\n    endsOfLines                               ::=   <END_OF_LINE>+\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,