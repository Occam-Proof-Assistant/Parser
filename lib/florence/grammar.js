'use strict';

var grammar = '\n\n     document                                   ::=   header? verticalSpace? body?\n\n\n\n     header                                     ::=   includeDirective+\n\n     body                                       ::=   part+\n\n     verticalSpace                              ::=   <END_OF_LINE>+\n\n\n\n     part                                       ::=   verticalSpace\n\n                                                  |   typeDeclaration\n                                                                \n                                                  |   typesDeclaration\n                                                                \n                                                  |   dependentTypeDeclaration\n                                                                \n                                                  |   dependentTypesDeclaration\n                                                                \n                                                  |   constructorDeclaration\n                                                                \n                                                  |   constructorsDeclaration\n                                                                \n                                                  |   variableDeclaration\n                                                                \n                                                  |   variablesDeclaration\n                                                                \n                                                  |   metavariableDeclaration\n                                                                \n                                                  |   metavariablesDeclaration\n                                                                \n                                                  |   qualifiedMetavariableDeclaration\n                                                                \n                                                  |   qualifiedMetavariablesDeclaration\n                                                                \n                                                  |   rule\n                                                                \n                                                  |   axiom\n                                                                \n                                                  |   lemma\n                                                                \n                                                  |   theorem\n                                                                \n                                                  |   error\n                                                                     \n                                                                                                                                          \n                                                                     \n     includeDirective                           ::=   "include"<NO_WHITESPACE>"("<NO_WHITESPACE>[string]<NO_WHITESPACE>")" <END_OF_LINE>\n\n\n\n     typeDeclaration                            ::=   "Type" type\n\n     typesDeclaration                           ::=   "Types" types\n\n     dependentTypeDeclaration                   ::=   "DependentType" dependentType\n\n     dependentTypesDeclaration                  ::=   "DependentTypes" dependentTypes \n\n     constructorDeclaration                     ::=   "Constructor" constructor\n\n     constructorsDeclaration                    ::=   "Constructors" constructors\n\n     variableDeclaration                        ::=   "Variable" variable\n\n     variablesDeclaration                       ::=   "Variables" variables\n\n     metaVariableDeclaration                    ::=   "MetaVariable" metaVariable\n\n     metaVariablesDeclaration                   ::=   "MetaVariables" metaVariables\n\n     qualifiedMetaVariableDeclaration           ::=   "QualifiedMetaVariable" qualifiedMetaVariable\n\n     qualifiedMetaVariablesDeclaration          ::=   "QualifiedMetaVariables" qualifiedMetaVariables\n     \n     \n     \n     rule                                       ::=   "Rule" parenthesisedLabels? <END_OF_LINE> premiseOrPremises? conclusion proof?\n\n     axiom                                      ::=   "Axiom" parenthesisedLabels? <END_OF_LINE> unjustifiedStatement\n\n     lemma                                      ::=   "Lemma" parenthesisedLabels? <END_OF_LINE> unjustifiedStatement proof?\n\n     theorem                                    ::=   "Theorem" parenthesisedLabels? <END_OF_LINE> unjustifiedStatement proof?\n\n\n\n     error                                      ::=   .\n     \n     \n     \n     premiseOrPremises                          ::=   premise | premises\n\n     premise                                    ::=   "Premise" <END_OF_LINE> unjustifiedStatement\n\n     premises                                   ::=   "Premises" <END_OF_LINE> unjustifiedStatement unjustifiedStatement+\n\n     conclusion                                 ::=   "Conclusion" <END_OF_LINE> unjustifiedStatementOrJustifiedStatement\n\n\n\n     proof                                      ::=   "Proof" <END_OF_LINE> proofDerivationOrAbridgedProofDerivation\n\n     proofDerivationOrAbridgedProofDerivation   ::=   proofDerivation | abridgedProofDerivation\n\n     abridgedProofDerivation                    ::=   unjustifiedStatementOrJustifiedStatement\n\n     proofDerivation                            ::=   derivation therefore\n\n     derivation                                 ::=   subDerivation+\n\n     therefore                                  ::=   "Therefore" <END_OF_LINE> unjustifiedStatementOrJustifiedStatement\n\n     subDerivation                              ::=   subLemma | unjustifiedStatementOrJustifiedStatement\n\n\n\n     subLemma                                   ::=   suppose then? hence unjustifiedStatementOrJustifiedStatement? verticalSpace?\n\n     suppose                                    ::=   "Suppose" <END_OF_LINE> unjustifiedStatement+\n\n     then                                       ::=   "Then" <END_OF_LINE> derivation\n\n     hence                                      ::=   "Hence" <END_OF_LINE> unjustifiedStatementOrJustifiedStatement\n\n\n\n     type                                       ::=   typeName\n   \n     types                                      ::=   type(<NO_WHITESPACE>","<NO_WHITESPACE>type)*\n\n     dependentType                              ::=   dependentTypeName<NO_WHITESPACE>"("<NO_WHITESPACE>typeName<NO_WHITESPACE>")"\n   \n     dependentTypes                             ::=   dependentType(<NO_WHITESPACE>","<NO_WHITESPACE>dependentType)*\n   \n     constructor                                ::=   constructorName<NO_WHITESPACE>parenthesisedTypes\n   \n     constructors                               ::=   constructor(<NO_WHITESPACE>","<NO_WHITESPACE>constructor)*\n   \n     variable                                   ::=   variableName(<NO_WHITESPACE>":"type)?\n   \n     variables                                  ::=   variable(<NO_WHITESPACE>","<NO_WHITESPACE>variable)*\n   \n     metaVariable                               ::=   metaVariableName\n\n     metaVariables                              ::=   metaVariable(<NO_WHITESPACE>","<NO_WHITESPACE>metaVariable)*\n   \n     qualifiedMetaVariable                      ::=   qualifiedMetaVariableName\n   \n     qualifiedMetaVariables                     ::=   qualifiedMetaVariable(<NO_WHITESPACE>","<NO_WHITESPACE>qualifiedMetaVariable)*\n   \n   \n   \n     unjustifiedStatementOrJustifiedStatement   ::=   unjustifiedStatement | JustifiedStatement\n\n     unjustifiedStatement                       ::=   statement <END_OF_LINE>\n\n     justifiedStatement                         ::=   statement justification <END_OF_LINE>\n\n     justification                              ::=   byOrFrom reference\n\n     byOrFrom                                   ::=   "by" | "from"\n\n     reference                                  ::=   referenceName<NO_WHITESPACE>parenthesisedTerms?\n\n     referenceName                              ::=   name\n\n\n\n     statement                                  ::=   proofAssertion | typeAssertion | equality | expression\n\n\n\n     proofAssertion                             ::=   metaVariableOrQualifiedMetavariable "::" metaVariableOrQualifiedMetavariable\n\n     typeAssertion                              ::=   expression ":" typeName\n\n     equality                                   ::=   expression "=" expression\n\n     expression                                 ::=   term | metaVariableOrQualifiedMetavariable\n\n\n\n     metaVariableOrQualifiedMetavariable        ::=   metaVariable | qualifiedMetaVariable\n     \n     \n\n     terms                                      ::=   term(<NO_WHITESPACE>","<NO_WHITESPACE>term)*\n     \n     term                                       ::=   compoundTerm | variableName\n\n     compoundTerm                               ::=   constructorName<NO_WHITESPACE>parenthesisedTerms?\n\n\n\n     label                                      ::=   labelName<NO_WHITESPACE>parenthesisedTerms?\n     \n          \n     \n     parenthesisedLabels                        ::=   "("<NO_WHITESPACE>labels<NO_WHITESPACE>")"                         \n\n     parenthesisedTerms                         ::=   "("<NO_WHITESPACE>terms<NO_WHITESPACE>")"\n     \n     parenthesisedTypes                         ::=   "("<NO_WHITESPACE>types<NO_WHITESPACE>")"\n\n\n\n     typeName                                   ::=   name\n\n     dependentTypeName                          ::=   name\n\n     constructorName                            ::=   name\n\n     variableName                               ::=   name\n\n     metaVariableName                           ::=   name\n\n     qualifiedMetaVariableName                  ::=   name\n   \n     labelName                                  ::=   name\n\n     name                                       ::=   /\\w+/\n       \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,