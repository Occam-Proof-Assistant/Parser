'use strict';

var grammar = '\n\n    document                                          ::=   header? verticalSpace? body?\n                                              \n                                              \n                                              \n    header                                            ::=   includeDirective+\n    \n    includeDirective                                  ::=   \'include\'<NO_WHITESPACE>\'(\'<NO_WHITESPACE>[string]<NO_WHITESPACE>\')\' <END_OF_LINE>\n                                              \n                                              \n    body                                              ::=   part+  \n        \n    part                                              ::=   rule | axiom | theorem | lemma | verticalSpace | error\n    \n    \n    \n    rule                                              ::=   \'Rule\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof?\n    \n    axiom                                             ::=   \'Axiom\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion\n    \n    theorem                                           ::=   \'Theorem\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof\n        \n    lemma                                             ::=   \'Lemma\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof    \n    \n    \n    \n    parenthesisedLabels                               ::=   \'(\'<NO_WHITESPACE>labels<NO_WHITESPACE>\')\'\n    \n    labels                                            ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                                    ::=   \',\'<NO_WHITESPACE>label\n    \n    \n    \n    premise(s)                                        ::=   premise | premises\n    \n    premise                                           ::=   \'Premise\' <END_OF_LINE> (un)labelledStatement\n    \n    premises                                          ::=   \'Premises\' <END_OF_LINE> (un)labelledStatement (un)labelledStatement+\n    \n    conclusion                                        ::=   \'Conclusion\' <END_OF_LINE> (un)labelledStatement\n    \n    proof                                             ::=   \'Proof\' <END_OF_LINE> subLemmaOr(un)labelledStatementThenVerticalSpace* therefore\n    \n    therefore                                         ::=   \'Therefore\' <END_OF_LINE> (un)labelledStatement\n    \n    \n    \n    subLemmaOr(un)labelledStatementThenVerticalSpace  ::=   subLemmaOr(un)labelledStatement verticalSpace?   \n    \n    subLemmaOr(un)labelledStatement                   ::=   subLemma | (un)labelledStatement\n    \n    subLemma                                          ::=   suppose then? hence\n    \n    \n    \n    suppose                                           ::=   \'Suppose\' <END_OF_LINE> unlabelledStatement+\n    \n    then                                              ::=   \'Then\' <END_OF_LINE> subLemmaOr(un)labelledStatement+\n    \n    hence                                             ::=   \'Hence\' <END_OF_LINE> (un)labelledStatement\n    \n    \n    \n    (un)labelledStatement                             ::=   unlabelledStatement | labelledStatement\n    \n    labelledStatement                                 ::=   statement \'by\' label <END_OF_LINE>  \n    \n    unlabelledStatement                               ::=   statement <END_OF_LINE>  \n    \n    statement                                         ::=   specialOrUnassigned+ \n    \n    specialOrUnassigned                               ::=   [special] | [unassigned]\n    \n    \n    \n    label                                             ::=   [unassigned]\n     \n     \n     \n    verticalSpace                                     ::=   <END_OF_LINE>+\n    \n    \n    \n    error                                             ::=   *\n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSw2eEhBQU47O0FBeUZBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJncmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBncmFtbWFyID0gYFxuXG4gICAgZG9jdW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBoZWFkZXI/IHZlcnRpY2FsU3BhY2U/IGJvZHk/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgaGVhZGVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBpbmNsdWRlRGlyZWN0aXZlK1xuICAgIFxuICAgIGluY2x1ZGVEaXJlY3RpdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ2luY2x1ZGUnPE5PX1dISVRFU1BBQ0U+JygnPE5PX1dISVRFU1BBQ0U+W3N0cmluZ108Tk9fV0hJVEVTUEFDRT4nKScgPEVORF9PRl9MSU5FPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGJvZHkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcGFydCsgIFxuICAgICAgICBcbiAgICBwYXJ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHJ1bGUgfCBheGlvbSB8IHRoZW9yZW0gfCBsZW1tYSB8IHZlcnRpY2FsU3BhY2UgfCBlcnJvclxuICAgIFxuICAgIFxuICAgIFxuICAgIHJ1bGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1J1bGUnIHBhcmVudGhlc2lzZWRMYWJlbHM/IDxFTkRfT0ZfTElORT4gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZj9cbiAgICBcbiAgICBheGlvbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdBeGlvbScgcGFyZW50aGVzaXNlZExhYmVscz8gPEVORF9PRl9MSU5FPiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uXG4gICAgXG4gICAgdGhlb3JlbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnVGhlb3JlbScgcGFyZW50aGVzaXNlZExhYmVscz8gPEVORF9PRl9MSU5FPiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mXG4gICAgICAgIFxuICAgIGxlbW1hICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ0xlbW1hJyBwYXJlbnRoZXNpc2VkTGFiZWxzPyA8RU5EX09GX0xJTkU+IHByZW1pc2Uocyk/IGNvbmNsdXNpb24gcHJvb2YgICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgcGFyZW50aGVzaXNlZExhYmVscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnKCc8Tk9fV0hJVEVTUEFDRT5sYWJlbHM8Tk9fV0hJVEVTUEFDRT4nKSdcbiAgICBcbiAgICBsYWJlbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGxhYmVsPE5PX1dISVRFU1BBQ0U+Y29tbWFUaGVuTGFiZWwqXG4gICAgXG4gICAgY29tbWFUaGVuTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnLCc8Tk9fV0hJVEVTUEFDRT5sYWJlbFxuICAgIFxuICAgIFxuICAgIFxuICAgIHByZW1pc2UocykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJlbWlzZSB8IHByZW1pc2VzXG4gICAgXG4gICAgcHJlbWlzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUHJlbWlzZScgPEVORF9PRl9MSU5FPiAodW4pbGFiZWxsZWRTdGF0ZW1lbnRcbiAgICBcbiAgICBwcmVtaXNlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdQcmVtaXNlcycgPEVORF9PRl9MSU5FPiAodW4pbGFiZWxsZWRTdGF0ZW1lbnQgKHVuKWxhYmVsbGVkU3RhdGVtZW50K1xuICAgIFxuICAgIGNvbmNsdXNpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ0NvbmNsdXNpb24nIDxFTkRfT0ZfTElORT4gKHVuKWxhYmVsbGVkU3RhdGVtZW50XG4gICAgXG4gICAgcHJvb2YgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUHJvb2YnIDxFTkRfT0ZfTElORT4gc3ViTGVtbWFPcih1bilsYWJlbGxlZFN0YXRlbWVudFRoZW5WZXJ0aWNhbFNwYWNlKiB0aGVyZWZvcmVcbiAgICBcbiAgICB0aGVyZWZvcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdUaGVyZWZvcmUnIDxFTkRfT0ZfTElORT4gKHVuKWxhYmVsbGVkU3RhdGVtZW50XG4gICAgXG4gICAgXG4gICAgXG4gICAgc3ViTGVtbWFPcih1bilsYWJlbGxlZFN0YXRlbWVudFRoZW5WZXJ0aWNhbFNwYWNlICA6Oj0gICBzdWJMZW1tYU9yKHVuKWxhYmVsbGVkU3RhdGVtZW50IHZlcnRpY2FsU3BhY2U/ICAgXG4gICAgXG4gICAgc3ViTGVtbWFPcih1bilsYWJlbGxlZFN0YXRlbWVudCAgICAgICAgICAgICAgICAgICA6Oj0gICBzdWJMZW1tYSB8ICh1bilsYWJlbGxlZFN0YXRlbWVudFxuICAgIFxuICAgIHN1YkxlbW1hICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3VwcG9zZSB0aGVuPyBoZW5jZVxuICAgIFxuICAgIFxuICAgIFxuICAgIHN1cHBvc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1N1cHBvc2UnIDxFTkRfT0ZfTElORT4gdW5sYWJlbGxlZFN0YXRlbWVudCtcbiAgICBcbiAgICB0aGVuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdUaGVuJyA8RU5EX09GX0xJTkU+IHN1YkxlbW1hT3IodW4pbGFiZWxsZWRTdGF0ZW1lbnQrXG4gICAgXG4gICAgaGVuY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnSGVuY2UnIDxFTkRfT0ZfTElORT4gKHVuKWxhYmVsbGVkU3RhdGVtZW50XG4gICAgXG4gICAgXG4gICAgXG4gICAgKHVuKWxhYmVsbGVkU3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB1bmxhYmVsbGVkU3RhdGVtZW50IHwgbGFiZWxsZWRTdGF0ZW1lbnRcbiAgICBcbiAgICBsYWJlbGxlZFN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN0YXRlbWVudCAnYnknIGxhYmVsIDxFTkRfT0ZfTElORT4gIFxuICAgIFxuICAgIHVubGFiZWxsZWRTdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3RhdGVtZW50IDxFTkRfT0ZfTElORT4gIFxuICAgIFxuICAgIHN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3BlY2lhbE9yVW5hc3NpZ25lZCsgXG4gICAgXG4gICAgc3BlY2lhbE9yVW5hc3NpZ25lZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBbc3BlY2lhbF0gfCBbdW5hc3NpZ25lZF1cbiAgICBcbiAgICBcbiAgICBcbiAgICBsYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFt1bmFzc2lnbmVkXVxuICAgICBcbiAgICAgXG4gICAgIFxuICAgIHZlcnRpY2FsU3BhY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgPEVORF9PRl9MSU5FPitcbiAgICBcbiAgICBcbiAgICBcbiAgICBlcnJvciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICpcbiAgICBcbmA7XG5cbm1vZHVsZS5leHBvcnRzID0gZ3JhbW1hcjtcbiJdfQ==