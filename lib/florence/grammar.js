'use strict';

var grammar = '\n\n    subLemma                                  ::=   suppose then? hence\n\n\n\n    document                                  ::=   header body\n     \n    header                                    ::=   directive*     \n     \n    body                                      ::=   part*\n    \n    \n    \n    directive                                 ::=   includeDirective | endsOfLines\n    \n    includeDirective                          ::=   include<NO_WHITESPACE>(<NO_WHITESPACE>string<NO_WHITESPACE>) endsOfLines\n    \n    \n\n    part                                      ::=   rule | axiom | theorem | lemma | variable(s) | constructor(s) | type | error | endsOfLines\n    \n    \n    \n    rule                                      ::=   Rule parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion proof?\n    \n    axiom                                     ::=   Axiom parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion\n    \n    theorem                                   ::=   Theorem parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion proof\n        \n    lemma                                     ::=   Lemma parenthesisedLabels? endsOfLines localVariable(s)? premise(s)? conclusion proof    \n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   Premise endsOfLines (labelled)statement\n    \n    premises                                  ::=   Premises endsOfLines (labelled)statement+\n\n    conclusion                                ::=   Conclusion endsOfLines statement\n\n    proof                                     ::=   Proof endsOfLines subLemmaOr(labelled)statement* therefore\n\n    therefore                                 ::=   Therefore endsOfLines (labelled)statement\n    \n    \n\n    subLemmaOr(labelled)statement             ::=   subLemma | (labelled)statement\n\n    subLemma                                  ::=   suppose then? hence\n    \n    \n\n    suppose                                   ::=   Suppose endsOfLines statement+\n    \n    then                                      ::=   Then endsOfLines subLemmaOr(labelled)statement+\n    \n    hence                                     ::=   Hence endsOfLines (labelled)statement\n    \n    \n    \n    (labelled)statement                       ::=   labelledStatement | statement\n    \n    labelledStatement                         ::=   symbol+ by label endsOfLines\n    \n    statement                                 ::=   symbol+ endsOfLines\n    \n    symbol                                    ::=   unassigned | { | } | = | : | ( | )\n    \n    \n    \n    parenthesisedLabels                       ::=   (<NO_WHITESPACE>labels<NO_WHITESPACE>)\n    \n    labels                                    ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                            ::=   ,<NO_WHITESPACE>label\n\n    label                                     ::=   unassigned\n    \n\n\n    localVariable(s)                          ::=   variable(s)\n\n    variable(s)                               ::=   variable | variables\n\n    variables                                 ::=   Variables endsOfLines? variable(s)Declaration(s) endsOfLines\n    \n    variable                                  ::=   Variable endsOfLines? variableDeclaration endsOfLines\n    \n    variable(s)Declaration(s)                 ::=   variables(s)Declarations | variablesDeclaration\n\n    variables(s)Declarations                  ::=   variable(s)Declaration semiColonThenVariable(s)Declaration+\n       \n    semiColonThenVariable(s)Declaration       ::=   ; variable(s)Declaration\n    \n    variable(s)Declaration                    ::=   variablesDeclaration | variableDeclaration\n    \n    variablesDeclaration                      ::=   variableNames colonThenTypeName?\n\n    variableDeclaration                       ::=   variableName colonThenTypeName?\n\n    variableNames                             ::=   variableName commaThenVariableName+\n\n    commaThenVariableName                     ::=   , variableName    \n    \n    colonThenTypeName                         ::=   : typeName\n\n    variableName                              ::=   unassigned\n\n\n\n    localConstructor(s)                       ::=   constructor(s)\n\n    constructor(s)                            ::=   constructor | constructors\n\n    constructors                              ::=   Constructors endsOfLines? constructor(s)Declaration(s) endsOfLines\n    \n    constructor                               ::=   Constructor endsOfLines? constructorDeclaration endsOfLines\n    \n    constructor(s)Declaration(s)              ::=   constructors(s)Declarations | constructorsDeclaration\n\n    constructors(s)Declarations               ::=   constructor(s)Declaration semiColonThenConstructor(s)Declaration+\n       \n    semiColonThenConstructor(s)Declaration    ::=   ; constructor(s)Declaration\n    \n    constructor(s)Declaration                 ::=   constructorsDeclaration | constructorDeclaration\n    \n    constructorsDeclaration                   ::=   constructorBodies colonThenTypeName?\n\n    constructorDeclaration                    ::=   constructorBody colonThenTypeName?\n\n    constructorBodies                         ::=   constructorBody commaThenConstructorBody+\n\n    commaThenConstructorBody                  ::=   , constructorBody    \n    \n    colonThenTypeName                         ::=   : typeName\n\n    constructorBody                           ::=   constructorName<NO_WHITESPACE>parenthesisedConstructorArguments?\n\n    constructorName                           ::=   unassigned\n    \n    parenthesisedConstructorArguments         ::=   (<NO_WHITESPACE>constructorArguments<NO_WHITESPACE>)\n\n    constructorArguments                      ::=   constructorArgument<NO_WHITESPACE>commaThenConstructorArgument*\n    \n    commaThenConstructorArgument              ::=   ,<NO_WHITESPACE>constructorArgument\n    \n    constructorArgument                       ::=   typeName | .. | unassigned\n\n    \n    \n    object                                    ::=   Object endsOfLines? objectDeclaration endsOfLines\n\n    objectDeclaration                         ::=   objectLiteral : typeName\n    \n    objectLiteral                             ::=   { properties }\n    \n    properties                                ::=   property commaThenProperty*\n    \n    commaThenProperty                         ::=   , property\n    \n    property                                  ::=   propertyName : typeName\n    \n    propertyName                              ::=   unassigned\n    \n    \n    \n    type                                      ::=   Type typeName endsOfLines\n\n    typeName                                  ::=   unassigned\n\n           \n\n    error                                     ::=   string | special | keyword | unassigned \n    \n\n\n    endsOfLines                               ::=   <END_OF_LINE>+\n\n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSwyOU5BQUo7O0FBc0xBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJncmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ3JhbW1hciA9IGBcblxuICAgIHN1YkxlbW1hICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN1cHBvc2UgdGhlbj8gaGVuY2VcblxuXG5cbiAgICBkb2N1bWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBoZWFkZXIgYm9keVxuICAgICBcbiAgICBoZWFkZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBkaXJlY3RpdmUqICAgICBcbiAgICAgXG4gICAgYm9keSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcGFydCpcbiAgICBcbiAgICBcbiAgICBcbiAgICBkaXJlY3RpdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBpbmNsdWRlRGlyZWN0aXZlIHwgZW5kc09mTGluZXNcbiAgICBcbiAgICBpbmNsdWRlRGlyZWN0aXZlICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBpbmNsdWRlPE5PX1dISVRFU1BBQ0U+KDxOT19XSElURVNQQUNFPnN0cmluZzxOT19XSElURVNQQUNFPikgZW5kc09mTGluZXNcbiAgICBcbiAgICBcblxuICAgIHBhcnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHJ1bGUgfCBheGlvbSB8IHRoZW9yZW0gfCBsZW1tYSB8IHZhcmlhYmxlKHMpIHwgY29uc3RydWN0b3IocykgfCB0eXBlIHwgZXJyb3IgfCBlbmRzT2ZMaW5lc1xuICAgIFxuICAgIFxuICAgIFxuICAgIHJ1bGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIFJ1bGUgcGFyZW50aGVzaXNlZExhYmVscz8gZW5kc09mTGluZXMgbG9jYWxWYXJpYWJsZShzKT8gcHJlbWlzZShzKT8gY29uY2x1c2lvbiBwcm9vZj9cbiAgICBcbiAgICBheGlvbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBBeGlvbSBwYXJlbnRoZXNpc2VkTGFiZWxzPyBlbmRzT2ZMaW5lcyBsb2NhbFZhcmlhYmxlKHMpPyBwcmVtaXNlKHMpPyBjb25jbHVzaW9uXG4gICAgXG4gICAgdGhlb3JlbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgVGhlb3JlbSBwYXJlbnRoZXNpc2VkTGFiZWxzPyBlbmRzT2ZMaW5lcyBsb2NhbFZhcmlhYmxlKHMpPyBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mXG4gICAgICAgIFxuICAgIGxlbW1hICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIExlbW1hIHBhcmVudGhlc2lzZWRMYWJlbHM/IGVuZHNPZkxpbmVzIGxvY2FsVmFyaWFibGUocyk/IHByZW1pc2Uocyk/IGNvbmNsdXNpb24gcHJvb2YgICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgcHJlbWlzZShzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJlbWlzZSB8IHByZW1pc2VzXG4gICAgXG4gICAgcHJlbWlzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgUHJlbWlzZSBlbmRzT2ZMaW5lcyAobGFiZWxsZWQpc3RhdGVtZW50XG4gICAgXG4gICAgcHJlbWlzZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgUHJlbWlzZXMgZW5kc09mTGluZXMgKGxhYmVsbGVkKXN0YXRlbWVudCtcblxuICAgIGNvbmNsdXNpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIENvbmNsdXNpb24gZW5kc09mTGluZXMgc3RhdGVtZW50XG5cbiAgICBwcm9vZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBQcm9vZiBlbmRzT2ZMaW5lcyBzdWJMZW1tYU9yKGxhYmVsbGVkKXN0YXRlbWVudCogdGhlcmVmb3JlXG5cbiAgICB0aGVyZWZvcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBUaGVyZWZvcmUgZW5kc09mTGluZXMgKGxhYmVsbGVkKXN0YXRlbWVudFxuICAgIFxuICAgIFxuXG4gICAgc3ViTGVtbWFPcihsYWJlbGxlZClzdGF0ZW1lbnQgICAgICAgICAgICAgOjo9ICAgc3ViTGVtbWEgfCAobGFiZWxsZWQpc3RhdGVtZW50XG5cbiAgICBzdWJMZW1tYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdXBwb3NlIHRoZW4/IGhlbmNlXG4gICAgXG4gICAgXG5cbiAgICBzdXBwb3NlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBTdXBwb3NlIGVuZHNPZkxpbmVzIHN0YXRlbWVudCtcbiAgICBcbiAgICB0aGVuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBUaGVuIGVuZHNPZkxpbmVzIHN1YkxlbW1hT3IobGFiZWxsZWQpc3RhdGVtZW50K1xuICAgIFxuICAgIGhlbmNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIEhlbmNlIGVuZHNPZkxpbmVzIChsYWJlbGxlZClzdGF0ZW1lbnRcbiAgICBcbiAgICBcbiAgICBcbiAgICAobGFiZWxsZWQpc3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBsYWJlbGxlZFN0YXRlbWVudCB8IHN0YXRlbWVudFxuICAgIFxuICAgIGxhYmVsbGVkU3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN5bWJvbCsgYnkgbGFiZWwgZW5kc09mTGluZXNcbiAgICBcbiAgICBzdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzeW1ib2wrIGVuZHNPZkxpbmVzXG4gICAgXG4gICAgc3ltYm9sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdW5hc3NpZ25lZCB8IHsgfCB9IHwgPSB8IDogfCAoIHwgKVxuICAgIFxuICAgIFxuICAgIFxuICAgIHBhcmVudGhlc2lzZWRMYWJlbHMgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICg8Tk9fV0hJVEVTUEFDRT5sYWJlbHM8Tk9fV0hJVEVTUEFDRT4pXG4gICAgXG4gICAgbGFiZWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgbGFiZWw8Tk9fV0hJVEVTUEFDRT5jb21tYVRoZW5MYWJlbCpcbiAgICBcbiAgICBjb21tYVRoZW5MYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAsPE5PX1dISVRFU1BBQ0U+bGFiZWxcblxuICAgIGxhYmVsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVuYXNzaWduZWRcbiAgICBcblxuXG4gICAgbG9jYWxWYXJpYWJsZShzKSAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdmFyaWFibGUocylcblxuICAgIHZhcmlhYmxlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHZhcmlhYmxlIHwgdmFyaWFibGVzXG5cbiAgICB2YXJpYWJsZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBWYXJpYWJsZXMgZW5kc09mTGluZXM/IHZhcmlhYmxlKHMpRGVjbGFyYXRpb24ocykgZW5kc09mTGluZXNcbiAgICBcbiAgICB2YXJpYWJsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBWYXJpYWJsZSBlbmRzT2ZMaW5lcz8gdmFyaWFibGVEZWNsYXJhdGlvbiBlbmRzT2ZMaW5lc1xuICAgIFxuICAgIHZhcmlhYmxlKHMpRGVjbGFyYXRpb24ocykgICAgICAgICAgICAgICAgIDo6PSAgIHZhcmlhYmxlcyhzKURlY2xhcmF0aW9ucyB8IHZhcmlhYmxlc0RlY2xhcmF0aW9uXG5cbiAgICB2YXJpYWJsZXMocylEZWNsYXJhdGlvbnMgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZShzKURlY2xhcmF0aW9uIHNlbWlDb2xvblRoZW5WYXJpYWJsZShzKURlY2xhcmF0aW9uK1xuICAgICAgIFxuICAgIHNlbWlDb2xvblRoZW5WYXJpYWJsZShzKURlY2xhcmF0aW9uICAgICAgIDo6PSAgIDsgdmFyaWFibGUocylEZWNsYXJhdGlvblxuICAgIFxuICAgIHZhcmlhYmxlKHMpRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgICAgIDo6PSAgIHZhcmlhYmxlc0RlY2xhcmF0aW9uIHwgdmFyaWFibGVEZWNsYXJhdGlvblxuICAgIFxuICAgIHZhcmlhYmxlc0RlY2xhcmF0aW9uICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHZhcmlhYmxlTmFtZXMgY29sb25UaGVuVHlwZU5hbWU/XG5cbiAgICB2YXJpYWJsZURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZU5hbWUgY29sb25UaGVuVHlwZU5hbWU/XG5cbiAgICB2YXJpYWJsZU5hbWVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB2YXJpYWJsZU5hbWUgY29tbWFUaGVuVmFyaWFibGVOYW1lK1xuXG4gICAgY29tbWFUaGVuVmFyaWFibGVOYW1lICAgICAgICAgICAgICAgICAgICAgOjo9ICAgLCB2YXJpYWJsZU5hbWUgICAgXG4gICAgXG4gICAgY29sb25UaGVuVHlwZU5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgOiB0eXBlTmFtZVxuXG4gICAgdmFyaWFibGVOYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdW5hc3NpZ25lZFxuXG5cblxuICAgIGxvY2FsQ29uc3RydWN0b3IocykgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yKHMpXG5cbiAgICBjb25zdHJ1Y3RvcihzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvciB8IGNvbnN0cnVjdG9yc1xuXG4gICAgY29uc3RydWN0b3JzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgQ29uc3RydWN0b3JzIGVuZHNPZkxpbmVzPyBjb25zdHJ1Y3RvcihzKURlY2xhcmF0aW9uKHMpIGVuZHNPZkxpbmVzXG4gICAgXG4gICAgY29uc3RydWN0b3IgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgQ29uc3RydWN0b3IgZW5kc09mTGluZXM/IGNvbnN0cnVjdG9yRGVjbGFyYXRpb24gZW5kc09mTGluZXNcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzKURlY2xhcmF0aW9uKHMpICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvcnMocylEZWNsYXJhdGlvbnMgfCBjb25zdHJ1Y3RvcnNEZWNsYXJhdGlvblxuXG4gICAgY29uc3RydWN0b3JzKHMpRGVjbGFyYXRpb25zICAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3IocylEZWNsYXJhdGlvbiBzZW1pQ29sb25UaGVuQ29uc3RydWN0b3IocylEZWNsYXJhdGlvbitcbiAgICAgICBcbiAgICBzZW1pQ29sb25UaGVuQ29uc3RydWN0b3IocylEZWNsYXJhdGlvbiAgICA6Oj0gICA7IGNvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb25cbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzKURlY2xhcmF0aW9uICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvcnNEZWNsYXJhdGlvbiB8IGNvbnN0cnVjdG9yRGVjbGFyYXRpb25cbiAgICBcbiAgICBjb25zdHJ1Y3RvcnNEZWNsYXJhdGlvbiAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3RvckJvZGllcyBjb2xvblRoZW5UeXBlTmFtZT9cblxuICAgIGNvbnN0cnVjdG9yRGVjbGFyYXRpb24gICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yQm9keSBjb2xvblRoZW5UeXBlTmFtZT9cblxuICAgIGNvbnN0cnVjdG9yQm9kaWVzICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnN0cnVjdG9yQm9keSBjb21tYVRoZW5Db25zdHJ1Y3RvckJvZHkrXG5cbiAgICBjb21tYVRoZW5Db25zdHJ1Y3RvckJvZHkgICAgICAgICAgICAgICAgICA6Oj0gICAsIGNvbnN0cnVjdG9yQm9keSAgICBcbiAgICBcbiAgICBjb2xvblRoZW5UeXBlTmFtZSAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICA6IHR5cGVOYW1lXG5cbiAgICBjb25zdHJ1Y3RvckJvZHkgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBjb25zdHJ1Y3Rvck5hbWU8Tk9fV0hJVEVTUEFDRT5wYXJlbnRoZXNpc2VkQ29uc3RydWN0b3JBcmd1bWVudHM/XG5cbiAgICBjb25zdHJ1Y3Rvck5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB1bmFzc2lnbmVkXG4gICAgXG4gICAgcGFyZW50aGVzaXNlZENvbnN0cnVjdG9yQXJndW1lbnRzICAgICAgICAgOjo9ICAgKDxOT19XSElURVNQQUNFPmNvbnN0cnVjdG9yQXJndW1lbnRzPE5PX1dISVRFU1BBQ0U+KVxuXG4gICAgY29uc3RydWN0b3JBcmd1bWVudHMgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29uc3RydWN0b3JBcmd1bWVudDxOT19XSElURVNQQUNFPmNvbW1hVGhlbkNvbnN0cnVjdG9yQXJndW1lbnQqXG4gICAgXG4gICAgY29tbWFUaGVuQ29uc3RydWN0b3JBcmd1bWVudCAgICAgICAgICAgICAgOjo9ICAgLDxOT19XSElURVNQQUNFPmNvbnN0cnVjdG9yQXJndW1lbnRcbiAgICBcbiAgICBjb25zdHJ1Y3RvckFyZ3VtZW50ICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB0eXBlTmFtZSB8IC4uIHwgdW5hc3NpZ25lZFxuXG4gICAgXG4gICAgXG4gICAgb2JqZWN0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgT2JqZWN0IGVuZHNPZkxpbmVzPyBvYmplY3REZWNsYXJhdGlvbiBlbmRzT2ZMaW5lc1xuXG4gICAgb2JqZWN0RGVjbGFyYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgb2JqZWN0TGl0ZXJhbCA6IHR5cGVOYW1lXG4gICAgXG4gICAgb2JqZWN0TGl0ZXJhbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgeyBwcm9wZXJ0aWVzIH1cbiAgICBcbiAgICBwcm9wZXJ0aWVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcm9wZXJ0eSBjb21tYVRoZW5Qcm9wZXJ0eSpcbiAgICBcbiAgICBjb21tYVRoZW5Qcm9wZXJ0eSAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAsIHByb3BlcnR5XG4gICAgXG4gICAgcHJvcGVydHkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgcHJvcGVydHlOYW1lIDogdHlwZU5hbWVcbiAgICBcbiAgICBwcm9wZXJ0eU5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB1bmFzc2lnbmVkXG4gICAgXG4gICAgXG4gICAgXG4gICAgdHlwZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgVHlwZSB0eXBlTmFtZSBlbmRzT2ZMaW5lc1xuXG4gICAgdHlwZU5hbWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdW5hc3NpZ25lZFxuXG4gICAgICAgICAgIFxuXG4gICAgZXJyb3IgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3RyaW5nIHwgc3BlY2lhbCB8IGtleXdvcmQgfCB1bmFzc2lnbmVkIFxuICAgIFxuXG5cbiAgICBlbmRzT2ZMaW5lcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICA8RU5EX09GX0xJTkU+K1xuXG5gO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdyYW1tYXI7XG4iXX0=