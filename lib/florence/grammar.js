'use strict';

var grammar = '\n\n    document                                  ::=   header? verticalSpace? body?\n                                              \n                                              \n                                              \n    header                                    ::=   includeDirective+\n    \n    includeDirective                          ::=   \'include\'<NO_WHITESPACE>\'(\'<NO_WHITESPACE>[string]<NO_WHITESPACE>\')\' <END_OF_LINE>\n                                              \n                                              \n    body                                      ::=   part+  \n        \n    part                                      ::=   rule | axiom | theorem | lemma | verticalSpace | error\n    \n    \n    \n    rule                                      ::=   \'Rule\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof?\n    \n    axiom                                     ::=   \'Axiom\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion\n    \n    theorem                                   ::=   \'Theorem\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof\n        \n    lemma                                     ::=   \'Lemma\' parenthesisedLabels? <END_OF_LINE> premise(s)? conclusion proof    \n    \n    \n    \n    parenthesisedLabels                       ::=   \'(\'<NO_WHITESPACE>labels<NO_WHITESPACE>\')\'\n    \n    labels                                    ::=   label<NO_WHITESPACE>commaThenLabel*\n    \n    commaThenLabel                            ::=   \',\'<NO_WHITESPACE>label\n    \n    \n    \n    premise(s)                                ::=   premise | premises\n    \n    premise                                   ::=   \'Premise\' <END_OF_LINE> (un)labelledStatement\n    \n    premises                                  ::=   \'Premises\' <END_OF_LINE> (un)labelledStatement (un)labelledStatement+\n    \n    conclusion                                ::=   \'Conclusion\' <END_OF_LINE> (un)labelledStatement\n    \n    proof                                     ::=   \'Proof\' <END_OF_LINE> subLemmaOr(un)labelledStatement* therefore\n    \n    therefore                                 ::=   \'Therefore\' <END_OF_LINE> (un)labelledStatement\n    \n    \n    \n    subLemmaOr(un)labelledStatement           ::=   subLemma | (un)labelledStatement\n    \n    subLemma                                  ::=   suppose then? hence verticalSpace?\n    \n    \n    \n    suppose                                   ::=   \'Suppose\' <END_OF_LINE> unlabelledStatement+\n    \n    then                                      ::=   \'Then\' <END_OF_LINE> subLemmaOr(un)labelledStatement+\n    \n    hence                                     ::=   \'Hence\' <END_OF_LINE> (un)labelledStatement\n    \n    \n    \n    (un)labelledStatement                     ::=   unlabelledStatement | labelledStatement\n    \n    labelledStatement                         ::=   statement \'by\' label <END_OF_LINE>  \n    \n    unlabelledStatement                       ::=   statement <END_OF_LINE>  \n    \n    statement                                 ::=   specialOrUnassigned+ \n    \n    specialOrUnassigned                       ::=   [special] | [unassigned]\n    \n    \n    \n    label                                     ::=   [unassigned]\n     \n     \n     \n    verticalSpace                             ::=   <END_OF_LINE>+\n    \n    \n    \n    error                                     ::=   *\n    \n';

module.exports = grammar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9ncmFtbWFyLmpzIl0sIm5hbWVzIjpbImdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSw4NkdBQUo7O0FBdUZBQyxPQUFPQyxPQUFQLEdBQWlCRixPQUFqQiIsImZpbGUiOiJncmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ3JhbW1hciA9IGBcblxuICAgIGRvY3VtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGhlYWRlcj8gdmVydGljYWxTcGFjZT8gYm9keT9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBoZWFkZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBpbmNsdWRlRGlyZWN0aXZlK1xuICAgIFxuICAgIGluY2x1ZGVEaXJlY3RpdmUgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdpbmNsdWRlJzxOT19XSElURVNQQUNFPicoJzxOT19XSElURVNQQUNFPltzdHJpbmddPE5PX1dISVRFU1BBQ0U+JyknIDxFTkRfT0ZfTElORT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBib2R5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwYXJ0KyAgXG4gICAgICAgIFxuICAgIHBhcnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHJ1bGUgfCBheGlvbSB8IHRoZW9yZW0gfCBsZW1tYSB8IHZlcnRpY2FsU3BhY2UgfCBlcnJvclxuICAgIFxuICAgIFxuICAgIFxuICAgIHJ1bGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdSdWxlJyBwYXJlbnRoZXNpc2VkTGFiZWxzPyA8RU5EX09GX0xJTkU+IHByZW1pc2Uocyk/IGNvbmNsdXNpb24gcHJvb2Y/XG4gICAgXG4gICAgYXhpb20gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ0F4aW9tJyBwYXJlbnRoZXNpc2VkTGFiZWxzPyA8RU5EX09GX0xJTkU+IHByZW1pc2Uocyk/IGNvbmNsdXNpb25cbiAgICBcbiAgICB0aGVvcmVtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnVGhlb3JlbScgcGFyZW50aGVzaXNlZExhYmVscz8gPEVORF9PRl9MSU5FPiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mXG4gICAgICAgIFxuICAgIGxlbW1hICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdMZW1tYScgcGFyZW50aGVzaXNlZExhYmVscz8gPEVORF9PRl9MSU5FPiBwcmVtaXNlKHMpPyBjb25jbHVzaW9uIHByb29mICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHBhcmVudGhlc2lzZWRMYWJlbHMgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICcoJzxOT19XSElURVNQQUNFPmxhYmVsczxOT19XSElURVNQQUNFPicpJ1xuICAgIFxuICAgIGxhYmVscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGxhYmVsPE5PX1dISVRFU1BBQ0U+Y29tbWFUaGVuTGFiZWwqXG4gICAgXG4gICAgY29tbWFUaGVuTGFiZWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJywnPE5PX1dISVRFU1BBQ0U+bGFiZWxcbiAgICBcbiAgICBcbiAgICBcbiAgICBwcmVtaXNlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcmVtaXNlIHwgcHJlbWlzZXNcbiAgICBcbiAgICBwcmVtaXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUHJlbWlzZScgPEVORF9PRl9MSU5FPiAodW4pbGFiZWxsZWRTdGF0ZW1lbnRcbiAgICBcbiAgICBwcmVtaXNlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUHJlbWlzZXMnIDxFTkRfT0ZfTElORT4gKHVuKWxhYmVsbGVkU3RhdGVtZW50ICh1bilsYWJlbGxlZFN0YXRlbWVudCtcbiAgICBcbiAgICBjb25jbHVzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnQ29uY2x1c2lvbicgPEVORF9PRl9MSU5FPiAodW4pbGFiZWxsZWRTdGF0ZW1lbnRcbiAgICBcbiAgICBwcm9vZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnUHJvb2YnIDxFTkRfT0ZfTElORT4gc3ViTGVtbWFPcih1bilsYWJlbGxlZFN0YXRlbWVudCogdGhlcmVmb3JlXG4gICAgXG4gICAgdGhlcmVmb3JlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ1RoZXJlZm9yZScgPEVORF9PRl9MSU5FPiAodW4pbGFiZWxsZWRTdGF0ZW1lbnRcbiAgICBcbiAgICBcbiAgICBcbiAgICBzdWJMZW1tYU9yKHVuKWxhYmVsbGVkU3RhdGVtZW50ICAgICAgICAgICA6Oj0gICBzdWJMZW1tYSB8ICh1bilsYWJlbGxlZFN0YXRlbWVudFxuICAgIFxuICAgIHN1YkxlbW1hICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN1cHBvc2UgdGhlbj8gaGVuY2UgdmVydGljYWxTcGFjZT9cbiAgICBcbiAgICBcbiAgICBcbiAgICBzdXBwb3NlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICAnU3VwcG9zZScgPEVORF9PRl9MSU5FPiB1bmxhYmVsbGVkU3RhdGVtZW50K1xuICAgIFxuICAgIHRoZW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICdUaGVuJyA8RU5EX09GX0xJTkU+IHN1YkxlbW1hT3IodW4pbGFiZWxsZWRTdGF0ZW1lbnQrXG4gICAgXG4gICAgaGVuY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgJ0hlbmNlJyA8RU5EX09GX0xJTkU+ICh1bilsYWJlbGxlZFN0YXRlbWVudFxuICAgIFxuICAgIFxuICAgIFxuICAgICh1bilsYWJlbGxlZFN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHVubGFiZWxsZWRTdGF0ZW1lbnQgfCBsYWJlbGxlZFN0YXRlbWVudFxuICAgIFxuICAgIGxhYmVsbGVkU3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN0YXRlbWVudCAnYnknIGxhYmVsIDxFTkRfT0ZfTElORT4gIFxuICAgIFxuICAgIHVubGFiZWxsZWRTdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHN0YXRlbWVudCA8RU5EX09GX0xJTkU+ICBcbiAgICBcbiAgICBzdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzcGVjaWFsT3JVbmFzc2lnbmVkKyBcbiAgICBcbiAgICBzcGVjaWFsT3JVbmFzc2lnbmVkICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBbc3BlY2lhbF0gfCBbdW5hc3NpZ25lZF1cbiAgICBcbiAgICBcbiAgICBcbiAgICBsYWJlbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBbdW5hc3NpZ25lZF1cbiAgICAgXG4gICAgIFxuICAgICBcbiAgICB2ZXJ0aWNhbFNwYWNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICA8RU5EX09GX0xJTkU+K1xuICAgIFxuICAgIFxuICAgIFxuICAgIGVycm9yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgICpcbiAgICBcbmA7XG5cbm1vZHVsZS5leHBvcnRzID0gZ3JhbW1hcjtcbiJdfQ==