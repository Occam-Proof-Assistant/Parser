'use strict';

var lexers = require('occam-lexers'),
    necessary = require('necessary');

var BNFParser = require('../../../bnf/parser');

var BNFLexer = lexers.BNFLexer,
    array = necessary.array,
    first = array.first;


var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing();

var bnf = '\n\n          qualification ::= ( "by" | "from" ) reference? ;\n          \n      ',
    lines = bnfLexer.linesFromBNF(bnf),
    rulesNode = bnfParser.rulesNodeFromLines(lines),
    rules = BNFParser.generateRules(rulesNode),
    firstRule = first(rules),
    qualificationRule = firstRule; ///

module.exports = qualificationRule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2VzNi9mbG9yZW5jZS9jdXN0b21HcmFtbWFyL3J1bGUvcXVhbGlmaWNhdGlvbi5qcyJdLCJuYW1lcyI6WyJsZXhlcnMiLCJyZXF1aXJlIiwibmVjZXNzYXJ5IiwiQk5GUGFyc2VyIiwiQk5GTGV4ZXIiLCJhcnJheSIsImZpcnN0IiwiYm5mTGV4ZXIiLCJmcm9tTm90aGluZyIsImJuZlBhcnNlciIsImJuZiIsImxpbmVzIiwibGluZXNGcm9tQk5GIiwicnVsZXNOb2RlIiwicnVsZXNOb2RlRnJvbUxpbmVzIiwicnVsZXMiLCJnZW5lcmF0ZVJ1bGVzIiwiZmlyc3RSdWxlIiwicXVhbGlmaWNhdGlvblJ1bGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjtBQUFBLElBQ01DLFlBQVlELFFBQVEsV0FBUixDQURsQjs7QUFHQSxJQUFNRSxZQUFZRixRQUFRLHFCQUFSLENBQWxCOztBQUVNLElBQUVHLFFBQUYsR0FBZUosTUFBZixDQUFFSSxRQUFGO0FBQUEsSUFDRUMsS0FERixHQUNZSCxTQURaLENBQ0VHLEtBREY7QUFBQSxJQUVFQyxLQUZGLEdBRVlELEtBRlosQ0FFRUMsS0FGRjs7O0FBSU4sSUFBTUMsV0FBV0gsU0FBU0ksV0FBVCxFQUFqQjtBQUFBLElBQ01DLFlBQVlOLFVBQVVLLFdBQVYsRUFEbEI7O0FBR0EsSUFBTUUsMEZBQU47QUFBQSxJQUtNQyxRQUFRSixTQUFTSyxZQUFULENBQXNCRixHQUF0QixDQUxkO0FBQUEsSUFNTUcsWUFBWUosVUFBVUssa0JBQVYsQ0FBNkJILEtBQTdCLENBTmxCO0FBQUEsSUFPTUksUUFBUVosVUFBVWEsYUFBVixDQUF3QkgsU0FBeEIsQ0FQZDtBQUFBLElBUU1JLFlBQVlYLE1BQU1TLEtBQU4sQ0FSbEI7QUFBQSxJQVNNRyxvQkFBb0JELFNBVDFCLEMsQ0FTc0M7O0FBRXRDRSxPQUFPQyxPQUFQLEdBQWlCRixpQkFBakIiLCJmaWxlIjoicXVhbGlmaWNhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyksXG4gICAgICBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgQk5GUGFyc2VyID0gcmVxdWlyZSgnLi4vLi4vLi4vYm5mL3BhcnNlcicpO1xuXG5jb25zdCB7IEJORkxleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IGFycmF5IH0gPSBuZWNlc3NhcnksXG4gICAgICB7IGZpcnN0IH0gPSBhcnJheTtcblxuY29uc3QgYm5mTGV4ZXIgPSBCTkZMZXhlci5mcm9tTm90aGluZygpLFxuICAgICAgYm5mUGFyc2VyID0gQk5GUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG5cbmNvbnN0IGJuZiA9IGBcblxuICAgICAgICAgIHF1YWxpZmljYXRpb24gOjo9ICggXCJieVwiIHwgXCJmcm9tXCIgKSByZWZlcmVuY2U/IDtcbiAgICAgICAgICBcbiAgICAgIGAsXG4gICAgICBsaW5lcyA9IGJuZkxleGVyLmxpbmVzRnJvbUJORihibmYpLFxuICAgICAgcnVsZXNOb2RlID0gYm5mUGFyc2VyLnJ1bGVzTm9kZUZyb21MaW5lcyhsaW5lcyksXG4gICAgICBydWxlcyA9IEJORlBhcnNlci5nZW5lcmF0ZVJ1bGVzKHJ1bGVzTm9kZSksXG4gICAgICBmaXJzdFJ1bGUgPSBmaXJzdChydWxlcyksXG4gICAgICBxdWFsaWZpY2F0aW9uUnVsZSA9IGZpcnN0UnVsZTsgIC8vL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHF1YWxpZmljYXRpb25SdWxlO1xuIl19