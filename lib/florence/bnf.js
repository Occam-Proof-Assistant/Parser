'use strict';

var bnf = '\n\n\n     document                             ::=   ( rule | axiom | lemma | theorem | metalemma | metatheorem | declaration | verticalSpace | error )+ ;\n     \n     \n     \n     rule                                 ::=   "Rule" parenthesisedLabels <END_OF_LINE> ( premise | premises )? conclusion metaproof? ;\n\n     axiom                                ::=   "Axiom" parenthesisedLabels <END_OF_LINE> ( unqualifiedStatement | indicativeConditional ) ; \n\n     lemma                                ::=   "Lemma" parenthesisedLabels <END_OF_LINE> ( unqualifiedStatement | indicativeConditional ) proof? ;\n\n     theorem                              ::=   "Theorem" parenthesisedLabels <END_OF_LINE> ( unqualifiedStatement | indicativeConditional ) proof? ;\n\n     metalemma                            ::=   "Metalemma" parenthesisedLabels <END_OF_LINE> ( unqualifiedMetastatement | metaIndicativeConditional ) metaproof? ;\n\n     metatheorem                          ::=   "Metatheorem" parenthesisedLabels <END_OF_LINE> ( unqualifiedMetastatement | metaIndicativeConditional ) metaproof? ;\n\n     declaration                          ::=   "Types" typesDeclaration <END_OF_LINE>\n\n                                            |   "Contexts" contextsDeclaration <END_OF_LINE>\n\n                                            |   "Variables" variablesDeclaration <END_OF_LINE>\n\n                                            |   "Constructors" constructorsDeclaration <END_OF_LINE>\n\n                                            |   "DependentTypes" dependentTypesDeclaration <END_OF_LINE>\n\n                                            |   "Metavariables" metavariablesDeclaration <END_OF_LINE>\n\n                                            |   "Abbreviations" abbreviationsDeclaration <END_OF_LINE>\n\n                                            |   "Type" typeDeclaration <END_OF_LINE>\n\n                                            |   "Context" contextDeclaration <END_OF_LINE>\n\n                                            |   "Variable" variableDeclaration <END_OF_LINE>\n\n                                            |   "Constructor" constructorDeclaration <END_OF_LINE>\n\n                                            |   "DependentType" dependentTypeDeclaration <END_OF_LINE>\n                                            \n                                            |   "Metavariable" metavariableDeclaration <END_OF_LINE>\n\n                                            |   "Abbreviation" abbreviationDeclaration <END_OF_LINE>\n\n                                            ;\n                                            \n\n\n     verticalSpace                        ::=   <END_OF_LINE>+ ;\n\n\n\n     error                                ::=   . ;\n\n     \n\n     typesDeclaration                     ::=   typeDeclaration ( "," typeDeclaration )+ ;\n\n     contextsDeclaration                  ::=   contextDeclaration ( "," contextDeclaration )+ ;\n\n     variablesDeclaration                 ::=   variableDeclaration ( "," variableDeclaration )+ ;\n   \n     constructorsDeclaration              ::=   constructorDeclaration ( "," constructorDeclaration )+ ;\n   \n     dependentTypesDeclaration            ::=   dependentTypeDeclaration ( "," dependentTypeDeclaration )* ;\n   \n     metavariablesDeclaration             ::=   metavariableDeclaration ( "," metavariableDeclaration )* ;\n   \n     abbreviationsDeclaration             ::=   abbreviationDeclaration ( "," abbreviationDeclaration )* ;\n\n\n\n     typeDeclaration                      ::=   typeName ( ":" typeName )? ;\n   \n     contextDeclaration                   ::=   contextName<NO_WHITESPACE>parenthesisedTypeName? ;\n   \n     variableDeclaration                  ::=   name ":" typeName ;\n   \n     constructorDeclaration               ::=   term ":" typeName ;\n   \n     dependentTypeDeclaration             ::=   typeName<NO_WHITESPACE>parenthesisedTypeName ;\n   \n     metavariableDeclaration              ::=   metavariableName<NO_WHITESPACE>parenthesisedTypeName? ;\n     \n     abbreviationDeclaration              ::=   name "for" name ; \n     \n   \n        \n     premise                              ::=   "Premise" <END_OF_LINE> unqualifiedMetastatement ;\n\n     premises                             ::=   "Premises" <END_OF_LINE> unqualifiedMetastatement unqualifiedMetastatement+ ;\n\n     conclusion                           ::=   "Conclusion" <END_OF_LINE> qualifiedMetastatement ;\n\n     \n     \n     metaproof                            ::=   "Proof" <END_OF_LINE> \n     \n                                                metastatementDefinition*\n     \n                                                metaProofDerivation? \n                                                \n                                                qualifiedMetastatement ;\n\n     metaProofDerivation                  ::=   ( metaSublemma | qualifiedMetastatement )+  \n     \n                                                "Therefore" <END_OF_LINE> ;                                           \n     \n     metaIndicativeConditional            ::=   "Suppose" <END_OF_LINE> unqualifiedMetastatement+ \n     \n                                                "Hence" <END_OF_LINE> qualifiedMetastatement ;\n\n     metaSublemma                         ::=   "Suppose" <END_OF_LINE> \n     \n                                                qualifiedMetastatement+ \n     \n                                                ( \n                                                \n                                                  "Then" <END_OF_LINE> \n                                                  \n                                                  ( metaSublemma | qualifiedMetastatement )+ \n                                                \n                                                )? \n                                                \n                                                "Hence" <END_OF_LINE> qualifiedMetastatement ;\n\n\n\n     proof                                ::=   "Proof" <END_OF_LINE> \n     \n                                                statementDefinition*\n     \n                                                proofDerivation? \n                                                \n                                                qualifiedStatement ;\n\n     proofDerivation                      ::=   ( sublemma | qualifiedStatement )+ \n     \n                                                "Therefore" <END_OF_LINE> ;\n\n     indicativeConditional                ::=   "Suppose" <END_OF_LINE> unqualifiedStatement+ \n     \n                                                "Hence" <END_OF_LINE> qualifiedStatement ;\n\n     sublemma                             ::=   "Suppose" <END_OF_LINE> \n     \n                                                qualifiedStatement+ \n     \n                                                ( \n                                                \n                                                  "Then" <END_OF_LINE> \n                                                  \n                                                  ( sublemma | qualifiedStatement )+ \n                                                \n                                                )? \n                                                \n                                                "Hence" <END_OF_LINE> qualifiedStatement ;\n\n\n\n     metastatementDefinition              ::=   "let" unqualifiedMetastatement ;                                           \n                                                \n     statementDefinition                  ::=   "let" unqualifiedStatement ;                                           \n\n\n\n     unqualifiedMetastatement             ::=   metastatement! <END_OF_LINE> ;\n     \n     qualifiedMetastatement               ::=   metastatement! qualification? <END_OF_LINE> ;\n     \n     unqualifiedStatement                 ::=   statement! <END_OF_LINE> ;\n     \n     qualifiedStatement                   ::=   statement! qualification? <END_OF_LINE> ;\n\n     qualification                        ::=   ( "by" | "from" ) reference ;\n     \n     \n\n     metavariable                         ::=   metavariableName<NO_WHITESPACE>parenthesisedTerm? ;\n\n     reference                            ::=   referenceName<NO_WHITESPACE>parenthesisedTerm? ;\n\n     context                              ::=   contextName<NO_WHITESPACE>parenthesisedTerm? ;\n\n     label                                ::=   labelName<NO_WHITESPACE>parenthesisedTerm? ;\n\n\n\n     parenthesisedTypeNames               ::=   "(" typeNames? ")" ;\n\n     parenthesisedLabels                  ::=   "(" labels ")" ;                    \n\n     parenthesisedTerms                   ::=   "(" terms? ")" ;   \n\n\n\n     parenthesisedTypeName                ::=   "(" typeName ")" ;\n\n     parenthesisedTerm                    ::=   "(" term ")" ;   \n\n         \n     \n     typeNames                            ::=   typeName ( "," typeName )* ;\n\n     labels                               ::=   label ( "," label )* ;\n\n     terms                                ::=   term ( "," term )* ;\n     \n\n\n     typeName                             ::=   [unassigned] ;\n\n     contextName                          ::=   [unassigned] ;\n\n     metavariableName                     ::=   [unassigned] ;\n\n     referenceName                        ::=   [unassigned] ;\n\n     labelName                            ::=   [unassigned] ;\n\n     \n   \n     name                                 ::=   [unassigned] ;\n\n\n\n     nonsense                             ::=   ( [unassigned] | [special] | [custom] )+ ;\n\n     \n';

module.exports = bnf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,