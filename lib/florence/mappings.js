'use strict';

var TransparentNode = require('../common/node/nonTerminal/transparent'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChild'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecond');

var mappings = {

  'name': TransparentNode,
  'part': TransparentNode,
  'statement': TransparentNode,
  'subDerivation': TransparentNode,
  'proofDerivation': TransparentNode,
  'parenthesisedType': TransparentNode,
  'abridgedProofDerivation': TransparentNode,

  'typeName': TransparentNode,
  'labelName': TransparentNode,
  'variableName': TransparentNode,
  'referenceName': TransparentNode,
  'constructorName': TransparentNode,
  'metavariableName': TransparentNode,

  'premise(s)': TransparentNode,
  'type(s)Declaration': TransparentNode,
  '(typed)Variable(s)Declaration': TransparentNode,
  'typedConstructor(s)Declaration': TransparentNode,
  '(qualified)Metavariable(s)Declaration': TransparentNode,

  '(typed)Variable': TransparentNode,
  '(qualified)Metavariable': TransparentNode,
  '(abridged)ProofDerivation': TransparentNode,

  'byOrFrom': TransparentNode,
  'typeOrTerm': TransparentNode,
  'unjustifiedStatementOrUnknown': TransparentNode,
  '(un)justifiedStatementOrUnknown': TransparentNode,
  'specialUnassignedOrMinorKeywords': TransparentNode,

  'commaThenTerm': TransparentThenKeepSecondNode,
  'commaThenType': TransparentThenKeepSecondNode,
  'commaThenLabel': TransparentThenKeepSecondNode,
  'commaThenMetavariable': TransparentThenKeepSecondNode,
  'commaThen(typed)Variable': TransparentThenKeepSecondNode,
  'commaThenTypedConstructor': TransparentThenKeepSecondNode,
  'commaThen(qualified)Metavariable': TransparentThenKeepSecondNode,

  'parenthesisedTermList': TransparentThenKeepSecondNode,
  'parenthesisedTypeList': TransparentThenKeepSecondNode,
  'parenthesisedLabelList': TransparentThenKeepSecondNode,

  'conclusion': DiscardSecondChildNode,
  'typedVariable': DiscardSecondChildNode,
  'typedConstructor': DiscardSecondChildNode

};

module.exports = {}; ///
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJUcmFuc3BhcmVudE5vZGUiLCJyZXF1aXJlIiwiRGlzY2FyZFNlY29uZENoaWxkTm9kZSIsIlRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlIiwibWFwcGluZ3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxrQkFBa0JDLFFBQVEsd0NBQVIsQ0FBeEI7QUFBQSxJQUNNQyx5QkFBeUJELFFBQVEsK0NBQVIsQ0FEL0I7QUFBQSxJQUVNRSxnQ0FBZ0NGLFFBQVEsc0RBQVIsQ0FGdEM7O0FBSUEsSUFBTUcsV0FBVzs7QUFFZixVQUFRSixlQUZPO0FBR2YsVUFBUUEsZUFITztBQUlmLGVBQWFBLGVBSkU7QUFLZixtQkFBaUJBLGVBTEY7QUFNZixxQkFBbUJBLGVBTko7QUFPZix1QkFBcUJBLGVBUE47QUFRZiw2QkFBMkJBLGVBUlo7O0FBVWYsY0FBWUEsZUFWRztBQVdmLGVBQWFBLGVBWEU7QUFZZixrQkFBZ0JBLGVBWkQ7QUFhZixtQkFBaUJBLGVBYkY7QUFjZixxQkFBbUJBLGVBZEo7QUFlZixzQkFBb0JBLGVBZkw7O0FBaUJmLGdCQUFjQSxlQWpCQztBQWtCZix3QkFBc0JBLGVBbEJQO0FBbUJmLG1DQUFpQ0EsZUFuQmxCO0FBb0JmLG9DQUFrQ0EsZUFwQm5CO0FBcUJmLDJDQUF5Q0EsZUFyQjFCOztBQXVCZixxQkFBbUJBLGVBdkJKO0FBd0JmLDZCQUEyQkEsZUF4Qlo7QUF5QmYsK0JBQTZCQSxlQXpCZDs7QUEyQmYsY0FBWUEsZUEzQkc7QUE0QmYsZ0JBQWNBLGVBNUJDO0FBNkJmLG1DQUFpQ0EsZUE3QmxCO0FBOEJmLHFDQUFtQ0EsZUE5QnBCO0FBK0JmLHNDQUFvQ0EsZUEvQnJCOztBQWlDZixtQkFBaUJHLDZCQWpDRjtBQWtDZixtQkFBaUJBLDZCQWxDRjtBQW1DZixvQkFBa0JBLDZCQW5DSDtBQW9DZiwyQkFBeUJBLDZCQXBDVjtBQXFDZiw4QkFBNEJBLDZCQXJDYjtBQXNDZiwrQkFBNkJBLDZCQXRDZDtBQXVDZixzQ0FBb0NBLDZCQXZDckI7O0FBeUNmLDJCQUF5QkEsNkJBekNWO0FBMENmLDJCQUF5QkEsNkJBMUNWO0FBMkNmLDRCQUEwQkEsNkJBM0NYOztBQTZDZixnQkFBY0Qsc0JBN0NDO0FBOENmLG1CQUFpQkEsc0JBOUNGO0FBK0NmLHNCQUFvQkE7O0FBL0NMLENBQWpCOztBQW1EQUcsT0FBT0MsT0FBUCxHQUFpQixFQUFqQixDLENBQXNCIiwiZmlsZSI6Im1hcHBpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBUcmFuc3BhcmVudE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC90cmFuc3BhcmVudCcpLFxuICAgICAgRGlzY2FyZFNlY29uZENoaWxkTm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL2Rpc2NhcmRTZWNvbmRDaGlsZCcpLFxuICAgICAgVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC90cmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kJyk7XG5cbmNvbnN0IG1hcHBpbmdzID0ge1xuXG4gICduYW1lJzogVHJhbnNwYXJlbnROb2RlLFxuICAncGFydCc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3N0YXRlbWVudCc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3N1YkRlcml2YXRpb24nOiBUcmFuc3BhcmVudE5vZGUsXG4gICdwcm9vZkRlcml2YXRpb24nOiBUcmFuc3BhcmVudE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkVHlwZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ2FicmlkZ2VkUHJvb2ZEZXJpdmF0aW9uJzogVHJhbnNwYXJlbnROb2RlLFxuXG4gICd0eXBlTmFtZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ2xhYmVsTmFtZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3ZhcmlhYmxlTmFtZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3JlZmVyZW5jZU5hbWUnOiBUcmFuc3BhcmVudE5vZGUsXG4gICdjb25zdHJ1Y3Rvck5hbWUnOiBUcmFuc3BhcmVudE5vZGUsXG4gICdtZXRhdmFyaWFibGVOYW1lJzogVHJhbnNwYXJlbnROb2RlLFxuXG4gICdwcmVtaXNlKHMpJzogVHJhbnNwYXJlbnROb2RlLFxuICAndHlwZShzKURlY2xhcmF0aW9uJzogVHJhbnNwYXJlbnROb2RlLFxuICAnKHR5cGVkKVZhcmlhYmxlKHMpRGVjbGFyYXRpb24nOiBUcmFuc3BhcmVudE5vZGUsXG4gICd0eXBlZENvbnN0cnVjdG9yKHMpRGVjbGFyYXRpb24nOiBUcmFuc3BhcmVudE5vZGUsXG4gICcocXVhbGlmaWVkKU1ldGF2YXJpYWJsZShzKURlY2xhcmF0aW9uJzogVHJhbnNwYXJlbnROb2RlLFxuXG4gICcodHlwZWQpVmFyaWFibGUnOiBUcmFuc3BhcmVudE5vZGUsXG4gICcocXVhbGlmaWVkKU1ldGF2YXJpYWJsZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJyhhYnJpZGdlZClQcm9vZkRlcml2YXRpb24nOiBUcmFuc3BhcmVudE5vZGUsXG5cbiAgJ2J5T3JGcm9tJzogVHJhbnNwYXJlbnROb2RlLFxuICAndHlwZU9yVGVybSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3VuanVzdGlmaWVkU3RhdGVtZW50T3JVbmtub3duJzogVHJhbnNwYXJlbnROb2RlLFxuICAnKHVuKWp1c3RpZmllZFN0YXRlbWVudE9yVW5rbm93bic6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3NwZWNpYWxVbmFzc2lnbmVkT3JNaW5vcktleXdvcmRzJzogVHJhbnNwYXJlbnROb2RlLFxuXG4gICdjb21tYVRoZW5UZXJtJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdjb21tYVRoZW5UeXBlJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdjb21tYVRoZW5MYWJlbCc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAnY29tbWFUaGVuTWV0YXZhcmlhYmxlJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdjb21tYVRoZW4odHlwZWQpVmFyaWFibGUnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ2NvbW1hVGhlblR5cGVkQ29uc3RydWN0b3InOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ2NvbW1hVGhlbihxdWFsaWZpZWQpTWV0YXZhcmlhYmxlJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG5cbiAgJ3BhcmVudGhlc2lzZWRUZXJtTGlzdCc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAncGFyZW50aGVzaXNlZFR5cGVMaXN0JzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkTGFiZWxMaXN0JzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG5cbiAgJ2NvbmNsdXNpb24nOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAndHlwZWRWYXJpYWJsZSc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICd0eXBlZENvbnN0cnVjdG9yJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHt9OyAgLy8vXG4iXX0=