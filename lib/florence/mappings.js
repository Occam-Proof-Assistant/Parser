'use strict';

var DiscardOddChildNodes = require('../common/node/nonTerminal/discardOddChildNodes'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChildNode'),
    DiscardFifthThenSecondChildNode = require('../common/node/nonTerminal/discardFifthThenSecondChildNode'),
    TransparentThenKeepFirstNode = require('../common/node/nonTerminal/transparentThenKeepFirstNode'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecondNode');

var mappings = {

  'proof': DiscardSecondChildNode,
  'premise': DiscardSecondChildNode,
  'premises': DiscardSecondChildNode,
  'sublemma': DiscardSecondChildNode,
  'therefore': DiscardSecondChildNode,
  'conclusion': DiscardSecondChildNode,
  'metaProof': DiscardSecondChildNode,

  'indicativeConditional': DiscardFifthThenSecondChildNode,

  'typesDeclaration': DiscardOddChildNodes,
  'contextsDeclaration': DiscardOddChildNodes,
  'variablesDeclaration': DiscardOddChildNodes,
  'constructorsDeclaration': DiscardOddChildNodes,
  'abbreviationsDeclaration': DiscardOddChildNodes,
  'dependentTypesDeclaration': DiscardOddChildNodes,
  'metavariablesDeclaration': DiscardOddChildNodes,

  'typeNames': DiscardOddChildNodes,
  'labels': DiscardOddChildNodes,
  'terms': DiscardOddChildNodes,

  'name': TransparentThenKeepFirstNode,

  'parenthesisedTypeNames': TransparentThenKeepSecondNode,
  'parenthesisedLabels': TransparentThenKeepSecondNode,
  'parenthesisedTerms': TransparentThenKeepSecondNode,

  'parenthesisedTypeName': TransparentThenKeepSecondNode,
  'parenthesisedTerm': TransparentThenKeepSecondNode

};

module.exports = mappings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJEaXNjYXJkT2RkQ2hpbGROb2RlcyIsInJlcXVpcmUiLCJEaXNjYXJkU2Vjb25kQ2hpbGROb2RlIiwiRGlzY2FyZEZpZnRoVGhlblNlY29uZENoaWxkTm9kZSIsIlRyYW5zcGFyZW50VGhlbktlZXBGaXJzdE5vZGUiLCJUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSIsIm1hcHBpbmdzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsdUJBQXVCQyxRQUFRLGlEQUFSLENBQTdCO0FBQUEsSUFDTUMseUJBQXlCRCxRQUFRLG1EQUFSLENBRC9CO0FBQUEsSUFFTUUsa0NBQWtDRixRQUFRLDREQUFSLENBRnhDO0FBQUEsSUFHTUcsK0JBQStCSCxRQUFRLHlEQUFSLENBSHJDO0FBQUEsSUFJTUksZ0NBQWdDSixRQUFRLDBEQUFSLENBSnRDOztBQU1BLElBQU1LLFdBQVc7O0FBRWYsV0FBU0osc0JBRk07QUFHZixhQUFXQSxzQkFISTtBQUlmLGNBQVlBLHNCQUpHO0FBS2YsY0FBWUEsc0JBTEc7QUFNZixlQUFhQSxzQkFORTtBQU9mLGdCQUFjQSxzQkFQQztBQVFmLGVBQWFBLHNCQVJFOztBQVVmLDJCQUF5QkMsK0JBVlY7O0FBWWYsc0JBQW9CSCxvQkFaTDtBQWFmLHlCQUF1QkEsb0JBYlI7QUFjZiwwQkFBd0JBLG9CQWRUO0FBZWYsNkJBQTJCQSxvQkFmWjtBQWdCZiw4QkFBNEJBLG9CQWhCYjtBQWlCZiwrQkFBNkJBLG9CQWpCZDtBQWtCZiw4QkFBNEJBLG9CQWxCYjs7QUFvQmYsZUFBYUEsb0JBcEJFO0FBcUJmLFlBQVVBLG9CQXJCSztBQXNCZixXQUFTQSxvQkF0Qk07O0FBd0JmLFVBQVFJLDRCQXhCTzs7QUEwQmYsNEJBQTBCQyw2QkExQlg7QUEyQmYseUJBQXVCQSw2QkEzQlI7QUE0QmYsd0JBQXNCQSw2QkE1QlA7O0FBOEJmLDJCQUF5QkEsNkJBOUJWO0FBK0JmLHVCQUFxQkE7O0FBL0JOLENBQWpCOztBQW1DQUUsT0FBT0MsT0FBUCxHQUFpQkYsUUFBakIiLCJmaWxlIjoibWFwcGluZ3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERpc2NhcmRPZGRDaGlsZE5vZGVzID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvZGlzY2FyZE9kZENoaWxkTm9kZXMnKSxcbiAgICAgIERpc2NhcmRTZWNvbmRDaGlsZE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC9kaXNjYXJkU2Vjb25kQ2hpbGROb2RlJyksXG4gICAgICBEaXNjYXJkRmlmdGhUaGVuU2Vjb25kQ2hpbGROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvZGlzY2FyZEZpZnRoVGhlblNlY29uZENoaWxkTm9kZScpLFxuICAgICAgVHJhbnNwYXJlbnRUaGVuS2VlcEZpcnN0Tm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL3RyYW5zcGFyZW50VGhlbktlZXBGaXJzdE5vZGUnKSxcbiAgICAgIFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvdHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUnKTtcblxuY29uc3QgbWFwcGluZ3MgPSB7XG5cbiAgJ3Byb29mJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3ByZW1pc2UnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAncHJlbWlzZXMnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnc3VibGVtbWEnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAndGhlcmVmb3JlJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ2NvbmNsdXNpb24nOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnbWV0YVByb29mJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcblxuICAnaW5kaWNhdGl2ZUNvbmRpdGlvbmFsJzogRGlzY2FyZEZpZnRoVGhlblNlY29uZENoaWxkTm9kZSxcblxuICAndHlwZXNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnY29udGV4dHNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAndmFyaWFibGVzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2NvbnN0cnVjdG9yc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdhYmJyZXZpYXRpb25zRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2RlcGVuZGVudFR5cGVzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ21ldGF2YXJpYWJsZXNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuXG4gICd0eXBlTmFtZXMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2xhYmVscyc6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAndGVybXMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcblxuICAnbmFtZSc6IFRyYW5zcGFyZW50VGhlbktlZXBGaXJzdE5vZGUsXG4gIFxuICAncGFyZW50aGVzaXNlZFR5cGVOYW1lcyc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAncGFyZW50aGVzaXNlZExhYmVscyc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAncGFyZW50aGVzaXNlZFRlcm1zJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gIFxuICAncGFyZW50aGVzaXNlZFR5cGVOYW1lJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkVGVybSc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwcGluZ3M7XG4iXX0=