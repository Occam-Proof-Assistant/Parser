'use strict';

var TransparentNode = require('../common/node/nonTerminal/transparent'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChild'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecond');

var mappings = {

  'name': TransparentNode,
  'part': TransparentNode,
  'statement': TransparentNode,
  'subDerivation': TransparentNode,
  'proofDerivation': TransparentNode,
  'parenthesisedType': TransparentNode,
  'abridgedProofDerivation': TransparentNode,

  'typeName': TransparentNode,
  'labelName': TransparentNode,
  'variableName': TransparentNode,
  'constructorName': TransparentNode,
  'metavariableName': TransparentNode,

  'premise(s)': TransparentNode,
  'type(s)Declaration': TransparentNode,
  '(typed)Variable(s)Declaration': TransparentNode,
  'typedConstructor(s)Declaration': TransparentNode,
  '(qualified)Metavariable(s)Declaration': TransparentNode,

  '(typed)Variable': TransparentNode,
  '(qualified)Metavariable': TransparentNode,
  '(abridged)ProofDerivation': TransparentNode,

  'byOrFrom': TransparentNode,
  'typeOrTerm': TransparentNode,
  'unjustifiedStatementOrUnknown': TransparentNode,
  '(un)justifiedStatementOrUnknown': TransparentNode,
  'specialUnassignedOrMinorKeywords': TransparentNode,

  'commaThenTerm': TransparentThenKeepSecondNode,
  'commaThenType': TransparentThenKeepSecondNode,
  'commaThenLabel': TransparentThenKeepSecondNode,
  'commaThenMetavariable': TransparentThenKeepSecondNode,
  'commaThen(typed)Variable': TransparentThenKeepSecondNode,
  'commaThenTypedConstructor': TransparentThenKeepSecondNode,
  'commaThen(qualified)Metavariable': TransparentThenKeepSecondNode,

  'parenthesisedTermList': TransparentThenKeepSecondNode,
  'parenthesisedTypeList': TransparentThenKeepSecondNode,
  'parenthesisedLabelList': TransparentThenKeepSecondNode,

  'conclusion': DiscardSecondChildNode,
  'typedVariable': DiscardSecondChildNode,
  'typedConstructor': DiscardSecondChildNode

};

module.exports = mappings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJUcmFuc3BhcmVudE5vZGUiLCJyZXF1aXJlIiwiRGlzY2FyZFNlY29uZENoaWxkTm9kZSIsIlRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlIiwibWFwcGluZ3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxrQkFBa0JDLFFBQVEsd0NBQVIsQ0FBeEI7QUFBQSxJQUNNQyx5QkFBeUJELFFBQVEsK0NBQVIsQ0FEL0I7QUFBQSxJQUVNRSxnQ0FBZ0NGLFFBQVEsc0RBQVIsQ0FGdEM7O0FBSUEsSUFBTUcsV0FBVzs7QUFFZixVQUFRSixlQUZPO0FBR2YsVUFBUUEsZUFITztBQUlmLGVBQWFBLGVBSkU7QUFLZixtQkFBaUJBLGVBTEY7QUFNZixxQkFBbUJBLGVBTko7QUFPZix1QkFBcUJBLGVBUE47QUFRZiw2QkFBMkJBLGVBUlo7O0FBVWYsY0FBWUEsZUFWRztBQVdmLGVBQWFBLGVBWEU7QUFZZixrQkFBZ0JBLGVBWkQ7QUFhZixxQkFBbUJBLGVBYko7QUFjZixzQkFBb0JBLGVBZEw7O0FBZ0JmLGdCQUFjQSxlQWhCQztBQWlCZix3QkFBc0JBLGVBakJQO0FBa0JmLG1DQUFpQ0EsZUFsQmxCO0FBbUJmLG9DQUFrQ0EsZUFuQm5CO0FBb0JmLDJDQUF5Q0EsZUFwQjFCOztBQXNCZixxQkFBbUJBLGVBdEJKO0FBdUJmLDZCQUEyQkEsZUF2Qlo7QUF3QmYsK0JBQTZCQSxlQXhCZDs7QUEwQmYsY0FBWUEsZUExQkc7QUEyQmYsZ0JBQWNBLGVBM0JDO0FBNEJmLG1DQUFpQ0EsZUE1QmxCO0FBNkJmLHFDQUFtQ0EsZUE3QnBCO0FBOEJmLHNDQUFvQ0EsZUE5QnJCOztBQWdDZixtQkFBaUJHLDZCQWhDRjtBQWlDZixtQkFBaUJBLDZCQWpDRjtBQWtDZixvQkFBa0JBLDZCQWxDSDtBQW1DZiwyQkFBeUJBLDZCQW5DVjtBQW9DZiw4QkFBNEJBLDZCQXBDYjtBQXFDZiwrQkFBNkJBLDZCQXJDZDtBQXNDZixzQ0FBb0NBLDZCQXRDckI7O0FBd0NmLDJCQUF5QkEsNkJBeENWO0FBeUNmLDJCQUF5QkEsNkJBekNWO0FBMENmLDRCQUEwQkEsNkJBMUNYOztBQTRDZixnQkFBY0Qsc0JBNUNDO0FBNkNmLG1CQUFpQkEsc0JBN0NGO0FBOENmLHNCQUFvQkE7O0FBOUNMLENBQWpCOztBQWtEQUcsT0FBT0MsT0FBUCxHQUFpQkYsUUFBakIiLCJmaWxlIjoibWFwcGluZ3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFRyYW5zcGFyZW50Tm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL3RyYW5zcGFyZW50JyksXG4gICAgICBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvZGlzY2FyZFNlY29uZENoaWxkJyksXG4gICAgICBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL3RyYW5zcGFyZW50VGhlbktlZXBTZWNvbmQnKTtcblxuY29uc3QgbWFwcGluZ3MgPSB7XG5cbiAgJ25hbWUnOiBUcmFuc3BhcmVudE5vZGUsXG4gICdwYXJ0JzogVHJhbnNwYXJlbnROb2RlLFxuICAnc3RhdGVtZW50JzogVHJhbnNwYXJlbnROb2RlLFxuICAnc3ViRGVyaXZhdGlvbic6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3Byb29mRGVyaXZhdGlvbic6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3BhcmVudGhlc2lzZWRUeXBlJzogVHJhbnNwYXJlbnROb2RlLFxuICAnYWJyaWRnZWRQcm9vZkRlcml2YXRpb24nOiBUcmFuc3BhcmVudE5vZGUsXG5cbiAgJ3R5cGVOYW1lJzogVHJhbnNwYXJlbnROb2RlLFxuICAnbGFiZWxOYW1lJzogVHJhbnNwYXJlbnROb2RlLFxuICAndmFyaWFibGVOYW1lJzogVHJhbnNwYXJlbnROb2RlLFxuICAnY29uc3RydWN0b3JOYW1lJzogVHJhbnNwYXJlbnROb2RlLFxuICAnbWV0YXZhcmlhYmxlTmFtZSc6IFRyYW5zcGFyZW50Tm9kZSxcblxuICAncHJlbWlzZShzKSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3R5cGUocylEZWNsYXJhdGlvbic6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJyh0eXBlZClWYXJpYWJsZShzKURlY2xhcmF0aW9uJzogVHJhbnNwYXJlbnROb2RlLFxuICAndHlwZWRDb25zdHJ1Y3RvcihzKURlY2xhcmF0aW9uJzogVHJhbnNwYXJlbnROb2RlLFxuICAnKHF1YWxpZmllZClNZXRhdmFyaWFibGUocylEZWNsYXJhdGlvbic6IFRyYW5zcGFyZW50Tm9kZSxcblxuICAnKHR5cGVkKVZhcmlhYmxlJzogVHJhbnNwYXJlbnROb2RlLFxuICAnKHF1YWxpZmllZClNZXRhdmFyaWFibGUnOiBUcmFuc3BhcmVudE5vZGUsXG4gICcoYWJyaWRnZWQpUHJvb2ZEZXJpdmF0aW9uJzogVHJhbnNwYXJlbnROb2RlLFxuXG4gICdieU9yRnJvbSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3R5cGVPclRlcm0nOiBUcmFuc3BhcmVudE5vZGUsXG4gICd1bmp1c3RpZmllZFN0YXRlbWVudE9yVW5rbm93bic6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJyh1bilqdXN0aWZpZWRTdGF0ZW1lbnRPclVua25vd24nOiBUcmFuc3BhcmVudE5vZGUsXG4gICdzcGVjaWFsVW5hc3NpZ25lZE9yTWlub3JLZXl3b3Jkcyc6IFRyYW5zcGFyZW50Tm9kZSxcblxuICAnY29tbWFUaGVuVGVybSc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAnY29tbWFUaGVuVHlwZSc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAnY29tbWFUaGVuTGFiZWwnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ2NvbW1hVGhlbk1ldGF2YXJpYWJsZSc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAnY29tbWFUaGVuKHR5cGVkKVZhcmlhYmxlJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdjb21tYVRoZW5UeXBlZENvbnN0cnVjdG9yJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdjb21tYVRoZW4ocXVhbGlmaWVkKU1ldGF2YXJpYWJsZSc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuXG4gICdwYXJlbnRoZXNpc2VkVGVybUxpc3QnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ3BhcmVudGhlc2lzZWRUeXBlTGlzdCc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAncGFyZW50aGVzaXNlZExhYmVsTGlzdCc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuXG4gICdjb25jbHVzaW9uJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3R5cGVkVmFyaWFibGUnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAndHlwZWRDb25zdHJ1Y3Rvcic6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGVcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtYXBwaW5ncztcbiJdfQ==