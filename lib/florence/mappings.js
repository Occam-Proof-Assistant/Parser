'use strict';

var ErrorNode = require('../common/node/terminal/error'),
    TransparentNode = require('../common/node/nonTerminal/transparentNode'),
    DiscardOddChildNodes = require('../common/node/nonTerminal/discardOddChildNodes'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChildNode'),
    DiscardFifthThenSecondChildNode = require('../common/node/nonTerminal/discardFifthThenSecondChildNode'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecondNode');

var mappings = {

  'unjustifiedOrJustifiedMetastatement': TransparentNode,
  'unjustifiedOrJustifiedStatement': TransparentNode,

  'proof': DiscardSecondChildNode,
  'premise': DiscardSecondChildNode,
  'premises': DiscardSecondChildNode,
  'sublemma': DiscardSecondChildNode,
  'therefore': DiscardSecondChildNode,
  'conclusion': DiscardSecondChildNode,
  'metaProof': DiscardSecondChildNode,
  'justifiedStatement': DiscardSecondChildNode,
  'justifiedMetastatement': DiscardSecondChildNode,

  'indicativeConditional': DiscardFifthThenSecondChildNode,

  'typesDeclaration': DiscardOddChildNodes,
  'contextsDeclaration': DiscardOddChildNodes,
  'variablesDeclaration': DiscardOddChildNodes,
  'constructorsDeclaration': DiscardOddChildNodes,
  'abbreviationsDeclaration': DiscardOddChildNodes,
  'dependentTypesDeclaration': DiscardOddChildNodes,
  'metavariablesDeclaration': DiscardOddChildNodes,

  'typeNames': DiscardOddChildNodes,
  'labels': DiscardOddChildNodes,
  'terms': DiscardOddChildNodes,

  'parenthesisedTypeNames': TransparentThenKeepSecondNode,
  'parenthesisedLabels': TransparentThenKeepSecondNode,
  'parenthesisedTerms': TransparentThenKeepSecondNode,

  'parenthesisedTypeName': TransparentThenKeepSecondNode,
  'parenthesisedTerm': TransparentThenKeepSecondNode,

  'error': ErrorNode

};

module.exports = mappings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJFcnJvck5vZGUiLCJyZXF1aXJlIiwiVHJhbnNwYXJlbnROb2RlIiwiRGlzY2FyZE9kZENoaWxkTm9kZXMiLCJEaXNjYXJkU2Vjb25kQ2hpbGROb2RlIiwiRGlzY2FyZEZpZnRoVGhlblNlY29uZENoaWxkTm9kZSIsIlRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlIiwibWFwcGluZ3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLCtCQUFSLENBQWxCO0FBQUEsSUFDTUMsa0JBQWtCRCxRQUFRLDRDQUFSLENBRHhCO0FBQUEsSUFFTUUsdUJBQXVCRixRQUFRLGlEQUFSLENBRjdCO0FBQUEsSUFHTUcseUJBQXlCSCxRQUFRLG1EQUFSLENBSC9CO0FBQUEsSUFJTUksa0NBQWtDSixRQUFRLDREQUFSLENBSnhDO0FBQUEsSUFLTUssZ0NBQWdDTCxRQUFRLDBEQUFSLENBTHRDOztBQU9BLElBQU1NLFdBQVc7O0FBRWYseUNBQXVDTCxlQUZ4QjtBQUdmLHFDQUFtQ0EsZUFIcEI7O0FBS2YsV0FBU0Usc0JBTE07QUFNZixhQUFXQSxzQkFOSTtBQU9mLGNBQVlBLHNCQVBHO0FBUWYsY0FBWUEsc0JBUkc7QUFTZixlQUFhQSxzQkFURTtBQVVmLGdCQUFjQSxzQkFWQztBQVdmLGVBQWFBLHNCQVhFO0FBWWYsd0JBQXNCQSxzQkFaUDtBQWFmLDRCQUEwQkEsc0JBYlg7O0FBZWYsMkJBQXlCQywrQkFmVjs7QUFpQmYsc0JBQW9CRixvQkFqQkw7QUFrQmYseUJBQXVCQSxvQkFsQlI7QUFtQmYsMEJBQXdCQSxvQkFuQlQ7QUFvQmYsNkJBQTJCQSxvQkFwQlo7QUFxQmYsOEJBQTRCQSxvQkFyQmI7QUFzQmYsK0JBQTZCQSxvQkF0QmQ7QUF1QmYsOEJBQTRCQSxvQkF2QmI7O0FBeUJmLGVBQWFBLG9CQXpCRTtBQTBCZixZQUFVQSxvQkExQks7QUEyQmYsV0FBU0Esb0JBM0JNOztBQTZCZiw0QkFBMEJHLDZCQTdCWDtBQThCZix5QkFBdUJBLDZCQTlCUjtBQStCZix3QkFBc0JBLDZCQS9CUDs7QUFpQ2YsMkJBQXlCQSw2QkFqQ1Y7QUFrQ2YsdUJBQXFCQSw2QkFsQ047O0FBb0NmLFdBQVNOOztBQXBDTSxDQUFqQjs7QUF3Q0FRLE9BQU9DLE9BQVAsR0FBaUJGLFFBQWpCIiwiZmlsZSI6Im1hcHBpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFcnJvck5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS90ZXJtaW5hbC9lcnJvcicpLFxuICAgICAgVHJhbnNwYXJlbnROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvdHJhbnNwYXJlbnROb2RlJyksXG4gICAgICBEaXNjYXJkT2RkQ2hpbGROb2RlcyA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL2Rpc2NhcmRPZGRDaGlsZE5vZGVzJyksXG4gICAgICBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvZGlzY2FyZFNlY29uZENoaWxkTm9kZScpLFxuICAgICAgRGlzY2FyZEZpZnRoVGhlblNlY29uZENoaWxkTm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL2Rpc2NhcmRGaWZ0aFRoZW5TZWNvbmRDaGlsZE5vZGUnKSxcbiAgICAgIFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvdHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUnKTtcblxuY29uc3QgbWFwcGluZ3MgPSB7XG5cbiAgJ3VuanVzdGlmaWVkT3JKdXN0aWZpZWRNZXRhc3RhdGVtZW50JzogVHJhbnNwYXJlbnROb2RlLFxuICAndW5qdXN0aWZpZWRPckp1c3RpZmllZFN0YXRlbWVudCc6IFRyYW5zcGFyZW50Tm9kZSxcblxuICAncHJvb2YnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAncHJlbWlzZSc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdwcmVtaXNlcyc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdzdWJsZW1tYSc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICd0aGVyZWZvcmUnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnY29uY2x1c2lvbic6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdtZXRhUHJvb2YnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnanVzdGlmaWVkU3RhdGVtZW50JzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ2p1c3RpZmllZE1ldGFzdGF0ZW1lbnQnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuXG4gICdpbmRpY2F0aXZlQ29uZGl0aW9uYWwnOiBEaXNjYXJkRmlmdGhUaGVuU2Vjb25kQ2hpbGROb2RlLFxuXG4gICd0eXBlc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdjb250ZXh0c0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICd2YXJpYWJsZXNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnY29uc3RydWN0b3JzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2FiYnJldmlhdGlvbnNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnZGVwZW5kZW50VHlwZXNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnbWV0YXZhcmlhYmxlc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG5cbiAgJ3R5cGVOYW1lcyc6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnbGFiZWxzJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICd0ZXJtcyc6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICBcbiAgJ3BhcmVudGhlc2lzZWRUeXBlTmFtZXMnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ3BhcmVudGhlc2lzZWRMYWJlbHMnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ3BhcmVudGhlc2lzZWRUZXJtcyc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICBcbiAgJ3BhcmVudGhlc2lzZWRUeXBlTmFtZSc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAncGFyZW50aGVzaXNlZFRlcm0nOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcblxuICAnZXJyb3InOiBFcnJvck5vZGVcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtYXBwaW5ncztcbiJdfQ==