'use strict';

var TransparentNode = require('../common/node/nonTerminal/transparentNode'),
    DiscardOddChildNodes = require('../common/node/nonTerminal/discardOddChildNodes'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChildNode'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecondNode');

var mappings = {

  'unjustifiedOrJustifiedMetastatement': TransparentNode,
  'unjustifiedOrJustifiedStatement': TransparentNode,

  'part': TransparentNode,

  'name': TransparentNode,

  'proof': DiscardSecondChildNode,
  'premise': DiscardSecondChildNode,
  'premises': DiscardSecondChildNode,
  'subproof': DiscardSecondChildNode,
  'therefore': DiscardSecondChildNode,
  'conclusion': DiscardSecondChildNode,

  'includeDirective': DiscardOddChildNodes,

  'typesDefinition': DiscardOddChildNodes,
  'variablesDefinition': DiscardOddChildNodes,
  'constructorsDefinition': DiscardOddChildNodes,
  'abbreviationsDefinition': DiscardOddChildNodes,
  'dependentTypesDefinition': DiscardOddChildNodes,
  'metavariablesDefinition': DiscardOddChildNodes,
  'qualifiedMetavariablesDefinition': DiscardOddChildNodes,

  'typeNames': DiscardOddChildNodes,
  'labels': DiscardOddChildNodes,
  'terms': DiscardOddChildNodes,

  'parenthesisedTypeNames': TransparentThenKeepSecondNode,
  'parenthesisedLabels': TransparentThenKeepSecondNode,
  'parenthesisedTerms': TransparentThenKeepSecondNode

};

module.exports = mappings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJUcmFuc3BhcmVudE5vZGUiLCJyZXF1aXJlIiwiRGlzY2FyZE9kZENoaWxkTm9kZXMiLCJEaXNjYXJkU2Vjb25kQ2hpbGROb2RlIiwiVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUiLCJtYXBwaW5ncyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGtCQUFrQkMsUUFBUSw0Q0FBUixDQUF4QjtBQUFBLElBQ01DLHVCQUF1QkQsUUFBUSxpREFBUixDQUQ3QjtBQUFBLElBRU1FLHlCQUF5QkYsUUFBUSxtREFBUixDQUYvQjtBQUFBLElBR01HLGdDQUFnQ0gsUUFBUSwwREFBUixDQUh0Qzs7QUFLQSxJQUFNSSxXQUFXOztBQUVmLHlDQUF3Q0wsZUFGekI7QUFHZixxQ0FBb0NBLGVBSHJCOztBQUtmLFVBQVFBLGVBTE87O0FBT2YsVUFBUUEsZUFQTzs7QUFTZixXQUFTRyxzQkFUTTtBQVVmLGFBQVdBLHNCQVZJO0FBV2YsY0FBWUEsc0JBWEc7QUFZZixjQUFZQSxzQkFaRztBQWFmLGVBQWFBLHNCQWJFO0FBY2YsZ0JBQWNBLHNCQWRDOztBQWdCZixzQkFBb0JELG9CQWhCTDs7QUFrQmYscUJBQW1CQSxvQkFsQko7QUFtQmYseUJBQXVCQSxvQkFuQlI7QUFvQmYsNEJBQTBCQSxvQkFwQlg7QUFxQmYsNkJBQTJCQSxvQkFyQlo7QUFzQmYsOEJBQTRCQSxvQkF0QmI7QUF1QmYsNkJBQTJCQSxvQkF2Qlo7QUF3QmYsc0NBQW9DQSxvQkF4QnJCOztBQTBCZixlQUFhQSxvQkExQkU7QUEyQmYsWUFBVUEsb0JBM0JLO0FBNEJmLFdBQVNBLG9CQTVCTTs7QUE4QmYsNEJBQTJCRSw2QkE5Qlo7QUErQmYseUJBQXdCQSw2QkEvQlQ7QUFnQ2Ysd0JBQXVCQTs7QUFoQ1IsQ0FBakI7O0FBb0NBRSxPQUFPQyxPQUFQLEdBQWlCRixRQUFqQiIsImZpbGUiOiJtYXBwaW5ncy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgVHJhbnNwYXJlbnROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvdHJhbnNwYXJlbnROb2RlJyksXG4gICAgICBEaXNjYXJkT2RkQ2hpbGROb2RlcyA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL2Rpc2NhcmRPZGRDaGlsZE5vZGVzJyksXG4gICAgICBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvZGlzY2FyZFNlY29uZENoaWxkTm9kZScpLFxuICAgICAgVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC90cmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZScpO1xuXG5jb25zdCBtYXBwaW5ncyA9IHtcblxuICAndW5qdXN0aWZpZWRPckp1c3RpZmllZE1ldGFzdGF0ZW1lbnQnIDogVHJhbnNwYXJlbnROb2RlLFxuICAndW5qdXN0aWZpZWRPckp1c3RpZmllZFN0YXRlbWVudCcgOiBUcmFuc3BhcmVudE5vZGUsXG5cbiAgJ3BhcnQnOiBUcmFuc3BhcmVudE5vZGUsXG4gIFxuICAnbmFtZSc6IFRyYW5zcGFyZW50Tm9kZSxcblxuICAncHJvb2YnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAncHJlbWlzZSc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdwcmVtaXNlcyc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdzdWJwcm9vZic6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICd0aGVyZWZvcmUnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnY29uY2x1c2lvbic6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG5cbiAgJ2luY2x1ZGVEaXJlY3RpdmUnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcblxuICAndHlwZXNEZWZpbml0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICd2YXJpYWJsZXNEZWZpbml0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdjb25zdHJ1Y3RvcnNEZWZpbml0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdhYmJyZXZpYXRpb25zRGVmaW5pdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnZGVwZW5kZW50VHlwZXNEZWZpbml0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdtZXRhdmFyaWFibGVzRGVmaW5pdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAncXVhbGlmaWVkTWV0YXZhcmlhYmxlc0RlZmluaXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcblxuICAndHlwZU5hbWVzJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdsYWJlbHMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ3Rlcm1zJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gIFxuICAncGFyZW50aGVzaXNlZFR5cGVOYW1lcycgOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ3BhcmVudGhlc2lzZWRMYWJlbHMnIDogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkVGVybXMnIDogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGVcbiAgXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcHBpbmdzO1xuIl19