'use strict';

var ErrorNode = require('../common/node/terminal/error'),
    TransparentNode = require('../common/node/nonTerminal/transparentNode'),
    TransparentFirstChildNode = require('../common/node/nonTerminal/transparentFirstChildNode'),
    DiscardOddChildNodes = require('../common/node/nonTerminal/discardOddChildNodes'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChildNode'),
    DiscardFifthThenSecondChildNode = require('../common/node/nonTerminal/discardFifthThenSecondChildNode'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecondNode');

var mappings = {

  'unjustifiedOrJustifiedMetastatement': TransparentNode,
  'unjustifiedOrJustifiedStatement': TransparentNode,

  'typeName': TransparentFirstChildNode,
  'contextName': TransparentFirstChildNode,
  'variableName': TransparentFirstChildNode,
  'constructorName': TransparentFirstChildNode,
  'metavariableName': TransparentFirstChildNode,
  'referenceName': TransparentFirstChildNode,
  'labelName': TransparentFirstChildNode,

  'proof': DiscardSecondChildNode,
  'premise': DiscardSecondChildNode,
  'premises': DiscardSecondChildNode,
  'sublemma': DiscardSecondChildNode,
  'therefore': DiscardSecondChildNode,
  'conclusion': DiscardSecondChildNode,
  'metaProof': DiscardSecondChildNode,
  'justifiedStatement': DiscardSecondChildNode,
  'justifiedMetastatement': DiscardSecondChildNode,

  'indicativeConditional': DiscardFifthThenSecondChildNode,

  'typesDeclaration': DiscardOddChildNodes,
  'contextsDeclaration': DiscardOddChildNodes,
  'variablesDeclaration': DiscardOddChildNodes,
  'constructorsDeclaration': DiscardOddChildNodes,
  'abbreviationsDeclaration': DiscardOddChildNodes,
  'dependentTypesDeclaration': DiscardOddChildNodes,
  'metavariablesDeclaration': DiscardOddChildNodes,

  'typeNames': DiscardOddChildNodes,
  'labels': DiscardOddChildNodes,
  'terms': DiscardOddChildNodes,

  'parenthesisedTypeNames': TransparentThenKeepSecondNode,
  'parenthesisedLabels': TransparentThenKeepSecondNode,
  'parenthesisedTerms': TransparentThenKeepSecondNode,

  'parenthesisedTypeName': TransparentThenKeepSecondNode,
  'parenthesisedTerm': TransparentThenKeepSecondNode,

  'error': ErrorNode

};

module.exports = mappings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJFcnJvck5vZGUiLCJyZXF1aXJlIiwiVHJhbnNwYXJlbnROb2RlIiwiVHJhbnNwYXJlbnRGaXJzdENoaWxkTm9kZSIsIkRpc2NhcmRPZGRDaGlsZE5vZGVzIiwiRGlzY2FyZFNlY29uZENoaWxkTm9kZSIsIkRpc2NhcmRGaWZ0aFRoZW5TZWNvbmRDaGlsZE5vZGUiLCJUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSIsIm1hcHBpbmdzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSwrQkFBUixDQUFsQjtBQUFBLElBQ01DLGtCQUFrQkQsUUFBUSw0Q0FBUixDQUR4QjtBQUFBLElBRU1FLDRCQUE0QkYsUUFBUSxzREFBUixDQUZsQztBQUFBLElBR01HLHVCQUF1QkgsUUFBUSxpREFBUixDQUg3QjtBQUFBLElBSU1JLHlCQUF5QkosUUFBUSxtREFBUixDQUovQjtBQUFBLElBS01LLGtDQUFrQ0wsUUFBUSw0REFBUixDQUx4QztBQUFBLElBTU1NLGdDQUFnQ04sUUFBUSwwREFBUixDQU50Qzs7QUFRQSxJQUFNTyxXQUFXOztBQUVmLHlDQUF1Q04sZUFGeEI7QUFHZixxQ0FBbUNBLGVBSHBCOztBQUtmLGNBQVlDLHlCQUxHO0FBTWYsaUJBQWVBLHlCQU5BO0FBT2Ysa0JBQWdCQSx5QkFQRDtBQVFmLHFCQUFtQkEseUJBUko7QUFTZixzQkFBb0JBLHlCQVRMO0FBVWYsbUJBQWlCQSx5QkFWRjtBQVdmLGVBQWFBLHlCQVhFOztBQWFmLFdBQVNFLHNCQWJNO0FBY2YsYUFBV0Esc0JBZEk7QUFlZixjQUFZQSxzQkFmRztBQWdCZixjQUFZQSxzQkFoQkc7QUFpQmYsZUFBYUEsc0JBakJFO0FBa0JmLGdCQUFjQSxzQkFsQkM7QUFtQmYsZUFBYUEsc0JBbkJFO0FBb0JmLHdCQUFzQkEsc0JBcEJQO0FBcUJmLDRCQUEwQkEsc0JBckJYOztBQXVCZiwyQkFBeUJDLCtCQXZCVjs7QUF5QmYsc0JBQW9CRixvQkF6Qkw7QUEwQmYseUJBQXVCQSxvQkExQlI7QUEyQmYsMEJBQXdCQSxvQkEzQlQ7QUE0QmYsNkJBQTJCQSxvQkE1Qlo7QUE2QmYsOEJBQTRCQSxvQkE3QmI7QUE4QmYsK0JBQTZCQSxvQkE5QmQ7QUErQmYsOEJBQTRCQSxvQkEvQmI7O0FBaUNmLGVBQWFBLG9CQWpDRTtBQWtDZixZQUFVQSxvQkFsQ0s7QUFtQ2YsV0FBU0Esb0JBbkNNOztBQXFDZiw0QkFBMEJHLDZCQXJDWDtBQXNDZix5QkFBdUJBLDZCQXRDUjtBQXVDZix3QkFBc0JBLDZCQXZDUDs7QUF5Q2YsMkJBQXlCQSw2QkF6Q1Y7QUEwQ2YsdUJBQXFCQSw2QkExQ047O0FBNENmLFdBQVNQOztBQTVDTSxDQUFqQjs7QUFnREFTLE9BQU9DLE9BQVAsR0FBaUJGLFFBQWpCIiwiZmlsZSI6Im1hcHBpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFcnJvck5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS90ZXJtaW5hbC9lcnJvcicpLFxuICAgICAgVHJhbnNwYXJlbnROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvdHJhbnNwYXJlbnROb2RlJyksXG4gICAgICBUcmFuc3BhcmVudEZpcnN0Q2hpbGROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvdHJhbnNwYXJlbnRGaXJzdENoaWxkTm9kZScpLFxuICAgICAgRGlzY2FyZE9kZENoaWxkTm9kZXMgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC9kaXNjYXJkT2RkQ2hpbGROb2RlcycpLFxuICAgICAgRGlzY2FyZFNlY29uZENoaWxkTm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL2Rpc2NhcmRTZWNvbmRDaGlsZE5vZGUnKSxcbiAgICAgIERpc2NhcmRGaWZ0aFRoZW5TZWNvbmRDaGlsZE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC9kaXNjYXJkRmlmdGhUaGVuU2Vjb25kQ2hpbGROb2RlJyksXG4gICAgICBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL3RyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlJyk7XG5cbmNvbnN0IG1hcHBpbmdzID0ge1xuXG4gICd1bmp1c3RpZmllZE9ySnVzdGlmaWVkTWV0YXN0YXRlbWVudCc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3VuanVzdGlmaWVkT3JKdXN0aWZpZWRTdGF0ZW1lbnQnOiBUcmFuc3BhcmVudE5vZGUsXG5cbiAgJ3R5cGVOYW1lJzogVHJhbnNwYXJlbnRGaXJzdENoaWxkTm9kZSxcbiAgJ2NvbnRleHROYW1lJzogVHJhbnNwYXJlbnRGaXJzdENoaWxkTm9kZSxcbiAgJ3ZhcmlhYmxlTmFtZSc6IFRyYW5zcGFyZW50Rmlyc3RDaGlsZE5vZGUsXG4gICdjb25zdHJ1Y3Rvck5hbWUnOiBUcmFuc3BhcmVudEZpcnN0Q2hpbGROb2RlLFxuICAnbWV0YXZhcmlhYmxlTmFtZSc6IFRyYW5zcGFyZW50Rmlyc3RDaGlsZE5vZGUsXG4gICdyZWZlcmVuY2VOYW1lJzogVHJhbnNwYXJlbnRGaXJzdENoaWxkTm9kZSxcbiAgJ2xhYmVsTmFtZSc6IFRyYW5zcGFyZW50Rmlyc3RDaGlsZE5vZGUsXG5cbiAgJ3Byb29mJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3ByZW1pc2UnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAncHJlbWlzZXMnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnc3VibGVtbWEnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAndGhlcmVmb3JlJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ2NvbmNsdXNpb24nOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnbWV0YVByb29mJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ2p1c3RpZmllZFN0YXRlbWVudCc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdqdXN0aWZpZWRNZXRhc3RhdGVtZW50JzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcblxuICAnaW5kaWNhdGl2ZUNvbmRpdGlvbmFsJzogRGlzY2FyZEZpZnRoVGhlblNlY29uZENoaWxkTm9kZSxcblxuICAndHlwZXNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnY29udGV4dHNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAndmFyaWFibGVzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2NvbnN0cnVjdG9yc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdhYmJyZXZpYXRpb25zRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2RlcGVuZGVudFR5cGVzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ21ldGF2YXJpYWJsZXNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuXG4gICd0eXBlTmFtZXMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2xhYmVscyc6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAndGVybXMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgXG4gICdwYXJlbnRoZXNpc2VkVHlwZU5hbWVzJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkTGFiZWxzJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkVGVybXMnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgXG4gICdwYXJlbnRoZXNpc2VkVHlwZU5hbWUnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ3BhcmVudGhlc2lzZWRUZXJtJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG5cbiAgJ2Vycm9yJzogRXJyb3JOb2RlXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwcGluZ3M7XG4iXX0=