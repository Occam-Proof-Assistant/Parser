'use strict';

var TransparentNode = require('../common/node/nonTerminal/transparentNode'),
    DiscardOddChildNodes = require('../common/node/nonTerminal/discardOddChildNodes'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChildNode'),
    DiscardFifthThenSecondChildNode = require('../common/node/nonTerminal/discardFifthThenSecondChildNode'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecondNode');

var mappings = {

  'unjustifiedOrJustifiedMetastatement': TransparentNode,
  'unjustifiedOrJustifiedStatement': TransparentNode,

  'proof': DiscardSecondChildNode,
  'premise': DiscardSecondChildNode,
  'premises': DiscardSecondChildNode,
  'sublemma': DiscardSecondChildNode,
  'therefore': DiscardSecondChildNode,
  'conclusion': DiscardSecondChildNode,
  'metaProof': DiscardSecondChildNode,
  'justifiedStatement': DiscardSecondChildNode,
  'justifiedMetastatement': DiscardSecondChildNode,

  'indicativeConditional': DiscardFifthThenSecondChildNode,

  'typesDeclaration': DiscardOddChildNodes,
  'contextsDeclaration': DiscardOddChildNodes,
  'variablesDeclaration': DiscardOddChildNodes,
  'constructorsDeclaration': DiscardOddChildNodes,
  'abbreviationsDeclaration': DiscardOddChildNodes,
  'dependentTypesDeclaration': DiscardOddChildNodes,
  'metavariablesDeclaration': DiscardOddChildNodes,

  'typeNames': DiscardOddChildNodes,
  'labels': DiscardOddChildNodes,
  'terms': DiscardOddChildNodes,

  'parenthesisedTypeNames': TransparentThenKeepSecondNode,
  'parenthesisedLabels': TransparentThenKeepSecondNode,
  'parenthesisedTerms': TransparentThenKeepSecondNode,

  'parenthesisedTypeName': TransparentThenKeepSecondNode,
  'parenthesisedTerm': TransparentThenKeepSecondNode

};

module.exports = mappings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJUcmFuc3BhcmVudE5vZGUiLCJyZXF1aXJlIiwiRGlzY2FyZE9kZENoaWxkTm9kZXMiLCJEaXNjYXJkU2Vjb25kQ2hpbGROb2RlIiwiRGlzY2FyZEZpZnRoVGhlblNlY29uZENoaWxkTm9kZSIsIlRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlIiwibWFwcGluZ3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxrQkFBa0JDLFFBQVEsNENBQVIsQ0FBeEI7QUFBQSxJQUNNQyx1QkFBdUJELFFBQVEsaURBQVIsQ0FEN0I7QUFBQSxJQUVNRSx5QkFBeUJGLFFBQVEsbURBQVIsQ0FGL0I7QUFBQSxJQUdNRyxrQ0FBa0NILFFBQVEsNERBQVIsQ0FIeEM7QUFBQSxJQUlNSSxnQ0FBZ0NKLFFBQVEsMERBQVIsQ0FKdEM7O0FBTUEsSUFBTUssV0FBVzs7QUFFZix5Q0FBdUNOLGVBRnhCO0FBR2YscUNBQW1DQSxlQUhwQjs7QUFLZixXQUFTRyxzQkFMTTtBQU1mLGFBQVdBLHNCQU5JO0FBT2YsY0FBWUEsc0JBUEc7QUFRZixjQUFZQSxzQkFSRztBQVNmLGVBQWFBLHNCQVRFO0FBVWYsZ0JBQWNBLHNCQVZDO0FBV2YsZUFBYUEsc0JBWEU7QUFZZix3QkFBc0JBLHNCQVpQO0FBYWYsNEJBQTBCQSxzQkFiWDs7QUFlZiwyQkFBeUJDLCtCQWZWOztBQWlCZixzQkFBb0JGLG9CQWpCTDtBQWtCZix5QkFBdUJBLG9CQWxCUjtBQW1CZiwwQkFBd0JBLG9CQW5CVDtBQW9CZiw2QkFBMkJBLG9CQXBCWjtBQXFCZiw4QkFBNEJBLG9CQXJCYjtBQXNCZiwrQkFBNkJBLG9CQXRCZDtBQXVCZiw4QkFBNEJBLG9CQXZCYjs7QUF5QmYsZUFBYUEsb0JBekJFO0FBMEJmLFlBQVVBLG9CQTFCSztBQTJCZixXQUFTQSxvQkEzQk07O0FBNkJmLDRCQUEwQkcsNkJBN0JYO0FBOEJmLHlCQUF1QkEsNkJBOUJSO0FBK0JmLHdCQUFzQkEsNkJBL0JQOztBQWlDZiwyQkFBeUJBLDZCQWpDVjtBQWtDZix1QkFBcUJBOztBQWxDTixDQUFqQjs7QUFzQ0FFLE9BQU9DLE9BQVAsR0FBaUJGLFFBQWpCIiwiZmlsZSI6Im1hcHBpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBUcmFuc3BhcmVudE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC90cmFuc3BhcmVudE5vZGUnKSxcbiAgICAgIERpc2NhcmRPZGRDaGlsZE5vZGVzID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvZGlzY2FyZE9kZENoaWxkTm9kZXMnKSxcbiAgICAgIERpc2NhcmRTZWNvbmRDaGlsZE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC9kaXNjYXJkU2Vjb25kQ2hpbGROb2RlJyksXG4gICAgICBEaXNjYXJkRmlmdGhUaGVuU2Vjb25kQ2hpbGROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvZGlzY2FyZEZpZnRoVGhlblNlY29uZENoaWxkTm9kZScpLFxuICAgICAgVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC90cmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZScpO1xuXG5jb25zdCBtYXBwaW5ncyA9IHtcblxuICAndW5qdXN0aWZpZWRPckp1c3RpZmllZE1ldGFzdGF0ZW1lbnQnOiBUcmFuc3BhcmVudE5vZGUsXG4gICd1bmp1c3RpZmllZE9ySnVzdGlmaWVkU3RhdGVtZW50JzogVHJhbnNwYXJlbnROb2RlLFxuXG4gICdwcm9vZic6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdwcmVtaXNlJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3ByZW1pc2VzJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3N1YmxlbW1hJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3RoZXJlZm9yZSc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdjb25jbHVzaW9uJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ21ldGFQcm9vZic6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdqdXN0aWZpZWRTdGF0ZW1lbnQnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnanVzdGlmaWVkTWV0YXN0YXRlbWVudCc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG5cbiAgJ2luZGljYXRpdmVDb25kaXRpb25hbCc6IERpc2NhcmRGaWZ0aFRoZW5TZWNvbmRDaGlsZE5vZGUsXG5cbiAgJ3R5cGVzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2NvbnRleHRzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ3ZhcmlhYmxlc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdjb25zdHJ1Y3RvcnNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnYWJicmV2aWF0aW9uc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdkZXBlbmRlbnRUeXBlc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdtZXRhdmFyaWFibGVzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcblxuICAndHlwZU5hbWVzJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdsYWJlbHMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ3Rlcm1zJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gIFxuICAncGFyZW50aGVzaXNlZFR5cGVOYW1lcyc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAncGFyZW50aGVzaXNlZExhYmVscyc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAncGFyZW50aGVzaXNlZFRlcm1zJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gIFxuICAncGFyZW50aGVzaXNlZFR5cGVOYW1lJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkVGVybSc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwcGluZ3M7XG4iXX0=