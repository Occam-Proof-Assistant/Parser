'use strict';

var TransparentNode = require('../common/node/nonTerminal/transparentNode'),
    DiscardOddChildNodes = require('../common/node/nonTerminal/discardOddChildNodes'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChildNode'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecondNode');

var mappings = {

  'part': TransparentNode,
  'name': TransparentNode,

  'then': DiscardSecondChildNode,
  'hence': DiscardSecondChildNode,
  'proof': DiscardSecondChildNode,
  'suppose': DiscardSecondChildNode,
  'premise': DiscardSecondChildNode,
  'premises': DiscardSecondChildNode,
  'therefore': DiscardSecondChildNode,
  'conclusion': DiscardSecondChildNode,

  'terms': DiscardOddChildNodes,
  'types': DiscardOddChildNodes,
  'labels': DiscardOddChildNodes,
  'variables': DiscardOddChildNodes,
  'constructors': DiscardOddChildNodes,
  'metaVariables': DiscardOddChildNodes,
  'dependentTypes': DiscardOddChildNodes,
  'qualifiedMetaVariables': DiscardOddChildNodes,

  'includeDirective': DiscardOddChildNodes,

  'byOrFrom': TransparentNode,
  'premiseOrPremises': TransparentNode,
  'metaVariableOrQualifiedMetavariable': TransparentNode,
  'unjustifiedStatementOrJustifiedStatement': TransparentNode,
  'proofDerivationOrAbridgedProofDerivation': TransparentNode,

  'parenthesisedLabels': TransparentThenKeepSecondNode,
  'parenthesisedTerms': TransparentThenKeepSecondNode,
  'parenthesisedTypes': TransparentThenKeepSecondNode

};

module.exports = mappings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJUcmFuc3BhcmVudE5vZGUiLCJyZXF1aXJlIiwiRGlzY2FyZE9kZENoaWxkTm9kZXMiLCJEaXNjYXJkU2Vjb25kQ2hpbGROb2RlIiwiVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUiLCJtYXBwaW5ncyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLGtCQUFrQkMsUUFBUSw0Q0FBUixDQUF4QjtBQUFBLElBQ01DLHVCQUF1QkQsUUFBUSxpREFBUixDQUQ3QjtBQUFBLElBRU1FLHlCQUF5QkYsUUFBUSxtREFBUixDQUYvQjtBQUFBLElBR01HLGdDQUFnQ0gsUUFBUSwwREFBUixDQUh0Qzs7QUFLQSxJQUFNSSxXQUFXOztBQUVmLFVBQVFMLGVBRk87QUFHZixVQUFRQSxlQUhPOztBQUtmLFVBQVFHLHNCQUxPO0FBTWYsV0FBU0Esc0JBTk07QUFPZixXQUFTQSxzQkFQTTtBQVFmLGFBQVdBLHNCQVJJO0FBU2YsYUFBV0Esc0JBVEk7QUFVZixjQUFZQSxzQkFWRztBQVdmLGVBQWFBLHNCQVhFO0FBWWYsZ0JBQWNBLHNCQVpDOztBQWNmLFdBQVNELG9CQWRNO0FBZWYsV0FBU0Esb0JBZk07QUFnQmYsWUFBVUEsb0JBaEJLO0FBaUJmLGVBQWFBLG9CQWpCRTtBQWtCZixrQkFBZ0JBLG9CQWxCRDtBQW1CZixtQkFBaUJBLG9CQW5CRjtBQW9CZixvQkFBa0JBLG9CQXBCSDtBQXFCZiw0QkFBMEJBLG9CQXJCWDs7QUF1QmYsc0JBQW9CQSxvQkF2Qkw7O0FBeUJmLGNBQWFGLGVBekJFO0FBMEJmLHVCQUFzQkEsZUExQlA7QUEyQmYseUNBQXdDQSxlQTNCekI7QUE0QmYsOENBQTZDQSxlQTVCOUI7QUE2QmYsOENBQTZDQSxlQTdCOUI7O0FBK0JmLHlCQUF3QkksNkJBL0JUO0FBZ0NmLHdCQUF1QkEsNkJBaENSO0FBaUNmLHdCQUF1QkE7O0FBakNSLENBQWpCOztBQXFDQUUsT0FBT0MsT0FBUCxHQUFpQkYsUUFBakIiLCJmaWxlIjoibWFwcGluZ3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFRyYW5zcGFyZW50Tm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL3RyYW5zcGFyZW50Tm9kZScpLFxuICAgICAgRGlzY2FyZE9kZENoaWxkTm9kZXMgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC9kaXNjYXJkT2RkQ2hpbGROb2RlcycpLFxuICAgICAgRGlzY2FyZFNlY29uZENoaWxkTm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL2Rpc2NhcmRTZWNvbmRDaGlsZE5vZGUnKSxcbiAgICAgIFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvdHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUnKTtcblxuY29uc3QgbWFwcGluZ3MgPSB7XG5cbiAgJ3BhcnQnOiBUcmFuc3BhcmVudE5vZGUsXG4gICduYW1lJzogVHJhbnNwYXJlbnROb2RlLFxuXG4gICd0aGVuJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ2hlbmNlJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3Byb29mJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3N1cHBvc2UnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAncHJlbWlzZSc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdwcmVtaXNlcyc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICd0aGVyZWZvcmUnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnY29uY2x1c2lvbic6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG5cbiAgJ3Rlcm1zJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICd0eXBlcyc6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnbGFiZWxzJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICd2YXJpYWJsZXMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2NvbnN0cnVjdG9ycyc6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnbWV0YVZhcmlhYmxlcyc6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnZGVwZW5kZW50VHlwZXMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ3F1YWxpZmllZE1ldGFWYXJpYWJsZXMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcblxuICAnaW5jbHVkZURpcmVjdGl2ZSc6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuXG4gICdieU9yRnJvbScgOiBUcmFuc3BhcmVudE5vZGUsXG4gICdwcmVtaXNlT3JQcmVtaXNlcycgOiBUcmFuc3BhcmVudE5vZGUsXG4gICdtZXRhVmFyaWFibGVPclF1YWxpZmllZE1ldGF2YXJpYWJsZScgOiBUcmFuc3BhcmVudE5vZGUsXG4gICd1bmp1c3RpZmllZFN0YXRlbWVudE9ySnVzdGlmaWVkU3RhdGVtZW50JyA6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3Byb29mRGVyaXZhdGlvbk9yQWJyaWRnZWRQcm9vZkRlcml2YXRpb24nIDogVHJhbnNwYXJlbnROb2RlLFxuXG4gICdwYXJlbnRoZXNpc2VkTGFiZWxzJyA6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAncGFyZW50aGVzaXNlZFRlcm1zJyA6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAncGFyZW50aGVzaXNlZFR5cGVzJyA6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlXG4gIFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtYXBwaW5ncztcbiJdfQ==