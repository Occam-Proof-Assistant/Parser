'use strict';

var TransparentNode = require('../common/node/nonTerminal/transparent'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChild'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecond');

var mappings = {

  'name': TransparentNode,
  'part': TransparentNode,
  'premise': TransparentNode,
  'premises': TransparentNode,
  'statement': TransparentNode,
  'subDerivation': TransparentNode,
  'proofDerivation': TransparentNode,
  'parenthesisedType': TransparentNode,
  'abridgedProofDerivation': TransparentNode,

  'typeName': TransparentNode,
  'labelName': TransparentNode,
  'variableName': TransparentNode,
  'constructorName': TransparentNode,
  'metavariableName': TransparentNode,

  'premise(s)': TransparentNode,
  'type(s)Declaration': TransparentNode,
  '(typed)Variable(s)Declaration': TransparentNode,
  'typedConstructor(s)Declaration': TransparentNode,
  '(qualified)Metavariable(s)Declaration': TransparentNode,

  '(typed)Variable': TransparentNode,
  '(qualified)Metavariable': TransparentNode,
  '(abridged)ProofDerivation': TransparentNode,

  'byOrFrom': TransparentNode,
  'typeOrTerm': TransparentNode,
  'unjustifiedStatementOrUnknown': TransparentNode,
  '(un)justifiedStatementOrUnknown': TransparentNode,
  'specialUnassignedOrMinorKeywords': TransparentNode,

  'commaThenTerm': TransparentThenKeepSecondNode,
  'commaThenType': TransparentThenKeepSecondNode,
  'commaThenLabel': TransparentThenKeepSecondNode,
  'commaThenMetavariable': TransparentThenKeepSecondNode,
  'commaThen(typed)Variable': TransparentThenKeepSecondNode,
  'commaThenTypedConstructor': TransparentThenKeepSecondNode,
  'commaThen(qualified)Metavariable': TransparentThenKeepSecondNode,

  'parenthesisedTermList': TransparentThenKeepSecondNode,
  'parenthesisedTypeList': TransparentThenKeepSecondNode,
  'parenthesisedLabelList': TransparentThenKeepSecondNode,

  'conclusion': DiscardSecondChildNode,
  'typedVariable': DiscardSecondChildNode,
  'typedConstructor': DiscardSecondChildNode

};

module.exports = mappings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJUcmFuc3BhcmVudE5vZGUiLCJyZXF1aXJlIiwiRGlzY2FyZFNlY29uZENoaWxkTm9kZSIsIlRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlIiwibWFwcGluZ3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxrQkFBa0JDLFFBQVEsd0NBQVIsQ0FBeEI7QUFBQSxJQUNNQyx5QkFBeUJELFFBQVEsK0NBQVIsQ0FEL0I7QUFBQSxJQUVNRSxnQ0FBZ0NGLFFBQVEsc0RBQVIsQ0FGdEM7O0FBSUEsSUFBTUcsV0FBVzs7QUFFZixVQUFRSixlQUZPO0FBR2YsVUFBUUEsZUFITztBQUlmLGFBQVdBLGVBSkk7QUFLZixjQUFZQSxlQUxHO0FBTWYsZUFBYUEsZUFORTtBQU9mLG1CQUFpQkEsZUFQRjtBQVFmLHFCQUFtQkEsZUFSSjtBQVNmLHVCQUFxQkEsZUFUTjtBQVVmLDZCQUEyQkEsZUFWWjs7QUFZZixjQUFZQSxlQVpHO0FBYWYsZUFBYUEsZUFiRTtBQWNmLGtCQUFnQkEsZUFkRDtBQWVmLHFCQUFtQkEsZUFmSjtBQWdCZixzQkFBb0JBLGVBaEJMOztBQWtCZixnQkFBY0EsZUFsQkM7QUFtQmYsd0JBQXNCQSxlQW5CUDtBQW9CZixtQ0FBaUNBLGVBcEJsQjtBQXFCZixvQ0FBa0NBLGVBckJuQjtBQXNCZiwyQ0FBeUNBLGVBdEIxQjs7QUF3QmYscUJBQW1CQSxlQXhCSjtBQXlCZiw2QkFBMkJBLGVBekJaO0FBMEJmLCtCQUE2QkEsZUExQmQ7O0FBNEJmLGNBQVlBLGVBNUJHO0FBNkJmLGdCQUFjQSxlQTdCQztBQThCZixtQ0FBaUNBLGVBOUJsQjtBQStCZixxQ0FBbUNBLGVBL0JwQjtBQWdDZixzQ0FBb0NBLGVBaENyQjs7QUFrQ2YsbUJBQWlCRyw2QkFsQ0Y7QUFtQ2YsbUJBQWlCQSw2QkFuQ0Y7QUFvQ2Ysb0JBQWtCQSw2QkFwQ0g7QUFxQ2YsMkJBQXlCQSw2QkFyQ1Y7QUFzQ2YsOEJBQTRCQSw2QkF0Q2I7QUF1Q2YsK0JBQTZCQSw2QkF2Q2Q7QUF3Q2Ysc0NBQW9DQSw2QkF4Q3JCOztBQTBDZiwyQkFBeUJBLDZCQTFDVjtBQTJDZiwyQkFBeUJBLDZCQTNDVjtBQTRDZiw0QkFBMEJBLDZCQTVDWDs7QUE4Q2YsZ0JBQWNELHNCQTlDQztBQStDZixtQkFBaUJBLHNCQS9DRjtBQWdEZixzQkFBb0JBOztBQWhETCxDQUFqQjs7QUFvREFHLE9BQU9DLE9BQVAsR0FBaUJGLFFBQWpCIiwiZmlsZSI6Im1hcHBpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBUcmFuc3BhcmVudE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC90cmFuc3BhcmVudCcpLFxuICAgICAgRGlzY2FyZFNlY29uZENoaWxkTm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL2Rpc2NhcmRTZWNvbmRDaGlsZCcpLFxuICAgICAgVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC90cmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kJyk7XG5cbmNvbnN0IG1hcHBpbmdzID0ge1xuXG4gICduYW1lJzogVHJhbnNwYXJlbnROb2RlLFxuICAncGFydCc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3ByZW1pc2UnOiBUcmFuc3BhcmVudE5vZGUsXG4gICdwcmVtaXNlcyc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3N0YXRlbWVudCc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3N1YkRlcml2YXRpb24nOiBUcmFuc3BhcmVudE5vZGUsXG4gICdwcm9vZkRlcml2YXRpb24nOiBUcmFuc3BhcmVudE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkVHlwZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ2FicmlkZ2VkUHJvb2ZEZXJpdmF0aW9uJzogVHJhbnNwYXJlbnROb2RlLFxuXG4gICd0eXBlTmFtZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ2xhYmVsTmFtZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3ZhcmlhYmxlTmFtZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ2NvbnN0cnVjdG9yTmFtZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ21ldGF2YXJpYWJsZU5hbWUnOiBUcmFuc3BhcmVudE5vZGUsXG5cbiAgJ3ByZW1pc2UocyknOiBUcmFuc3BhcmVudE5vZGUsXG4gICd0eXBlKHMpRGVjbGFyYXRpb24nOiBUcmFuc3BhcmVudE5vZGUsXG4gICcodHlwZWQpVmFyaWFibGUocylEZWNsYXJhdGlvbic6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3R5cGVkQ29uc3RydWN0b3IocylEZWNsYXJhdGlvbic6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJyhxdWFsaWZpZWQpTWV0YXZhcmlhYmxlKHMpRGVjbGFyYXRpb24nOiBUcmFuc3BhcmVudE5vZGUsXG5cbiAgJyh0eXBlZClWYXJpYWJsZSc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJyhxdWFsaWZpZWQpTWV0YXZhcmlhYmxlJzogVHJhbnNwYXJlbnROb2RlLFxuICAnKGFicmlkZ2VkKVByb29mRGVyaXZhdGlvbic6IFRyYW5zcGFyZW50Tm9kZSxcblxuICAnYnlPckZyb20nOiBUcmFuc3BhcmVudE5vZGUsXG4gICd0eXBlT3JUZXJtJzogVHJhbnNwYXJlbnROb2RlLFxuICAndW5qdXN0aWZpZWRTdGF0ZW1lbnRPclVua25vd24nOiBUcmFuc3BhcmVudE5vZGUsXG4gICcodW4panVzdGlmaWVkU3RhdGVtZW50T3JVbmtub3duJzogVHJhbnNwYXJlbnROb2RlLFxuICAnc3BlY2lhbFVuYXNzaWduZWRPck1pbm9yS2V5d29yZHMnOiBUcmFuc3BhcmVudE5vZGUsXG5cbiAgJ2NvbW1hVGhlblRlcm0nOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ2NvbW1hVGhlblR5cGUnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ2NvbW1hVGhlbkxhYmVsJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdjb21tYVRoZW5NZXRhdmFyaWFibGUnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ2NvbW1hVGhlbih0eXBlZClWYXJpYWJsZSc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAnY29tbWFUaGVuVHlwZWRDb25zdHJ1Y3Rvcic6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAnY29tbWFUaGVuKHF1YWxpZmllZClNZXRhdmFyaWFibGUnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcblxuICAncGFyZW50aGVzaXNlZFRlcm1MaXN0JzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkVHlwZUxpc3QnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ3BhcmVudGhlc2lzZWRMYWJlbExpc3QnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcblxuICAnY29uY2x1c2lvbic6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICd0eXBlZFZhcmlhYmxlJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3R5cGVkQ29uc3RydWN0b3InOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwcGluZ3M7XG4iXX0=