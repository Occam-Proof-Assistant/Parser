'use strict';

var ErrorNode = require('../common/node/terminal/error'),
    TransparentNode = require('../common/node/nonTerminal/transparentNode'),
    DiscardOddChildNodes = require('../common/node/nonTerminal/discardOddChildNodes'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChildNode'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecondNode');

var mappings = {

  'unjustifiedOrJustifiedMetastatement': TransparentNode,
  'unjustifiedOrJustifiedStatement': TransparentNode,

  'name': TransparentNode,

  'proof': DiscardSecondChildNode,
  'premise': DiscardSecondChildNode,
  'premises': DiscardSecondChildNode,
  'subproof': DiscardSecondChildNode,
  'therefore': DiscardSecondChildNode,
  'conclusion': DiscardSecondChildNode,

  'includeDirective': DiscardOddChildNodes,

  'typesDeclaration': DiscardOddChildNodes,
  'contextsDeclaration': DiscardOddChildNodes,
  'variablesDeclaration': DiscardOddChildNodes,
  'constructorsDeclaration': DiscardOddChildNodes,
  'abbreviationsDeclaration': DiscardOddChildNodes,
  'dependentTypesDeclaration': DiscardOddChildNodes,
  'metavariablesDeclaration': DiscardOddChildNodes,

  'typeNames': DiscardOddChildNodes,
  'labels': DiscardOddChildNodes,
  'terms': DiscardOddChildNodes,

  'parenthesisedTypeNames': TransparentThenKeepSecondNode,
  'parenthesisedTypeName': TransparentThenKeepSecondNode,
  'parenthesisedLabels': TransparentThenKeepSecondNode,
  'parenthesisedTerms': TransparentThenKeepSecondNode,
  'parenthesisedTerm': TransparentThenKeepSecondNode,

  'error': ErrorNode

};

module.exports = mappings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJFcnJvck5vZGUiLCJyZXF1aXJlIiwiVHJhbnNwYXJlbnROb2RlIiwiRGlzY2FyZE9kZENoaWxkTm9kZXMiLCJEaXNjYXJkU2Vjb25kQ2hpbGROb2RlIiwiVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUiLCJtYXBwaW5ncyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsK0JBQVIsQ0FBbEI7QUFBQSxJQUNNQyxrQkFBa0JELFFBQVEsNENBQVIsQ0FEeEI7QUFBQSxJQUVNRSx1QkFBdUJGLFFBQVEsaURBQVIsQ0FGN0I7QUFBQSxJQUdNRyx5QkFBeUJILFFBQVEsbURBQVIsQ0FIL0I7QUFBQSxJQUlNSSxnQ0FBZ0NKLFFBQVEsMERBQVIsQ0FKdEM7O0FBTUEsSUFBTUssV0FBVzs7QUFFZix5Q0FBdUNKLGVBRnhCO0FBR2YscUNBQW1DQSxlQUhwQjs7QUFLZixVQUFRQSxlQUxPOztBQU9mLFdBQVNFLHNCQVBNO0FBUWYsYUFBV0Esc0JBUkk7QUFTZixjQUFZQSxzQkFURztBQVVmLGNBQVlBLHNCQVZHO0FBV2YsZUFBYUEsc0JBWEU7QUFZZixnQkFBY0Esc0JBWkM7O0FBY2Ysc0JBQW9CRCxvQkFkTDs7QUFnQmYsc0JBQW9CQSxvQkFoQkw7QUFpQmYseUJBQXVCQSxvQkFqQlI7QUFrQmYsMEJBQXdCQSxvQkFsQlQ7QUFtQmYsNkJBQTJCQSxvQkFuQlo7QUFvQmYsOEJBQTRCQSxvQkFwQmI7QUFxQmYsK0JBQTZCQSxvQkFyQmQ7QUFzQmYsOEJBQTRCQSxvQkF0QmI7O0FBd0JmLGVBQWFBLG9CQXhCRTtBQXlCZixZQUFVQSxvQkF6Qks7QUEwQmYsV0FBU0Esb0JBMUJNOztBQTRCZiw0QkFBMEJFLDZCQTVCWDtBQTZCZiwyQkFBeUJBLDZCQTdCVjtBQThCZix5QkFBdUJBLDZCQTlCUjtBQStCZix3QkFBc0JBLDZCQS9CUDtBQWdDZix1QkFBcUJBLDZCQWhDTjs7QUFrQ2YsV0FBU0w7O0FBbENNLENBQWpCOztBQXNDQU8sT0FBT0MsT0FBUCxHQUFpQkYsUUFBakIiLCJmaWxlIjoibWFwcGluZ3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEVycm9yTm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL3Rlcm1pbmFsL2Vycm9yJyksXG4gICAgICBUcmFuc3BhcmVudE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC90cmFuc3BhcmVudE5vZGUnKSxcbiAgICAgIERpc2NhcmRPZGRDaGlsZE5vZGVzID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvbm9uVGVybWluYWwvZGlzY2FyZE9kZENoaWxkTm9kZXMnKSxcbiAgICAgIERpc2NhcmRTZWNvbmRDaGlsZE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC9kaXNjYXJkU2Vjb25kQ2hpbGROb2RlJyksXG4gICAgICBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL3RyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlJyk7XG5cbmNvbnN0IG1hcHBpbmdzID0ge1xuXG4gICd1bmp1c3RpZmllZE9ySnVzdGlmaWVkTWV0YXN0YXRlbWVudCc6IFRyYW5zcGFyZW50Tm9kZSxcbiAgJ3VuanVzdGlmaWVkT3JKdXN0aWZpZWRTdGF0ZW1lbnQnOiBUcmFuc3BhcmVudE5vZGUsXG5cbiAgJ25hbWUnOiBUcmFuc3BhcmVudE5vZGUsXG5cbiAgJ3Byb29mJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3ByZW1pc2UnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAncHJlbWlzZXMnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnc3VicHJvb2YnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAndGhlcmVmb3JlJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ2NvbmNsdXNpb24nOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuXG4gICdpbmNsdWRlRGlyZWN0aXZlJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG5cbiAgJ3R5cGVzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2NvbnRleHRzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ3ZhcmlhYmxlc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdjb25zdHJ1Y3RvcnNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnYWJicmV2aWF0aW9uc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdkZXBlbmRlbnRUeXBlc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdtZXRhdmFyaWFibGVzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcblxuICAndHlwZU5hbWVzJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdsYWJlbHMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ3Rlcm1zJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gIFxuICAncGFyZW50aGVzaXNlZFR5cGVOYW1lcyc6IFRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlLFxuICAncGFyZW50aGVzaXNlZFR5cGVOYW1lJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkTGFiZWxzJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkVGVybXMnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ3BhcmVudGhlc2lzZWRUZXJtJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG5cbiAgJ2Vycm9yJzogRXJyb3JOb2RlXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwcGluZ3M7XG4iXX0=