'use strict';

var ErrorNode = require('../common/node/terminal/error'),
    TransparentNode = require('../common/node/nonTerminal/transparentNode'),
    DiscardOddChildNodes = require('../common/node/nonTerminal/discardOddChildNodes'),
    DiscardSecondChildNode = require('../common/node/nonTerminal/discardSecondChildNode'),
    DiscardFifthThenSecondChildNode = require('../common/node/nonTerminal/discardFifthThenSecondChildNode'),
    TransparentThenKeepSecondNode = require('../common/node/nonTerminal/transparentThenKeepSecondNode');

var mappings = {

  'unjustifiedOrJustifiedMetastatement': TransparentNode,
  'unjustifiedOrJustifiedStatement': TransparentNode,

  'name': TransparentNode,

  'proof': DiscardSecondChildNode,
  'premise': DiscardSecondChildNode,
  'premises': DiscardSecondChildNode,
  'sublemma': DiscardSecondChildNode,
  'therefore': DiscardSecondChildNode,
  'conclusion': DiscardSecondChildNode,
  'metaProof': DiscardSecondChildNode,
  'justifiedStatement': DiscardSecondChildNode,
  'justifiedMetastatement': DiscardSecondChildNode,

  'indicativeConditional': DiscardFifthThenSecondChildNode,

  'typesDeclaration': DiscardOddChildNodes,
  'contextsDeclaration': DiscardOddChildNodes,
  'variablesDeclaration': DiscardOddChildNodes,
  'constructorsDeclaration': DiscardOddChildNodes,
  'abbreviationsDeclaration': DiscardOddChildNodes,
  'dependentTypesDeclaration': DiscardOddChildNodes,
  'metavariablesDeclaration': DiscardOddChildNodes,

  'typeNames': DiscardOddChildNodes,
  'labels': DiscardOddChildNodes,
  'terms': DiscardOddChildNodes,

  'parenthesisedTypeNames': TransparentThenKeepSecondNode,
  'parenthesisedLabels': TransparentThenKeepSecondNode,
  'parenthesisedTerms': TransparentThenKeepSecondNode,

  'parenthesisedTypeName': TransparentThenKeepSecondNode,
  'parenthesisedTerm': TransparentThenKeepSecondNode,

  'error': ErrorNode

};

module.exports = mappings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9tYXBwaW5ncy5qcyJdLCJuYW1lcyI6WyJFcnJvck5vZGUiLCJyZXF1aXJlIiwiVHJhbnNwYXJlbnROb2RlIiwiRGlzY2FyZE9kZENoaWxkTm9kZXMiLCJEaXNjYXJkU2Vjb25kQ2hpbGROb2RlIiwiRGlzY2FyZEZpZnRoVGhlblNlY29uZENoaWxkTm9kZSIsIlRyYW5zcGFyZW50VGhlbktlZXBTZWNvbmROb2RlIiwibWFwcGluZ3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLCtCQUFSLENBQWxCO0FBQUEsSUFDTUMsa0JBQWtCRCxRQUFRLDRDQUFSLENBRHhCO0FBQUEsSUFFTUUsdUJBQXVCRixRQUFRLGlEQUFSLENBRjdCO0FBQUEsSUFHTUcseUJBQXlCSCxRQUFRLG1EQUFSLENBSC9CO0FBQUEsSUFJTUksa0NBQWtDSixRQUFRLDREQUFSLENBSnhDO0FBQUEsSUFLTUssZ0NBQWdDTCxRQUFRLDBEQUFSLENBTHRDOztBQU9BLElBQU1NLFdBQVc7O0FBRWYseUNBQXVDTCxlQUZ4QjtBQUdmLHFDQUFtQ0EsZUFIcEI7O0FBS2YsVUFBUUEsZUFMTzs7QUFPZixXQUFTRSxzQkFQTTtBQVFmLGFBQVdBLHNCQVJJO0FBU2YsY0FBWUEsc0JBVEc7QUFVZixjQUFZQSxzQkFWRztBQVdmLGVBQWFBLHNCQVhFO0FBWWYsZ0JBQWNBLHNCQVpDO0FBYWYsZUFBYUEsc0JBYkU7QUFjZix3QkFBc0JBLHNCQWRQO0FBZWYsNEJBQTBCQSxzQkFmWDs7QUFpQmYsMkJBQXlCQywrQkFqQlY7O0FBbUJmLHNCQUFvQkYsb0JBbkJMO0FBb0JmLHlCQUF1QkEsb0JBcEJSO0FBcUJmLDBCQUF3QkEsb0JBckJUO0FBc0JmLDZCQUEyQkEsb0JBdEJaO0FBdUJmLDhCQUE0QkEsb0JBdkJiO0FBd0JmLCtCQUE2QkEsb0JBeEJkO0FBeUJmLDhCQUE0QkEsb0JBekJiOztBQTJCZixlQUFhQSxvQkEzQkU7QUE0QmYsWUFBVUEsb0JBNUJLO0FBNkJmLFdBQVNBLG9CQTdCTTs7QUErQmYsNEJBQTBCRyw2QkEvQlg7QUFnQ2YseUJBQXVCQSw2QkFoQ1I7QUFpQ2Ysd0JBQXNCQSw2QkFqQ1A7O0FBbUNmLDJCQUF5QkEsNkJBbkNWO0FBb0NmLHVCQUFxQkEsNkJBcENOOztBQXNDZixXQUFTTjs7QUF0Q00sQ0FBakI7O0FBMENBUSxPQUFPQyxPQUFQLEdBQWlCRixRQUFqQiIsImZpbGUiOiJtYXBwaW5ncy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXJyb3JOb2RlID0gcmVxdWlyZSgnLi4vY29tbW9uL25vZGUvdGVybWluYWwvZXJyb3InKSxcbiAgICAgIFRyYW5zcGFyZW50Tm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL3RyYW5zcGFyZW50Tm9kZScpLFxuICAgICAgRGlzY2FyZE9kZENoaWxkTm9kZXMgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC9kaXNjYXJkT2RkQ2hpbGROb2RlcycpLFxuICAgICAgRGlzY2FyZFNlY29uZENoaWxkTm9kZSA9IHJlcXVpcmUoJy4uL2NvbW1vbi9ub2RlL25vblRlcm1pbmFsL2Rpc2NhcmRTZWNvbmRDaGlsZE5vZGUnKSxcbiAgICAgIERpc2NhcmRGaWZ0aFRoZW5TZWNvbmRDaGlsZE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC9kaXNjYXJkRmlmdGhUaGVuU2Vjb25kQ2hpbGROb2RlJyksICAgIFxuICAgICAgVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUgPSByZXF1aXJlKCcuLi9jb21tb24vbm9kZS9ub25UZXJtaW5hbC90cmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZScpO1xuXG5jb25zdCBtYXBwaW5ncyA9IHtcblxuICAndW5qdXN0aWZpZWRPckp1c3RpZmllZE1ldGFzdGF0ZW1lbnQnOiBUcmFuc3BhcmVudE5vZGUsXG4gICd1bmp1c3RpZmllZE9ySnVzdGlmaWVkU3RhdGVtZW50JzogVHJhbnNwYXJlbnROb2RlLFxuXG4gICduYW1lJzogVHJhbnNwYXJlbnROb2RlLFxuXG4gICdwcm9vZic6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdwcmVtaXNlJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3ByZW1pc2VzJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3N1YmxlbW1hJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ3RoZXJlZm9yZSc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdjb25jbHVzaW9uJzogRGlzY2FyZFNlY29uZENoaWxkTm9kZSxcbiAgJ21ldGFQcm9vZic6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gICdqdXN0aWZpZWRTdGF0ZW1lbnQnOiBEaXNjYXJkU2Vjb25kQ2hpbGROb2RlLFxuICAnanVzdGlmaWVkTWV0YXN0YXRlbWVudCc6IERpc2NhcmRTZWNvbmRDaGlsZE5vZGUsXG4gIFxuICAnaW5kaWNhdGl2ZUNvbmRpdGlvbmFsJzogRGlzY2FyZEZpZnRoVGhlblNlY29uZENoaWxkTm9kZSxcblxuICAndHlwZXNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAnY29udGV4dHNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAndmFyaWFibGVzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2NvbnN0cnVjdG9yc0RlY2xhcmF0aW9uJzogRGlzY2FyZE9kZENoaWxkTm9kZXMsXG4gICdhYmJyZXZpYXRpb25zRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2RlcGVuZGVudFR5cGVzRGVjbGFyYXRpb24nOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ21ldGF2YXJpYWJsZXNEZWNsYXJhdGlvbic6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuXG4gICd0eXBlTmFtZXMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgJ2xhYmVscyc6IERpc2NhcmRPZGRDaGlsZE5vZGVzLFxuICAndGVybXMnOiBEaXNjYXJkT2RkQ2hpbGROb2RlcyxcbiAgXG4gICdwYXJlbnRoZXNpc2VkVHlwZU5hbWVzJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkTGFiZWxzJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG4gICdwYXJlbnRoZXNpc2VkVGVybXMnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgXG4gICdwYXJlbnRoZXNpc2VkVHlwZU5hbWUnOiBUcmFuc3BhcmVudFRoZW5LZWVwU2Vjb25kTm9kZSxcbiAgJ3BhcmVudGhlc2lzZWRUZXJtJzogVHJhbnNwYXJlbnRUaGVuS2VlcFNlY29uZE5vZGUsXG5cbiAgJ2Vycm9yJzogRXJyb3JOb2RlXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwcGluZ3M7XG4iXX0=