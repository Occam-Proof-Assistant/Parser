'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var lexers = require('occam-lexers');

var bnf = require('./bnf'),
    mappings = require('./mappings'),
    BNFParser = require('../bnf/parser'),
    CommonParser = require('../common/parser'),
    arrayUtilities = require('../utilities/array'),
    customGrammarUtilities = require('../utilities/customGrammar'),
    defaultCustomGrammarTermBNF = require('./defaultCustomGrammar/termBNF'),
    defaultCustomGrammarExpressionBNF = require('./defaultCustomGrammar/expressionBNF'),
    defaultCustomGrammarStatementBNF = require('./defaultCustomGrammar/statementBNF'),
    defaultCustomGrammarMetastatementBNF = require('./defaultCustomGrammar/metastatementBNF');

var BNFLexer = lexers.BNFLexer,
    push = arrayUtilities.push,
    rulesFromBNFs = customGrammarUtilities.rulesFromBNFs,
    addQualifiedAndUnqualifiedStatementAndMetastatementRules = customGrammarUtilities.addQualifiedAndUnqualifiedStatementAndMetastatementRules;


var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing(),
    defaultCustomGrammarBNFs = [defaultCustomGrammarTermBNF, defaultCustomGrammarExpressionBNF, defaultCustomGrammarStatementBNF, defaultCustomGrammarMetastatementBNF],
    defaultCustomGrammarRules = rulesFromBNFs(defaultCustomGrammarBNFs),
    defaultCombinedCustomGrammarsRules = defaultCustomGrammarRules,
    ///
defaultAdditionalMappings = {};

var FlorenceParser = function (_CommonParser) {
  _inherits(FlorenceParser, _CommonParser);

  function FlorenceParser() {
    _classCallCheck(this, FlorenceParser);

    return _possibleConstructorReturn(this, (FlorenceParser.__proto__ || Object.getPrototypeOf(FlorenceParser)).apply(this, arguments));
  }

  _createClass(FlorenceParser, null, [{
    key: 'fromCombinedCustomGrammarsRulesAndAdditionalMappings',
    value: function fromCombinedCustomGrammarsRulesAndAdditionalMappings(combinedCustomGrammarsRules, additionalMappings) {
      var florenceParser = FlorenceParser.fromBNFAndMappings(bnf, mappings, combinedCustomGrammarsRules, additionalMappings);

      return florenceParser;
    }
  }, {
    key: 'fromBNFAndMappings',
    value: function fromBNFAndMappings(bnf, mappings) {
      var combinedCustomGrammarsRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultCombinedCustomGrammarsRules;
      var additionalMappings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultAdditionalMappings;

      combinedCustomGrammarsRules = addQualifiedAndUnqualifiedStatementAndMetastatementRules(combinedCustomGrammarsRules); ///

      mappings = Object.assign(mappings, additionalMappings); ///

      var tokens = bnfLexer.tokensFromBNF(bnf),
          rulesNode = bnfParser.rulesNodeFromTokens(tokens),
          rules = BNFParser.generateRules(rulesNode, mappings);

      push(rules, combinedCustomGrammarsRules);

      var florenceParser = new FlorenceParser(rules);

      return florenceParser;
    }
  }, {
    key: 'fromNothing',
    value: function fromNothing() {
      return FlorenceParser.fromBNFAndMappings(bnf, mappings);
    } ///

  }]);

  return FlorenceParser;
}(CommonParser);

Object.assign(FlorenceParser, {
  bnf: bnf,
  mappings: mappings,
  defaultCustomGrammarTermBNF: defaultCustomGrammarTermBNF,
  defaultCustomGrammarExpressionBNF: defaultCustomGrammarExpressionBNF,
  defaultCustomGrammarStatementBNF: defaultCustomGrammarStatementBNF,
  defaultCustomGrammarMetastatementBNF: defaultCustomGrammarMetastatementBNF
});

module.exports = FlorenceParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9wYXJzZXIuanMiXSwibmFtZXMiOlsibGV4ZXJzIiwicmVxdWlyZSIsImJuZiIsIm1hcHBpbmdzIiwiQk5GUGFyc2VyIiwiQ29tbW9uUGFyc2VyIiwiYXJyYXlVdGlsaXRpZXMiLCJjdXN0b21HcmFtbWFyVXRpbGl0aWVzIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJUZXJtQk5GIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJFeHByZXNzaW9uQk5GIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJTdGF0ZW1lbnRCTkYiLCJkZWZhdWx0Q3VzdG9tR3JhbW1hck1ldGFzdGF0ZW1lbnRCTkYiLCJCTkZMZXhlciIsInB1c2giLCJydWxlc0Zyb21CTkZzIiwiYWRkUXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMiLCJibmZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJCTkZzIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJSdWxlcyIsImRlZmF1bHRDb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMiLCJkZWZhdWx0QWRkaXRpb25hbE1hcHBpbmdzIiwiRmxvcmVuY2VQYXJzZXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMiLCJhZGRpdGlvbmFsTWFwcGluZ3MiLCJmbG9yZW5jZVBhcnNlciIsImZyb21CTkZBbmRNYXBwaW5ncyIsIk9iamVjdCIsImFzc2lnbiIsInRva2VucyIsInRva2Vuc0Zyb21CTkYiLCJydWxlc05vZGUiLCJydWxlc05vZGVGcm9tVG9rZW5zIiwicnVsZXMiLCJnZW5lcmF0ZVJ1bGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjs7QUFFQSxJQUFNQyxNQUFNRCxRQUFRLE9BQVIsQ0FBWjtBQUFBLElBQ01FLFdBQVdGLFFBQVEsWUFBUixDQURqQjtBQUFBLElBRU1HLFlBQVlILFFBQVEsZUFBUixDQUZsQjtBQUFBLElBR01JLGVBQWVKLFFBQVEsa0JBQVIsQ0FIckI7QUFBQSxJQUlNSyxpQkFBaUJMLFFBQVEsb0JBQVIsQ0FKdkI7QUFBQSxJQUtNTSx5QkFBeUJOLFFBQVEsNEJBQVIsQ0FML0I7QUFBQSxJQU1NTyw4QkFBOEJQLFFBQVEsZ0NBQVIsQ0FOcEM7QUFBQSxJQU9NUSxvQ0FBb0NSLFFBQVEsc0NBQVIsQ0FQMUM7QUFBQSxJQVFNUyxtQ0FBbUNULFFBQVEscUNBQVIsQ0FSekM7QUFBQSxJQVNNVSx1Q0FBdUNWLFFBQVEseUNBQVIsQ0FUN0M7O0FBV00sSUFBRVcsUUFBRixHQUFlWixNQUFmLENBQUVZLFFBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dQLGNBRFgsQ0FDRU8sSUFERjtBQUFBLElBRUVDLGFBRkYsR0FFOEVQLHNCQUY5RSxDQUVFTyxhQUZGO0FBQUEsSUFFaUJDLHdEQUZqQixHQUU4RVIsc0JBRjlFLENBRWlCUSx3REFGakI7OztBQUlOLElBQU1DLFdBQVdKLFNBQVNLLFdBQVQsRUFBakI7QUFBQSxJQUNNQyxZQUFZZCxVQUFVYSxXQUFWLEVBRGxCO0FBQUEsSUFFTUUsMkJBQTJCLENBQ3pCWCwyQkFEeUIsRUFFekJDLGlDQUZ5QixFQUd6QkMsZ0NBSHlCLEVBSXpCQyxvQ0FKeUIsQ0FGakM7QUFBQSxJQVFNUyw0QkFBNEJOLGNBQWNLLHdCQUFkLENBUmxDO0FBQUEsSUFTTUUscUNBQXFDRCx5QkFUM0M7QUFBQSxJQVNzRTtBQUNoRUUsNEJBQTRCLEVBVmxDOztJQVlNQyxjOzs7Ozs7Ozs7Ozt5RUFDd0RDLDJCLEVBQTZCQyxrQixFQUFvQjtBQUMzRyxVQUFNQyxpQkFBaUJILGVBQWVJLGtCQUFmLENBQWtDekIsR0FBbEMsRUFBdUNDLFFBQXZDLEVBQWlEcUIsMkJBQWpELEVBQThFQyxrQkFBOUUsQ0FBdkI7O0FBRUEsYUFBT0MsY0FBUDtBQUNEOzs7dUNBRXlCeEIsRyxFQUFLQyxRLEVBQTRIO0FBQUEsVUFBbEhxQiwyQkFBa0gsdUVBQXBGSCxrQ0FBb0Y7QUFBQSxVQUFoREksa0JBQWdELHVFQUEzQkgseUJBQTJCOztBQUN6SkUsb0NBQThCVCx5REFBeURTLDJCQUF6RCxDQUE5QixDQUR5SixDQUNuQzs7QUFFdEhyQixpQkFBV3lCLE9BQU9DLE1BQVAsQ0FBYzFCLFFBQWQsRUFBd0JzQixrQkFBeEIsQ0FBWCxDQUh5SixDQUdqRzs7QUFFeEQsVUFBTUssU0FBU2QsU0FBU2UsYUFBVCxDQUF1QjdCLEdBQXZCLENBQWY7QUFBQSxVQUNNOEIsWUFBWWQsVUFBVWUsbUJBQVYsQ0FBOEJILE1BQTlCLENBRGxCO0FBQUEsVUFFTUksUUFBUTlCLFVBQVUrQixhQUFWLENBQXdCSCxTQUF4QixFQUFtQzdCLFFBQW5DLENBRmQ7O0FBSUFVLFdBQUtxQixLQUFMLEVBQVlWLDJCQUFaOztBQUVBLFVBQU1FLGlCQUFpQixJQUFJSCxjQUFKLENBQW1CVyxLQUFuQixDQUF2Qjs7QUFFQSxhQUFPUixjQUFQO0FBQ0Q7OztrQ0FFb0I7QUFBRSxhQUFPSCxlQUFlSSxrQkFBZixDQUFrQ3pCLEdBQWxDLEVBQXVDQyxRQUF2QyxDQUFQO0FBQTBELEssQ0FBQzs7Ozs7RUF2QnZERSxZOztBQTBCN0J1QixPQUFPQyxNQUFQLENBQWNOLGNBQWQsRUFBOEI7QUFDNUJyQixVQUQ0QjtBQUU1QkMsb0JBRjRCO0FBRzVCSywwREFINEI7QUFJNUJDLHNFQUo0QjtBQUs1QkMsb0VBTDRCO0FBTTVCQztBQU40QixDQUE5Qjs7QUFTQXlCLE9BQU9DLE9BQVAsR0FBaUJkLGNBQWpCIiwiZmlsZSI6InBhcnNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyk7XG5cbmNvbnN0IGJuZiA9IHJlcXVpcmUoJy4vYm5mJyksXG4gICAgICBtYXBwaW5ncyA9IHJlcXVpcmUoJy4vbWFwcGluZ3MnKSxcbiAgICAgIEJORlBhcnNlciA9IHJlcXVpcmUoJy4uL2JuZi9wYXJzZXInKSxcbiAgICAgIENvbW1vblBhcnNlciA9IHJlcXVpcmUoJy4uL2NvbW1vbi9wYXJzZXInKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5JyksXG4gICAgICBjdXN0b21HcmFtbWFyVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2N1c3RvbUdyYW1tYXInKSxcbiAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyVGVybUJORiA9IHJlcXVpcmUoJy4vZGVmYXVsdEN1c3RvbUdyYW1tYXIvdGVybUJORicpLFxuICAgICAgZGVmYXVsdEN1c3RvbUdyYW1tYXJFeHByZXNzaW9uQk5GID0gcmVxdWlyZSgnLi9kZWZhdWx0Q3VzdG9tR3JhbW1hci9leHByZXNzaW9uQk5GJyksXG4gICAgICBkZWZhdWx0Q3VzdG9tR3JhbW1hclN0YXRlbWVudEJORiA9IHJlcXVpcmUoJy4vZGVmYXVsdEN1c3RvbUdyYW1tYXIvc3RhdGVtZW50Qk5GJyksXG4gICAgICBkZWZhdWx0Q3VzdG9tR3JhbW1hck1ldGFzdGF0ZW1lbnRCTkYgPSByZXF1aXJlKCcuL2RlZmF1bHRDdXN0b21HcmFtbWFyL21ldGFzdGF0ZW1lbnRCTkYnKTtcblxuY29uc3QgeyBCTkZMZXhlciB9ID0gbGV4ZXJzLFxuICAgICAgeyBwdXNoIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgcnVsZXNGcm9tQk5GcywgYWRkUXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMgfSA9IGN1c3RvbUdyYW1tYXJVdGlsaXRpZXM7XG5cbmNvbnN0IGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGJuZlBhcnNlciA9IEJORlBhcnNlci5mcm9tTm90aGluZygpLFxuICAgICAgZGVmYXVsdEN1c3RvbUdyYW1tYXJCTkZzID0gW1xuICAgICAgICBkZWZhdWx0Q3VzdG9tR3JhbW1hclRlcm1CTkYsXG4gICAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyRXhwcmVzc2lvbkJORixcbiAgICAgICAgZGVmYXVsdEN1c3RvbUdyYW1tYXJTdGF0ZW1lbnRCTkYsIFxuICAgICAgICBkZWZhdWx0Q3VzdG9tR3JhbW1hck1ldGFzdGF0ZW1lbnRCTkZcbiAgICAgIF0sXG4gICAgICBkZWZhdWx0Q3VzdG9tR3JhbW1hclJ1bGVzID0gcnVsZXNGcm9tQk5GcyhkZWZhdWx0Q3VzdG9tR3JhbW1hckJORnMpLFxuICAgICAgZGVmYXVsdENvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyA9IGRlZmF1bHRDdXN0b21HcmFtbWFyUnVsZXMsIC8vL1xuICAgICAgZGVmYXVsdEFkZGl0aW9uYWxNYXBwaW5ncyA9IHt9O1xuXG5jbGFzcyBGbG9yZW5jZVBhcnNlciBleHRlbmRzIENvbW1vblBhcnNlciB7XG4gIHN0YXRpYyBmcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzQW5kQWRkaXRpb25hbE1hcHBpbmdzKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcywgYWRkaXRpb25hbE1hcHBpbmdzKSB7XG4gICAgY29uc3QgZmxvcmVuY2VQYXJzZXIgPSBGbG9yZW5jZVBhcnNlci5mcm9tQk5GQW5kTWFwcGluZ3MoYm5mLCBtYXBwaW5ncywgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzLCBhZGRpdGlvbmFsTWFwcGluZ3MpO1xuXG4gICAgcmV0dXJuIGZsb3JlbmNlUGFyc2VyO1xuICB9XG5cbiAgc3RhdGljIGZyb21CTkZBbmRNYXBwaW5ncyhibmYsIG1hcHBpbmdzLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMgPSBkZWZhdWx0Q29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzLCBhZGRpdGlvbmFsTWFwcGluZ3MgPSBkZWZhdWx0QWRkaXRpb25hbE1hcHBpbmdzKSB7XG4gICAgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzID0gYWRkUXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMoY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKTsgIC8vL1xuXG4gICAgbWFwcGluZ3MgPSBPYmplY3QuYXNzaWduKG1hcHBpbmdzLCBhZGRpdGlvbmFsTWFwcGluZ3MpOyAvLy9cblxuICAgIGNvbnN0IHRva2VucyA9IGJuZkxleGVyLnRva2Vuc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgICBydWxlc05vZGUgPSBibmZQYXJzZXIucnVsZXNOb2RlRnJvbVRva2Vucyh0b2tlbnMpLFxuICAgICAgICAgIHJ1bGVzID0gQk5GUGFyc2VyLmdlbmVyYXRlUnVsZXMocnVsZXNOb2RlLCBtYXBwaW5ncyk7XG5cbiAgICBwdXNoKHJ1bGVzLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMpO1xuXG4gICAgY29uc3QgZmxvcmVuY2VQYXJzZXIgPSBuZXcgRmxvcmVuY2VQYXJzZXIocnVsZXMpO1xuXG4gICAgcmV0dXJuIGZsb3JlbmNlUGFyc2VyO1xuICB9XG5cbiAgc3RhdGljIGZyb21Ob3RoaW5nKCkgeyByZXR1cm4gRmxvcmVuY2VQYXJzZXIuZnJvbUJORkFuZE1hcHBpbmdzKGJuZiwgbWFwcGluZ3MpOyB9IC8vL1xufVxuXG5PYmplY3QuYXNzaWduKEZsb3JlbmNlUGFyc2VyLCB7XG4gIGJuZixcbiAgbWFwcGluZ3MsXG4gIGRlZmF1bHRDdXN0b21HcmFtbWFyVGVybUJORixcbiAgZGVmYXVsdEN1c3RvbUdyYW1tYXJFeHByZXNzaW9uQk5GLFxuICBkZWZhdWx0Q3VzdG9tR3JhbW1hclN0YXRlbWVudEJORixcbiAgZGVmYXVsdEN1c3RvbUdyYW1tYXJNZXRhc3RhdGVtZW50Qk5GXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGbG9yZW5jZVBhcnNlcjtcbiJdfQ==