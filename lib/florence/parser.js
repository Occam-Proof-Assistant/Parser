'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var lexers = require('occam-lexers');

var bnf = require('./bnf'),
    mappings = require('./mappings'),
    BNFParser = require('../bnf/parser'),
    CommonParser = require('../common/parser'),
    arrayUtilities = require('../utilities/array'),
    customGrammarUtilities = require('../utilities/customGrammar'),
    defaultCustomGrammarTermBNF = require('./defaultCustomGrammar/termBNF'),
    defaultCustomGrammarExpressionBNF = require('./defaultCustomGrammar/expressionBNF'),
    defaultCustomGrammarStatementBNF = require('./defaultCustomGrammar/statementBNF'),
    defaultCustomGrammarMetastatementBNF = require('./defaultCustomGrammar/metastatementBNF');

var BNFLexer = lexers.BNFLexer,
    push = arrayUtilities.push,
    rulesFromBNFs = customGrammarUtilities.rulesFromBNFs,
    addQualifiedAndUnqualifiedStatementAndMetastatementRules = customGrammarUtilities.addQualifiedAndUnqualifiedStatementAndMetastatementRules;


var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing(),
    defaultCustomGrammarBNFs = [defaultCustomGrammarTermBNF, defaultCustomGrammarExpressionBNF, defaultCustomGrammarStatementBNF, defaultCustomGrammarMetastatementBNF],
    defaultCustomGrammarRules = rulesFromBNFs(defaultCustomGrammarBNFs),
    defaultCombinedCustomGrammarsRules = defaultCustomGrammarRules,
    ///
defaultAdditionalMappings = {};

var FlorenceParser = function (_CommonParser) {
  _inherits(FlorenceParser, _CommonParser);

  function FlorenceParser() {
    _classCallCheck(this, FlorenceParser);

    return _possibleConstructorReturn(this, (FlorenceParser.__proto__ || Object.getPrototypeOf(FlorenceParser)).apply(this, arguments));
  }

  _createClass(FlorenceParser, null, [{
    key: 'fromCombinedCustomGrammarsRulesAndAdditionalMappings',
    value: function fromCombinedCustomGrammarsRulesAndAdditionalMappings(combinedCustomGrammarsRules, additionalMappings) {
      var florenceParser = FlorenceParser.fromBNFAndMappings(bnf, mappings, combinedCustomGrammarsRules, additionalMappings);

      return florenceParser;
    }
  }, {
    key: 'fromBNFAndMappings',
    value: function fromBNFAndMappings(bnf, mappings) {
      var combinedCustomGrammarsRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultCombinedCustomGrammarsRules;
      var additionalMappings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultAdditionalMappings;

      combinedCustomGrammarsRules = addQualifiedAndUnqualifiedStatementAndMetastatementRules(combinedCustomGrammarsRules); ///

      mappings = Object.assign(mappings, additionalMappings); ///

      var significantTokens = bnfLexer.significantTokensFromBNF(bnf),
          rulesNode = bnfParser.rulesNodeFromSignificantTokens(significantTokens),
          rules = BNFParser.generateRules(rulesNode, mappings);

      push(rules, combinedCustomGrammarsRules);

      var florenceParser = new FlorenceParser(rules);

      return florenceParser;
    }
  }, {
    key: 'fromNothing',
    value: function fromNothing() {
      return FlorenceParser.fromBNFAndMappings(bnf, mappings);
    } ///

  }]);

  return FlorenceParser;
}(CommonParser);

Object.assign(FlorenceParser, {
  bnf: bnf,
  mappings: mappings,
  defaultCustomGrammarTermBNF: defaultCustomGrammarTermBNF,
  defaultCustomGrammarExpressionBNF: defaultCustomGrammarExpressionBNF,
  defaultCustomGrammarStatementBNF: defaultCustomGrammarStatementBNF,
  defaultCustomGrammarMetastatementBNF: defaultCustomGrammarMetastatementBNF
});

module.exports = FlorenceParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9wYXJzZXIuanMiXSwibmFtZXMiOlsibGV4ZXJzIiwicmVxdWlyZSIsImJuZiIsIm1hcHBpbmdzIiwiQk5GUGFyc2VyIiwiQ29tbW9uUGFyc2VyIiwiYXJyYXlVdGlsaXRpZXMiLCJjdXN0b21HcmFtbWFyVXRpbGl0aWVzIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJUZXJtQk5GIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJFeHByZXNzaW9uQk5GIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJTdGF0ZW1lbnRCTkYiLCJkZWZhdWx0Q3VzdG9tR3JhbW1hck1ldGFzdGF0ZW1lbnRCTkYiLCJCTkZMZXhlciIsInB1c2giLCJydWxlc0Zyb21CTkZzIiwiYWRkUXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMiLCJibmZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJCTkZzIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJSdWxlcyIsImRlZmF1bHRDb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMiLCJkZWZhdWx0QWRkaXRpb25hbE1hcHBpbmdzIiwiRmxvcmVuY2VQYXJzZXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMiLCJhZGRpdGlvbmFsTWFwcGluZ3MiLCJmbG9yZW5jZVBhcnNlciIsImZyb21CTkZBbmRNYXBwaW5ncyIsIk9iamVjdCIsImFzc2lnbiIsInNpZ25pZmljYW50VG9rZW5zIiwic2lnbmlmaWNhbnRUb2tlbnNGcm9tQk5GIiwicnVsZXNOb2RlIiwicnVsZXNOb2RlRnJvbVNpZ25pZmljYW50VG9rZW5zIiwicnVsZXMiLCJnZW5lcmF0ZVJ1bGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjs7QUFFQSxJQUFNQyxNQUFNRCxRQUFRLE9BQVIsQ0FBWjtBQUFBLElBQ01FLFdBQVdGLFFBQVEsWUFBUixDQURqQjtBQUFBLElBRU1HLFlBQVlILFFBQVEsZUFBUixDQUZsQjtBQUFBLElBR01JLGVBQWVKLFFBQVEsa0JBQVIsQ0FIckI7QUFBQSxJQUlNSyxpQkFBaUJMLFFBQVEsb0JBQVIsQ0FKdkI7QUFBQSxJQUtNTSx5QkFBeUJOLFFBQVEsNEJBQVIsQ0FML0I7QUFBQSxJQU1NTyw4QkFBOEJQLFFBQVEsZ0NBQVIsQ0FOcEM7QUFBQSxJQU9NUSxvQ0FBb0NSLFFBQVEsc0NBQVIsQ0FQMUM7QUFBQSxJQVFNUyxtQ0FBbUNULFFBQVEscUNBQVIsQ0FSekM7QUFBQSxJQVNNVSx1Q0FBdUNWLFFBQVEseUNBQVIsQ0FUN0M7O0FBV00sSUFBRVcsUUFBRixHQUFlWixNQUFmLENBQUVZLFFBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dQLGNBRFgsQ0FDRU8sSUFERjtBQUFBLElBRUVDLGFBRkYsR0FFOEVQLHNCQUY5RSxDQUVFTyxhQUZGO0FBQUEsSUFFaUJDLHdEQUZqQixHQUU4RVIsc0JBRjlFLENBRWlCUSx3REFGakI7OztBQUlOLElBQU1DLFdBQVdKLFNBQVNLLFdBQVQsRUFBakI7QUFBQSxJQUNNQyxZQUFZZCxVQUFVYSxXQUFWLEVBRGxCO0FBQUEsSUFFTUUsMkJBQTJCLENBQ3pCWCwyQkFEeUIsRUFFekJDLGlDQUZ5QixFQUd6QkMsZ0NBSHlCLEVBSXpCQyxvQ0FKeUIsQ0FGakM7QUFBQSxJQVFNUyw0QkFBNEJOLGNBQWNLLHdCQUFkLENBUmxDO0FBQUEsSUFTTUUscUNBQXFDRCx5QkFUM0M7QUFBQSxJQVNzRTtBQUNoRUUsNEJBQTRCLEVBVmxDOztJQVlNQyxjOzs7Ozs7Ozs7Ozt5RUFDd0RDLDJCLEVBQTZCQyxrQixFQUFvQjtBQUMzRyxVQUFNQyxpQkFBaUJILGVBQWVJLGtCQUFmLENBQWtDekIsR0FBbEMsRUFBdUNDLFFBQXZDLEVBQWlEcUIsMkJBQWpELEVBQThFQyxrQkFBOUUsQ0FBdkI7O0FBRUEsYUFBT0MsY0FBUDtBQUNEOzs7dUNBRXlCeEIsRyxFQUFLQyxRLEVBQTRIO0FBQUEsVUFBbEhxQiwyQkFBa0gsdUVBQXBGSCxrQ0FBb0Y7QUFBQSxVQUFoREksa0JBQWdELHVFQUEzQkgseUJBQTJCOztBQUN6SkUsb0NBQThCVCx5REFBeURTLDJCQUF6RCxDQUE5QixDQUR5SixDQUNuQzs7QUFFdEhyQixpQkFBV3lCLE9BQU9DLE1BQVAsQ0FBYzFCLFFBQWQsRUFBd0JzQixrQkFBeEIsQ0FBWCxDQUh5SixDQUdqRzs7QUFFeEQsVUFBTUssb0JBQW9CZCxTQUFTZSx3QkFBVCxDQUFrQzdCLEdBQWxDLENBQTFCO0FBQUEsVUFDTThCLFlBQVlkLFVBQVVlLDhCQUFWLENBQXlDSCxpQkFBekMsQ0FEbEI7QUFBQSxVQUVNSSxRQUFROUIsVUFBVStCLGFBQVYsQ0FBd0JILFNBQXhCLEVBQW1DN0IsUUFBbkMsQ0FGZDs7QUFJQVUsV0FBS3FCLEtBQUwsRUFBWVYsMkJBQVo7O0FBRUEsVUFBTUUsaUJBQWlCLElBQUlILGNBQUosQ0FBbUJXLEtBQW5CLENBQXZCOztBQUVBLGFBQU9SLGNBQVA7QUFDRDs7O2tDQUVvQjtBQUFFLGFBQU9ILGVBQWVJLGtCQUFmLENBQWtDekIsR0FBbEMsRUFBdUNDLFFBQXZDLENBQVA7QUFBMEQsSyxDQUFDOzs7OztFQXZCdkRFLFk7O0FBMEI3QnVCLE9BQU9DLE1BQVAsQ0FBY04sY0FBZCxFQUE4QjtBQUM1QnJCLE9BQUtBLEdBRHVCO0FBRTVCQyxZQUFVQSxRQUZrQjtBQUc1QkssK0JBQTZCQSwyQkFIRDtBQUk1QkMscUNBQW1DQSxpQ0FKUDtBQUs1QkMsb0NBQWtDQSxnQ0FMTjtBQU01QkMsd0NBQXNDQTtBQU5WLENBQTlCOztBQVNBeUIsT0FBT0MsT0FBUCxHQUFpQmQsY0FBakIiLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKTtcblxuY29uc3QgYm5mID0gcmVxdWlyZSgnLi9ibmYnKSxcbiAgICAgIG1hcHBpbmdzID0gcmVxdWlyZSgnLi9tYXBwaW5ncycpLFxuICAgICAgQk5GUGFyc2VyID0gcmVxdWlyZSgnLi4vYm5mL3BhcnNlcicpLFxuICAgICAgQ29tbW9uUGFyc2VyID0gcmVxdWlyZSgnLi4vY29tbW9uL3BhcnNlcicpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIGN1c3RvbUdyYW1tYXJVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvY3VzdG9tR3JhbW1hcicpLFxuICAgICAgZGVmYXVsdEN1c3RvbUdyYW1tYXJUZXJtQk5GID0gcmVxdWlyZSgnLi9kZWZhdWx0Q3VzdG9tR3JhbW1hci90ZXJtQk5GJyksXG4gICAgICBkZWZhdWx0Q3VzdG9tR3JhbW1hckV4cHJlc3Npb25CTkYgPSByZXF1aXJlKCcuL2RlZmF1bHRDdXN0b21HcmFtbWFyL2V4cHJlc3Npb25CTkYnKSxcbiAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyU3RhdGVtZW50Qk5GID0gcmVxdWlyZSgnLi9kZWZhdWx0Q3VzdG9tR3JhbW1hci9zdGF0ZW1lbnRCTkYnKSxcbiAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyTWV0YXN0YXRlbWVudEJORiA9IHJlcXVpcmUoJy4vZGVmYXVsdEN1c3RvbUdyYW1tYXIvbWV0YXN0YXRlbWVudEJORicpO1xuXG5jb25zdCB7IEJORkxleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IHB1c2ggfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBydWxlc0Zyb21CTkZzLCBhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyB9ID0gY3VzdG9tR3JhbW1hclV0aWxpdGllcztcblxuY29uc3QgYm5mTGV4ZXIgPSBCTkZMZXhlci5mcm9tTm90aGluZygpLFxuICAgICAgYm5mUGFyc2VyID0gQk5GUGFyc2VyLmZyb21Ob3RoaW5nKCksXG4gICAgICBkZWZhdWx0Q3VzdG9tR3JhbW1hckJORnMgPSBbXG4gICAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyVGVybUJORixcbiAgICAgICAgZGVmYXVsdEN1c3RvbUdyYW1tYXJFeHByZXNzaW9uQk5GLFxuICAgICAgICBkZWZhdWx0Q3VzdG9tR3JhbW1hclN0YXRlbWVudEJORiwgXG4gICAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyTWV0YXN0YXRlbWVudEJORlxuICAgICAgXSxcbiAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyUnVsZXMgPSBydWxlc0Zyb21CTkZzKGRlZmF1bHRDdXN0b21HcmFtbWFyQk5GcyksXG4gICAgICBkZWZhdWx0Q29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzID0gZGVmYXVsdEN1c3RvbUdyYW1tYXJSdWxlcywgLy8vXG4gICAgICBkZWZhdWx0QWRkaXRpb25hbE1hcHBpbmdzID0ge307XG5cbmNsYXNzIEZsb3JlbmNlUGFyc2VyIGV4dGVuZHMgQ29tbW9uUGFyc2VyIHtcbiAgc3RhdGljIGZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXNBbmRBZGRpdGlvbmFsTWFwcGluZ3MoY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzLCBhZGRpdGlvbmFsTWFwcGluZ3MpIHtcbiAgICBjb25zdCBmbG9yZW5jZVBhcnNlciA9IEZsb3JlbmNlUGFyc2VyLmZyb21CTkZBbmRNYXBwaW5ncyhibmYsIG1hcHBpbmdzLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMsIGFkZGl0aW9uYWxNYXBwaW5ncyk7XG5cbiAgICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG4gIH1cblxuICBzdGF0aWMgZnJvbUJORkFuZE1hcHBpbmdzKGJuZiwgbWFwcGluZ3MsIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyA9IGRlZmF1bHRDb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMsIGFkZGl0aW9uYWxNYXBwaW5ncyA9IGRlZmF1bHRBZGRpdGlvbmFsTWFwcGluZ3MpIHtcbiAgICBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMgPSBhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyhjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMpOyAgLy8vXG5cbiAgICBtYXBwaW5ncyA9IE9iamVjdC5hc3NpZ24obWFwcGluZ3MsIGFkZGl0aW9uYWxNYXBwaW5ncyk7IC8vL1xuXG4gICAgY29uc3Qgc2lnbmlmaWNhbnRUb2tlbnMgPSBibmZMZXhlci5zaWduaWZpY2FudFRva2Vuc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgICBydWxlc05vZGUgPSBibmZQYXJzZXIucnVsZXNOb2RlRnJvbVNpZ25pZmljYW50VG9rZW5zKHNpZ25pZmljYW50VG9rZW5zKSxcbiAgICAgICAgICBydWxlcyA9IEJORlBhcnNlci5nZW5lcmF0ZVJ1bGVzKHJ1bGVzTm9kZSwgbWFwcGluZ3MpO1xuXG4gICAgcHVzaChydWxlcywgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKTtcblxuICAgIGNvbnN0IGZsb3JlbmNlUGFyc2VyID0gbmV3IEZsb3JlbmNlUGFyc2VyKHJ1bGVzKTtcblxuICAgIHJldHVybiBmbG9yZW5jZVBhcnNlcjtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tTm90aGluZygpIHsgcmV0dXJuIEZsb3JlbmNlUGFyc2VyLmZyb21CTkZBbmRNYXBwaW5ncyhibmYsIG1hcHBpbmdzKTsgfSAvLy9cbn1cblxuT2JqZWN0LmFzc2lnbihGbG9yZW5jZVBhcnNlciwge1xuICBibmY6IGJuZixcbiAgbWFwcGluZ3M6IG1hcHBpbmdzLFxuICBkZWZhdWx0Q3VzdG9tR3JhbW1hclRlcm1CTkY6IGRlZmF1bHRDdXN0b21HcmFtbWFyVGVybUJORixcbiAgZGVmYXVsdEN1c3RvbUdyYW1tYXJFeHByZXNzaW9uQk5GOiBkZWZhdWx0Q3VzdG9tR3JhbW1hckV4cHJlc3Npb25CTkYsXG4gIGRlZmF1bHRDdXN0b21HcmFtbWFyU3RhdGVtZW50Qk5GOiBkZWZhdWx0Q3VzdG9tR3JhbW1hclN0YXRlbWVudEJORixcbiAgZGVmYXVsdEN1c3RvbUdyYW1tYXJNZXRhc3RhdGVtZW50Qk5GOiBkZWZhdWx0Q3VzdG9tR3JhbW1hck1ldGFzdGF0ZW1lbnRCTkZcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZsb3JlbmNlUGFyc2VyO1xuIl19