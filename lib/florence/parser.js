'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var lexers = require('occam-lexers');

var grammar = require('./grammar'),
    mappings = require('./mappings'),
    grammarUtil = require('../util/grammar'),
    CommonParser = require('../common/parser'),
    ExtendedBNFParser = require('../extendedBNF/parser'),
    defaultCustomGrammarsMap = require('./defaultCustomGrammarsMap'),
    defaultAdditionalMappings = require('./defaultAdditionalMappings');

var ExtendedBNFLexer = lexers.ExtendedBNFLexer;


var extendedBNFLexer = ExtendedBNFLexer.fromNothing(),
    extendedBNFParser = ExtendedBNFParser.fromNothing(),
    defaultCustomGrammars = grammarsFromGrammarsMap(defaultCustomGrammarsMap);

var FlorenceParser = function (_CommonParser) {
  _inherits(FlorenceParser, _CommonParser);

  function FlorenceParser() {
    _classCallCheck(this, FlorenceParser);

    return _possibleConstructorReturn(this, (FlorenceParser.__proto__ || Object.getPrototypeOf(FlorenceParser)).apply(this, arguments));
  }

  _createClass(FlorenceParser, null, [{
    key: 'fromCustomGrammarsAdditionalMappings',
    value: function fromCustomGrammarsAdditionalMappings(customGrammars, additionalMappings) {
      var florenceParser = FlorenceParser.fromGrammarAndMappings(grammar, mappings, customGrammars, additionalMappings);

      return florenceParser;
    }
  }, {
    key: 'fromGrammarAndMappings',
    value: function fromGrammarAndMappings(grammar, mappings) {
      var customGrammars = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultCustomGrammars;
      var additionalMappings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultAdditionalMappings;

      mappings = Object.assign(mappings, additionalMappings); ///

      var customProductions = customProductionsFromCustomGrammars(customGrammars, extendedBNFLexer, extendedBNFParser),
          lines = extendedBNFLexer.linesFromGrammar(grammar),
          node = extendedBNFParser.nodeFromLines(lines);

      var productions = ExtendedBNFParser.generateProductions(node, mappings);

      productions = productions.concat(customProductions);

      var florenceParser = new FlorenceParser(productions);

      return florenceParser;
    }
  }]);

  return FlorenceParser;
}(CommonParser);

module.exports = FlorenceParser;

FlorenceParser.grammar = grammar;

FlorenceParser.mappings = mappings;

FlorenceParser.defaultCustomGrammarsMap = defaultCustomGrammarsMap;

function customProductionsFromCustomGrammars(customGrammars, extendedBNFLexer, extendedBNFParser) {
  var customProductions = customGrammars.reduce(function (customProductions, customGrammar) {
    var customGrammarProductions = grammarUtil.productionsFromGrammar(customGrammar, extendedBNFLexer, extendedBNFParser);

    customProductions = customProductions.concat(customGrammarProductions);

    return customProductions;
  }, []);

  return customProductions;
}

function grammarsFromGrammarsMap(grammarsMap) {
  var names = Object.keys(grammarsMap),
      grammars = names.reduce(function (grammars, name) {
    var grammar = grammarsMap[name];

    grammars.push(grammar);

    return grammars;
  }, []);

  return grammars;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9wYXJzZXIuanMiXSwibmFtZXMiOlsibGV4ZXJzIiwicmVxdWlyZSIsImdyYW1tYXIiLCJtYXBwaW5ncyIsImdyYW1tYXJVdGlsIiwiQ29tbW9uUGFyc2VyIiwiRXh0ZW5kZWRCTkZQYXJzZXIiLCJkZWZhdWx0Q3VzdG9tR3JhbW1hcnNNYXAiLCJkZWZhdWx0QWRkaXRpb25hbE1hcHBpbmdzIiwiRXh0ZW5kZWRCTkZMZXhlciIsImV4dGVuZGVkQk5GTGV4ZXIiLCJmcm9tTm90aGluZyIsImV4dGVuZGVkQk5GUGFyc2VyIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJzIiwiZ3JhbW1hcnNGcm9tR3JhbW1hcnNNYXAiLCJGbG9yZW5jZVBhcnNlciIsImN1c3RvbUdyYW1tYXJzIiwiYWRkaXRpb25hbE1hcHBpbmdzIiwiZmxvcmVuY2VQYXJzZXIiLCJmcm9tR3JhbW1hckFuZE1hcHBpbmdzIiwiT2JqZWN0IiwiYXNzaWduIiwiY3VzdG9tUHJvZHVjdGlvbnMiLCJjdXN0b21Qcm9kdWN0aW9uc0Zyb21DdXN0b21HcmFtbWFycyIsImxpbmVzIiwibGluZXNGcm9tR3JhbW1hciIsIm5vZGUiLCJub2RlRnJvbUxpbmVzIiwicHJvZHVjdGlvbnMiLCJnZW5lcmF0ZVByb2R1Y3Rpb25zIiwiY29uY2F0IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlZHVjZSIsImN1c3RvbUdyYW1tYXIiLCJjdXN0b21HcmFtbWFyUHJvZHVjdGlvbnMiLCJwcm9kdWN0aW9uc0Zyb21HcmFtbWFyIiwiZ3JhbW1hcnNNYXAiLCJuYW1lcyIsImtleXMiLCJncmFtbWFycyIsIm5hbWUiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBLElBQU1BLFNBQVNDLFFBQVEsY0FBUixDQUFmOztBQUVBLElBQU1DLFVBQVVELFFBQVEsV0FBUixDQUFoQjtBQUFBLElBQ01FLFdBQVdGLFFBQVEsWUFBUixDQURqQjtBQUFBLElBRU1HLGNBQWNILFFBQVEsaUJB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ZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKTtcblxuY29uc3QgZ3JhbW1hciA9IHJlcXVpcmUoJy4vZ3JhbW1hcicpLFxuICAgICAgbWFwcGluZ3MgPSByZXF1aXJlKCcuL21hcHBpbmdzJyksXG4gICAgICBncmFtbWFyVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwvZ3JhbW1hcicpLFxuICAgICAgQ29tbW9uUGFyc2VyID0gcmVxdWlyZSgnLi4vY29tbW9uL3BhcnNlcicpLFxuICAgICAgRXh0ZW5kZWRCTkZQYXJzZXIgPSByZXF1aXJlKCcuLi9leHRlbmRlZEJORi9wYXJzZXInKSxcbiAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyc01hcCA9IHJlcXVpcmUoJy4vZGVmYXVsdEN1c3RvbUdyYW1tYXJzTWFwJyksXG4gICAgICBkZWZhdWx0QWRkaXRpb25hbE1hcHBpbmdzID0gcmVxdWlyZSgnLi9kZWZhdWx0QWRkaXRpb25hbE1hcHBpbmdzJyk7XG5cbmNvbnN0IHsgRXh0ZW5kZWRCTkZMZXhlciB9ID0gbGV4ZXJzO1xuXG5jb25zdCBleHRlbmRlZEJORkxleGVyID0gRXh0ZW5kZWRCTkZMZXhlci5mcm9tTm90aGluZygpLFxuICAgICAgZXh0ZW5kZWRCTkZQYXJzZXIgPSBFeHRlbmRlZEJORlBhcnNlci5mcm9tTm90aGluZygpLFxuICAgICAgZGVmYXVsdEN1c3RvbUdyYW1tYXJzID0gZ3JhbW1hcnNGcm9tR3JhbW1hcnNNYXAoZGVmYXVsdEN1c3RvbUdyYW1tYXJzTWFwKTtcblxuY2xhc3MgRmxvcmVuY2VQYXJzZXIgZXh0ZW5kcyBDb21tb25QYXJzZXIge1xuICBzdGF0aWMgZnJvbUN1c3RvbUdyYW1tYXJzQWRkaXRpb25hbE1hcHBpbmdzKGN1c3RvbUdyYW1tYXJzLCBhZGRpdGlvbmFsTWFwcGluZ3MpIHtcbiAgICBjb25zdCBmbG9yZW5jZVBhcnNlciA9IEZsb3JlbmNlUGFyc2VyLmZyb21HcmFtbWFyQW5kTWFwcGluZ3MoZ3JhbW1hciwgbWFwcGluZ3MsIGN1c3RvbUdyYW1tYXJzLCBhZGRpdGlvbmFsTWFwcGluZ3MpO1xuICBcbiAgICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG4gIH1cbiAgXG4gIHN0YXRpYyBmcm9tR3JhbW1hckFuZE1hcHBpbmdzKGdyYW1tYXIsIG1hcHBpbmdzLCBjdXN0b21HcmFtbWFycyA9IGRlZmF1bHRDdXN0b21HcmFtbWFycywgYWRkaXRpb25hbE1hcHBpbmdzID0gZGVmYXVsdEFkZGl0aW9uYWxNYXBwaW5ncykge1xuICAgIG1hcHBpbmdzID0gT2JqZWN0LmFzc2lnbihtYXBwaW5ncywgYWRkaXRpb25hbE1hcHBpbmdzKTsgLy8vXG5cbiAgICBjb25zdCBjdXN0b21Qcm9kdWN0aW9ucyA9IGN1c3RvbVByb2R1Y3Rpb25zRnJvbUN1c3RvbUdyYW1tYXJzKGN1c3RvbUdyYW1tYXJzLCBleHRlbmRlZEJORkxleGVyLCBleHRlbmRlZEJORlBhcnNlciksXG4gICAgICAgICAgbGluZXMgPSBleHRlbmRlZEJORkxleGVyLmxpbmVzRnJvbUdyYW1tYXIoZ3JhbW1hciksXG4gICAgICAgICAgbm9kZSA9IGV4dGVuZGVkQk5GUGFyc2VyLm5vZGVGcm9tTGluZXMobGluZXMpO1xuICAgIFxuICAgIGxldCBwcm9kdWN0aW9ucyA9IEV4dGVuZGVkQk5GUGFyc2VyLmdlbmVyYXRlUHJvZHVjdGlvbnMobm9kZSwgbWFwcGluZ3MpO1xuICAgIFxuICAgIHByb2R1Y3Rpb25zID0gcHJvZHVjdGlvbnMuY29uY2F0KGN1c3RvbVByb2R1Y3Rpb25zKTtcbiAgICBcbiAgICBjb25zdCBmbG9yZW5jZVBhcnNlciA9IG5ldyBGbG9yZW5jZVBhcnNlcihwcm9kdWN0aW9ucyk7XG5cbiAgICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGbG9yZW5jZVBhcnNlcjtcblxuRmxvcmVuY2VQYXJzZXIuZ3JhbW1hciA9IGdyYW1tYXI7XG5cbkZsb3JlbmNlUGFyc2VyLm1hcHBpbmdzID0gbWFwcGluZ3M7XG5cbkZsb3JlbmNlUGFyc2VyLmRlZmF1bHRDdXN0b21HcmFtbWFyc01hcCA9IGRlZmF1bHRDdXN0b21HcmFtbWFyc01hcDtcblxuZnVuY3Rpb24gY3VzdG9tUHJvZHVjdGlvbnNGcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMsIGV4dGVuZGVkQk5GTGV4ZXIsIGV4dGVuZGVkQk5GUGFyc2VyKSB7XG4gIGNvbnN0IGN1c3RvbVByb2R1Y3Rpb25zID0gY3VzdG9tR3JhbW1hcnMucmVkdWNlKGZ1bmN0aW9uKGN1c3RvbVByb2R1Y3Rpb25zLCBjdXN0b21HcmFtbWFyKSB7XG4gICAgY29uc3QgY3VzdG9tR3JhbW1hclByb2R1Y3Rpb25zID0gZ3JhbW1hclV0aWwucHJvZHVjdGlvbnNGcm9tR3JhbW1hcihjdXN0b21HcmFtbWFyLCBleHRlbmRlZEJORkxleGVyLCBleHRlbmRlZEJORlBhcnNlcik7XG5cbiAgICBjdXN0b21Qcm9kdWN0aW9ucyA9IGN1c3RvbVByb2R1Y3Rpb25zLmNvbmNhdChjdXN0b21HcmFtbWFyUHJvZHVjdGlvbnMpO1xuICAgIFxuICAgIHJldHVybiBjdXN0b21Qcm9kdWN0aW9ucztcbiAgfSwgW10pO1xuICBcbiAgcmV0dXJuIGN1c3RvbVByb2R1Y3Rpb25zO1xufVxuXG5mdW5jdGlvbiBncmFtbWFyc0Zyb21HcmFtbWFyc01hcChncmFtbWFyc01hcCkge1xuICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKGdyYW1tYXJzTWFwKSxcbiAgICAgICAgZ3JhbW1hcnMgPSBuYW1lcy5yZWR1Y2UoZnVuY3Rpb24oZ3JhbW1hcnMsIG5hbWUpIHtcbiAgICAgICAgICBjb25zdCBncmFtbWFyID0gZ3JhbW1hcnNNYXBbbmFtZV07XG5cbiAgICAgICAgICBncmFtbWFycy5wdXNoKGdyYW1tYXIpO1xuXG4gICAgICAgICAgcmV0dXJuIGdyYW1tYXJzO1xuICAgICAgICB9LCBbXSk7XG5cbiAgcmV0dXJuIGdyYW1tYXJzO1xufSJdfQ==