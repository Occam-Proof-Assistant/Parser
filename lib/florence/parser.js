'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var lexers = require('occam-lexers');

var bnf = require('./bnf'),
    mappings = require('./mappings'),
    BNFParser = require('../bnf/parser'),
    CommonParser = require('../common/parser'),
    arrayUtilities = require('../utilities/array'),
    customGrammarUtilities = require('../utilities/customGrammar'),
    defaultCustomGrammarTermBNF = require('./defaultCustomGrammar/termBNF'),
    defaultCustomGrammarStatementBNF = require('./defaultCustomGrammar/statementBNF'),
    defaultCustomGrammarMetastatementBNF = require('./defaultCustomGrammar/metastatementBNF');

var BNFLexer = lexers.BNFLexer,
    push = arrayUtilities.push,
    rulesFromBNFs = customGrammarUtilities.rulesFromBNFs,
    addQualifiedAndUnqualifiedStatementAndMetastatementRules = customGrammarUtilities.addQualifiedAndUnqualifiedStatementAndMetastatementRules;


var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing(),
    defaultCustomGrammarBNFs = [defaultCustomGrammarTermBNF, defaultCustomGrammarStatementBNF, defaultCustomGrammarMetastatementBNF],
    defaultCustomGrammarRules = rulesFromBNFs(defaultCustomGrammarBNFs),
    defaultCombinedCustomGrammarsRules = defaultCustomGrammarRules,
    ///
defaultAdditionalMappings = {};

var FlorenceParser = function (_CommonParser) {
  _inherits(FlorenceParser, _CommonParser);

  function FlorenceParser() {
    _classCallCheck(this, FlorenceParser);

    return _possibleConstructorReturn(this, (FlorenceParser.__proto__ || Object.getPrototypeOf(FlorenceParser)).apply(this, arguments));
  }

  _createClass(FlorenceParser, null, [{
    key: 'fromCombinedCustomGrammarsRulesAndAdditionalMappings',
    value: function fromCombinedCustomGrammarsRulesAndAdditionalMappings(combinedCustomGrammarsRules, additionalMappings) {
      var florenceParser = FlorenceParser.fromBNFAndMappings(bnf, mappings, combinedCustomGrammarsRules, additionalMappings);

      return florenceParser;
    }
  }, {
    key: 'fromBNFAndMappings',
    value: function fromBNFAndMappings(bnf, mappings) {
      var combinedCustomGrammarsRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultCombinedCustomGrammarsRules;
      var additionalMappings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultAdditionalMappings;

      combinedCustomGrammarsRules = addQualifiedAndUnqualifiedStatementAndMetastatementRules(combinedCustomGrammarsRules); ///

      mappings = Object.assign(mappings, additionalMappings); ///

      var lines = bnfLexer.linesFromBNF(bnf),
          rulesNode = bnfParser.rulesNodeFromLines(lines),
          rules = BNFParser.generateRules(rulesNode, mappings);

      push(rules, combinedCustomGrammarsRules);

      var florenceParser = new FlorenceParser(rules);

      return florenceParser;
    }
  }, {
    key: 'fromNothing',
    value: function fromNothing() {
      return FlorenceParser.fromBNFAndMappings(bnf, mappings);
    } ///

  }]);

  return FlorenceParser;
}(CommonParser);

Object.assign(FlorenceParser, {
  bnf: bnf,
  mappings: mappings,
  defaultCustomGrammarTermBNF: defaultCustomGrammarTermBNF,
  defaultCustomGrammarStatementBNF: defaultCustomGrammarStatementBNF,
  defaultCustomGrammarMetastatementBNF: defaultCustomGrammarMetastatementBNF
});

module.exports = FlorenceParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9mbG9yZW5jZS9wYXJzZXIuanMiXSwibmFtZXMiOlsibGV4ZXJzIiwicmVxdWlyZSIsImJuZiIsIm1hcHBpbmdzIiwiQk5GUGFyc2VyIiwiQ29tbW9uUGFyc2VyIiwiYXJyYXlVdGlsaXRpZXMiLCJjdXN0b21HcmFtbWFyVXRpbGl0aWVzIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJUZXJtQk5GIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJTdGF0ZW1lbnRCTkYiLCJkZWZhdWx0Q3VzdG9tR3JhbW1hck1ldGFzdGF0ZW1lbnRCTkYiLCJCTkZMZXhlciIsInB1c2giLCJydWxlc0Zyb21CTkZzIiwiYWRkUXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMiLCJibmZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJCTkZzIiwiZGVmYXVsdEN1c3RvbUdyYW1tYXJSdWxlcyIsImRlZmF1bHRDb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMiLCJkZWZhdWx0QWRkaXRpb25hbE1hcHBpbmdzIiwiRmxvcmVuY2VQYXJzZXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMiLCJhZGRpdGlvbmFsTWFwcGluZ3MiLCJmbG9yZW5jZVBhcnNlciIsImZyb21CTkZBbmRNYXBwaW5ncyIsIk9iamVjdCIsImFzc2lnbiIsImxpbmVzIiwibGluZXNGcm9tQk5GIiwicnVsZXNOb2RlIiwicnVsZXNOb2RlRnJvbUxpbmVzIiwicnVsZXMiLCJnZW5lcmF0ZVJ1bGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjs7QUFFQSxJQUFNQyxNQUFNRCxRQUFRLE9BQVIsQ0FBWjtBQUFBLElBQ01FLFdBQVdGLFFBQVEsWUFBUixDQURqQjtBQUFBLElBRU1HLFlBQVlILFFBQVEsZUFBUixDQUZsQjtBQUFBLElBR01JLGVBQWVKLFFBQVEsa0JBQVIsQ0FIckI7QUFBQSxJQUlNSyxpQkFBaUJMLFFBQVEsb0JBQVIsQ0FKdkI7QUFBQSxJQUtNTSx5QkFBeUJOLFFBQVEsNEJBQVIsQ0FML0I7QUFBQSxJQU1NTyw4QkFBOEJQLFFBQVEsZ0NBQVIsQ0FOcEM7QUFBQSxJQU9NUSxtQ0FBbUNSLFFBQVEscUNBQVIsQ0FQekM7QUFBQSxJQVFNUyx1Q0FBdUNULFFBQVEseUNBQVIsQ0FSN0M7O0FBVU0sSUFBRVUsUUFBRixHQUFlWCxNQUFmLENBQUVXLFFBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dOLGNBRFgsQ0FDRU0sSUFERjtBQUFBLElBRUVDLGFBRkYsR0FFOEVOLHNCQUY5RSxDQUVFTSxhQUZGO0FBQUEsSUFFaUJDLHdEQUZqQixHQUU4RVAsc0JBRjlFLENBRWlCTyx3REFGakI7OztBQUlOLElBQU1DLFdBQVdKLFNBQVNLLFdBQVQsRUFBakI7QUFBQSxJQUNNQyxZQUFZYixVQUFVWSxXQUFWLEVBRGxCO0FBQUEsSUFFTUUsMkJBQTJCLENBQ3pCViwyQkFEeUIsRUFFekJDLGdDQUZ5QixFQUd6QkMsb0NBSHlCLENBRmpDO0FBQUEsSUFPTVMsNEJBQTRCTixjQUFjSyx3QkFBZCxDQVBsQztBQUFBLElBUU1FLHFDQUFxQ0QseUJBUjNDO0FBQUEsSUFRc0U7QUFDaEVFLDRCQUE0QixFQVRsQzs7SUFXTUMsYzs7Ozs7Ozs7Ozs7eUVBQ3dEQywyQixFQUE2QkMsa0IsRUFBb0I7QUFDM0csVUFBTUMsaUJBQWlCSCxlQUFlSSxrQkFBZixDQUFrQ3hCLEdBQWxDLEVBQXVDQyxRQUF2QyxFQUFpRG9CLDJCQUFqRCxFQUE4RUMsa0JBQTlFLENBQXZCOztBQUVBLGFBQU9DLGNBQVA7QUFDRDs7O3VDQUV5QnZCLEcsRUFBS0MsUSxFQUE0SDtBQUFBLFVBQWxIb0IsMkJBQWtILHVFQUFwRkgsa0NBQW9GO0FBQUEsVUFBaERJLGtCQUFnRCx1RUFBM0JILHlCQUEyQjs7QUFDekpFLG9DQUE4QlQseURBQXlEUywyQkFBekQsQ0FBOUIsQ0FEeUosQ0FDbkM7O0FBRXRIcEIsaUJBQVd3QixPQUFPQyxNQUFQLENBQWN6QixRQUFkLEVBQXdCcUIsa0JBQXhCLENBQVgsQ0FIeUosQ0FHakc7O0FBRXhELFVBQU1LLFFBQVFkLFNBQVNlLFlBQVQsQ0FBc0I1QixHQUF0QixDQUFkO0FBQUEsVUFDTTZCLFlBQVlkLFVBQVVlLGtCQUFWLENBQTZCSCxLQUE3QixDQURsQjtBQUFBLFVBRU1JLFFBQVE3QixVQUFVOEIsYUFBVixDQUF3QkgsU0FBeEIsRUFBbUM1QixRQUFuQyxDQUZkOztBQUlBUyxXQUFLcUIsS0FBTCxFQUFZViwyQkFBWjs7QUFFQSxVQUFNRSxpQkFBaUIsSUFBSUgsY0FBSixDQUFtQlcsS0FBbkIsQ0FBdkI7O0FBRUEsYUFBT1IsY0FBUDtBQUNEOzs7a0NBRW9CO0FBQUUsYUFBT0gsZUFBZUksa0JBQWYsQ0FBa0N4QixHQUFsQyxFQUF1Q0MsUUFBdkMsQ0FBUDtBQUEwRCxLLENBQUM7Ozs7O0VBdkJ2REUsWTs7QUEwQjdCc0IsT0FBT0MsTUFBUCxDQUFjTixjQUFkLEVBQThCO0FBQzVCcEIsT0FBS0EsR0FEdUI7QUFFNUJDLFlBQVVBLFFBRmtCO0FBRzVCSywrQkFBNkJBLDJCQUhEO0FBSTVCQyxvQ0FBa0NBLGdDQUpOO0FBSzVCQyx3Q0FBc0NBO0FBTFYsQ0FBOUI7O0FBUUF5QixPQUFPQyxPQUFQLEdBQWlCZCxjQUFqQiIsImZpbGUiOiJwYXJzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGxleGVycyA9IHJlcXVpcmUoJ29jY2FtLWxleGVycycpO1xuXG5jb25zdCBibmYgPSByZXF1aXJlKCcuL2JuZicpLFxuICAgICAgbWFwcGluZ3MgPSByZXF1aXJlKCcuL21hcHBpbmdzJyksXG4gICAgICBCTkZQYXJzZXIgPSByZXF1aXJlKCcuLi9ibmYvcGFyc2VyJyksXG4gICAgICBDb21tb25QYXJzZXIgPSByZXF1aXJlKCcuLi9jb21tb24vcGFyc2VyJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgY3VzdG9tR3JhbW1hclV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9jdXN0b21HcmFtbWFyJyksXG4gICAgICBkZWZhdWx0Q3VzdG9tR3JhbW1hclRlcm1CTkYgPSByZXF1aXJlKCcuL2RlZmF1bHRDdXN0b21HcmFtbWFyL3Rlcm1CTkYnKSxcbiAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyU3RhdGVtZW50Qk5GID0gcmVxdWlyZSgnLi9kZWZhdWx0Q3VzdG9tR3JhbW1hci9zdGF0ZW1lbnRCTkYnKSxcbiAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyTWV0YXN0YXRlbWVudEJORiA9IHJlcXVpcmUoJy4vZGVmYXVsdEN1c3RvbUdyYW1tYXIvbWV0YXN0YXRlbWVudEJORicpO1xuXG5jb25zdCB7IEJORkxleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IHB1c2ggfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBydWxlc0Zyb21CTkZzLCBhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyB9ID0gY3VzdG9tR3JhbW1hclV0aWxpdGllcztcblxuY29uc3QgYm5mTGV4ZXIgPSBCTkZMZXhlci5mcm9tTm90aGluZygpLFxuICAgICAgYm5mUGFyc2VyID0gQk5GUGFyc2VyLmZyb21Ob3RoaW5nKCksXG4gICAgICBkZWZhdWx0Q3VzdG9tR3JhbW1hckJORnMgPSBbXG4gICAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyVGVybUJORiwgXG4gICAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyU3RhdGVtZW50Qk5GLCBcbiAgICAgICAgZGVmYXVsdEN1c3RvbUdyYW1tYXJNZXRhc3RhdGVtZW50Qk5GXG4gICAgICBdLFxuICAgICAgZGVmYXVsdEN1c3RvbUdyYW1tYXJSdWxlcyA9IHJ1bGVzRnJvbUJORnMoZGVmYXVsdEN1c3RvbUdyYW1tYXJCTkZzKSxcbiAgICAgIGRlZmF1bHRDb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMgPSBkZWZhdWx0Q3VzdG9tR3JhbW1hclJ1bGVzLCAvLy9cbiAgICAgIGRlZmF1bHRBZGRpdGlvbmFsTWFwcGluZ3MgPSB7fTtcblxuY2xhc3MgRmxvcmVuY2VQYXJzZXIgZXh0ZW5kcyBDb21tb25QYXJzZXIge1xuICBzdGF0aWMgZnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlc0FuZEFkZGl0aW9uYWxNYXBwaW5ncyhjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMsIGFkZGl0aW9uYWxNYXBwaW5ncykge1xuICAgIGNvbnN0IGZsb3JlbmNlUGFyc2VyID0gRmxvcmVuY2VQYXJzZXIuZnJvbUJORkFuZE1hcHBpbmdzKGJuZiwgbWFwcGluZ3MsIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcywgYWRkaXRpb25hbE1hcHBpbmdzKTtcblxuICAgIHJldHVybiBmbG9yZW5jZVBhcnNlcjtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tQk5GQW5kTWFwcGluZ3MoYm5mLCBtYXBwaW5ncywgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzID0gZGVmYXVsdENvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcywgYWRkaXRpb25hbE1hcHBpbmdzID0gZGVmYXVsdEFkZGl0aW9uYWxNYXBwaW5ncykge1xuICAgIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyA9IGFkZFF1YWxpZmllZEFuZFVucXVhbGlmaWVkU3RhdGVtZW50QW5kTWV0YXN0YXRlbWVudFJ1bGVzKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyk7ICAvLy9cblxuICAgIG1hcHBpbmdzID0gT2JqZWN0LmFzc2lnbihtYXBwaW5ncywgYWRkaXRpb25hbE1hcHBpbmdzKTsgLy8vXG5cbiAgICBjb25zdCBsaW5lcyA9IGJuZkxleGVyLmxpbmVzRnJvbUJORihibmYpLFxuICAgICAgICAgIHJ1bGVzTm9kZSA9IGJuZlBhcnNlci5ydWxlc05vZGVGcm9tTGluZXMobGluZXMpLFxuICAgICAgICAgIHJ1bGVzID0gQk5GUGFyc2VyLmdlbmVyYXRlUnVsZXMocnVsZXNOb2RlLCBtYXBwaW5ncyk7XG5cbiAgICBwdXNoKHJ1bGVzLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMpO1xuXG4gICAgY29uc3QgZmxvcmVuY2VQYXJzZXIgPSBuZXcgRmxvcmVuY2VQYXJzZXIocnVsZXMpO1xuXG4gICAgcmV0dXJuIGZsb3JlbmNlUGFyc2VyO1xuICB9XG5cbiAgc3RhdGljIGZyb21Ob3RoaW5nKCkgeyByZXR1cm4gRmxvcmVuY2VQYXJzZXIuZnJvbUJORkFuZE1hcHBpbmdzKGJuZiwgbWFwcGluZ3MpOyB9IC8vL1xufVxuXG5PYmplY3QuYXNzaWduKEZsb3JlbmNlUGFyc2VyLCB7XG4gIGJuZjogYm5mLFxuICBtYXBwaW5nczogbWFwcGluZ3MsXG4gIGRlZmF1bHRDdXN0b21HcmFtbWFyVGVybUJORjogZGVmYXVsdEN1c3RvbUdyYW1tYXJUZXJtQk5GLFxuICBkZWZhdWx0Q3VzdG9tR3JhbW1hclN0YXRlbWVudEJORjogZGVmYXVsdEN1c3RvbUdyYW1tYXJTdGF0ZW1lbnRCTkYsXG4gIGRlZmF1bHRDdXN0b21HcmFtbWFyTWV0YXN0YXRlbWVudEJORjogZGVmYXVsdEN1c3RvbUdyYW1tYXJNZXRhc3RhdGVtZW50Qk5GXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGbG9yZW5jZVBhcnNlcjtcbiJdfQ==