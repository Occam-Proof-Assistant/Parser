'use strict';

var metastatement = '\n\n     proofAssertion                       ::=   context "\u22A2" labelMetastatementPair ;\n     \n     contextDefinition                    ::=   context "=" ( context | labelMetastatementPair ) ( "," ( context | labelMetastatementPair ) )* ;\n\n     labelMetastatementPair               ::=   label "::" metastatement ;\n\n     subproof                             ::=   supposition "..." metastatement ;\n\n     supposition                          ::=   "[" metastatement "]" ;\n\n\n\n     metastatement                        ::=   proofAssertion\n           \n                                            |   contextDefinition\n           \n                                            |   subproof\n                                            \n                                            |   metavariable\n\n                                            ;\n      \n';

var statement = '\n\n     typeAssertion                        ::=   expression ":" typeName ;\n\n     equality                             ::=   expression "=" expression ;\n\n     expression                           ::=   term ;\n\n\n\n     statement                            ::=   typeAssertion \n                                                  \n                                            |   equality \n                                                  \n                                            |   expression\n                                            \n                                            ;\n\n';

var term = '\n\n     term                                 ::=   compoundTerm \n     \n                                            |   variable\n                                            \n                                            ;\n\n';

var defaultCustomGrammarBNFMap = {
      metastatement: metastatement,
      statement: statement,
      term: term
};

module.exports = defaultCustomGrammarBNFMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9mbG9yZW5jZS9kZWZhdWx0Q3VzdG9tR3JhbW1hci9ibmZNYXAuanMiXSwibmFtZXMiOlsibWV0YXN0YXRlbWVudCIsInN0YXRlbWVudCIsInRlcm0iLCJkZWZhdWx0Q3VzdG9tR3JhbW1hckJORk1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLDAzQkFBTjs7QUEwQkEsSUFBTUMsMG1CQUFOOztBQW9CQSxJQUFNQyw0T0FBTjs7QUFVQSxJQUFNQyw2QkFBNkI7QUFDakNILHFCQUFlQSxhQURrQjtBQUVqQ0MsaUJBQVdBLFNBRnNCO0FBR2pDQyxZQUFNQTtBQUgyQixDQUFuQzs7QUFNQUUsT0FBT0MsT0FBUCxHQUFpQkYsMEJBQWpCIiwiZmlsZSI6ImJuZk1hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbWV0YXN0YXRlbWVudCA9IGBcblxuICAgICBwcm9vZkFzc2VydGlvbiAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29udGV4dCBcIuKKolwiIGxhYmVsTWV0YXN0YXRlbWVudFBhaXIgO1xuICAgICBcbiAgICAgY29udGV4dERlZmluaXRpb24gICAgICAgICAgICAgICAgICAgIDo6PSAgIGNvbnRleHQgXCI9XCIgKCBjb250ZXh0IHwgbGFiZWxNZXRhc3RhdGVtZW50UGFpciApICggXCIsXCIgKCBjb250ZXh0IHwgbGFiZWxNZXRhc3RhdGVtZW50UGFpciApICkqIDtcblxuICAgICBsYWJlbE1ldGFzdGF0ZW1lbnRQYWlyICAgICAgICAgICAgICAgOjo9ICAgbGFiZWwgXCI6OlwiIG1ldGFzdGF0ZW1lbnQgO1xuXG4gICAgIHN1YnByb29mICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBzdXBwb3NpdGlvbiBcIi4uLlwiIG1ldGFzdGF0ZW1lbnQgO1xuXG4gICAgIHN1cHBvc2l0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBcIltcIiBtZXRhc3RhdGVtZW50IFwiXVwiIDtcblxuXG5cbiAgICAgbWV0YXN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHByb29mQXNzZXJ0aW9uXG4gICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgY29udGV4dERlZmluaXRpb25cbiAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICBzdWJwcm9vZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIG1ldGF2YXJpYWJsZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcbiAgICAgIFxuYDtcblxuY29uc3Qgc3RhdGVtZW50ID0gYFxuXG4gICAgIHR5cGVBc3NlcnRpb24gICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBleHByZXNzaW9uIFwiOlwiIHR5cGVOYW1lIDtcblxuICAgICBlcXVhbGl0eSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgZXhwcmVzc2lvbiBcIj1cIiBleHByZXNzaW9uIDtcblxuICAgICBleHByZXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgdGVybSA7XG5cblxuXG4gICAgIHN0YXRlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB0eXBlQXNzZXJ0aW9uIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIGVxdWFsaXR5IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIGV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcblxuYDtcblxuY29uc3QgdGVybSA9IGBcblxuICAgICB0ZXJtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29tcG91bmRUZXJtIFxuICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIHZhcmlhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XG5cbmA7XG5cbmNvbnN0IGRlZmF1bHRDdXN0b21HcmFtbWFyQk5GTWFwID0ge1xuICBtZXRhc3RhdGVtZW50OiBtZXRhc3RhdGVtZW50LFxuICBzdGF0ZW1lbnQ6IHN0YXRlbWVudCxcbiAgdGVybTogdGVybVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0Q3VzdG9tR3JhbW1hckJORk1hcDtcbiJdfQ==