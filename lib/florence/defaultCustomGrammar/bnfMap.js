'use strict';

var metastatement = '\n\n     proofAssertion                       ::=   context "\u22A2" metastatement "::" metastatement ;\n\n     metaEquality                         ::=   metastatement "=>" metastatement ;\n\n     subproof                             ::=   supposition "..." metastatement ;\n\n     supposition                          ::=   "[" metastatement "]" ;\n\n\n\n     metastatement                        ::=   proofAssertion\n           \n                                            |   metaEquality\n           \n                                            |   subproof\n                                            \n                                            |   metavariable\n\n                                            ;\n      \n';

var statement = '\n\n     typeAssertion                        ::=   expression ":" typeName ;\n\n     equality                             ::=   expression "=" expression ;\n\n     expression                           ::=   term ;\n\n\n\n     statement                            ::=   typeAssertion \n                                                  \n                                            |   equality \n                                                  \n                                            |   expression\n                                            \n                                            ;\n\n';

var term = '\n\n     term                                 ::=   compoundTerm \n     \n                                            |   variable\n                                            \n                                            ;\n\n';

var defaultCustomGrammarBNFMap = {
      metastatement: metastatement,
      statement: statement,
      term: term
};

module.exports = defaultCustomGrammarBNFMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9mbG9yZW5jZS9kZWZhdWx0Q3VzdG9tR3JhbW1hci9ibmZNYXAuanMiXSwibmFtZXMiOlsibWV0YXN0YXRlbWVudCIsInN0YXRlbWVudCIsInRlcm0iLCJkZWZhdWx0Q3VzdG9tR3JhbW1hckJORk1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLDh1QkFBTjs7QUF3QkEsSUFBTUMsMG1CQUFOOztBQW9CQSxJQUFNQyw0T0FBTjs7QUFVQSxJQUFNQyw2QkFBNkI7QUFDakNILHFCQUFlQSxhQURrQjtBQUVqQ0MsaUJBQVdBLFNBRnNCO0FBR2pDQyxZQUFNQTtBQUgyQixDQUFuQzs7QUFNQUUsT0FBT0MsT0FBUCxHQUFpQkYsMEJBQWpCIiwiZmlsZSI6ImJuZk1hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbWV0YXN0YXRlbWVudCA9IGBcblxuICAgICBwcm9vZkFzc2VydGlvbiAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgY29udGV4dCBcIuKKolwiIG1ldGFzdGF0ZW1lbnQgXCI6OlwiIG1ldGFzdGF0ZW1lbnQgO1xuXG4gICAgIG1ldGFFcXVhbGl0eSAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBtZXRhc3RhdGVtZW50IFwiPT5cIiBtZXRhc3RhdGVtZW50IDtcblxuICAgICBzdWJwcm9vZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgc3VwcG9zaXRpb24gXCIuLi5cIiBtZXRhc3RhdGVtZW50IDtcblxuICAgICBzdXBwb3NpdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgOjo9ICAgXCJbXCIgbWV0YXN0YXRlbWVudCBcIl1cIiA7XG5cblxuXG4gICAgIG1ldGFzdGF0ZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBwcm9vZkFzc2VydGlvblxuICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIG1ldGFFcXVhbGl0eVxuICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIHN1YnByb29mXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgbWV0YXZhcmlhYmxlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgXG5gO1xuXG5jb25zdCBzdGF0ZW1lbnQgPSBgXG5cbiAgICAgdHlwZUFzc2VydGlvbiAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIGV4cHJlc3Npb24gXCI6XCIgdHlwZU5hbWUgO1xuXG4gICAgIGVxdWFsaXR5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBleHByZXNzaW9uIFwiPVwiIGV4cHJlc3Npb24gO1xuXG4gICAgIGV4cHJlc3Npb24gICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICB0ZXJtIDtcblxuXG5cbiAgICAgc3RhdGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6PSAgIHR5cGVBc3NlcnRpb24gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgZXF1YWxpdHkgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xuXG5gO1xuXG5jb25zdCB0ZXJtID0gYFxuXG4gICAgIHRlcm0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Oj0gICBjb21wb3VuZFRlcm0gXG4gICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgdmFyaWFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcblxuYDtcblxuY29uc3QgZGVmYXVsdEN1c3RvbUdyYW1tYXJCTkZNYXAgPSB7XG4gIG1ldGFzdGF0ZW1lbnQ6IG1ldGFzdGF0ZW1lbnQsXG4gIHN0YXRlbWVudDogc3RhdGVtZW50LFxuICB0ZXJtOiB0ZXJtXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRDdXN0b21HcmFtbWFyQk5GTWFwO1xuIl19