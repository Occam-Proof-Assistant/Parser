"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesAsString = rulesAsString;
exports.ruleMapFromRules = ruleMapFromRules;
exports.startRuleFromRules = startRuleFromRules;
exports.default = void 0;
var _array = require("../utilities/array");
var _constants = require("../constants");
function rulesAsString(rules, multiLine) {
    var maximumRuleNameLength1 = rules.reduce(function(maximumRuleNameLength, rule) {
        var ruleName = rule.getName(), ruleNameLength = ruleName.length;
        maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
        return maximumRuleNameLength;
    }, 0), rulesString1 = rules.reduce(function(rulesString, rule) {
        var ruleString = rule.asString(maximumRuleNameLength1, multiLine);
        rulesString += ruleString;
        return rulesString;
    }, _constants.EMPTY_STRING).replace(/^\n\n/, _constants.EMPTY_STRING);
    return rulesString1;
}
function ruleMapFromRules(rules) {
    var ruleMap = {};
    rules.forEach(function(rule) {
        var ruleName = rule.getName();
        ruleMap[ruleName] = rule;
    });
    return ruleMap;
}
function startRuleFromRules(rules) {
    var firstRule = (0, _array).first(rules), startRule = firstRule; ///
    return startRule;
}
var _default = {
    rulesAsString: rulesAsString,
    ruleMapFromRules: ruleMapFromRules,
    startRuleFromRules: startRuleFromRules
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGZpcnN0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0FzU3RyaW5nKHJ1bGVzLCBtdWx0aUxpbmUpIHtcbiAgY29uc3QgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gcnVsZXMucmVkdWNlKChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGUpID0+IHtcbiAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgICAgICAgcnVsZU5hbWVMZW5ndGggPSBydWxlTmFtZS5sZW5ndGg7XG5cbiAgICAgICAgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gTWF0aC5tYXgobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBydWxlTmFtZUxlbmd0aCk7XG5cbiAgICAgICAgcmV0dXJuIG1heGltdW1SdWxlTmFtZUxlbmd0aDtcbiAgICAgIH0sIDApLFxuICAgICAgcnVsZXNTdHJpbmcgPSBydWxlcy5yZWR1Y2UoKHJ1bGVzU3RyaW5nLCBydWxlKSA9PiB7XG4gICAgICAgIGNvbnN0IHJ1bGVTdHJpbmcgPSBydWxlLmFzU3RyaW5nKG1heGltdW1SdWxlTmFtZUxlbmd0aCwgbXVsdGlMaW5lKTtcblxuICAgICAgICBydWxlc1N0cmluZyArPSBydWxlU3RyaW5nO1xuXG4gICAgICAgIHJldHVybiBydWxlc1N0cmluZztcbiAgICAgIH0sIEVNUFRZX1NUUklORykucmVwbGFjZSgvXlxcblxcbi8sIEVNUFRZX1NUUklORyk7XG5cbiAgcmV0dXJuIHJ1bGVzU3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZU1hcEZyb21SdWxlcyhydWxlcykge1xuICBjb25zdCBydWxlTWFwID0ge307XG5cbiAgcnVsZXMuZm9yRWFjaCgocnVsZSkgPT4ge1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCk7XG5cbiAgICBydWxlTWFwW3J1bGVOYW1lXSA9IHJ1bGU7XG4gIH0pO1xuXG4gIHJldHVybiBydWxlTWFwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRSdWxlRnJvbVJ1bGVzKHJ1bGVzKSB7XG4gIGNvbnN0IGZpcnN0UnVsZSA9IGZpcnN0KHJ1bGVzKSxcbiAgICAgIHN0YXJ0UnVsZSA9IGZpcnN0UnVsZTsgIC8vL1xuXG4gIHJldHVybiBzdGFydFJ1bGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcnVsZXNBc1N0cmluZyxcbiAgcnVsZU1hcEZyb21SdWxlcyxcbiAgc3RhcnRSdWxlRnJvbVJ1bGVzXG59O1xuIl0sIm5hbWVzIjpbInJ1bGVzQXNTdHJpbmciLCJydWxlTWFwRnJvbVJ1bGVzIiwic3RhcnRSdWxlRnJvbVJ1bGVzIiwicnVsZXMiLCJtdWx0aUxpbmUiLCJtYXhpbXVtUnVsZU5hbWVMZW5ndGgiLCJyZWR1Y2UiLCJydWxlIiwicnVsZU5hbWUiLCJnZXROYW1lIiwicnVsZU5hbWVMZW5ndGgiLCJsZW5ndGgiLCJNYXRoIiwibWF4IiwicnVsZXNTdHJpbmciLCJydWxlU3RyaW5nIiwiYXNTdHJpbmciLCJFTVBUWV9TVFJJTkciLCJyZXBsYWNlIiwicnVsZU1hcCIsImZvckVhY2giLCJmaXJzdFJ1bGUiLCJmaXJzdCIsInN0YXJ0UnVsZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBTUdBLGFBQWEsR0FBYkEsYUFBYTtRQW9CYkMsZ0JBQWdCLEdBQWhCQSxnQkFBZ0I7UUFZaEJDLGtCQUFrQixHQUFsQkEsa0JBQWtCOztBQXBDWixJQUFBLE1BQW9CLFdBQXBCLG9CQUFvQixDQUFBO0FBRWIsSUFBQSxVQUFjLFdBQWQsY0FBYyxDQUFBO0FBRXBDLFNBQVNGLGFBQWEsQ0FBQ0csS0FBSyxFQUFFQyxTQUFTLEVBQUU7SUFDOUMsSUFBTUMsc0JBQXFCLEdBQUdGLEtBQUssQ0FBQ0csTUFBTSxDQUFDLFNBQUNELHFCQUFxQixFQUFFRSxJQUFJLEVBQUs7UUFDdEUsSUFBTUMsUUFBUSxHQUFHRCxJQUFJLENBQUNFLE9BQU8sRUFBRSxFQUN6QkMsY0FBYyxHQUFHRixRQUFRLENBQUNHLE1BQU0sQUFBQztRQUV2Q04scUJBQXFCLEdBQUdPLElBQUksQ0FBQ0MsR0FBRyxDQUFDUixxQkFBcUIsRUFBRUssY0FBYyxDQUFDLENBQUM7UUFFeEUsT0FBT0wscUJBQXFCLENBQUM7S0FDOUIsRUFBRSxDQUFDLENBQUMsRUFDTFMsWUFBVyxHQUFHWCxLQUFLLENBQUNHLE1BQU0sQ0FBQyxTQUFDUSxXQUFXLEVBQUVQLElBQUksRUFBSztRQUNoRCxJQUFNUSxVQUFVLEdBQUdSLElBQUksQ0FBQ1MsUUFBUSxDQUFDWCxzQkFBcUIsRUFBRUQsU0FBUyxDQUFDLEFBQUM7UUFFbkVVLFdBQVcsSUFBSUMsVUFBVSxDQUFDO1FBRTFCLE9BQU9ELFdBQVcsQ0FBQztLQUNwQixFQUFFRyxVQUFZLGFBQUEsQ0FBQyxDQUFDQyxPQUFPLFVBQVVELFVBQVksYUFBQSxDQUFDLEFBQUM7SUFFcEQsT0FBT0gsWUFBVyxDQUFDO0NBQ3BCO0FBRU0sU0FBU2IsZ0JBQWdCLENBQUNFLEtBQUssRUFBRTtJQUN0QyxJQUFNZ0IsT0FBTyxHQUFHLEVBQUUsQUFBQztJQUVuQmhCLEtBQUssQ0FBQ2lCLE9BQU8sQ0FBQyxTQUFDYixJQUFJLEVBQUs7UUFDdEIsSUFBTUMsUUFBUSxHQUFHRCxJQUFJLENBQUNFLE9BQU8sRUFBRSxBQUFDO1FBRWhDVSxPQUFPLENBQUNYLFFBQVEsQ0FBQyxHQUFHRCxJQUFJLENBQUM7S0FDMUIsQ0FBQyxDQUFDO0lBRUgsT0FBT1ksT0FBTyxDQUFDO0NBQ2hCO0FBRU0sU0FBU2pCLGtCQUFrQixDQUFDQyxLQUFLLEVBQUU7SUFDeEMsSUFBTWtCLFNBQVMsR0FBR0MsQ0FBQUEsR0FBQUEsTUFBSyxBQUFPLENBQUEsTUFBUCxDQUFDbkIsS0FBSyxDQUFDLEVBQzFCb0IsU0FBUyxHQUFHRixTQUFTLEFBQUMsRUFBRSxHQUFHO0lBRS9CLE9BQU9FLFNBQVMsQ0FBQztDQUNsQjtlQUVjO0lBQ2J2QixhQUFhLEVBQWJBLGFBQWE7SUFDYkMsZ0JBQWdCLEVBQWhCQSxnQkFBZ0I7SUFDaEJDLGtCQUFrQixFQUFsQkEsa0JBQWtCO0NBQ25CIn0=