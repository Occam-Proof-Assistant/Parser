'use strict';

var lexers = require('occam-lexers'),
    necessary = require('necessary');

var BNFParser = require('../bnf/parser'),
    arrayUtilities = require('../utilities/array'),
    parserUtilities = require('../utilities/parser'),
    QualifiedCustomGrammarRule = require('../florence/rule/customGrammar/qualified'),
    UnqualifiedCustomGrammarRule = require('../florence/rule/customGrammar/unqualified');

var BNFLexer = lexers.BNFLexer,
    push = arrayUtilities.push,
    findRuleByName = parserUtilities.findRuleByName,
    add = push; ///

var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing(),
    statementRuleName = 'statement',
    metastatementRuleName = 'metastatement',
    qualifiedStatementRuleName = 'qualifiedStatement',
    qualifiedMetastatementRuleName = 'qualifiedMetastatement',
    unqualifiedStatementRuleName = 'unqualifiedStatement',
    unqualifiedMetastatementRuleName = 'unqualifiedMetastatement';

function rulesFromBNFs(bnfs) {
      var bnf = bnfs.join(''),
          lines = bnfLexer.linesFromBNF(bnf),
          rulesNode = bnfParser.rulesNodeFromLines(lines),
          rules = BNFParser.generateRules(rulesNode);

      return rules;
}

function addQualifiedAndUnqualifiedStatementAndMetastatementRules(combinedCustomGrammarsRules) {
      combinedCustomGrammarsRules = combinedCustomGrammarsRules.slice(); ///

      var statementCustomGrammarRule = findRuleByName(statementRuleName, combinedCustomGrammarsRules),
          metastatementCustomGrammarRule = findRuleByName(metastatementRuleName, combinedCustomGrammarsRules),
          qualifiedStatementCustomGrammarRule = new QualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(qualifiedStatementRuleName, statementCustomGrammarRule),
          unqualifiedStatementCustomGrammarRule = new UnqualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(unqualifiedStatementRuleName, statementCustomGrammarRule),
          qualifiedMetastatementCustomGrammarRule = new QualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(qualifiedMetastatementRuleName, metastatementCustomGrammarRule),
          unqualifiedMetastatementCustomGrammarRule = new UnqualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(unqualifiedMetastatementRuleName, metastatementCustomGrammarRule),
          qualifiedAndUnqualifiedStatementAndMetastatementRules = [qualifiedStatementCustomGrammarRule, unqualifiedStatementCustomGrammarRule, qualifiedMetastatementCustomGrammarRule, unqualifiedMetastatementCustomGrammarRule];

      add(combinedCustomGrammarsRules, qualifiedAndUnqualifiedStatementAndMetastatementRules);

      return combinedCustomGrammarsRules;
}

module.exports = {
      rulesFromBNFs: rulesFromBNFs,
      addQualifiedAndUnqualifiedStatementAndMetastatementRules: addQualifiedAndUnqualifiedStatementAndMetastatementRules
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvY3VzdG9tR3JhbW1hci5qcyJdLCJuYW1lcyI6WyJsZXhlcnMiLCJyZXF1aXJlIiwibmVjZXNzYXJ5IiwiQk5GUGFyc2VyIiwiYXJyYXlVdGlsaXRpZXMiLCJwYXJzZXJVdGlsaXRpZXMiLCJRdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZSIsIlVucXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUiLCJCTkZMZXhlciIsInB1c2giLCJmaW5kUnVsZUJ5TmFtZSIsImFkZCIsImJuZkxleGVyIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXIiLCJzdGF0ZW1lbnRSdWxlTmFtZSIsIm1ldGFzdGF0ZW1lbnRSdWxlTmFtZSIsInF1YWxpZmllZFN0YXRlbWVudFJ1bGVOYW1lIiwicXVhbGlmaWVkTWV0YXN0YXRlbWVudFJ1bGVOYW1lIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFJ1bGVOYW1lIiwicnVsZXNGcm9tQk5GcyIsImJuZnMiLCJibmYiLCJqb2luIiwibGluZXMiLCJsaW5lc0Zyb21CTkYiLCJydWxlc05vZGUiLCJydWxlc05vZGVGcm9tTGluZXMiLCJydWxlcyIsImdlbmVyYXRlUnVsZXMiLCJhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyIsInNsaWNlIiwic3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJtZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJxdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsImZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlIiwicXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjtBQUFBLElBQ01DLFlBQVlELFFBQVEsV0FBUixDQURsQjs7QUFHQSxJQUFNRSxZQUFZRixRQUFRLGVBQVIsQ0FBbEI7QUFBQSxJQUNNRyxpQkFBaUJILFFBQVEsb0JBQVIsQ0FEdkI7QUFBQSxJQUVNSSxrQkFBa0JKLFFBQVEscUJBQVIsQ0FGeEI7QUFBQSxJQUdNSyw2QkFBNkJMLFFBQVEsMENBQVIsQ0FIbkM7QUFBQSxJQUlNTSwrQkFBK0JOLFFBQVEsNENBQVIsQ0FKckM7O0FBTU0sSUFBRU8sUUFBRixHQUFlUixNQUFmLENBQUVRLFFBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dMLGNBRFgsQ0FDRUssSUFERjtBQUFBLElBRUVDLGNBRkYsR0FFcUJMLGVBRnJCLENBRUVLLGNBRkY7QUFBQSxJQUdBQyxHQUhBLEdBR01GLElBSE4sQyxDQUdZOztBQUVsQixJQUFNRyxXQUFXSixTQUFTSyxXQUFULEVBQWpCO0FBQUEsSUFDTUMsWUFBWVgsVUFBVVUsV0FBVixFQURsQjtBQUFBLElBRU1FLG9CQUFvQixXQUYxQjtBQUFBLElBR01DLHdCQUF3QixlQUg5QjtBQUFBLElBSU1DLDZCQUE2QixvQkFKbkM7QUFBQSxJQUtNQyxpQ0FBaUMsd0JBTHZDO0FBQUEsSUFNTUMsK0JBQStCLHNCQU5yQztBQUFBLElBT01DLG1DQUFtQywwQkFQekM7O0FBU0EsU0FBU0MsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkI7QUFDM0IsVUFBTUMsTUFBTUQsS0FBS0UsSUFBTCxDQUFVLEVBQVYsQ0FBWjtBQUFBLFVBQ01DLFFBQVFiLFNBQVNjLFlBQVQsQ0FBc0JILEdBQXRCLENBRGQ7QUFBQSxVQUVNSSxZQUFZYixVQUFVYyxrQkFBVixDQUE2QkgsS0FBN0IsQ0FGbEI7QUFBQSxVQUdNSSxRQUFRMUIsVUFBVTJCLGFBQVYsQ0FBd0JILFNBQXhCLENBSGQ7O0FBS0EsYUFBT0UsS0FBUDtBQUNEOztBQUVELFNBQVNFLHdEQUFULENBQWtFQywyQkFBbEUsRUFBK0Y7QUFDN0ZBLG9DQUE4QkEsNEJBQTRCQyxLQUE1QixFQUE5QixDQUQ2RixDQUN6Qjs7QUFFcEUsVUFBTUMsNkJBQTZCeEIsZUFBZUssaUJBQWYsRUFBa0NpQiwyQkFBbEMsQ0FBbkM7QUFBQSxVQUNNRyxpQ0FBaUN6QixlQUFlTSxxQkFBZixFQUFzQ2dCLDJCQUF0QyxDQUR2QztBQUFBLFVBRU1JLHNDQUFzQyxJQUFJOUIsMkJBQTJCK0IsZ0NBQS9CLENBQWdFcEIsMEJBQWhFLEVBQTRGaUIsMEJBQTVGLENBRjVDO0FBQUEsVUFHTUksd0NBQXdDLElBQUkvQiw2QkFBNkI4QixnQ0FBakMsQ0FBa0VsQiw0QkFBbEUsRUFBZ0dlLDBCQUFoRyxDQUg5QztBQUFBLFVBSU1LLDBDQUEwQyxJQUFJakMsMkJBQTJCK0IsZ0NBQS9CLENBQWdFbkIsOEJBQWhFLEVBQWdHaUIsOEJBQWhHLENBSmhEO0FBQUEsVUFLTUssNENBQTRDLElBQUlqQyw2QkFBNkI4QixnQ0FBakMsQ0FBa0VqQixnQ0FBbEUsRUFBb0dlLDhCQUFwRyxDQUxsRDtBQUFBLFVBTU1NLHdEQUF3RCxDQUN0REwsbUNBRHNELEVBRXRERSxxQ0FGc0QsRUFHdERDLHVDQUhzRCxFQUl0REMseUNBSnNELENBTjlEOztBQWFBN0IsVUFBSXFCLDJCQUFKLEVBQWlDUyxxREFBakM7O0FBRUEsYUFBT1QsMkJBQVA7QUFDRDs7QUFFRFUsT0FBT0MsT0FBUCxHQUFpQjtBQUNmdEIscUJBQWVBLGFBREE7QUFFZlUsZ0VBQTBEQTtBQUYzQyxDQUFqQiIsImZpbGUiOiJjdXN0b21HcmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKSxcbiAgICAgIG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBCTkZQYXJzZXIgPSByZXF1aXJlKCcuLi9ibmYvcGFyc2VyJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgcGFyc2VyVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL3BhcnNlcicpLFxuICAgICAgUXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUgPSByZXF1aXJlKCcuLi9mbG9yZW5jZS9ydWxlL2N1c3RvbUdyYW1tYXIvcXVhbGlmaWVkJyksXG4gICAgICBVbnF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlID0gcmVxdWlyZSgnLi4vZmxvcmVuY2UvcnVsZS9jdXN0b21HcmFtbWFyL3VucXVhbGlmaWVkJyk7XG5cbmNvbnN0IHsgQk5GTGV4ZXIgfSA9IGxleGVycyxcbiAgICAgIHsgcHVzaCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGZpbmRSdWxlQnlOYW1lIH0gPSBwYXJzZXJVdGlsaXRpZXMsXG4gICAgICBhZGQgPSBwdXNoOyAvLy9cblxuY29uc3QgYm5mTGV4ZXIgPSBCTkZMZXhlci5mcm9tTm90aGluZygpLFxuICAgICAgYm5mUGFyc2VyID0gQk5GUGFyc2VyLmZyb21Ob3RoaW5nKCksXG4gICAgICBzdGF0ZW1lbnRSdWxlTmFtZSA9ICdzdGF0ZW1lbnQnLFxuICAgICAgbWV0YXN0YXRlbWVudFJ1bGVOYW1lID0gJ21ldGFzdGF0ZW1lbnQnLFxuICAgICAgcXVhbGlmaWVkU3RhdGVtZW50UnVsZU5hbWUgPSAncXVhbGlmaWVkU3RhdGVtZW50JyxcbiAgICAgIHF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSA9ICdxdWFsaWZpZWRNZXRhc3RhdGVtZW50JyxcbiAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50UnVsZU5hbWUgPSAndW5xdWFsaWZpZWRTdGF0ZW1lbnQnLFxuICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50UnVsZU5hbWUgPSAndW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50JztcblxuZnVuY3Rpb24gcnVsZXNGcm9tQk5GcyhibmZzKSB7XG4gIGNvbnN0IGJuZiA9IGJuZnMuam9pbignJyksXG4gICAgICAgIGxpbmVzID0gYm5mTGV4ZXIubGluZXNGcm9tQk5GKGJuZiksXG4gICAgICAgIHJ1bGVzTm9kZSA9IGJuZlBhcnNlci5ydWxlc05vZGVGcm9tTGluZXMobGluZXMpLFxuICAgICAgICBydWxlcyA9IEJORlBhcnNlci5nZW5lcmF0ZVJ1bGVzKHJ1bGVzTm9kZSk7XG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG5mdW5jdGlvbiBhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyhjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMpIHtcbiAgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzID0gY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzLnNsaWNlKCk7ICAvLy9cbiAgXG4gIGNvbnN0IHN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlID0gZmluZFJ1bGVCeU5hbWUoc3RhdGVtZW50UnVsZU5hbWUsIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyksXG4gICAgICAgIG1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSA9IGZpbmRSdWxlQnlOYW1lKG1ldGFzdGF0ZW1lbnRSdWxlTmFtZSwgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKSxcbiAgICAgICAgcXVhbGlmaWVkU3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUgPSBuZXcgUXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUuZnJvbVJ1bGVOYW1lQW5kQ3VzdG9tR3JhbW1hclJ1bGUocXVhbGlmaWVkU3RhdGVtZW50UnVsZU5hbWUsIHN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlKSxcbiAgICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSA9IG5ldyBVbnF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlLmZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlKHVucXVhbGlmaWVkU3RhdGVtZW50UnVsZU5hbWUsIHN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlKSxcbiAgICAgICAgcXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlID0gbmV3IFF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlLmZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlKHF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSwgbWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlKSxcbiAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUgPSBuZXcgVW5xdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZS5mcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFyUnVsZSh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSwgbWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlKSxcbiAgICAgICAgcXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMgPSBbXG4gICAgICAgICAgcXVhbGlmaWVkU3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUsXG4gICAgICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSxcbiAgICAgICAgICBxdWFsaWZpZWRNZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUsXG4gICAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGVcbiAgICAgICAgXTtcblxuICBhZGQoY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzLCBxdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyk7XG5cbiAgcmV0dXJuIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJ1bGVzRnJvbUJORnM6IHJ1bGVzRnJvbUJORnMsXG4gIGFkZFF1YWxpZmllZEFuZFVucXVhbGlmaWVkU3RhdGVtZW50QW5kTWV0YXN0YXRlbWVudFJ1bGVzOiBhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlc1xufTtcbiJdfQ==