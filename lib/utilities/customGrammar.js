'use strict';

var lexers = require('occam-lexers');

var BNFParser = require('../bnf/parser'),
    ruleUtilities = require('../utilities/rule'),
    arrayUtilities = require('../utilities/array'),
    QualifiedCustomGrammarRule = require('../florence/rule/customGrammar/qualified'),
    UnqualifiedCustomGrammarRule = require('../florence/rule/customGrammar/unqualified');

var BNFLexer = lexers.BNFLexer,
    push = arrayUtilities.push,
    findRuleByName = ruleUtilities.findRuleByName,
    add = push; ///

var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing(),
    statementRuleName = 'statement',
    metastatementRuleName = 'metastatement',
    qualifiedStatementRuleName = 'qualifiedStatement',
    qualifiedMetastatementRuleName = 'qualifiedMetastatement',
    unqualifiedStatementRuleName = 'unqualifiedStatement',
    unqualifiedMetastatementRuleName = 'unqualifiedMetastatement';

function rulesFromBNFs(bnfs) {
      var bnf = bnfs.join(''),
          tokens = bnfLexer.tokensFromBNF(bnf),
          rulesNode = bnfParser.rulesNodeFromTokens(tokens),
          mappings = {},
          rules = BNFParser.generateRules(rulesNode, mappings);

      return rules;
}

function addQualifiedAndUnqualifiedStatementAndMetastatementRules(combinedCustomGrammarsRules) {
      combinedCustomGrammarsRules = combinedCustomGrammarsRules.slice(); ///

      var statementCustomGrammarRule = findRuleByName(statementRuleName, combinedCustomGrammarsRules),
          metastatementCustomGrammarRule = findRuleByName(metastatementRuleName, combinedCustomGrammarsRules),
          qualifiedStatementCustomGrammarRule = new QualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(qualifiedStatementRuleName, statementCustomGrammarRule),
          unqualifiedStatementCustomGrammarRule = new UnqualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(unqualifiedStatementRuleName, statementCustomGrammarRule),
          qualifiedMetastatementCustomGrammarRule = new QualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(qualifiedMetastatementRuleName, metastatementCustomGrammarRule),
          unqualifiedMetastatementCustomGrammarRule = new UnqualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(unqualifiedMetastatementRuleName, metastatementCustomGrammarRule),
          qualifiedAndUnqualifiedStatementAndMetastatementRules = [qualifiedStatementCustomGrammarRule, unqualifiedStatementCustomGrammarRule, qualifiedMetastatementCustomGrammarRule, unqualifiedMetastatementCustomGrammarRule];

      add(combinedCustomGrammarsRules, qualifiedAndUnqualifiedStatementAndMetastatementRules);

      return combinedCustomGrammarsRules;
}

module.exports = {
      rulesFromBNFs: rulesFromBNFs,
      addQualifiedAndUnqualifiedStatementAndMetastatementRules: addQualifiedAndUnqualifiedStatementAndMetastatementRules
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvY3VzdG9tR3JhbW1hci5qcyJdLCJuYW1lcyI6WyJsZXhlcnMiLCJyZXF1aXJlIiwiQk5GUGFyc2VyIiwicnVsZVV0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiUXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUiLCJVbnF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlIiwiQk5GTGV4ZXIiLCJwdXNoIiwiZmluZFJ1bGVCeU5hbWUiLCJhZGQiLCJibmZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwic3RhdGVtZW50UnVsZU5hbWUiLCJtZXRhc3RhdGVtZW50UnVsZU5hbWUiLCJxdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSIsInVucXVhbGlmaWVkU3RhdGVtZW50UnVsZU5hbWUiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSIsInJ1bGVzRnJvbUJORnMiLCJibmZzIiwiYm5mIiwiam9pbiIsInRva2VucyIsInRva2Vuc0Zyb21CTkYiLCJydWxlc05vZGUiLCJydWxlc05vZGVGcm9tVG9rZW5zIiwibWFwcGluZ3MiLCJydWxlcyIsImdlbmVyYXRlUnVsZXMiLCJhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyIsInNsaWNlIiwic3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJtZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJxdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsImZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlIiwicXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjs7QUFFQSxJQUFNQyxZQUFZRCxRQUFRLGVBQVIsQ0FBbEI7QUFBQSxJQUNNRSxnQkFBZ0JGLFFBQVEsbUJBQVIsQ0FEdEI7QUFBQSxJQUVNRyxpQkFBaUJILFFBQVEsb0JBQVIsQ0FGdkI7QUFBQSxJQUdNSSw2QkFBNkJKLFFBQVEsMENBQVIsQ0FIbkM7QUFBQSxJQUlNSywrQkFBK0JMLFFBQVEsNENBQVIsQ0FKckM7O0FBTU0sSUFBRU0sUUFBRixHQUFlUCxNQUFmLENBQUVPLFFBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dKLGNBRFgsQ0FDRUksSUFERjtBQUFBLElBRUVDLGNBRkYsR0FFcUJOLGFBRnJCLENBRUVNLGNBRkY7QUFBQSxJQUdBQyxHQUhBLEdBR01GLElBSE4sQyxDQUdZOztBQUVsQixJQUFNRyxXQUFXSixTQUFTSyxXQUFULEVBQWpCO0FBQUEsSUFDTUMsWUFBWVgsVUFBVVUsV0FBVixFQURsQjtBQUFBLElBRU1FLG9CQUFvQixXQUYxQjtBQUFBLElBR01DLHdCQUF3QixlQUg5QjtBQUFBLElBSU1DLDZCQUE2QixvQkFKbkM7QUFBQSxJQUtNQyxpQ0FBaUMsd0JBTHZDO0FBQUEsSUFNTUMsK0JBQStCLHNCQU5yQztBQUFBLElBT01DLG1DQUFtQywwQkFQekM7O0FBU0EsU0FBU0MsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkI7QUFDM0IsVUFBTUMsTUFBTUQsS0FBS0UsSUFBTCxDQUFVLEVBQVYsQ0FBWjtBQUFBLFVBQ01DLFNBQVNiLFNBQVNjLGFBQVQsQ0FBdUJILEdBQXZCLENBRGY7QUFBQSxVQUVNSSxZQUFZYixVQUFVYyxtQkFBVixDQUE4QkgsTUFBOUIsQ0FGbEI7QUFBQSxVQUdNSSxXQUFXLEVBSGpCO0FBQUEsVUFJTUMsUUFBUTNCLFVBQVU0QixhQUFWLENBQXdCSixTQUF4QixFQUFtQ0UsUUFBbkMsQ0FKZDs7QUFNQSxhQUFPQyxLQUFQO0FBQ0Q7O0FBRUQsU0FBU0Usd0RBQVQsQ0FBa0VDLDJCQUFsRSxFQUErRjtBQUM3RkEsb0NBQThCQSw0QkFBNEJDLEtBQTVCLEVBQTlCLENBRDZGLENBQ3pCOztBQUVwRSxVQUFNQyw2QkFBNkJ6QixlQUFlSyxpQkFBZixFQUFrQ2tCLDJCQUFsQyxDQUFuQztBQUFBLFVBQ01HLGlDQUFpQzFCLGVBQWVNLHFCQUFmLEVBQXNDaUIsMkJBQXRDLENBRHZDO0FBQUEsVUFFTUksc0NBQXNDLElBQUkvQiwyQkFBMkJnQyxnQ0FBL0IsQ0FBZ0VyQiwwQkFBaEUsRUFBNEZrQiwwQkFBNUYsQ0FGNUM7QUFBQSxVQUdNSSx3Q0FBd0MsSUFBSWhDLDZCQUE2QitCLGdDQUFqQyxDQUFrRW5CLDRCQUFsRSxFQUFnR2dCLDBCQUFoRyxDQUg5QztBQUFBLFVBSU1LLDBDQUEwQyxJQUFJbEMsMkJBQTJCZ0MsZ0NBQS9CLENBQWdFcEIsOEJBQWhFLEVBQWdHa0IsOEJBQWhHLENBSmhEO0FBQUEsVUFLTUssNENBQTRDLElBQUlsQyw2QkFBNkIrQixnQ0FBakMsQ0FBa0VsQixnQ0FBbEUsRUFBb0dnQiw4QkFBcEcsQ0FMbEQ7QUFBQSxVQU1NTSx3REFBd0QsQ0FDdERMLG1DQURzRCxFQUV0REUscUNBRnNELEVBR3REQyx1Q0FIc0QsRUFJdERDLHlDQUpzRCxDQU45RDs7QUFhQTlCLFVBQUlzQiwyQkFBSixFQUFpQ1MscURBQWpDOztBQUVBLGFBQU9ULDJCQUFQO0FBQ0Q7O0FBRURVLE9BQU9DLE9BQVAsR0FBaUI7QUFDZnZCLGtDQURlO0FBRWZXO0FBRmUsQ0FBakIiLCJmaWxlIjoiY3VzdG9tR3JhbW1hci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyk7XG5cbmNvbnN0IEJORlBhcnNlciA9IHJlcXVpcmUoJy4uL2JuZi9wYXJzZXInKSxcbiAgICAgIHJ1bGVVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcnVsZScpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIFF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlID0gcmVxdWlyZSgnLi4vZmxvcmVuY2UvcnVsZS9jdXN0b21HcmFtbWFyL3F1YWxpZmllZCcpLFxuICAgICAgVW5xdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZSA9IHJlcXVpcmUoJy4uL2Zsb3JlbmNlL3J1bGUvY3VzdG9tR3JhbW1hci91bnF1YWxpZmllZCcpO1xuXG5jb25zdCB7IEJORkxleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IHB1c2ggfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBmaW5kUnVsZUJ5TmFtZSB9ID0gcnVsZVV0aWxpdGllcyxcbiAgICAgIGFkZCA9IHB1c2g7IC8vL1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIHN0YXRlbWVudFJ1bGVOYW1lID0gJ3N0YXRlbWVudCcsXG4gICAgICBtZXRhc3RhdGVtZW50UnVsZU5hbWUgPSAnbWV0YXN0YXRlbWVudCcsXG4gICAgICBxdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSA9ICdxdWFsaWZpZWRTdGF0ZW1lbnQnLFxuICAgICAgcXVhbGlmaWVkTWV0YXN0YXRlbWVudFJ1bGVOYW1lID0gJ3F1YWxpZmllZE1ldGFzdGF0ZW1lbnQnLFxuICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSA9ICd1bnF1YWxpZmllZFN0YXRlbWVudCcsXG4gICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSA9ICd1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQnO1xuXG5mdW5jdGlvbiBydWxlc0Zyb21CTkZzKGJuZnMpIHtcbiAgY29uc3QgYm5mID0gYm5mcy5qb2luKCcnKSxcbiAgICAgICAgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlc05vZGUgPSBibmZQYXJzZXIucnVsZXNOb2RlRnJvbVRva2Vucyh0b2tlbnMpLFxuICAgICAgICBtYXBwaW5ncyA9IHt9LFxuICAgICAgICBydWxlcyA9IEJORlBhcnNlci5nZW5lcmF0ZVJ1bGVzKHJ1bGVzTm9kZSwgbWFwcGluZ3MpO1xuXG4gIHJldHVybiBydWxlcztcbn1cblxuZnVuY3Rpb24gYWRkUXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMoY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKSB7XG4gIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyA9IGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcy5zbGljZSgpOyAgLy8vXG4gIFxuICBjb25zdCBzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSA9IGZpbmRSdWxlQnlOYW1lKHN0YXRlbWVudFJ1bGVOYW1lLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMpLFxuICAgICAgICBtZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUgPSBmaW5kUnVsZUJ5TmFtZShtZXRhc3RhdGVtZW50UnVsZU5hbWUsIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyksXG4gICAgICAgIHF1YWxpZmllZFN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlID0gbmV3IFF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlLmZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlKHF1YWxpZmllZFN0YXRlbWVudFJ1bGVOYW1lLCBzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSksXG4gICAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUgPSBuZXcgVW5xdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZS5mcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFyUnVsZSh1bnF1YWxpZmllZFN0YXRlbWVudFJ1bGVOYW1lLCBzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSksXG4gICAgICAgIHF1YWxpZmllZE1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSA9IG5ldyBRdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZS5mcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFyUnVsZShxdWFsaWZpZWRNZXRhc3RhdGVtZW50UnVsZU5hbWUsIG1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSksXG4gICAgICAgIHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlID0gbmV3IFVucXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUuZnJvbVJ1bGVOYW1lQW5kQ3VzdG9tR3JhbW1hclJ1bGUodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50UnVsZU5hbWUsIG1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSksXG4gICAgICAgIHF1YWxpZmllZEFuZFVucXVhbGlmaWVkU3RhdGVtZW50QW5kTWV0YXN0YXRlbWVudFJ1bGVzID0gW1xuICAgICAgICAgIHF1YWxpZmllZFN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlLFxuICAgICAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUsXG4gICAgICAgICAgcXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlLFxuICAgICAgICAgIHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlXG4gICAgICAgIF07XG5cbiAgYWRkKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcywgcXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMpO1xuXG4gIHJldHVybiBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBydWxlc0Zyb21CTkZzLFxuICBhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlc1xufTtcbiJdfQ==