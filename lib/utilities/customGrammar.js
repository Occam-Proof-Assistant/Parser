'use strict';

var lexers = require('occam-lexers');

var BNFParser = require('../bnf/parser'),
    ruleUtilities = require('../utilities/rule'),
    arrayUtilities = require('../utilities/array'),
    QualifiedCustomGrammarRule = require('../florence/rule/customGrammar/qualified'),
    UnqualifiedCustomGrammarRule = require('../florence/rule/customGrammar/unqualified');

var BNFLexer = lexers.BNFLexer,
    push = arrayUtilities.push,
    findRuleByName = ruleUtilities.findRuleByName,
    add = push; ///

var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing(),
    statementRuleName = 'statement',
    metastatementRuleName = 'metastatement',
    qualifiedStatementRuleName = 'qualifiedStatement',
    qualifiedMetastatementRuleName = 'qualifiedMetastatement',
    unqualifiedStatementRuleName = 'unqualifiedStatement',
    unqualifiedMetastatementRuleName = 'unqualifiedMetastatement';

function rulesFromBNFs(bnfs) {
      var bnf = bnfs.join(''),
          tokens = bnfLexer.tokensFromBNF(bnf),
          rulesNode = bnfParser.rulesNodeFromTokens(tokens),
          rules = BNFParser.generateRules(rulesNode);

      return rules;
}

function addQualifiedAndUnqualifiedStatementAndMetastatementRules(combinedCustomGrammarsRules) {
      combinedCustomGrammarsRules = combinedCustomGrammarsRules.slice(); ///

      var statementCustomGrammarRule = findRuleByName(statementRuleName, combinedCustomGrammarsRules),
          metastatementCustomGrammarRule = findRuleByName(metastatementRuleName, combinedCustomGrammarsRules),
          qualifiedStatementCustomGrammarRule = new QualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(qualifiedStatementRuleName, statementCustomGrammarRule),
          unqualifiedStatementCustomGrammarRule = new UnqualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(unqualifiedStatementRuleName, statementCustomGrammarRule),
          qualifiedMetastatementCustomGrammarRule = new QualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(qualifiedMetastatementRuleName, metastatementCustomGrammarRule),
          unqualifiedMetastatementCustomGrammarRule = new UnqualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(unqualifiedMetastatementRuleName, metastatementCustomGrammarRule),
          qualifiedAndUnqualifiedStatementAndMetastatementRules = [qualifiedStatementCustomGrammarRule, unqualifiedStatementCustomGrammarRule, qualifiedMetastatementCustomGrammarRule, unqualifiedMetastatementCustomGrammarRule];

      add(combinedCustomGrammarsRules, qualifiedAndUnqualifiedStatementAndMetastatementRules);

      return combinedCustomGrammarsRules;
}

module.exports = {
      rulesFromBNFs: rulesFromBNFs,
      addQualifiedAndUnqualifiedStatementAndMetastatementRules: addQualifiedAndUnqualifiedStatementAndMetastatementRules
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvY3VzdG9tR3JhbW1hci5qcyJdLCJuYW1lcyI6WyJsZXhlcnMiLCJyZXF1aXJlIiwiQk5GUGFyc2VyIiwicnVsZVV0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiUXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUiLCJVbnF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlIiwiQk5GTGV4ZXIiLCJwdXNoIiwiZmluZFJ1bGVCeU5hbWUiLCJhZGQiLCJibmZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwic3RhdGVtZW50UnVsZU5hbWUiLCJtZXRhc3RhdGVtZW50UnVsZU5hbWUiLCJxdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSIsInVucXVhbGlmaWVkU3RhdGVtZW50UnVsZU5hbWUiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSIsInJ1bGVzRnJvbUJORnMiLCJibmZzIiwiYm5mIiwiam9pbiIsInRva2VucyIsInRva2Vuc0Zyb21CTkYiLCJydWxlc05vZGUiLCJydWxlc05vZGVGcm9tVG9rZW5zIiwicnVsZXMiLCJnZW5lcmF0ZVJ1bGVzIiwiYWRkUXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMiLCJzbGljZSIsInN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlIiwibWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlIiwicXVhbGlmaWVkU3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJmcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFyUnVsZSIsInVucXVhbGlmaWVkU3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJxdWFsaWZpZWRNZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsInF1YWxpZmllZEFuZFVucXVhbGlmaWVkU3RhdGVtZW50QW5kTWV0YXN0YXRlbWVudFJ1bGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxjQUFSLENBQWY7O0FBRUEsSUFBTUMsWUFBWUQsUUFBUSxlQUFSLENBQWxCO0FBQUEsSUFDTUUsZ0JBQWdCRixRQUFRLG1CQUFSLENBRHRCO0FBQUEsSUFFTUcsaUJBQWlCSCxRQUFRLG9CQUFSLENBRnZCO0FBQUEsSUFHTUksNkJBQTZCSixRQUFRLDBDQUFSLENBSG5DO0FBQUEsSUFJTUssK0JBQStCTCxRQUFRLDRDQUFSLENBSnJDOztBQU1NLElBQUVNLFFBQUYsR0FBZVAsTUFBZixDQUFFTyxRQUFGO0FBQUEsSUFDRUMsSUFERixHQUNXSixjQURYLENBQ0VJLElBREY7QUFBQSxJQUVFQyxjQUZGLEdBRXFCTixhQUZyQixDQUVFTSxjQUZGO0FBQUEsSUFHQUMsR0FIQSxHQUdNRixJQUhOLEMsQ0FHWTs7QUFFbEIsSUFBTUcsV0FBV0osU0FBU0ssV0FBVCxFQUFqQjtBQUFBLElBQ01DLFlBQVlYLFVBQVVVLFdBQVYsRUFEbEI7QUFBQSxJQUVNRSxvQkFBb0IsV0FGMUI7QUFBQSxJQUdNQyx3QkFBd0IsZUFIOUI7QUFBQSxJQUlNQyw2QkFBNkIsb0JBSm5DO0FBQUEsSUFLTUMsaUNBQWlDLHdCQUx2QztBQUFBLElBTU1DLCtCQUErQixzQkFOckM7QUFBQSxJQU9NQyxtQ0FBbUMsMEJBUHpDOztBQVNBLFNBQVNDLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCO0FBQzNCLFVBQU1DLE1BQU1ELEtBQUtFLElBQUwsQ0FBVSxFQUFWLENBQVo7QUFBQSxVQUNNQyxTQUFTYixTQUFTYyxhQUFULENBQXVCSCxHQUF2QixDQURmO0FBQUEsVUFFTUksWUFBWWIsVUFBVWMsbUJBQVYsQ0FBOEJILE1BQTlCLENBRmxCO0FBQUEsVUFHTUksUUFBUTFCLFVBQVUyQixhQUFWLENBQXdCSCxTQUF4QixDQUhkOztBQUtBLGFBQU9FLEtBQVA7QUFDRDs7QUFFRCxTQUFTRSx3REFBVCxDQUFrRUMsMkJBQWxFLEVBQStGO0FBQzdGQSxvQ0FBOEJBLDRCQUE0QkMsS0FBNUIsRUFBOUIsQ0FENkYsQ0FDekI7O0FBRXBFLFVBQU1DLDZCQUE2QnhCLGVBQWVLLGlCQUFmLEVBQWtDaUIsMkJBQWxDLENBQW5DO0FBQUEsVUFDTUcsaUNBQWlDekIsZUFBZU0scUJBQWYsRUFBc0NnQiwyQkFBdEMsQ0FEdkM7QUFBQSxVQUVNSSxzQ0FBc0MsSUFBSTlCLDJCQUEyQitCLGdDQUEvQixDQUFnRXBCLDBCQUFoRSxFQUE0RmlCLDBCQUE1RixDQUY1QztBQUFBLFVBR01JLHdDQUF3QyxJQUFJL0IsNkJBQTZCOEIsZ0NBQWpDLENBQWtFbEIsNEJBQWxFLEVBQWdHZSwwQkFBaEcsQ0FIOUM7QUFBQSxVQUlNSywwQ0FBMEMsSUFBSWpDLDJCQUEyQitCLGdDQUEvQixDQUFnRW5CLDhCQUFoRSxFQUFnR2lCLDhCQUFoRyxDQUpoRDtBQUFBLFVBS01LLDRDQUE0QyxJQUFJakMsNkJBQTZCOEIsZ0NBQWpDLENBQWtFakIsZ0NBQWxFLEVBQW9HZSw4QkFBcEcsQ0FMbEQ7QUFBQSxVQU1NTSx3REFBd0QsQ0FDdERMLG1DQURzRCxFQUV0REUscUNBRnNELEVBR3REQyx1Q0FIc0QsRUFJdERDLHlDQUpzRCxDQU45RDs7QUFhQTdCLFVBQUlxQiwyQkFBSixFQUFpQ1MscURBQWpDOztBQUVBLGFBQU9ULDJCQUFQO0FBQ0Q7O0FBRURVLE9BQU9DLE9BQVAsR0FBaUI7QUFDZnRCLHFCQUFlQSxhQURBO0FBRWZVLGdFQUEwREE7QUFGM0MsQ0FBakIiLCJmaWxlIjoiY3VzdG9tR3JhbW1hci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyk7XG5cbmNvbnN0IEJORlBhcnNlciA9IHJlcXVpcmUoJy4uL2JuZi9wYXJzZXInKSxcbiAgICAgIHJ1bGVVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcnVsZScpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIFF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlID0gcmVxdWlyZSgnLi4vZmxvcmVuY2UvcnVsZS9jdXN0b21HcmFtbWFyL3F1YWxpZmllZCcpLFxuICAgICAgVW5xdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZSA9IHJlcXVpcmUoJy4uL2Zsb3JlbmNlL3J1bGUvY3VzdG9tR3JhbW1hci91bnF1YWxpZmllZCcpO1xuXG5jb25zdCB7IEJORkxleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IHB1c2ggfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBmaW5kUnVsZUJ5TmFtZSB9ID0gcnVsZVV0aWxpdGllcyxcbiAgICAgIGFkZCA9IHB1c2g7IC8vL1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIHN0YXRlbWVudFJ1bGVOYW1lID0gJ3N0YXRlbWVudCcsXG4gICAgICBtZXRhc3RhdGVtZW50UnVsZU5hbWUgPSAnbWV0YXN0YXRlbWVudCcsXG4gICAgICBxdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSA9ICdxdWFsaWZpZWRTdGF0ZW1lbnQnLFxuICAgICAgcXVhbGlmaWVkTWV0YXN0YXRlbWVudFJ1bGVOYW1lID0gJ3F1YWxpZmllZE1ldGFzdGF0ZW1lbnQnLFxuICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSA9ICd1bnF1YWxpZmllZFN0YXRlbWVudCcsXG4gICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSA9ICd1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnQnO1xuXG5mdW5jdGlvbiBydWxlc0Zyb21CTkZzKGJuZnMpIHtcbiAgY29uc3QgYm5mID0gYm5mcy5qb2luKCcnKSxcbiAgICAgICAgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlc05vZGUgPSBibmZQYXJzZXIucnVsZXNOb2RlRnJvbVRva2Vucyh0b2tlbnMpLFxuICAgICAgICBydWxlcyA9IEJORlBhcnNlci5nZW5lcmF0ZVJ1bGVzKHJ1bGVzTm9kZSk7XG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG5mdW5jdGlvbiBhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyhjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMpIHtcbiAgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzID0gY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzLnNsaWNlKCk7ICAvLy9cbiAgXG4gIGNvbnN0IHN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlID0gZmluZFJ1bGVCeU5hbWUoc3RhdGVtZW50UnVsZU5hbWUsIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyksXG4gICAgICAgIG1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSA9IGZpbmRSdWxlQnlOYW1lKG1ldGFzdGF0ZW1lbnRSdWxlTmFtZSwgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKSxcbiAgICAgICAgcXVhbGlmaWVkU3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUgPSBuZXcgUXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUuZnJvbVJ1bGVOYW1lQW5kQ3VzdG9tR3JhbW1hclJ1bGUocXVhbGlmaWVkU3RhdGVtZW50UnVsZU5hbWUsIHN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlKSxcbiAgICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSA9IG5ldyBVbnF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlLmZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlKHVucXVhbGlmaWVkU3RhdGVtZW50UnVsZU5hbWUsIHN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlKSxcbiAgICAgICAgcXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlID0gbmV3IFF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlLmZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlKHF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSwgbWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlKSxcbiAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUgPSBuZXcgVW5xdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZS5mcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFyUnVsZSh1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSwgbWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlKSxcbiAgICAgICAgcXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMgPSBbXG4gICAgICAgICAgcXVhbGlmaWVkU3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUsXG4gICAgICAgICAgdW5xdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSxcbiAgICAgICAgICBxdWFsaWZpZWRNZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUsXG4gICAgICAgICAgdW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGVcbiAgICAgICAgXTtcblxuICBhZGQoY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzLCBxdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyk7XG5cbiAgcmV0dXJuIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJ1bGVzRnJvbUJORnM6IHJ1bGVzRnJvbUJORnMsXG4gIGFkZFF1YWxpZmllZEFuZFVucXVhbGlmaWVkU3RhdGVtZW50QW5kTWV0YXN0YXRlbWVudFJ1bGVzOiBhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlc1xufTtcbiJdfQ==