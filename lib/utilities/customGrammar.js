'use strict';

var lexers = require('occam-lexers');

var BNFParser = require('../bnf/parser'),
    ruleUtilities = require('../utilities/rule'),
    arrayUtilities = require('../utilities/array'),
    QualifiedCustomGrammarRule = require('../florence/rule/customGrammar/qualified'),
    UnqualifiedCustomGrammarRule = require('../florence/rule/customGrammar/unqualified');

var BNFLexer = lexers.BNFLexer,
    push = arrayUtilities.push,
    findRuleByName = ruleUtilities.findRuleByName,
    add = push; ///

var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing(),
    statementRuleName = 'statement',
    metastatementRuleName = 'metastatement',
    qualifiedStatementRuleName = 'qualifiedStatement',
    qualifiedMetastatementRuleName = 'qualifiedMetastatement',
    unqualifiedStatementRuleName = 'unqualifiedStatement',
    unqualifiedMetastatementRuleName = 'unqualifiedMetastatement';

function rulesFromBNFs(bnfs) {
      var bnf = bnfs.join(''),
          significantTokens = bnfLexer.significantTokensFromBNF(bnf),
          rulesNode = bnfParser.rulesNodeFromSignificantTokens(significantTokens),
          mappings = {},
          rules = BNFParser.generateRules(rulesNode, mappings);

      return rules;
}

function addQualifiedAndUnqualifiedStatementAndMetastatementRules(combinedCustomGrammarsRules) {
      combinedCustomGrammarsRules = combinedCustomGrammarsRules.slice(); ///

      var statementCustomGrammarRule = findRuleByName(statementRuleName, combinedCustomGrammarsRules),
          metastatementCustomGrammarRule = findRuleByName(metastatementRuleName, combinedCustomGrammarsRules),
          qualifiedStatementCustomGrammarRule = new QualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(qualifiedStatementRuleName, statementCustomGrammarRule),
          unqualifiedStatementCustomGrammarRule = new UnqualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(unqualifiedStatementRuleName, statementCustomGrammarRule),
          qualifiedMetastatementCustomGrammarRule = new QualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(qualifiedMetastatementRuleName, metastatementCustomGrammarRule),
          unqualifiedMetastatementCustomGrammarRule = new UnqualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(unqualifiedMetastatementRuleName, metastatementCustomGrammarRule),
          qualifiedAndUnqualifiedStatementAndMetastatementRules = [qualifiedStatementCustomGrammarRule, unqualifiedStatementCustomGrammarRule, qualifiedMetastatementCustomGrammarRule, unqualifiedMetastatementCustomGrammarRule];

      add(combinedCustomGrammarsRules, qualifiedAndUnqualifiedStatementAndMetastatementRules);

      return combinedCustomGrammarsRules;
}

module.exports = {
      rulesFromBNFs: rulesFromBNFs,
      addQualifiedAndUnqualifiedStatementAndMetastatementRules: addQualifiedAndUnqualifiedStatementAndMetastatementRules
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvY3VzdG9tR3JhbW1hci5qcyJdLCJuYW1lcyI6WyJsZXhlcnMiLCJyZXF1aXJlIiwiQk5GUGFyc2VyIiwicnVsZVV0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwiUXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUiLCJVbnF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlIiwiQk5GTGV4ZXIiLCJwdXNoIiwiZmluZFJ1bGVCeU5hbWUiLCJhZGQiLCJibmZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwic3RhdGVtZW50UnVsZU5hbWUiLCJtZXRhc3RhdGVtZW50UnVsZU5hbWUiLCJxdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSIsInVucXVhbGlmaWVkU3RhdGVtZW50UnVsZU5hbWUiLCJ1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRSdWxlTmFtZSIsInJ1bGVzRnJvbUJORnMiLCJibmZzIiwiYm5mIiwiam9pbiIsInNpZ25pZmljYW50VG9rZW5zIiwic2lnbmlmaWNhbnRUb2tlbnNGcm9tQk5GIiwicnVsZXNOb2RlIiwicnVsZXNOb2RlRnJvbVNpZ25pZmljYW50VG9rZW5zIiwibWFwcGluZ3MiLCJydWxlcyIsImdlbmVyYXRlUnVsZXMiLCJhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyIsInNsaWNlIiwic3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJtZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJxdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsImZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlIiwicXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjs7QUFFQSxJQUFNQyxZQUFZRCxRQUFRLGVBQVIsQ0FBbEI7QUFBQSxJQUNNRSxnQkFBZ0JGLFFBQVEsbUJBQVIsQ0FEdEI7QUFBQSxJQUVNRyxpQkFBaUJILFFBQVEsb0JBQVIsQ0FGdkI7QUFBQSxJQUdNSSw2QkFBNkJKLFFBQVEsMENBQVIsQ0FIbkM7QUFBQSxJQUlNSywrQkFBK0JMLFFBQVEsNENBQVIsQ0FKckM7O0FBTU0sSUFBRU0sUUFBRixHQUFlUCxNQUFmLENBQUVPLFFBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dKLGNBRFgsQ0FDRUksSUFERjtBQUFBLElBRUVDLGNBRkYsR0FFcUJOLGFBRnJCLENBRUVNLGNBRkY7QUFBQSxJQUdBQyxHQUhBLEdBR01GLElBSE4sQyxDQUdZOztBQUVsQixJQUFNRyxXQUFXSixTQUFTSyxXQUFULEVBQWpCO0FBQUEsSUFDTUMsWUFBWVgsVUFBVVUsV0FBVixFQURsQjtBQUFBLElBRU1FLG9CQUFvQixXQUYxQjtBQUFBLElBR01DLHdCQUF3QixlQUg5QjtBQUFBLElBSU1DLDZCQUE2QixvQkFKbkM7QUFBQSxJQUtNQyxpQ0FBaUMsd0JBTHZDO0FBQUEsSUFNTUMsK0JBQStCLHNCQU5yQztBQUFBLElBT01DLG1DQUFtQywwQkFQekM7O0FBU0EsU0FBU0MsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkI7QUFDM0IsVUFBTUMsTUFBTUQsS0FBS0UsSUFBTCxDQUFVLEVBQVYsQ0FBWjtBQUFBLFVBQ01DLG9CQUFvQmIsU0FBU2Msd0JBQVQsQ0FBa0NILEdBQWxDLENBRDFCO0FBQUEsVUFFTUksWUFBWWIsVUFBVWMsOEJBQVYsQ0FBeUNILGlCQUF6QyxDQUZsQjtBQUFBLFVBR01JLFdBQVcsRUFIakI7QUFBQSxVQUlNQyxRQUFRM0IsVUFBVTRCLGFBQVYsQ0FBd0JKLFNBQXhCLEVBQW1DRSxRQUFuQyxDQUpkOztBQU1BLGFBQU9DLEtBQVA7QUFDRDs7QUFFRCxTQUFTRSx3REFBVCxDQUFrRUMsMkJBQWxFLEVBQStGO0FBQzdGQSxvQ0FBOEJBLDRCQUE0QkMsS0FBNUIsRUFBOUIsQ0FENkYsQ0FDekI7O0FBRXBFLFVBQU1DLDZCQUE2QnpCLGVBQWVLLGlCQUFmLEVBQWtDa0IsMkJBQWxDLENBQW5DO0FBQUEsVUFDTUcsaUNBQWlDMUIsZUFBZU0scUJBQWYsRUFBc0NpQiwyQkFBdEMsQ0FEdkM7QUFBQSxVQUVNSSxzQ0FBc0MsSUFBSS9CLDJCQUEyQmdDLGdDQUEvQixDQUFnRXJCLDBCQUFoRSxFQUE0RmtCLDBCQUE1RixDQUY1QztBQUFBLFVBR01JLHdDQUF3QyxJQUFJaEMsNkJBQTZCK0IsZ0NBQWpDLENBQWtFbkIsNEJBQWxFLEVBQWdHZ0IsMEJBQWhHLENBSDlDO0FBQUEsVUFJTUssMENBQTBDLElBQUlsQywyQkFBMkJnQyxnQ0FBL0IsQ0FBZ0VwQiw4QkFBaEUsRUFBZ0drQiw4QkFBaEcsQ0FKaEQ7QUFBQSxVQUtNSyw0Q0FBNEMsSUFBSWxDLDZCQUE2QitCLGdDQUFqQyxDQUFrRWxCLGdDQUFsRSxFQUFvR2dCLDhCQUFwRyxDQUxsRDtBQUFBLFVBTU1NLHdEQUF3RCxDQUN0REwsbUNBRHNELEVBRXRERSxxQ0FGc0QsRUFHdERDLHVDQUhzRCxFQUl0REMseUNBSnNELENBTjlEOztBQWFBOUIsVUFBSXNCLDJCQUFKLEVBQWlDUyxxREFBakM7O0FBRUEsYUFBT1QsMkJBQVA7QUFDRDs7QUFFRFUsT0FBT0MsT0FBUCxHQUFpQjtBQUNmdkIsa0NBRGU7QUFFZlc7QUFGZSxDQUFqQiIsImZpbGUiOiJjdXN0b21HcmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKTtcblxuY29uc3QgQk5GUGFyc2VyID0gcmVxdWlyZSgnLi4vYm5mL3BhcnNlcicpLFxuICAgICAgcnVsZVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9ydWxlJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpLFxuICAgICAgUXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUgPSByZXF1aXJlKCcuLi9mbG9yZW5jZS9ydWxlL2N1c3RvbUdyYW1tYXIvcXVhbGlmaWVkJyksXG4gICAgICBVbnF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlID0gcmVxdWlyZSgnLi4vZmxvcmVuY2UvcnVsZS9jdXN0b21HcmFtbWFyL3VucXVhbGlmaWVkJyk7XG5cbmNvbnN0IHsgQk5GTGV4ZXIgfSA9IGxleGVycyxcbiAgICAgIHsgcHVzaCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGZpbmRSdWxlQnlOYW1lIH0gPSBydWxlVXRpbGl0aWVzLFxuICAgICAgYWRkID0gcHVzaDsgLy8vXG5cbmNvbnN0IGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGJuZlBhcnNlciA9IEJORlBhcnNlci5mcm9tTm90aGluZygpLFxuICAgICAgc3RhdGVtZW50UnVsZU5hbWUgPSAnc3RhdGVtZW50JyxcbiAgICAgIG1ldGFzdGF0ZW1lbnRSdWxlTmFtZSA9ICdtZXRhc3RhdGVtZW50JyxcbiAgICAgIHF1YWxpZmllZFN0YXRlbWVudFJ1bGVOYW1lID0gJ3F1YWxpZmllZFN0YXRlbWVudCcsXG4gICAgICBxdWFsaWZpZWRNZXRhc3RhdGVtZW50UnVsZU5hbWUgPSAncXVhbGlmaWVkTWV0YXN0YXRlbWVudCcsXG4gICAgICB1bnF1YWxpZmllZFN0YXRlbWVudFJ1bGVOYW1lID0gJ3VucXVhbGlmaWVkU3RhdGVtZW50JyxcbiAgICAgIHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFJ1bGVOYW1lID0gJ3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudCc7XG5cbmZ1bmN0aW9uIHJ1bGVzRnJvbUJORnMoYm5mcykge1xuICBjb25zdCBibmYgPSBibmZzLmpvaW4oJycpLFxuICAgICAgICBzaWduaWZpY2FudFRva2VucyA9IGJuZkxleGVyLnNpZ25pZmljYW50VG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlc05vZGUgPSBibmZQYXJzZXIucnVsZXNOb2RlRnJvbVNpZ25pZmljYW50VG9rZW5zKHNpZ25pZmljYW50VG9rZW5zKSxcbiAgICAgICAgbWFwcGluZ3MgPSB7fSxcbiAgICAgICAgcnVsZXMgPSBCTkZQYXJzZXIuZ2VuZXJhdGVSdWxlcyhydWxlc05vZGUsIG1hcHBpbmdzKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmZ1bmN0aW9uIGFkZFF1YWxpZmllZEFuZFVucXVhbGlmaWVkU3RhdGVtZW50QW5kTWV0YXN0YXRlbWVudFJ1bGVzKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcykge1xuICBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMgPSBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMuc2xpY2UoKTsgIC8vL1xuICBcbiAgY29uc3Qgc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUgPSBmaW5kUnVsZUJ5TmFtZShzdGF0ZW1lbnRSdWxlTmFtZSwgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKSxcbiAgICAgICAgbWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlID0gZmluZFJ1bGVCeU5hbWUobWV0YXN0YXRlbWVudFJ1bGVOYW1lLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMpLFxuICAgICAgICBxdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSA9IG5ldyBRdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZS5mcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFyUnVsZShxdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSwgc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUpLFxuICAgICAgICB1bnF1YWxpZmllZFN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlID0gbmV3IFVucXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUuZnJvbVJ1bGVOYW1lQW5kQ3VzdG9tR3JhbW1hclJ1bGUodW5xdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSwgc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUpLFxuICAgICAgICBxdWFsaWZpZWRNZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUgPSBuZXcgUXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUuZnJvbVJ1bGVOYW1lQW5kQ3VzdG9tR3JhbW1hclJ1bGUocXVhbGlmaWVkTWV0YXN0YXRlbWVudFJ1bGVOYW1lLCBtZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUpLFxuICAgICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSA9IG5ldyBVbnF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlLmZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlKHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFJ1bGVOYW1lLCBtZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUpLFxuICAgICAgICBxdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyA9IFtcbiAgICAgICAgICBxdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSxcbiAgICAgICAgICB1bnF1YWxpZmllZFN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlLFxuICAgICAgICAgIHF1YWxpZmllZE1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSxcbiAgICAgICAgICB1bnF1YWxpZmllZE1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZVxuICAgICAgICBdO1xuXG4gIGFkZChjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMsIHF1YWxpZmllZEFuZFVucXVhbGlmaWVkU3RhdGVtZW50QW5kTWV0YXN0YXRlbWVudFJ1bGVzKTtcblxuICByZXR1cm4gY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcnVsZXNGcm9tQk5GcyxcbiAgYWRkUXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXNcbn07XG4iXX0=