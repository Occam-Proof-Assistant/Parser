'use strict';

var lexers = require('occam-lexers');

var BNFParser = require('../bnf/parser'),
    arrayUtilities = require('../utilities/array'),
    parserUtilities = require('../utilities/parser'),
    QualifiedCustomGrammarRule = require('../florence/rule/customGrammar/qualified'),
    UnqualifiedCustomGrammarRule = require('../florence/rule/customGrammar/unqualified');

var BNFLexer = lexers.BNFLexer,
    push = arrayUtilities.push,
    findRuleByName = parserUtilities.findRuleByName,
    add = push; ///

var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing(),
    statementRuleName = 'statement',
    metastatementRuleName = 'metastatement',
    qualifiedStatementRuleName = 'qualifiedStatement',
    qualifiedMetastatementRuleName = 'qualifiedMetastatement',
    unqualifiedStatementRuleName = 'unqualifiedStatement',
    unqualifiedMetastatementRuleName = 'unqualifiedMetastatement';

function rulesFromBNFs(bnfs) {
      var bnf = bnfs.join(''),
          lines = bnfLexer.linesFromBNF(bnf),
          rulesNode = bnfParser.rulesNodeFromLines(lines),
          rules = BNFParser.generateRules(rulesNode);

      return rules;
}

function addQualifiedAndUnqualifiedStatementAndMetastatementRules(combinedCustomGrammarsRules) {
      combinedCustomGrammarsRules = combinedCustomGrammarsRules.slice(); ///

      var statementCustomGrammarRule = findRuleByName(statementRuleName, combinedCustomGrammarsRules),
          metastatementCustomGrammarRule = findRuleByName(metastatementRuleName, combinedCustomGrammarsRules),
          qualifiedStatementCustomGrammarRule = new QualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(qualifiedStatementRuleName, statementCustomGrammarRule),
          unqualifiedStatementCustomGrammarRule = new UnqualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(unqualifiedStatementRuleName, statementCustomGrammarRule),
          qualifiedMetastatementCustomGrammarRule = new QualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(qualifiedMetastatementRuleName, metastatementCustomGrammarRule),
          unqualifiedMetastatementCustomGrammarRule = new UnqualifiedCustomGrammarRule.fromRuleNameAndCustomGrammarRule(unqualifiedMetastatementRuleName, metastatementCustomGrammarRule),
          qualifiedAndUnqualifiedStatementAndMetastatementRules = [qualifiedStatementCustomGrammarRule, unqualifiedStatementCustomGrammarRule, qualifiedMetastatementCustomGrammarRule, unqualifiedMetastatementCustomGrammarRule];

      add(combinedCustomGrammarsRules, qualifiedAndUnqualifiedStatementAndMetastatementRules);

      return combinedCustomGrammarsRules;
}

module.exports = {
      rulesFromBNFs: rulesFromBNFs,
      addQualifiedAndUnqualifiedStatementAndMetastatementRules: addQualifiedAndUnqualifiedStatementAndMetastatementRules
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvY3VzdG9tR3JhbW1hci5qcyJdLCJuYW1lcyI6WyJsZXhlcnMiLCJyZXF1aXJlIiwiQk5GUGFyc2VyIiwiYXJyYXlVdGlsaXRpZXMiLCJwYXJzZXJVdGlsaXRpZXMiLCJRdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZSIsIlVucXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUiLCJCTkZMZXhlciIsInB1c2giLCJmaW5kUnVsZUJ5TmFtZSIsImFkZCIsImJuZkxleGVyIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXIiLCJzdGF0ZW1lbnRSdWxlTmFtZSIsIm1ldGFzdGF0ZW1lbnRSdWxlTmFtZSIsInF1YWxpZmllZFN0YXRlbWVudFJ1bGVOYW1lIiwicXVhbGlmaWVkTWV0YXN0YXRlbWVudFJ1bGVOYW1lIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRSdWxlTmFtZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFJ1bGVOYW1lIiwicnVsZXNGcm9tQk5GcyIsImJuZnMiLCJibmYiLCJqb2luIiwibGluZXMiLCJsaW5lc0Zyb21CTkYiLCJydWxlc05vZGUiLCJydWxlc05vZGVGcm9tTGluZXMiLCJydWxlcyIsImdlbmVyYXRlUnVsZXMiLCJhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlcyIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyIsInNsaWNlIiwic3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJtZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUiLCJxdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsImZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlIiwidW5xdWFsaWZpZWRTdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsInF1YWxpZmllZE1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSIsInVucXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlIiwicXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjs7QUFFQSxJQUFNQyxZQUFZRCxRQUFRLGVBQVIsQ0FBbEI7QUFBQSxJQUNNRSxpQkFBaUJGLFFBQVEsb0JBQVIsQ0FEdkI7QUFBQSxJQUVNRyxrQkFBa0JILFFBQVEscUJBQVIsQ0FGeEI7QUFBQSxJQUdNSSw2QkFBNkJKLFFBQVEsMENBQVIsQ0FIbkM7QUFBQSxJQUlNSywrQkFBK0JMLFFBQVEsNENBQVIsQ0FKckM7O0FBTU0sSUFBRU0sUUFBRixHQUFlUCxNQUFmLENBQUVPLFFBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dMLGNBRFgsQ0FDRUssSUFERjtBQUFBLElBRUVDLGNBRkYsR0FFcUJMLGVBRnJCLENBRUVLLGNBRkY7QUFBQSxJQUdBQyxHQUhBLEdBR01GLElBSE4sQyxDQUdZOztBQUVsQixJQUFNRyxXQUFXSixTQUFTSyxXQUFULEVBQWpCO0FBQUEsSUFDTUMsWUFBWVgsVUFBVVUsV0FBVixFQURsQjtBQUFBLElBRU1FLG9CQUFvQixXQUYxQjtBQUFBLElBR01DLHdCQUF3QixlQUg5QjtBQUFBLElBSU1DLDZCQUE2QixvQkFKbkM7QUFBQSxJQUtNQyxpQ0FBaUMsd0JBTHZDO0FBQUEsSUFNTUMsK0JBQStCLHNCQU5yQztBQUFBLElBT01DLG1DQUFtQywwQkFQekM7O0FBU0EsU0FBU0MsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkI7QUFDM0IsVUFBTUMsTUFBTUQsS0FBS0UsSUFBTCxDQUFVLEVBQVYsQ0FBWjtBQUFBLFVBQ01DLFFBQVFiLFNBQVNjLFlBQVQsQ0FBc0JILEdBQXRCLENBRGQ7QUFBQSxVQUVNSSxZQUFZYixVQUFVYyxrQkFBVixDQUE2QkgsS0FBN0IsQ0FGbEI7QUFBQSxVQUdNSSxRQUFRMUIsVUFBVTJCLGFBQVYsQ0FBd0JILFNBQXhCLENBSGQ7O0FBS0EsYUFBT0UsS0FBUDtBQUNEOztBQUVELFNBQVNFLHdEQUFULENBQWtFQywyQkFBbEUsRUFBK0Y7QUFDN0ZBLG9DQUE4QkEsNEJBQTRCQyxLQUE1QixFQUE5QixDQUQ2RixDQUN6Qjs7QUFFcEUsVUFBTUMsNkJBQTZCeEIsZUFBZUssaUJBQWYsRUFBa0NpQiwyQkFBbEMsQ0FBbkM7QUFBQSxVQUNNRyxpQ0FBaUN6QixlQUFlTSxxQkFBZixFQUFzQ2dCLDJCQUF0QyxDQUR2QztBQUFBLFVBRU1JLHNDQUFzQyxJQUFJOUIsMkJBQTJCK0IsZ0NBQS9CLENBQWdFcEIsMEJBQWhFLEVBQTRGaUIsMEJBQTVGLENBRjVDO0FBQUEsVUFHTUksd0NBQXdDLElBQUkvQiw2QkFBNkI4QixnQ0FBakMsQ0FBa0VsQiw0QkFBbEUsRUFBZ0dlLDBCQUFoRyxDQUg5QztBQUFBLFVBSU1LLDBDQUEwQyxJQUFJakMsMkJBQTJCK0IsZ0NBQS9CLENBQWdFbkIsOEJBQWhFLEVBQWdHaUIsOEJBQWhHLENBSmhEO0FBQUEsVUFLTUssNENBQTRDLElBQUlqQyw2QkFBNkI4QixnQ0FBakMsQ0FBa0VqQixnQ0FBbEUsRUFBb0dlLDhCQUFwRyxDQUxsRDtBQUFBLFVBTU1NLHdEQUF3RCxDQUN0REwsbUNBRHNELEVBRXRERSxxQ0FGc0QsRUFHdERDLHVDQUhzRCxFQUl0REMseUNBSnNELENBTjlEOztBQWFBN0IsVUFBSXFCLDJCQUFKLEVBQWlDUyxxREFBakM7O0FBRUEsYUFBT1QsMkJBQVA7QUFDRDs7QUFFRFUsT0FBT0MsT0FBUCxHQUFpQjtBQUNmdEIscUJBQWVBLGFBREE7QUFFZlUsZ0VBQTBEQTtBQUYzQyxDQUFqQiIsImZpbGUiOiJjdXN0b21HcmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKTtcblxuY29uc3QgQk5GUGFyc2VyID0gcmVxdWlyZSgnLi4vYm5mL3BhcnNlcicpLFxuICAgICAgYXJyYXlVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvYXJyYXknKSxcbiAgICAgIHBhcnNlclV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9wYXJzZXInKSxcbiAgICAgIFF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlID0gcmVxdWlyZSgnLi4vZmxvcmVuY2UvcnVsZS9jdXN0b21HcmFtbWFyL3F1YWxpZmllZCcpLFxuICAgICAgVW5xdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZSA9IHJlcXVpcmUoJy4uL2Zsb3JlbmNlL3J1bGUvY3VzdG9tR3JhbW1hci91bnF1YWxpZmllZCcpO1xuXG5jb25zdCB7IEJORkxleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IHB1c2ggfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBmaW5kUnVsZUJ5TmFtZSB9ID0gcGFyc2VyVXRpbGl0aWVzLFxuICAgICAgYWRkID0gcHVzaDsgLy8vXG5cbmNvbnN0IGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGJuZlBhcnNlciA9IEJORlBhcnNlci5mcm9tTm90aGluZygpLFxuICAgICAgc3RhdGVtZW50UnVsZU5hbWUgPSAnc3RhdGVtZW50JyxcbiAgICAgIG1ldGFzdGF0ZW1lbnRSdWxlTmFtZSA9ICdtZXRhc3RhdGVtZW50JyxcbiAgICAgIHF1YWxpZmllZFN0YXRlbWVudFJ1bGVOYW1lID0gJ3F1YWxpZmllZFN0YXRlbWVudCcsXG4gICAgICBxdWFsaWZpZWRNZXRhc3RhdGVtZW50UnVsZU5hbWUgPSAncXVhbGlmaWVkTWV0YXN0YXRlbWVudCcsXG4gICAgICB1bnF1YWxpZmllZFN0YXRlbWVudFJ1bGVOYW1lID0gJ3VucXVhbGlmaWVkU3RhdGVtZW50JyxcbiAgICAgIHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudFJ1bGVOYW1lID0gJ3VucXVhbGlmaWVkTWV0YXN0YXRlbWVudCc7XG5cbmZ1bmN0aW9uIHJ1bGVzRnJvbUJORnMoYm5mcykge1xuICBjb25zdCBibmYgPSBibmZzLmpvaW4oJycpLFxuICAgICAgICBsaW5lcyA9IGJuZkxleGVyLmxpbmVzRnJvbUJORihibmYpLFxuICAgICAgICBydWxlc05vZGUgPSBibmZQYXJzZXIucnVsZXNOb2RlRnJvbUxpbmVzKGxpbmVzKSxcbiAgICAgICAgcnVsZXMgPSBCTkZQYXJzZXIuZ2VuZXJhdGVSdWxlcyhydWxlc05vZGUpO1xuXG4gIHJldHVybiBydWxlcztcbn1cblxuZnVuY3Rpb24gYWRkUXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMoY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKSB7XG4gIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyA9IGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcy5zbGljZSgpOyAgLy8vXG4gIFxuICBjb25zdCBzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSA9IGZpbmRSdWxlQnlOYW1lKHN0YXRlbWVudFJ1bGVOYW1lLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMpLFxuICAgICAgICBtZXRhc3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUgPSBmaW5kUnVsZUJ5TmFtZShtZXRhc3RhdGVtZW50UnVsZU5hbWUsIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyksXG4gICAgICAgIHF1YWxpZmllZFN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlID0gbmV3IFF1YWxpZmllZEN1c3RvbUdyYW1tYXJSdWxlLmZyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJSdWxlKHF1YWxpZmllZFN0YXRlbWVudFJ1bGVOYW1lLCBzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSksXG4gICAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUgPSBuZXcgVW5xdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZS5mcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFyUnVsZSh1bnF1YWxpZmllZFN0YXRlbWVudFJ1bGVOYW1lLCBzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSksXG4gICAgICAgIHF1YWxpZmllZE1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSA9IG5ldyBRdWFsaWZpZWRDdXN0b21HcmFtbWFyUnVsZS5mcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFyUnVsZShxdWFsaWZpZWRNZXRhc3RhdGVtZW50UnVsZU5hbWUsIG1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSksXG4gICAgICAgIHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlID0gbmV3IFVucXVhbGlmaWVkQ3VzdG9tR3JhbW1hclJ1bGUuZnJvbVJ1bGVOYW1lQW5kQ3VzdG9tR3JhbW1hclJ1bGUodW5xdWFsaWZpZWRNZXRhc3RhdGVtZW50UnVsZU5hbWUsIG1ldGFzdGF0ZW1lbnRDdXN0b21HcmFtbWFyUnVsZSksXG4gICAgICAgIHF1YWxpZmllZEFuZFVucXVhbGlmaWVkU3RhdGVtZW50QW5kTWV0YXN0YXRlbWVudFJ1bGVzID0gW1xuICAgICAgICAgIHF1YWxpZmllZFN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlLFxuICAgICAgICAgIHVucXVhbGlmaWVkU3RhdGVtZW50Q3VzdG9tR3JhbW1hclJ1bGUsXG4gICAgICAgICAgcXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlLFxuICAgICAgICAgIHVucXVhbGlmaWVkTWV0YXN0YXRlbWVudEN1c3RvbUdyYW1tYXJSdWxlXG4gICAgICAgIF07XG5cbiAgYWRkKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcywgcXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXMpO1xuXG4gIHJldHVybiBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBydWxlc0Zyb21CTkZzOiBydWxlc0Zyb21CTkZzLFxuICBhZGRRdWFsaWZpZWRBbmRVbnF1YWxpZmllZFN0YXRlbWVudEFuZE1ldGFzdGF0ZW1lbnRSdWxlczogYWRkUXVhbGlmaWVkQW5kVW5xdWFsaWZpZWRTdGF0ZW1lbnRBbmRNZXRhc3RhdGVtZW50UnVsZXNcbn07XG4iXX0=