"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.even = even;
exports.push = push;
exports.unshift = unshift;
exports.concat = concat;
exports.allButFirst = allButFirst;
exports.allButFirstAndLast = allButFirstAndLast;
exports.backwardsSome = exports.forwardsSome = exports.filter = exports.last = exports.third = exports.second = exports.first = void 0;

var _necessary = require("necessary");

var first = _necessary.arrayUtilities.first,
    second = _necessary.arrayUtilities.second,
    third = _necessary.arrayUtilities.third,
    last = _necessary.arrayUtilities.last,
    filter = _necessary.arrayUtilities.filter,
    forwardsSome = _necessary.arrayUtilities.forwardsSome,
    backwardsSome = _necessary.arrayUtilities.backwardsSome;
exports.backwardsSome = backwardsSome;
exports.forwardsSome = forwardsSome;
exports.filter = filter;
exports.last = last;
exports.third = third;
exports.second = second;
exports.first = first;

function even(array) {
  return array.filter(function (entry, index) {
    return isEven(index);
  });
}

function push(array1, elementOrArray2) {
  var array2 = guaranteeArray(elementOrArray2);
  Array.prototype.push.apply(array1, array2);
}

function unshift(array1, elementOrArray2) {
  var array2 = guaranteeArray(elementOrArray2);
  Array.prototype.unshift.apply(array1, array2);
}

function concat(array1) {
  for (var _len = arguments.length, elementOrArray2Array = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    elementOrArray2Array[_key - 1] = arguments[_key];
  }

  elementOrArray2Array.forEach(function (elementOrArray2) {
    var array2 = guaranteeArray(elementOrArray2);
    Array.prototype.push.apply(array1, array2);
  });
}

function allButFirst(array) {
  array = array.slice(); ///

  array.shift();
  return array;
}

function allButFirstAndLast(array) {
  array = array.slice(); ///

  array.shift();
  array.pop();
  return array;
}

function isEven(index) {
  var even = Math.floor(index / 2) === index / 2;
  return even;
}

function guaranteeArray(elementOrArray) {
  var array = elementOrArray instanceof Array ? elementOrArray : [elementOrArray];
  return array;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIl0sIm5hbWVzIjpbImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJzZWNvbmQiLCJ0aGlyZCIsImxhc3QiLCJmaWx0ZXIiLCJmb3J3YXJkc1NvbWUiLCJiYWNrd2FyZHNTb21lIiwiZXZlbiIsImFycmF5IiwiZW50cnkiLCJpbmRleCIsImlzRXZlbiIsInB1c2giLCJhcnJheTEiLCJlbGVtZW50T3JBcnJheTIiLCJhcnJheTIiLCJndWFyYW50ZWVBcnJheSIsIkFycmF5IiwicHJvdG90eXBlIiwiYXBwbHkiLCJ1bnNoaWZ0IiwiY29uY2F0IiwiZWxlbWVudE9yQXJyYXkyQXJyYXkiLCJmb3JFYWNoIiwiYWxsQnV0Rmlyc3QiLCJzbGljZSIsInNoaWZ0IiwiYWxsQnV0Rmlyc3RBbmRMYXN0IiwicG9wIiwiTWF0aCIsImZsb29yIiwiZWxlbWVudE9yQXJyYXkiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBRUE7O0lBRWVBLEssR0FBb0VDLHlCLENBQXBFRCxLO0lBQU9FLE0sR0FBNkRELHlCLENBQTdEQyxNO0lBQVFDLEssR0FBcURGLHlCLENBQXJERSxLO0lBQU9DLEksR0FBOENILHlCLENBQTlDRyxJO0lBQU1DLE0sR0FBd0NKLHlCLENBQXhDSSxNO0lBQVFDLFksR0FBZ0NMLHlCLENBQWhDSyxZO0lBQWNDLGEsR0FBa0JOLHlCLENBQWxCTSxhOzs7Ozs7Ozs7QUFFMUQsU0FBU0MsSUFBVCxDQUFjQyxLQUFkLEVBQXFCO0FBQUUsU0FBT0EsS0FBSyxDQUFDSixNQUFOLENBQWEsVUFBQ0ssS0FBRCxFQUFRQyxLQUFSO0FBQUEsV0FBa0JDLE1BQU0sQ0FBQ0QsS0FBRCxDQUF4QjtBQUFBLEdBQWIsQ0FBUDtBQUF1RDs7QUFFOUUsU0FBU0UsSUFBVCxDQUFjQyxNQUFkLEVBQXNCQyxlQUF0QixFQUF1QztBQUM1QyxNQUFNQyxNQUFNLEdBQUdDLGNBQWMsQ0FBQ0YsZUFBRCxDQUE3QjtBQUVBRyxFQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JOLElBQWhCLENBQXFCTyxLQUFyQixDQUEyQk4sTUFBM0IsRUFBbUNFLE1BQW5DO0FBQ0Q7O0FBRU0sU0FBU0ssT0FBVCxDQUFpQlAsTUFBakIsRUFBeUJDLGVBQXpCLEVBQTBDO0FBQy9DLE1BQU1DLE1BQU0sR0FBR0MsY0FBYyxDQUFDRixlQUFELENBQTdCO0FBRUFHLEVBQUFBLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkUsT0FBaEIsQ0FBd0JELEtBQXhCLENBQThCTixNQUE5QixFQUFzQ0UsTUFBdEM7QUFDRDs7QUFFTSxTQUFTTSxNQUFULENBQWdCUixNQUFoQixFQUFpRDtBQUFBLG9DQUF0QlMsb0JBQXNCO0FBQXRCQSxJQUFBQSxvQkFBc0I7QUFBQTs7QUFDdERBLEVBQUFBLG9CQUFvQixDQUFDQyxPQUFyQixDQUE2QixVQUFDVCxlQUFELEVBQXFCO0FBQ2hELFFBQU1DLE1BQU0sR0FBR0MsY0FBYyxDQUFDRixlQUFELENBQTdCO0FBRUFHLElBQUFBLEtBQUssQ0FBQ0MsU0FBTixDQUFnQk4sSUFBaEIsQ0FBcUJPLEtBQXJCLENBQTJCTixNQUEzQixFQUFtQ0UsTUFBbkM7QUFDRCxHQUpEO0FBS0Q7O0FBRU0sU0FBU1MsV0FBVCxDQUFxQmhCLEtBQXJCLEVBQTRCO0FBQ2pDQSxFQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ2lCLEtBQU4sRUFBUixDQURpQyxDQUNUOztBQUV4QmpCLEVBQUFBLEtBQUssQ0FBQ2tCLEtBQU47QUFFQSxTQUFPbEIsS0FBUDtBQUNEOztBQUVNLFNBQVNtQixrQkFBVCxDQUE0Qm5CLEtBQTVCLEVBQW1DO0FBQ3hDQSxFQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ2lCLEtBQU4sRUFBUixDQUR3QyxDQUNoQjs7QUFFeEJqQixFQUFBQSxLQUFLLENBQUNrQixLQUFOO0FBRUFsQixFQUFBQSxLQUFLLENBQUNvQixHQUFOO0FBRUEsU0FBT3BCLEtBQVA7QUFDRDs7QUFFRCxTQUFTRyxNQUFULENBQWdCRCxLQUFoQixFQUF1QjtBQUNyQixNQUFNSCxJQUFJLEdBQUlzQixJQUFJLENBQUNDLEtBQUwsQ0FBV3BCLEtBQUssR0FBQyxDQUFqQixNQUF3QkEsS0FBSyxHQUFDLENBQTVDO0FBRUEsU0FBT0gsSUFBUDtBQUNEOztBQUVELFNBQVNTLGNBQVQsQ0FBd0JlLGNBQXhCLEVBQXdDO0FBQ3RDLE1BQU12QixLQUFLLEdBQUl1QixjQUFjLFlBQVlkLEtBQTNCLEdBQ0djLGNBREgsR0FFRyxDQUFFQSxjQUFGLENBRmpCO0FBSUEsU0FBT3ZCLEtBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuZXhwb3J0IGNvbnN0IHsgZmlyc3QsIHNlY29uZCwgdGhpcmQsIGxhc3QsIGZpbHRlciwgZm9yd2FyZHNTb21lLCBiYWNrd2FyZHNTb21lIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGV2ZW4oYXJyYXkpIHsgcmV0dXJuIGFycmF5LmZpbHRlcigoZW50cnksIGluZGV4KSA9PiBpc0V2ZW4oaW5kZXgpKTsgfVxuXG5leHBvcnQgZnVuY3Rpb24gcHVzaChhcnJheTEsIGVsZW1lbnRPckFycmF5Mikge1xuICBjb25zdCBhcnJheTIgPSBndWFyYW50ZWVBcnJheShlbGVtZW50T3JBcnJheTIpO1xuXG4gIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFycmF5MSwgYXJyYXkyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuc2hpZnQoYXJyYXkxLCBlbGVtZW50T3JBcnJheTIpIHtcbiAgY29uc3QgYXJyYXkyID0gZ3VhcmFudGVlQXJyYXkoZWxlbWVudE9yQXJyYXkyKTtcblxuICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShhcnJheTEsIGFycmF5Mik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoYXJyYXkxLCAuLi5lbGVtZW50T3JBcnJheTJBcnJheSkge1xuICBlbGVtZW50T3JBcnJheTJBcnJheS5mb3JFYWNoKChlbGVtZW50T3JBcnJheTIpID0+IHtcbiAgICBjb25zdCBhcnJheTIgPSBndWFyYW50ZWVBcnJheShlbGVtZW50T3JBcnJheTIpO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYXJyYXkxLCBhcnJheTIpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbEJ1dEZpcnN0KGFycmF5KSB7XG4gIGFycmF5ID0gYXJyYXkuc2xpY2UoKTsgIC8vL1xuXG4gIGFycmF5LnNoaWZ0KCk7XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxsQnV0Rmlyc3RBbmRMYXN0KGFycmF5KSB7XG4gIGFycmF5ID0gYXJyYXkuc2xpY2UoKTsgIC8vL1xuXG4gIGFycmF5LnNoaWZ0KCk7XG5cbiAgYXJyYXkucG9wKCk7XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiBpc0V2ZW4oaW5kZXgpIHtcbiAgY29uc3QgZXZlbiA9IChNYXRoLmZsb29yKGluZGV4LzIpID09PSBpbmRleC8yKTtcblxuICByZXR1cm4gZXZlbjtcbn1cblxuZnVuY3Rpb24gZ3VhcmFudGVlQXJyYXkoZWxlbWVudE9yQXJyYXkpIHtcbiAgY29uc3QgYXJyYXkgPSAoZWxlbWVudE9yQXJyYXkgaW5zdGFuY2VvZiBBcnJheSkgP1xuICAgICAgICAgICAgICAgICAgIGVsZW1lbnRPckFycmF5IDpcbiAgICAgICAgICAgICAgICAgICBbIGVsZW1lbnRPckFycmF5IF07XG5cbiAgcmV0dXJuIGFycmF5O1xufSJdfQ==