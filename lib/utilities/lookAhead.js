"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseParts = parseParts;
var _array = require("../utilities/array");
var _part = require("./part");
function parseParts(parts, nodes, index, state, callback) {
    var parsed;
    var partsLength = parts.length;
    if (index === partsLength) {
        if (callback !== null) {
            parsed = callback();
        } else {
            parsed = true;
        }
    } else {
        var part = parts[index];
        parsed = parsePart(part, parts, nodes, index, state, callback);
    }
    return parsed;
}
function parsePart(part, parts, nodes, index, state, callback2) {
    var parsed1;
    if (callback2 !== null) {
        var partsNodes = [];
        parsed1 = part.parse(nodes, state, function() {
            index++;
            var parsed = parseParts(parts, partsNodes, index, state, callback2);
            return parsed;
        });
        if (parsed1) {
            (0, _array).push(nodes, partsNodes);
        }
    } else {
        var partRuleNamePartWithLookAhead = (0, _part).isPartRuleNamePartWithLookAhead(part);
        if (partRuleNamePartWithLookAhead) {
            var ruleNamePart = part, partsNodes1 = [];
            parsed1 = ruleNamePart.parse(nodes, state, function() {
                index++;
                var callback = null, parsed = parseParts(parts, partsNodes1, index, state, callback);
                return parsed;
            });
            if (parsed1) {
                (0, _array).push(nodes, partsNodes1);
            }
        } else {
            var callback1 = null;
            parsed1 = part.parse(nodes, state, callback1);
            if (parsed1) {
                index++;
                parsed1 = parseParts(parts, nodes, index, state, callback1);
            }
        }
    }
    return parsed1;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbG9va0FoZWFkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBwdXNoIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgaXNQYXJ0UnVsZU5hbWVQYXJ0V2l0aExvb2tBaGVhZCB9IGZyb20gXCIuL3BhcnRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUGFydHMocGFydHMsIG5vZGVzLCBpbmRleCwgc3RhdGUsIGNhbGxiYWNrKSB7XG4gIGxldCBwYXJzZWQ7XG5cbiAgY29uc3QgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG5cbiAgaWYgKGluZGV4ID09PSBwYXJ0c0xlbmd0aCkge1xuICAgIGlmIChjYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgcGFyc2VkID0gY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGFydCA9IHBhcnRzW2luZGV4XTtcblxuICAgIHBhcnNlZCA9IHBhcnNlUGFydChwYXJ0LCBwYXJ0cywgbm9kZXMsIGluZGV4LCBzdGF0ZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn1cblxuZnVuY3Rpb24gcGFyc2VQYXJ0KHBhcnQsIHBhcnRzLCBub2RlcywgaW5kZXgsIHN0YXRlLCBjYWxsYmFjaykge1xuICBsZXQgcGFyc2VkO1xuXG4gIGlmIChjYWxsYmFjayAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHBhcnRzTm9kZXMgPSBbXTtcblxuICAgIHBhcnNlZCA9IHBhcnQucGFyc2Uobm9kZXMsIHN0YXRlLCAoKSA9PiB7XG4gICAgICBpbmRleCsrO1xuXG4gICAgICBjb25zdCBwYXJzZWQgPSBwYXJzZVBhcnRzKHBhcnRzLCBwYXJ0c05vZGVzLCBpbmRleCwgc3RhdGUsIGNhbGxiYWNrKTtcblxuICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9KTtcblxuICAgIGlmIChwYXJzZWQpIHtcbiAgICAgIHB1c2gobm9kZXMsIHBhcnRzTm9kZXMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwYXJ0UnVsZU5hbWVQYXJ0V2l0aExvb2tBaGVhZCA9IGlzUGFydFJ1bGVOYW1lUGFydFdpdGhMb29rQWhlYWQocGFydCk7XG5cbiAgICBpZiAocGFydFJ1bGVOYW1lUGFydFdpdGhMb29rQWhlYWQpIHtcbiAgICAgIGNvbnN0IHJ1bGVOYW1lUGFydCA9IHBhcnQsIC8vL1xuICAgICAgICAgICAgcGFydHNOb2RlcyA9IFtdO1xuXG4gICAgICBwYXJzZWQgPSBydWxlTmFtZVBhcnQucGFyc2Uobm9kZXMsIHN0YXRlLCAoKSA9PiB7XG4gICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBudWxsLFxuICAgICAgICAgICAgICBwYXJzZWQgPSBwYXJzZVBhcnRzKHBhcnRzLCBwYXJ0c05vZGVzLCBpbmRleCwgc3RhdGUsIGNhbGxiYWNrKTtcblxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChwYXJzZWQpIHtcbiAgICAgICAgcHVzaChub2RlcywgcGFydHNOb2Rlcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gbnVsbDtcblxuICAgICAgcGFyc2VkID0gcGFydC5wYXJzZShub2Rlcywgc3RhdGUsIGNhbGxiYWNrKTtcblxuICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICBpbmRleCsrO1xuXG4gICAgICAgIHBhcnNlZCA9IHBhcnNlUGFydHMocGFydHMsIG5vZGVzLCBpbmRleCwgc3RhdGUsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkO1xufVxuIl0sIm5hbWVzIjpbInBhcnNlUGFydHMiLCJwYXJ0cyIsIm5vZGVzIiwiaW5kZXgiLCJzdGF0ZSIsImNhbGxiYWNrIiwicGFyc2VkIiwicGFydHNMZW5ndGgiLCJsZW5ndGgiLCJwYXJ0IiwicGFyc2VQYXJ0IiwicGFydHNOb2RlcyIsInBhcnNlIiwicHVzaCIsInBhcnRSdWxlTmFtZVBhcnRXaXRoTG9va0FoZWFkIiwiaXNQYXJ0UnVsZU5hbWVQYXJ0V2l0aExvb2tBaGVhZCIsInJ1bGVOYW1lUGFydCJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWTs7OztRQUtJQSxVQUFVLEdBQVZBLFVBQVU7QUFITCxHQUFvQixDQUFwQixNQUFvQjtBQUNPLEdBQVEsQ0FBUixLQUFRO1NBRXhDQSxVQUFVLENBQUNDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUFFLENBQUM7SUFDaEUsR0FBRyxDQUFDQyxNQUFNO0lBRVYsR0FBSyxDQUFDQyxXQUFXLEdBQUdOLEtBQUssQ0FBQ08sTUFBTTtJQUVoQyxFQUFFLEVBQUVMLEtBQUssS0FBS0ksV0FBVyxFQUFFLENBQUM7UUFDMUIsRUFBRSxFQUFFRixRQUFRLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDdEJDLE1BQU0sR0FBR0QsUUFBUTtRQUNuQixDQUFDLE1BQU0sQ0FBQztZQUNOQyxNQUFNLEdBQUcsSUFBSTtRQUNmLENBQUM7SUFDSCxDQUFDLE1BQU0sQ0FBQztRQUNOLEdBQUssQ0FBQ0csSUFBSSxHQUFHUixLQUFLLENBQUNFLEtBQUs7UUFFeEJHLE1BQU0sR0FBR0ksU0FBUyxDQUFDRCxJQUFJLEVBQUVSLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsUUFBUTtJQUMvRCxDQUFDO0lBRUQsTUFBTSxDQUFDQyxNQUFNO0FBQ2YsQ0FBQztTQUVRSSxTQUFTLENBQUNELElBQUksRUFBRVIsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxTQUFRLEVBQUUsQ0FBQztJQUM5RCxHQUFHLENBQUNDLE9BQU07SUFFVixFQUFFLEVBQUVELFNBQVEsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUN0QixHQUFLLENBQUNNLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFFckJMLE9BQU0sR0FBR0csSUFBSSxDQUFDRyxLQUFLLENBQUNWLEtBQUssRUFBRUUsS0FBSyxFQUFFLFFBQ3RDLEdBRDRDLENBQUM7WUFDdkNELEtBQUs7WUFFTCxHQUFLLENBQUNHLE1BQU0sR0FBR04sVUFBVSxDQUFDQyxLQUFLLEVBQUVVLFVBQVUsRUFBRVIsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLFNBQVE7WUFFbkUsTUFBTSxDQUFDQyxNQUFNO1FBQ2YsQ0FBQztRQUVELEVBQUUsRUFBRUEsT0FBTSxFQUFFLENBQUM7Z0JBQ1hPLE1BQUksT0FBQ1gsS0FBSyxFQUFFUyxVQUFVO1FBQ3hCLENBQUM7SUFDSCxDQUFDLE1BQU0sQ0FBQztRQUNOLEdBQUssQ0FBQ0csNkJBQTZCLE9BQUdDLEtBQStCLGtDQUFDTixJQUFJO1FBRTFFLEVBQUUsRUFBRUssNkJBQTZCLEVBQUUsQ0FBQztZQUNsQyxHQUFLLENBQUNFLFlBQVksR0FBR1AsSUFBSSxFQUNuQkUsV0FBVSxHQUFHLENBQUMsQ0FBQztZQUVyQkwsT0FBTSxHQUFHVSxZQUFZLENBQUNKLEtBQUssQ0FBQ1YsS0FBSyxFQUFFRSxLQUFLLEVBQUUsUUFDaEQsR0FEc0QsQ0FBQztnQkFDL0NELEtBQUs7Z0JBRUwsR0FBSyxDQUFDRSxRQUFRLEdBQUcsSUFBSSxFQUNmQyxNQUFNLEdBQUdOLFVBQVUsQ0FBQ0MsS0FBSyxFQUFFVSxXQUFVLEVBQUVSLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxRQUFRO2dCQUVuRSxNQUFNLENBQUNDLE1BQU07WUFDZixDQUFDO1lBRUQsRUFBRSxFQUFFQSxPQUFNLEVBQUUsQ0FBQztvQkFDWE8sTUFBSSxPQUFDWCxLQUFLLEVBQUVTLFdBQVU7WUFDeEIsQ0FBQztRQUNILENBQUMsTUFBTSxDQUFDO1lBQ04sR0FBSyxDQUFDTixTQUFRLEdBQUcsSUFBSTtZQUVyQkMsT0FBTSxHQUFHRyxJQUFJLENBQUNHLEtBQUssQ0FBQ1YsS0FBSyxFQUFFRSxLQUFLLEVBQUVDLFNBQVE7WUFFMUMsRUFBRSxFQUFFQyxPQUFNLEVBQUUsQ0FBQztnQkFDWEgsS0FBSztnQkFFTEcsT0FBTSxHQUFHTixVQUFVLENBQUNDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsU0FBUTtZQUMxRCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUNDLE9BQU07QUFDZixDQUFDIn0=