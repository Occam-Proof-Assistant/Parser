'use strict';

var ruleNames = require('../bnf/ruleNames'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    LookAheadModifierRuleName = ruleNames.LookAheadModifierRuleName,
    QuantifierRuleName = ruleNames.QuantifierRuleName,
    RuleNameRuleName = ruleNames.RuleNameRuleName;

function isNodeChoiceNode(node) {
  var nodeNoChoiceNode = false;
  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    var terminalNode = node,
        ///
    terminalNodeContent = terminalNode.getContent();
    nodeNoChoiceNode = terminalNodeContent === '|';
  }

  return nodeNoChoiceNode;
}

function isNodeRuleNameNode(node) {
  var nodeRuleNameNode = false;
  var nodeTerminalNode = node.isTerminalNode(),
      nodeNonTerminalNode = !nodeTerminalNode;

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    nonTerminalNodeRuleName = nonTerminalNode.getRuleName();
    nodeRuleNameNode = nonTerminalNodeRuleName === RuleNameRuleName;
  }

  return nodeRuleNameNode;
}

function isNodeQuantifierNode(node) {
  var nodeQuantifierNode = false;
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName(),
        ruleNameQuantifierRuleName = ruleName === QuantifierRuleName;
    nodeQuantifierNode = ruleNameQuantifierRuleName; ///
  }

  return nodeQuantifierNode;
}

function isNodeLookAheadModifierNode(node) {
  var nodeLookAheadModifierNode = false;
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName(),
        ruleNameLookAheadModifierRuleName = ruleName === LookAheadModifierRuleName;
    nodeLookAheadModifierNode = ruleNameLookAheadModifierRuleName; ///
  }

  return nodeLookAheadModifierNode;
}

function ruleNameFromQuantifierNode(quantifierNode) {
  var nonTerminalNode;
  nonTerminalNode = quantifierNode; ///

  var childNodes = nonTerminalNode.getChildNodes(),
      firstChildNode = first(childNodes);
  nonTerminalNode = firstChildNode; ///

  var ruleName = nonTerminalNode.getRuleName();
  return ruleName;
}

module.exports = {
  isNodeChoiceNode: isNodeChoiceNode,
  isNodeRuleNameNode: isNodeRuleNameNode,
  isNodeQuantifierNode: isNodeQuantifierNode,
  isNodeLookAheadModifierNode: isNodeLookAheadModifierNode,
  ruleNameFromQuantifierNode: ruleNameFromQuantifierNode
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJuZi5qcyJdLCJuYW1lcyI6WyJydWxlTmFtZXMiLCJyZXF1aXJlIiwiYXJyYXlVdGlsaXRpZXMiLCJmaXJzdCIsIkxvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUiLCJRdWFudGlmaWVyUnVsZU5hbWUiLCJSdWxlTmFtZVJ1bGVOYW1lIiwiaXNOb2RlQ2hvaWNlTm9kZSIsIm5vZGUiLCJub2RlTm9DaG9pY2VOb2RlIiwibm9kZVRlcm1pbmFsTm9kZSIsImlzVGVybWluYWxOb2RlIiwidGVybWluYWxOb2RlIiwidGVybWluYWxOb2RlQ29udGVudCIsImdldENvbnRlbnQiLCJpc05vZGVSdWxlTmFtZU5vZGUiLCJub2RlUnVsZU5hbWVOb2RlIiwibm9kZU5vblRlcm1pbmFsTm9kZSIsIm5vblRlcm1pbmFsTm9kZSIsIm5vblRlcm1pbmFsTm9kZVJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJpc05vZGVRdWFudGlmaWVyTm9kZSIsIm5vZGVRdWFudGlmaWVyTm9kZSIsImlzTm9uVGVybWluYWxOb2RlIiwicnVsZU5hbWUiLCJydWxlTmFtZVF1YW50aWZpZXJSdWxlTmFtZSIsImlzTm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZSIsIm5vZGVMb29rQWhlYWRNb2RpZmllck5vZGUiLCJydWxlTmFtZUxvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUiLCJydWxlTmFtZUZyb21RdWFudGlmaWVyTm9kZSIsInF1YW50aWZpZXJOb2RlIiwiY2hpbGROb2RlcyIsImdldENoaWxkTm9kZXMiLCJmaXJzdENoaWxkTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGtCQUFELENBQXpCO0FBQUEsSUFDTUMsY0FBYyxHQUFHRCxPQUFPLENBQUMsb0JBQUQsQ0FEOUI7O0FBR00sSUFBRUUsS0FBRixHQUFZRCxjQUFaLENBQUVDLEtBQUY7QUFBQSxJQUNFQyx5QkFERixHQUNzRUosU0FEdEUsQ0FDRUks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LGtCQUZlO0FBR2ZNLEVBQUFBLG9CQUFvQixFQUFwQkEsb0JBSGU7QUFJZkssRUFBQUEsMkJBQTJCLEVBQTNCQSwyQkFKZTtBQUtmRyxFQUFBQSwwQkFBMEIsRUFBMUJBO0FBTGUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHJ1bGVOYW1lcyA9IHJlcXVpcmUoJy4uL2JuZi9ydWxlTmFtZXMnKSxcbiAgICAgIGFycmF5VXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vdXRpbGl0aWVzL2FycmF5Jyk7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lLCBRdWFudGlmaWVyUnVsZU5hbWUsIFJ1bGVOYW1lUnVsZU5hbWUgfSA9IHJ1bGVOYW1lcztcblxuZnVuY3Rpb24gaXNOb2RlQ2hvaWNlTm9kZShub2RlKSB7XG4gIGxldCBub2RlTm9DaG9pY2VOb2RlID0gZmFsc2U7XG5cbiAgY29uc3Qgbm9kZVRlcm1pbmFsTm9kZSA9IG5vZGUuaXNUZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZVRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IHRlcm1pbmFsTm9kZSA9IG5vZGUsICAvLy9cbiAgICAgICAgICB0ZXJtaW5hbE5vZGVDb250ZW50ID0gdGVybWluYWxOb2RlLmdldENvbnRlbnQoKTtcblxuICAgIG5vZGVOb0Nob2ljZU5vZGUgPSAodGVybWluYWxOb2RlQ29udGVudCA9PT0gJ3wnKTtcbiAgfVxuXG4gIHJldHVybiBub2RlTm9DaG9pY2VOb2RlO1xufVxuXG5mdW5jdGlvbiBpc05vZGVSdWxlTmFtZU5vZGUobm9kZSkge1xuICBsZXQgbm9kZVJ1bGVOYW1lTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVUZXJtaW5hbE5vZGUgPSBub2RlLmlzVGVybWluYWxOb2RlKCksXG4gICAgICAgIG5vZGVOb25UZXJtaW5hbE5vZGUgPSAhbm9kZVRlcm1pbmFsTm9kZTtcblxuICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsTm9kZSA9IG5vZGUsIC8vL1xuICAgICAgICAgIG5vblRlcm1pbmFsTm9kZVJ1bGVOYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFJ1bGVOYW1lKCk7XG5cbiAgICBub2RlUnVsZU5hbWVOb2RlID0gKG5vblRlcm1pbmFsTm9kZVJ1bGVOYW1lID09PSBSdWxlTmFtZVJ1bGVOYW1lKTtcbiAgfVxuXG4gIHJldHVybiBub2RlUnVsZU5hbWVOb2RlO1xufVxuXG5mdW5jdGlvbiBpc05vZGVRdWFudGlmaWVyTm9kZShub2RlKSB7XG4gIGxldCBub2RlUXVhbnRpZmllck5vZGUgPSBmYWxzZTtcblxuICBjb25zdCBub2RlTm9uVGVybWluYWxOb2RlID0gbm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgcnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICBydWxlTmFtZVF1YW50aWZpZXJSdWxlTmFtZSA9IChydWxlTmFtZSA9PT0gUXVhbnRpZmllclJ1bGVOYW1lKTtcblxuICAgIG5vZGVRdWFudGlmaWVyTm9kZSA9IHJ1bGVOYW1lUXVhbnRpZmllclJ1bGVOYW1lOyAgLy8vXG4gIH1cblxuICByZXR1cm4gbm9kZVF1YW50aWZpZXJOb2RlO1xufVxuXG5mdW5jdGlvbiBpc05vZGVMb29rQWhlYWRNb2RpZmllck5vZGUobm9kZSkge1xuICBsZXQgbm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGVOYW1lTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSA9IChydWxlTmFtZSA9PT0gTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSk7XG5cbiAgICBub2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlID0gcnVsZU5hbWVMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lOyAgLy8vXG4gIH1cblxuICByZXR1cm4gbm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZTtcblxufVxuXG5mdW5jdGlvbiBydWxlTmFtZUZyb21RdWFudGlmaWVyTm9kZShxdWFudGlmaWVyTm9kZSkge1xuICBsZXQgbm9uVGVybWluYWxOb2RlO1xuXG4gIG5vblRlcm1pbmFsTm9kZSA9IHF1YW50aWZpZXJOb2RlOyAvLy9cblxuICBjb25zdCBjaGlsZE5vZGVzID0gbm9uVGVybWluYWxOb2RlLmdldENoaWxkTm9kZXMoKSxcbiAgICAgICAgZmlyc3RDaGlsZE5vZGUgPSBmaXJzdChjaGlsZE5vZGVzKTtcblxuICBub25UZXJtaW5hbE5vZGUgPSBmaXJzdENoaWxkTm9kZTsgIC8vL1xuXG4gIGNvbnN0IHJ1bGVOYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFJ1bGVOYW1lKCk7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNOb2RlQ2hvaWNlTm9kZSxcbiAgaXNOb2RlUnVsZU5hbWVOb2RlLFxuICBpc05vZGVRdWFudGlmaWVyTm9kZSxcbiAgaXNOb2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlLFxuICBydWxlTmFtZUZyb21RdWFudGlmaWVyTm9kZVxufTtcbiJdfQ==