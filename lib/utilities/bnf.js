"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isNodeChoiceNode = isNodeChoiceNode;
exports.isNodeRuleNameNode = isNodeRuleNameNode;
exports.isNodeQuantifierNode = isNodeQuantifierNode;
exports.isNodeLookAheadModifierNode = isNodeLookAheadModifierNode;
exports.ruleNameFromQuantifierNode = ruleNameFromQuantifierNode;
var _array = require("../utilities/array");
var _ruleNames = require("../bnf/ruleNames");
function isNodeChoiceNode(node) {
    var nodeNoChoiceNode = false;
    var nodeTerminalNode = node.isTerminalNode();
    if (nodeTerminalNode) {
        var terminalNode = node, terminalNodeContent = terminalNode.getContent();
        nodeNoChoiceNode = terminalNodeContent === "|";
    }
    return nodeNoChoiceNode;
}
function isNodeRuleNameNode(node) {
    var nodeRuleNameNode = false;
    var nodeTerminalNode = node.isTerminalNode(), nodeNonTerminalNode = !nodeTerminalNode;
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, nonTerminalNodeRuleName = nonTerminalNode.getRuleName();
        nodeRuleNameNode = nonTerminalNodeRuleName === _ruleNames.RuleNameRuleName;
    }
    return nodeRuleNameNode;
}
function isNodeQuantifierNode(node) {
    var nodeQuantifierNode = false;
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, ruleName = nonTerminalNode.getRuleName(), ruleNameQuantifierRuleName = ruleName === _ruleNames.QuantifierRuleName;
        nodeQuantifierNode = ruleNameQuantifierRuleName; ///
    }
    return nodeQuantifierNode;
}
function isNodeLookAheadModifierNode(node) {
    var nodeLookAheadModifierNode = false;
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, ruleName = nonTerminalNode.getRuleName(), ruleNameLookAheadModifierRuleName = ruleName === _ruleNames.LookAheadModifierRuleName;
        nodeLookAheadModifierNode = ruleNameLookAheadModifierRuleName; ///
    }
    return nodeLookAheadModifierNode;
}
function ruleNameFromQuantifierNode(quantifierNode) {
    var nonTerminalNode;
    nonTerminalNode = quantifierNode; ///
    var childNodes = nonTerminalNode.getChildNodes(), firstChildNode = (0, _array).first(childNodes);
    nonTerminalNode = firstChildNode; ///
    var ruleName = nonTerminalNode.getRuleName();
    return ruleName;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvYm5mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IExvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUsIFF1YW50aWZpZXJSdWxlTmFtZSwgUnVsZU5hbWVSdWxlTmFtZSB9IGZyb20gXCIuLi9ibmYvcnVsZU5hbWVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVDaG9pY2VOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVOb0Nob2ljZU5vZGUgPSBmYWxzZTtcblxuICBjb25zdCBub2RlVGVybWluYWxOb2RlID0gbm9kZS5pc1Rlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3QgdGVybWluYWxOb2RlID0gbm9kZSwgIC8vL1xuICAgICAgICAgIHRlcm1pbmFsTm9kZUNvbnRlbnQgPSB0ZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpO1xuXG4gICAgbm9kZU5vQ2hvaWNlTm9kZSA9ICh0ZXJtaW5hbE5vZGVDb250ZW50ID09PSBcInxcIik7XG4gIH1cblxuICByZXR1cm4gbm9kZU5vQ2hvaWNlTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVJ1bGVOYW1lTm9kZShub2RlKSB7XG4gIGxldCBub2RlUnVsZU5hbWVOb2RlID0gZmFsc2U7XG5cbiAgY29uc3Qgbm9kZVRlcm1pbmFsTm9kZSA9IG5vZGUuaXNUZXJtaW5hbE5vZGUoKSxcbiAgICAgICAgbm9kZU5vblRlcm1pbmFsTm9kZSA9ICFub2RlVGVybWluYWxOb2RlO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgbm9uVGVybWluYWxOb2RlUnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICAgIG5vZGVSdWxlTmFtZU5vZGUgPSAobm9uVGVybWluYWxOb2RlUnVsZU5hbWUgPT09IFJ1bGVOYW1lUnVsZU5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVSdWxlTmFtZU5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVRdWFudGlmaWVyTm9kZShub2RlKSB7XG4gIGxldCBub2RlUXVhbnRpZmllck5vZGUgPSBmYWxzZTtcblxuICBjb25zdCBub2RlTm9uVGVybWluYWxOb2RlID0gbm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgcnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICBydWxlTmFtZVF1YW50aWZpZXJSdWxlTmFtZSA9IChydWxlTmFtZSA9PT0gUXVhbnRpZmllclJ1bGVOYW1lKTtcblxuICAgIG5vZGVRdWFudGlmaWVyTm9kZSA9IHJ1bGVOYW1lUXVhbnRpZmllclJ1bGVOYW1lOyAgLy8vXG4gIH1cblxuICByZXR1cm4gbm9kZVF1YW50aWZpZXJOb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVMb29rQWhlYWRNb2RpZmllck5vZGUgPSBmYWxzZTtcblxuICBjb25zdCBub2RlTm9uVGVybWluYWxOb2RlID0gbm9kZS5pc05vblRlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgcnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKSxcbiAgICAgICAgICBydWxlTmFtZUxvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUgPSAocnVsZU5hbWUgPT09IExvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUpO1xuXG4gICAgbm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZSA9IHJ1bGVOYW1lTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZTsgIC8vL1xuICB9XG5cbiAgcmV0dXJuIG5vZGVMb29rQWhlYWRNb2RpZmllck5vZGU7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVOYW1lRnJvbVF1YW50aWZpZXJOb2RlKHF1YW50aWZpZXJOb2RlKSB7XG4gIGxldCBub25UZXJtaW5hbE5vZGU7XG5cbiAgbm9uVGVybWluYWxOb2RlID0gcXVhbnRpZmllck5vZGU7IC8vL1xuXG4gIGNvbnN0IGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpLFxuICAgICAgICBmaXJzdENoaWxkTm9kZSA9IGZpcnN0KGNoaWxkTm9kZXMpO1xuXG4gIG5vblRlcm1pbmFsTm9kZSA9IGZpcnN0Q2hpbGROb2RlOyAgLy8vXG5cbiAgY29uc3QgcnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICByZXR1cm4gcnVsZU5hbWU7XG59XG4iXSwibmFtZXMiOlsiaXNOb2RlQ2hvaWNlTm9kZSIsImlzTm9kZVJ1bGVOYW1lTm9kZSIsImlzTm9kZVF1YW50aWZpZXJOb2RlIiwiaXNOb2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlIiwicnVsZU5hbWVGcm9tUXVhbnRpZmllck5vZGUiLCJub2RlIiwibm9kZU5vQ2hvaWNlTm9kZSIsIm5vZGVUZXJtaW5hbE5vZGUiLCJpc1Rlcm1pbmFsTm9kZSIsInRlcm1pbmFsTm9kZSIsInRlcm1pbmFsTm9kZUNvbnRlbnQiLCJnZXRDb250ZW50Iiwibm9kZVJ1bGVOYW1lTm9kZSIsIm5vZGVOb25UZXJtaW5hbE5vZGUiLCJub25UZXJtaW5hbE5vZGUiLCJub25UZXJtaW5hbE5vZGVSdWxlTmFtZSIsImdldFJ1bGVOYW1lIiwibm9kZVF1YW50aWZpZXJOb2RlIiwiaXNOb25UZXJtaW5hbE5vZGUiLCJydWxlTmFtZSIsInJ1bGVOYW1lUXVhbnRpZmllclJ1bGVOYW1lIiwibm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZSIsInJ1bGVOYW1lTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSIsInF1YW50aWZpZXJOb2RlIiwiY2hpbGROb2RlcyIsImdldENoaWxkTm9kZXMiLCJmaXJzdENoaWxkTm9kZSJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWTs7OztRQUtJQSxnQkFBZ0IsR0FBaEJBLGdCQUFnQjtRQWVoQkMsa0JBQWtCLEdBQWxCQSxrQkFBa0I7UUFnQmxCQyxvQkFBb0IsR0FBcEJBLG9CQUFvQjtRQWdCcEJDLDJCQUEyQixHQUEzQkEsMkJBQTJCO1FBaUIzQkMsMEJBQTBCLEdBQTFCQSwwQkFBMEI7QUFuRXBCLEdBQW9CLENBQXBCLE1BQW9CO0FBQ3NDLEdBQWtCLENBQWxCLFVBQWtCO1NBRWxGSixnQkFBZ0IsQ0FBQ0ssSUFBSSxFQUFFLENBQUM7SUFDdEMsR0FBRyxDQUFDQyxnQkFBZ0IsR0FBRyxLQUFLO0lBRTVCLEdBQUssQ0FBQ0MsZ0JBQWdCLEdBQUdGLElBQUksQ0FBQ0csY0FBYztJQUU1QyxFQUFFLEVBQUVELGdCQUFnQixFQUFFLENBQUM7UUFDckIsR0FBSyxDQUFDRSxZQUFZLEdBQUdKLElBQUksRUFDbkJLLG1CQUFtQixHQUFHRCxZQUFZLENBQUNFLFVBQVU7UUFFbkRMLGdCQUFnQixHQUFJSSxtQkFBbUIsS0FBSyxDQUFHO0lBQ2pELENBQUM7SUFFRCxNQUFNLENBQUNKLGdCQUFnQjtBQUN6QixDQUFDO1NBRWVMLGtCQUFrQixDQUFDSSxJQUFJLEVBQUUsQ0FBQztJQUN4QyxHQUFHLENBQUNPLGdCQUFnQixHQUFHLEtBQUs7SUFFNUIsR0FBSyxDQUFDTCxnQkFBZ0IsR0FBR0YsSUFBSSxDQUFDRyxjQUFjLElBQ3RDSyxtQkFBbUIsSUFBSU4sZ0JBQWdCO0lBRTdDLEVBQUUsRUFBRU0sbUJBQW1CLEVBQUUsQ0FBQztRQUN4QixHQUFLLENBQUNDLGVBQWUsR0FBR1QsSUFBSSxFQUN0QlUsdUJBQXVCLEdBQUdELGVBQWUsQ0FBQ0UsV0FBVztRQUUzREosZ0JBQWdCLEdBQUlHLHVCQUF1QixLQTNCaUMsVUFBa0I7SUE0QmhHLENBQUM7SUFFRCxNQUFNLENBQUNILGdCQUFnQjtBQUN6QixDQUFDO1NBRWVWLG9CQUFvQixDQUFDRyxJQUFJLEVBQUUsQ0FBQztJQUMxQyxHQUFHLENBQUNZLGtCQUFrQixHQUFHLEtBQUs7SUFFOUIsR0FBSyxDQUFDSixtQkFBbUIsR0FBR1IsSUFBSSxDQUFDYSxpQkFBaUI7SUFFbEQsRUFBRSxFQUFFTCxtQkFBbUIsRUFBRSxDQUFDO1FBQ3hCLEdBQUssQ0FBQ0MsZUFBZSxHQUFHVCxJQUFJLEVBQ3RCYyxRQUFRLEdBQUdMLGVBQWUsQ0FBQ0UsV0FBVyxJQUN0Q0ksMEJBQTBCLEdBQUlELFFBQVEsS0F6Q2dDLFVBQWtCO1FBMkM5RkYsa0JBQWtCLEdBQUdHLDBCQUEwQixDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztJQUN2RCxDQUFDO0lBRUQsTUFBTSxDQUFDSCxrQkFBa0I7QUFDM0IsQ0FBQztTQUVlZCwyQkFBMkIsQ0FBQ0UsSUFBSSxFQUFFLENBQUM7SUFDakQsR0FBRyxDQUFDZ0IseUJBQXlCLEdBQUcsS0FBSztJQUVyQyxHQUFLLENBQUNSLG1CQUFtQixHQUFHUixJQUFJLENBQUNhLGlCQUFpQjtJQUVsRCxFQUFFLEVBQUVMLG1CQUFtQixFQUFFLENBQUM7UUFDeEIsR0FBSyxDQUFDQyxlQUFlLEdBQUdULElBQUksRUFDdEJjLFFBQVEsR0FBR0wsZUFBZSxDQUFDRSxXQUFXLElBQ3RDTSxpQ0FBaUMsR0FBSUgsUUFBUSxLQXpEeUIsVUFBa0I7UUEyRDlGRSx5QkFBeUIsR0FBR0MsaUNBQWlDLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBQ3JFLENBQUM7SUFFRCxNQUFNLENBQUNELHlCQUF5QjtBQUVsQyxDQUFDO1NBRWVqQiwwQkFBMEIsQ0FBQ21CLGNBQWMsRUFBRSxDQUFDO0lBQzFELEdBQUcsQ0FBQ1QsZUFBZTtJQUVuQkEsZUFBZSxHQUFHUyxjQUFjLENBQUUsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBRXJDLEdBQUssQ0FBQ0MsVUFBVSxHQUFHVixlQUFlLENBQUNXLGFBQWEsSUFDMUNDLGNBQWMsT0F6RUEsTUFBb0IsUUF5RVhGLFVBQVU7SUFFdkNWLGVBQWUsR0FBR1ksY0FBYyxDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztJQUV0QyxHQUFLLENBQUNQLFFBQVEsR0FBR0wsZUFBZSxDQUFDRSxXQUFXO0lBRTVDLE1BQU0sQ0FBQ0csUUFBUTtBQUNqQixDQUFDIn0=