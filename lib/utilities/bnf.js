"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isNodeChoiceNode: function() {
        return isNodeChoiceNode;
    },
    isNodeRuleNameNode: function() {
        return isNodeRuleNameNode;
    },
    isNodeQuantifierNode: function() {
        return isNodeQuantifierNode;
    },
    isNodeLookAheadModifierNode: function() {
        return isNodeLookAheadModifierNode;
    },
    ruleNameFromQuantifierNode: function() {
        return ruleNameFromQuantifierNode;
    }
});
var _necessary = require("necessary");
var _ruleNames = require("../ruleNames");
var first = _necessary.arrayUtilities.first;
function isNodeChoiceNode(node) {
    var nodeNoChoiceNode = false;
    var nodeTerminalNode = node.isTerminalNode();
    if (nodeTerminalNode) {
        var terminalNode = node, terminalNodeContent = terminalNode.getContent();
        nodeNoChoiceNode = terminalNodeContent === "|";
    }
    return nodeNoChoiceNode;
}
function isNodeRuleNameNode(node) {
    var nodeRuleNameNode = false;
    var nodeTerminalNode = node.isTerminalNode(), nodeNonTerminalNode = !nodeTerminalNode;
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, nonTerminalNodeRuleName = nonTerminalNode.getRuleName();
        nodeRuleNameNode = nonTerminalNodeRuleName === _ruleNames.ruleNameRuleName;
    }
    return nodeRuleNameNode;
}
function isNodeQuantifierNode(node) {
    var nodeQuantifierNode = false;
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, ruleName = nonTerminalNode.getRuleName(), ruleNameQuantifierRuleName = ruleName === _ruleNames.quantifierRuleName;
        nodeQuantifierNode = ruleNameQuantifierRuleName; ///
    }
    return nodeQuantifierNode;
}
function isNodeLookAheadModifierNode(node) {
    var nodeLookAheadModifierNode = false;
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, ruleName = nonTerminalNode.getRuleName(), ruleNameLookAheadModifierRuleName = ruleName === _ruleNames.lookAheadModifierRuleName;
        nodeLookAheadModifierNode = ruleNameLookAheadModifierRuleName; ///
    }
    return nodeLookAheadModifierNode;
}
function ruleNameFromQuantifierNode(quantifierNode) {
    var nonTerminalNode;
    nonTerminalNode = quantifierNode; ///
    var childNodes = nonTerminalNode.getChildNodes(), firstChildNode = first(childNodes);
    nonTerminalNode = firstChildNode; ///
    var ruleName = nonTerminalNode.getRuleName();
    return ruleName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvYm5mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgbG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSwgcXVhbnRpZmllclJ1bGVOYW1lLCBydWxlTmFtZVJ1bGVOYW1lIH0gZnJvbSBcIi4uL3J1bGVOYW1lc1wiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUNob2ljZU5vZGUobm9kZSkge1xuICBsZXQgbm9kZU5vQ2hvaWNlTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVUZXJtaW5hbE5vZGUgPSBub2RlLmlzVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVUZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCB0ZXJtaW5hbE5vZGUgPSBub2RlLCAgLy8vXG4gICAgICAgICAgdGVybWluYWxOb2RlQ29udGVudCA9IHRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCk7XG5cbiAgICBub2RlTm9DaG9pY2VOb2RlID0gKHRlcm1pbmFsTm9kZUNvbnRlbnQgPT09IFwifFwiKTtcbiAgfVxuXG4gIHJldHVybiBub2RlTm9DaG9pY2VOb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlUnVsZU5hbWVOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVSdWxlTmFtZU5vZGUgPSBmYWxzZTtcblxuICBjb25zdCBub2RlVGVybWluYWxOb2RlID0gbm9kZS5pc1Rlcm1pbmFsTm9kZSgpLFxuICAgICAgICBub2RlTm9uVGVybWluYWxOb2RlID0gIW5vZGVUZXJtaW5hbE5vZGU7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBub25UZXJtaW5hbE5vZGVSdWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpO1xuXG4gICAgbm9kZVJ1bGVOYW1lTm9kZSA9IChub25UZXJtaW5hbE5vZGVSdWxlTmFtZSA9PT0gcnVsZU5hbWVSdWxlTmFtZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZVJ1bGVOYW1lTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVF1YW50aWZpZXJOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVRdWFudGlmaWVyTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGVOYW1lUXVhbnRpZmllclJ1bGVOYW1lID0gKHJ1bGVOYW1lID09PSBxdWFudGlmaWVyUnVsZU5hbWUpO1xuXG4gICAgbm9kZVF1YW50aWZpZXJOb2RlID0gcnVsZU5hbWVRdWFudGlmaWVyUnVsZU5hbWU7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBub2RlUXVhbnRpZmllck5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVMb29rQWhlYWRNb2RpZmllck5vZGUobm9kZSkge1xuICBsZXQgbm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGVOYW1lTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSA9IChydWxlTmFtZSA9PT0gbG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSk7XG5cbiAgICBub2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlID0gcnVsZU5hbWVMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lOyAgLy8vXG4gIH1cblxuICByZXR1cm4gbm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZU5hbWVGcm9tUXVhbnRpZmllck5vZGUocXVhbnRpZmllck5vZGUpIHtcbiAgbGV0IG5vblRlcm1pbmFsTm9kZTtcblxuICBub25UZXJtaW5hbE5vZGUgPSBxdWFudGlmaWVyTm9kZTsgLy8vXG5cbiAgY29uc3QgY2hpbGROb2RlcyA9IG5vblRlcm1pbmFsTm9kZS5nZXRDaGlsZE5vZGVzKCksXG4gICAgICAgIGZpcnN0Q2hpbGROb2RlID0gZmlyc3QoY2hpbGROb2Rlcyk7XG5cbiAgbm9uVGVybWluYWxOb2RlID0gZmlyc3RDaGlsZE5vZGU7ICAvLy9cblxuICBjb25zdCBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpO1xuXG4gIHJldHVybiBydWxlTmFtZTtcbn1cbiJdLCJuYW1lcyI6WyJpc05vZGVDaG9pY2VOb2RlIiwiaXNOb2RlUnVsZU5hbWVOb2RlIiwiaXNOb2RlUXVhbnRpZmllck5vZGUiLCJpc05vZGVMb29rQWhlYWRNb2RpZmllck5vZGUiLCJydWxlTmFtZUZyb21RdWFudGlmaWVyTm9kZSIsImZpcnN0IiwiYXJyYXlVdGlsaXRpZXMiLCJub2RlIiwibm9kZU5vQ2hvaWNlTm9kZSIsIm5vZGVUZXJtaW5hbE5vZGUiLCJpc1Rlcm1pbmFsTm9kZSIsInRlcm1pbmFsTm9kZSIsInRlcm1pbmFsTm9kZUNvbnRlbnQiLCJnZXRDb250ZW50Iiwibm9kZVJ1bGVOYW1lTm9kZSIsIm5vZGVOb25UZXJtaW5hbE5vZGUiLCJub25UZXJtaW5hbE5vZGUiLCJub25UZXJtaW5hbE5vZGVSdWxlTmFtZSIsImdldFJ1bGVOYW1lIiwicnVsZU5hbWVSdWxlTmFtZSIsIm5vZGVRdWFudGlmaWVyTm9kZSIsImlzTm9uVGVybWluYWxOb2RlIiwicnVsZU5hbWUiLCJydWxlTmFtZVF1YW50aWZpZXJSdWxlTmFtZSIsInF1YW50aWZpZXJSdWxlTmFtZSIsIm5vZGVMb29rQWhlYWRNb2RpZmllck5vZGUiLCJydWxlTmFtZUxvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUiLCJsb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lIiwicXVhbnRpZmllck5vZGUiLCJjaGlsZE5vZGVzIiwiZ2V0Q2hpbGROb2RlcyIsImZpcnN0Q2hpbGROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7SUFRZ0JBLGdCQUFnQjtlQUFoQkE7O0lBZUFDLGtCQUFrQjtlQUFsQkE7O0lBZ0JBQyxvQkFBb0I7ZUFBcEJBOztJQWdCQUMsMkJBQTJCO2VBQTNCQTs7SUFpQkFDLDBCQUEwQjtlQUExQkE7Ozt5QkF0RWU7eUJBRWlEO0FBRWhGLElBQU0sQUFBRUMsUUFBVUMseUJBQWMsQ0FBeEJEO0FBRUQsU0FBU0wsaUJBQWlCTyxJQUFJO0lBQ25DLElBQUlDLG1CQUFtQjtJQUV2QixJQUFNQyxtQkFBbUJGLEtBQUtHLGNBQWM7SUFFNUMsSUFBSUQsa0JBQWtCO1FBQ3BCLElBQU1FLGVBQWVKLE1BQ2ZLLHNCQUFzQkQsYUFBYUUsVUFBVTtRQUVuREwsbUJBQW9CSSx3QkFBd0I7SUFDOUM7SUFFQSxPQUFPSjtBQUNUO0FBRU8sU0FBU1AsbUJBQW1CTSxJQUFJO0lBQ3JDLElBQUlPLG1CQUFtQjtJQUV2QixJQUFNTCxtQkFBbUJGLEtBQUtHLGNBQWMsSUFDdENLLHNCQUFzQixDQUFDTjtJQUU3QixJQUFJTSxxQkFBcUI7UUFDdkIsSUFBTUMsa0JBQWtCVCxNQUNsQlUsMEJBQTBCRCxnQkFBZ0JFLFdBQVc7UUFFM0RKLG1CQUFvQkcsNEJBQTRCRSwyQkFBZ0I7SUFDbEU7SUFFQSxPQUFPTDtBQUNUO0FBRU8sU0FBU1oscUJBQXFCSyxJQUFJO0lBQ3ZDLElBQUlhLHFCQUFxQjtJQUV6QixJQUFNTCxzQkFBc0JSLEtBQUtjLGlCQUFpQjtJQUVsRCxJQUFJTixxQkFBcUI7UUFDdkIsSUFBTUMsa0JBQWtCVCxNQUNsQmUsV0FBV04sZ0JBQWdCRSxXQUFXLElBQ3RDSyw2QkFBOEJELGFBQWFFLDZCQUFrQjtRQUVuRUoscUJBQXFCRyw0QkFBNkIsR0FBRztJQUN2RDtJQUVBLE9BQU9IO0FBQ1Q7QUFFTyxTQUFTakIsNEJBQTRCSSxJQUFJO0lBQzlDLElBQUlrQiw0QkFBNEI7SUFFaEMsSUFBTVYsc0JBQXNCUixLQUFLYyxpQkFBaUI7SUFFbEQsSUFBSU4scUJBQXFCO1FBQ3ZCLElBQU1DLGtCQUFrQlQsTUFDbEJlLFdBQVdOLGdCQUFnQkUsV0FBVyxJQUN0Q1Esb0NBQXFDSixhQUFhSyxvQ0FBeUI7UUFFakZGLDRCQUE0QkMsbUNBQW9DLEdBQUc7SUFDckU7SUFFQSxPQUFPRDtBQUVUO0FBRU8sU0FBU3JCLDJCQUEyQndCLGNBQWM7SUFDdkQsSUFBSVo7SUFFSkEsa0JBQWtCWSxnQkFBZ0IsR0FBRztJQUVyQyxJQUFNQyxhQUFhYixnQkFBZ0JjLGFBQWEsSUFDMUNDLGlCQUFpQjFCLE1BQU13QjtJQUU3QmIsa0JBQWtCZSxnQkFBaUIsR0FBRztJQUV0QyxJQUFNVCxXQUFXTixnQkFBZ0JFLFdBQVc7SUFFNUMsT0FBT0k7QUFDVCJ9