"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isNodeChoiceNode = isNodeChoiceNode;
exports.isNodeRuleNameNode = isNodeRuleNameNode;
exports.isNodeQuantifierNode = isNodeQuantifierNode;
exports.isNodeLookAheadModifierNode = isNodeLookAheadModifierNode;
exports.ruleNameFromQuantifierNode = ruleNameFromQuantifierNode;
var _array = require("../utilities/array");
var _ruleNames = require("../ruleNames");
function isNodeChoiceNode(node) {
    var nodeNoChoiceNode = false;
    var nodeTerminalNode = node.isTerminalNode();
    if (nodeTerminalNode) {
        var terminalNode = node, terminalNodeContent = terminalNode.getContent();
        nodeNoChoiceNode = terminalNodeContent === "|";
    }
    return nodeNoChoiceNode;
}
function isNodeRuleNameNode(node) {
    var nodeRuleNameNode = false;
    var nodeTerminalNode = node.isTerminalNode(), nodeNonTerminalNode = !nodeTerminalNode;
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, nonTerminalNodeRuleName = nonTerminalNode.getRuleName();
        nodeRuleNameNode = nonTerminalNodeRuleName === _ruleNames.RuleNameRuleName;
    }
    return nodeRuleNameNode;
}
function isNodeQuantifierNode(node) {
    var nodeQuantifierNode = false;
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, ruleName = nonTerminalNode.getRuleName(), ruleNameQuantifierRuleName = ruleName === _ruleNames.QuantifierRuleName;
        nodeQuantifierNode = ruleNameQuantifierRuleName; ///
    }
    return nodeQuantifierNode;
}
function isNodeLookAheadModifierNode(node) {
    var nodeLookAheadModifierNode = false;
    var nodeNonTerminalNode = node.isNonTerminalNode();
    if (nodeNonTerminalNode) {
        var nonTerminalNode = node, ruleName = nonTerminalNode.getRuleName(), ruleNameLookAheadModifierRuleName = ruleName === _ruleNames.LookAheadModifierRuleName;
        nodeLookAheadModifierNode = ruleNameLookAheadModifierRuleName; ///
    }
    return nodeLookAheadModifierNode;
}
function ruleNameFromQuantifierNode(quantifierNode) {
    var nonTerminalNode;
    nonTerminalNode = quantifierNode; ///
    var childNodes = nonTerminalNode.getChildNodes(), firstChildNode = (0, _array).first(childNodes);
    nonTerminalNode = firstChildNode; ///
    var ruleName = nonTerminalNode.getRuleName();
    return ruleName;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvYm5mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gXCIuLi91dGlsaXRpZXMvYXJyYXlcIjtcbmltcG9ydCB7IExvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUsIFF1YW50aWZpZXJSdWxlTmFtZSwgUnVsZU5hbWVSdWxlTmFtZSB9IGZyb20gXCIuLi9ydWxlTmFtZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUNob2ljZU5vZGUobm9kZSkge1xuICBsZXQgbm9kZU5vQ2hvaWNlTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVUZXJtaW5hbE5vZGUgPSBub2RlLmlzVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVUZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCB0ZXJtaW5hbE5vZGUgPSBub2RlLCAgLy8vXG4gICAgICAgICAgdGVybWluYWxOb2RlQ29udGVudCA9IHRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCk7XG5cbiAgICBub2RlTm9DaG9pY2VOb2RlID0gKHRlcm1pbmFsTm9kZUNvbnRlbnQgPT09IFwifFwiKTtcbiAgfVxuXG4gIHJldHVybiBub2RlTm9DaG9pY2VOb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlUnVsZU5hbWVOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVSdWxlTmFtZU5vZGUgPSBmYWxzZTtcblxuICBjb25zdCBub2RlVGVybWluYWxOb2RlID0gbm9kZS5pc1Rlcm1pbmFsTm9kZSgpLFxuICAgICAgICBub2RlTm9uVGVybWluYWxOb2RlID0gIW5vZGVUZXJtaW5hbE5vZGU7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBub25UZXJtaW5hbE5vZGVSdWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpO1xuXG4gICAgbm9kZVJ1bGVOYW1lTm9kZSA9IChub25UZXJtaW5hbE5vZGVSdWxlTmFtZSA9PT0gUnVsZU5hbWVSdWxlTmFtZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZVJ1bGVOYW1lTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVF1YW50aWZpZXJOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVRdWFudGlmaWVyTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGVOYW1lUXVhbnRpZmllclJ1bGVOYW1lID0gKHJ1bGVOYW1lID09PSBRdWFudGlmaWVyUnVsZU5hbWUpO1xuXG4gICAgbm9kZVF1YW50aWZpZXJOb2RlID0gcnVsZU5hbWVRdWFudGlmaWVyUnVsZU5hbWU7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBub2RlUXVhbnRpZmllck5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVMb29rQWhlYWRNb2RpZmllck5vZGUobm9kZSkge1xuICBsZXQgbm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGVOYW1lTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSA9IChydWxlTmFtZSA9PT0gTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSk7XG5cbiAgICBub2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlID0gcnVsZU5hbWVMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lOyAgLy8vXG4gIH1cblxuICByZXR1cm4gbm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZU5hbWVGcm9tUXVhbnRpZmllck5vZGUocXVhbnRpZmllck5vZGUpIHtcbiAgbGV0IG5vblRlcm1pbmFsTm9kZTtcblxuICBub25UZXJtaW5hbE5vZGUgPSBxdWFudGlmaWVyTm9kZTsgLy8vXG5cbiAgY29uc3QgY2hpbGROb2RlcyA9IG5vblRlcm1pbmFsTm9kZS5nZXRDaGlsZE5vZGVzKCksXG4gICAgICAgIGZpcnN0Q2hpbGROb2RlID0gZmlyc3QoY2hpbGROb2Rlcyk7XG5cbiAgbm9uVGVybWluYWxOb2RlID0gZmlyc3RDaGlsZE5vZGU7ICAvLy9cblxuICBjb25zdCBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpO1xuXG4gIHJldHVybiBydWxlTmFtZTtcbn1cbiJdLCJuYW1lcyI6WyJpc05vZGVDaG9pY2VOb2RlIiwiaXNOb2RlUnVsZU5hbWVOb2RlIiwiaXNOb2RlUXVhbnRpZmllck5vZGUiLCJpc05vZGVMb29rQWhlYWRNb2RpZmllck5vZGUiLCJydWxlTmFtZUZyb21RdWFudGlmaWVyTm9kZSIsIm5vZGUiLCJub2RlTm9DaG9pY2VOb2RlIiwibm9kZVRlcm1pbmFsTm9kZSIsImlzVGVybWluYWxOb2RlIiwidGVybWluYWxOb2RlIiwidGVybWluYWxOb2RlQ29udGVudCIsImdldENvbnRlbnQiLCJub2RlUnVsZU5hbWVOb2RlIiwibm9kZU5vblRlcm1pbmFsTm9kZSIsIm5vblRlcm1pbmFsTm9kZSIsIm5vblRlcm1pbmFsTm9kZVJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJSdWxlTmFtZVJ1bGVOYW1lIiwibm9kZVF1YW50aWZpZXJOb2RlIiwiaXNOb25UZXJtaW5hbE5vZGUiLCJydWxlTmFtZSIsInJ1bGVOYW1lUXVhbnRpZmllclJ1bGVOYW1lIiwiUXVhbnRpZmllclJ1bGVOYW1lIiwibm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZSIsInJ1bGVOYW1lTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSIsIkxvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUiLCJxdWFudGlmaWVyTm9kZSIsImNoaWxkTm9kZXMiLCJnZXRDaGlsZE5vZGVzIiwiZmlyc3RDaGlsZE5vZGUiLCJmaXJzdCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBS0dBLGdCQUFnQixHQUFoQkEsZ0JBQWdCO1FBZWhCQyxrQkFBa0IsR0FBbEJBLGtCQUFrQjtRQWdCbEJDLG9CQUFvQixHQUFwQkEsb0JBQW9CO1FBZ0JwQkMsMkJBQTJCLEdBQTNCQSwyQkFBMkI7UUFpQjNCQywwQkFBMEIsR0FBMUJBLDBCQUEwQjtBQW5FcEIsSUFBQSxNQUFvQixXQUFwQixvQkFBb0IsQ0FBQTtBQUNzQyxJQUFBLFVBQWMsV0FBZCxjQUFjLENBQUE7QUFFdkYsU0FBU0osZ0JBQWdCLENBQUNLLElBQUksRUFBRTtJQUNyQyxJQUFJQyxnQkFBZ0IsR0FBRyxLQUFLLEFBQUM7SUFFN0IsSUFBTUMsZ0JBQWdCLEdBQUdGLElBQUksQ0FBQ0csY0FBYyxFQUFFLEFBQUM7SUFFL0MsSUFBSUQsZ0JBQWdCLEVBQUU7UUFDcEIsSUFBTUUsWUFBWSxHQUFHSixJQUFJLEVBQ25CSyxtQkFBbUIsR0FBR0QsWUFBWSxDQUFDRSxVQUFVLEVBQUUsQUFBQztRQUV0REwsZ0JBQWdCLEdBQUlJLG1CQUFtQixLQUFLLEdBQUcsQUFBQyxDQUFDO0tBQ2xEO0lBRUQsT0FBT0osZ0JBQWdCLENBQUM7Q0FDekI7QUFFTSxTQUFTTCxrQkFBa0IsQ0FBQ0ksSUFBSSxFQUFFO0lBQ3ZDLElBQUlPLGdCQUFnQixHQUFHLEtBQUssQUFBQztJQUU3QixJQUFNTCxnQkFBZ0IsR0FBR0YsSUFBSSxDQUFDRyxjQUFjLEVBQUUsRUFDeENLLG1CQUFtQixHQUFHLENBQUNOLGdCQUFnQixBQUFDO0lBRTlDLElBQUlNLG1CQUFtQixFQUFFO1FBQ3ZCLElBQU1DLGVBQWUsR0FBR1QsSUFBSSxFQUN0QlUsdUJBQXVCLEdBQUdELGVBQWUsQ0FBQ0UsV0FBVyxFQUFFLEFBQUM7UUFFOURKLGdCQUFnQixHQUFJRyx1QkFBdUIsS0FBS0UsVUFBZ0IsaUJBQUEsQUFBQyxDQUFDO0tBQ25FO0lBRUQsT0FBT0wsZ0JBQWdCLENBQUM7Q0FDekI7QUFFTSxTQUFTVixvQkFBb0IsQ0FBQ0csSUFBSSxFQUFFO0lBQ3pDLElBQUlhLGtCQUFrQixHQUFHLEtBQUssQUFBQztJQUUvQixJQUFNTCxtQkFBbUIsR0FBR1IsSUFBSSxDQUFDYyxpQkFBaUIsRUFBRSxBQUFDO0lBRXJELElBQUlOLG1CQUFtQixFQUFFO1FBQ3ZCLElBQU1DLGVBQWUsR0FBR1QsSUFBSSxFQUN0QmUsUUFBUSxHQUFHTixlQUFlLENBQUNFLFdBQVcsRUFBRSxFQUN4Q0ssMEJBQTBCLEdBQUlELFFBQVEsS0FBS0UsVUFBa0IsbUJBQUEsQUFBQyxBQUFDO1FBRXJFSixrQkFBa0IsR0FBR0csMEJBQTBCLENBQUMsQ0FBRSxHQUFHO0tBQ3REO0lBRUQsT0FBT0gsa0JBQWtCLENBQUM7Q0FDM0I7QUFFTSxTQUFTZiwyQkFBMkIsQ0FBQ0UsSUFBSSxFQUFFO0lBQ2hELElBQUlrQix5QkFBeUIsR0FBRyxLQUFLLEFBQUM7SUFFdEMsSUFBTVYsbUJBQW1CLEdBQUdSLElBQUksQ0FBQ2MsaUJBQWlCLEVBQUUsQUFBQztJQUVyRCxJQUFJTixtQkFBbUIsRUFBRTtRQUN2QixJQUFNQyxlQUFlLEdBQUdULElBQUksRUFDdEJlLFFBQVEsR0FBR04sZUFBZSxDQUFDRSxXQUFXLEVBQUUsRUFDeENRLGlDQUFpQyxHQUFJSixRQUFRLEtBQUtLLFVBQXlCLDBCQUFBLEFBQUMsQUFBQztRQUVuRkYseUJBQXlCLEdBQUdDLGlDQUFpQyxDQUFDLENBQUUsR0FBRztLQUNwRTtJQUVELE9BQU9ELHlCQUF5QixDQUFDO0NBRWxDO0FBRU0sU0FBU25CLDBCQUEwQixDQUFDc0IsY0FBYyxFQUFFO0lBQ3pELElBQUlaLGVBQWUsQUFBQztJQUVwQkEsZUFBZSxHQUFHWSxjQUFjLENBQUMsQ0FBQyxHQUFHO0lBRXJDLElBQU1DLFVBQVUsR0FBR2IsZUFBZSxDQUFDYyxhQUFhLEVBQUUsRUFDNUNDLGNBQWMsR0FBR0MsQ0FBQUEsR0FBQUEsTUFBSyxBQUFZLENBQUEsTUFBWixDQUFDSCxVQUFVLENBQUMsQUFBQztJQUV6Q2IsZUFBZSxHQUFHZSxjQUFjLENBQUMsQ0FBRSxHQUFHO0lBRXRDLElBQU1ULFFBQVEsR0FBR04sZUFBZSxDQUFDRSxXQUFXLEVBQUUsQUFBQztJQUUvQyxPQUFPSSxRQUFRLENBQUM7Q0FDakIifQ==