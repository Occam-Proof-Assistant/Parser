'use strict';

var lexers = require('occam-lexers');

var ruleNames = require('../bnf/ruleNames'),
    arrayUtilities = require('../utilities/array');

var BNFLexer = lexers.BNFLexer,
    first = arrayUtilities.first,
    second = arrayUtilities.second,
    specialSymbols = BNFLexer.specialSymbols,
    plus = specialSymbols.plus,
    asterisk = specialSymbols.asterisk,
    questionMark = specialSymbols.questionMark,
    NO_WHITESPACE = specialSymbols.NO_WHITESPACE,
    RuleNameRuleName = ruleNames.RuleNameRuleName,
    RightRecursivePartRuleName = ruleNames.RightRecursivePartRuleName;


function isNodeChoiceNode(node) {
  var nodeNoChoiceNode = false;

  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    var terminalNode = node,
        terminalNodeContent = terminalNode.getContent();

    nodeNoChoiceNode = terminalNodeContent === '|';
  }

  return nodeNoChoiceNode;
}

function isNodeRuleNameNode(node) {
  var nodeRuleNameNode = false;

  var nodeTerminalNode = node.isTerminalNode(),
      nodeNonTerminalNode = !nodeTerminalNode;

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    nonTerminalNodeRuleName = nonTerminalNode.getRuleName();

    nodeRuleNameNode = nonTerminalNodeRuleName === RuleNameRuleName;
  }

  return nodeRuleNameNode;
}

function isNodeQuantifiersNode(node) {
  var nodeQuantifiersNode = false;

  var nodeTerminalNode = node.isTerminalNode(),
      nodeNonTerminalNode = !nodeTerminalNode;

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    childNodes = nonTerminalNode.getChildNodes(),
        firstChildNode = first(childNodes),
        firstChildNodeTerminalNode = firstChildNode.isTerminalNode();

    if (firstChildNodeTerminalNode) {
      var terminalNode = firstChildNode,
          ///
      terminalNodeContent = terminalNode.getContent();

      nodeQuantifiersNode = terminalNodeContent === plus || terminalNodeContent === asterisk || terminalNodeContent === questionMark;
    }
  }

  return nodeQuantifiersNode;
}

function isNodeNoWhitespaceNode(node) {
  var nodeNoWhitespaceNode = false;

  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    var terminalNode = node,
        terminalNodeContent = terminalNode.getContent();

    nodeNoWhitespaceNode = terminalNodeContent === NO_WHITESPACE;
  }

  return nodeNoWhitespaceNode;
}

function isNodeRightRecursivePartNode(node) {
  var nodeRightRecursivePartNode = false;

  var nodeTerminalNode = node.isTerminalNode(),
      nodeNonTerminalNode = !nodeTerminalNode;

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    nonTerminalNodeRuleName = nonTerminalNode.getRuleName();

    nodeRightRecursivePartNode = nonTerminalNodeRuleName === RightRecursivePartRuleName;
  }

  return nodeRightRecursivePartNode;
}

function quantifiersFromQuantifiersNode(quantifiersNode) {
  var quantifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var quantifier = quantifierFromQuantifiersNode(quantifiersNode);

  quantifiers.push(quantifier);

  var quantifiersNodeChildNodes = quantifiersNode.getChildNodes(),
      quantifiersNodeChildNodesLength = quantifiersNodeChildNodes.length;

  if (quantifiersNodeChildNodesLength === 2) {
    var secondQuantifiersNodeChildNode = second(quantifiersNodeChildNodes),
        secondQuantifiersNodeChildNodeQuantifiersNode = isNodeQuantifiersNode(secondQuantifiersNodeChildNode);

    if (secondQuantifiersNodeChildNodeQuantifiersNode) {
      quantifiersNode = secondQuantifiersNodeChildNode; ///

      quantifiers = quantifiersFromQuantifiersNode(quantifiersNode, quantifiers);
    }
  }

  return quantifiers;
}

module.exports = {
  isNodeChoiceNode: isNodeChoiceNode,
  isNodeRuleNameNode: isNodeRuleNameNode,
  isNodeQuantifiersNode: isNodeQuantifiersNode,
  isNodeNoWhitespaceNode: isNodeNoWhitespaceNode,
  isNodeRightRecursivePartNode: isNodeRightRecursivePartNode,
  quantifiersFromQuantifiersNode: quantifiersFromQuantifiersNode
};

function quantifierFromQuantifiersNode(quantifiersNode) {
  var quantifiersNodeChildNodes = quantifiersNode.getChildNodes(),
      firstQuantifiersNodeChildNode = first(quantifiersNodeChildNodes),
      firstQuantifiersNodeChildNodeContent = firstQuantifiersNodeChildNode.getContent(),
      quantifier = firstQuantifiersNodeChildNodeContent;

  return quantifier;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,