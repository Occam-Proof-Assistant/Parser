"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNodeChoiceNode = isNodeChoiceNode;
exports.isNodeRuleNameNode = isNodeRuleNameNode;
exports.isNodeQuantifierNode = isNodeQuantifierNode;
exports.isNodeLookAheadModifierNode = isNodeLookAheadModifierNode;
exports.ruleNameFromQuantifierNode = ruleNameFromQuantifierNode;

var _array = require("../utilities/array");

var _ruleNames = require("../bnf/ruleNames");

function isNodeChoiceNode(node) {
  var nodeNoChoiceNode = false;
  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    var terminalNode = node,
        ///
    terminalNodeContent = terminalNode.getContent();
    nodeNoChoiceNode = terminalNodeContent === "|";
  }

  return nodeNoChoiceNode;
}

function isNodeRuleNameNode(node) {
  var nodeRuleNameNode = false;
  var nodeTerminalNode = node.isTerminalNode(),
      nodeNonTerminalNode = !nodeTerminalNode;

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    nonTerminalNodeRuleName = nonTerminalNode.getRuleName();
    nodeRuleNameNode = nonTerminalNodeRuleName === _ruleNames.RuleNameRuleName;
  }

  return nodeRuleNameNode;
}

function isNodeQuantifierNode(node) {
  var nodeQuantifierNode = false;
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName(),
        ruleNameQuantifierRuleName = ruleName === _ruleNames.QuantifierRuleName;
    nodeQuantifierNode = ruleNameQuantifierRuleName; ///
  }

  return nodeQuantifierNode;
}

function isNodeLookAheadModifierNode(node) {
  var nodeLookAheadModifierNode = false;
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName(),
        ruleNameLookAheadModifierRuleName = ruleName === _ruleNames.LookAheadModifierRuleName;
    nodeLookAheadModifierNode = ruleNameLookAheadModifierRuleName; ///
  }

  return nodeLookAheadModifierNode;
}

function ruleNameFromQuantifierNode(quantifierNode) {
  var nonTerminalNode;
  nonTerminalNode = quantifierNode; ///

  var childNodes = nonTerminalNode.getChildNodes(),
      firstChildNode = (0, _array.first)(childNodes);
  nonTerminalNode = firstChildNode; ///

  var ruleName = nonTerminalNode.getRuleName();
  return ruleName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJuZi5qcyJdLCJuYW1lcyI6WyJpc05vZGVDaG9pY2VOb2RlIiwibm9kZSIsIm5vZGVOb0Nob2ljZU5vZGUiLCJub2RlVGVybWluYWxOb2RlIiwiaXNUZXJtaW5hbE5vZGUiLCJ0ZXJtaW5hbE5vZGUiLCJ0ZXJtaW5hbE5vZGVDb250ZW50IiwiZ2V0Q29udGVudCIsImlzTm9kZVJ1bGVOYW1lTm9kZSIsIm5vZGVSdWxlTmFtZU5vZGUiLCJub2RlTm9uVGVybWluYWxOb2RlIiwibm9uVGVybWluYWxOb2RlIiwibm9uVGVybWluYWxOb2RlUnVsZU5hbWUiLCJnZXRSdWxlTmFtZSIsIlJ1bGVOYW1lUnVsZU5hbWUiLCJpc05vZGVRdWFudGlmaWVyTm9kZSIsIm5vZGVRdWFudGlmaWVyTm9kZSIsImlzTm9uVGVybWluYWxOb2RlIiwicnVsZU5hbWUiLCJydWxlTmFtZVF1YW50aWZpZXJSdWxlTmFtZSIsIlF1YW50aWZpZXJSdWxlTmFtZSIsImlzTm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZSIsIm5vZGVMb29rQWhlYWRNb2RpZmllck5vZGUiLCJydWxlTmFtZUxvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUiLCJMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lIiwicnVsZU5hbWVGcm9tUXVhbnRpZmllck5vZGUiLCJxdWFudGlmaWVyTm9kZSIsImNoaWxkTm9kZXMiLCJnZXRDaGlsZE5vZGVzIiwiZmlyc3RDaGlsZE5vZGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUVPLFNBQVNBLGdCQUFULENBQTBCQyxJQUExQixFQUFnQztBQUNyQyxNQUFJQyxnQkFBZ0IsR0FBRyxLQUF2QjtBQUVBLE1BQU1DLGdCQUFnQixHQUFHRixJQUFJLENBQUNHLGNBQUwsRUFBekI7O0FBRUEsTUFBSUQsZ0JBQUosRUFBc0I7QUFDcEIsUUFBTUUsWUFBWSxHQUFHSixJQUFyQjtBQUFBLFFBQTRCO0FBQ3RCSyxJQUFBQSxtQkFBbUIsR0FBR0QsWUFBWSxDQUFDRSxVQUFiLEVBRDVCO0FBR0FMLElBQUFBLGdCQUFnQixHQUFJSSxtQkFBbUIsS0FBSyxHQUE1QztBQUNEOztBQUVELFNBQU9KLGdCQUFQO0FBQ0Q7O0FBRU0sU0FBU00sa0JBQVQsQ0FBNEJQLElBQTVCLEVBQWtDO0FBQ3ZDLE1BQUlRLGdCQUFnQixHQUFHLEtBQXZCO0FBRUEsTUFBTU4sZ0JBQWdCLEdBQUdGLElBQUksQ0FBQ0csY0FBTCxFQUF6QjtBQUFBLE1BQ01NLG1CQUFtQixHQUFHLENBQUNQLGdCQUQ3Qjs7QUFHQSxNQUFJTyxtQkFBSixFQUF5QjtBQUN2QixRQUFNQyxlQUFlLEdBQUdWLElBQXhCO0FBQUEsUUFBOEI7QUFDeEJXLElBQUFBLHVCQUF1QixHQUFHRCxlQUFlLENBQUNFLFdBQWhCLEVBRGhDO0FBR0FKLElBQUFBLGdCQUFnQixHQUFJRyx1QkFBdUIsS0FBS0UsMkJBQWhEO0FBQ0Q7O0FBRUQsU0FBT0wsZ0JBQVA7QUFDRDs7QUFFTSxTQUFTTSxvQkFBVCxDQUE4QmQsSUFBOUIsRUFBb0M7QUFDekMsTUFBSWUsa0JBQWtCLEdBQUcsS0FBekI7QUFFQSxNQUFNTixtQkFBbUIsR0FBR1QsSUFBSSxDQUFDZ0IsaUJBQUwsRUFBNUI7O0FBRUEsTUFBSVAsbUJBQUosRUFBeUI7QUFDdkIsUUFBTUMsZUFBZSxHQUFHVixJQUF4QjtBQUFBLFFBQThCO0FBQ3hCaUIsSUFBQUEsUUFBUSxHQUFHUCxlQUFlLENBQUNFLFdBQWhCLEVBRGpCO0FBQUEsUUFFTU0sMEJBQTBCLEdBQUlELFFBQVEsS0FBS0UsNkJBRmpEO0FBSUFKLElBQUFBLGtCQUFrQixHQUFHRywwQkFBckIsQ0FMdUIsQ0FLMkI7QUFDbkQ7O0FBRUQsU0FBT0gsa0JBQVA7QUFDRDs7QUFFTSxTQUFTSywyQkFBVCxDQUFxQ3BCLElBQXJDLEVBQTJDO0FBQ2hELE1BQUlxQix5QkFBeUIsR0FBRyxLQUFoQztBQUVBLE1BQU1aLG1CQUFtQixHQUFHVCxJQUFJLENBQUNnQixpQkFBTCxFQUE1Qjs7QUFFQSxNQUFJUCxtQkFBSixFQUF5QjtBQUN2QixRQUFNQyxlQUFlLEdBQUdWLElBQXhCO0FBQUEsUUFBOEI7QUFDeEJpQixJQUFBQSxRQUFRLEdBQUdQLGVBQWUsQ0FBQ0UsV0FBaEIsRUFEakI7QUFBQSxRQUVNVSxpQ0FBaUMsR0FBSUwsUUFBUSxLQUFLTSxvQ0FGeEQ7QUFJQUYsSUFBQUEseUJBQXlCLEdBQUdDLGlDQUE1QixDQUx1QixDQUt5QztBQUNqRTs7QUFFRCxTQUFPRCx5QkFBUDtBQUVEOztBQUVNLFNBQVNHLDBCQUFULENBQW9DQyxjQUFwQyxFQUFvRDtBQUN6RCxNQUFJZixlQUFKO0FBRUFBLEVBQUFBLGVBQWUsR0FBR2UsY0FBbEIsQ0FIeUQsQ0FHdkI7O0FBRWxDLE1BQU1DLFVBQVUsR0FBR2hCLGVBQWUsQ0FBQ2lCLGFBQWhCLEVBQW5CO0FBQUEsTUFDTUMsY0FBYyxHQUFHLGtCQUFNRixVQUFOLENBRHZCO0FBR0FoQixFQUFBQSxlQUFlLEdBQUdrQixjQUFsQixDQVJ5RCxDQVF0Qjs7QUFFbkMsTUFBTVgsUUFBUSxHQUFHUCxlQUFlLENBQUNFLFdBQWhCLEVBQWpCO0FBRUEsU0FBT0ssUUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGZpcnN0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hcnJheVwiO1xuaW1wb3J0IHsgTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSwgUXVhbnRpZmllclJ1bGVOYW1lLCBSdWxlTmFtZVJ1bGVOYW1lIH0gZnJvbSBcIi4uL2JuZi9ydWxlTmFtZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZUNob2ljZU5vZGUobm9kZSkge1xuICBsZXQgbm9kZU5vQ2hvaWNlTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVUZXJtaW5hbE5vZGUgPSBub2RlLmlzVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVUZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCB0ZXJtaW5hbE5vZGUgPSBub2RlLCAgLy8vXG4gICAgICAgICAgdGVybWluYWxOb2RlQ29udGVudCA9IHRlcm1pbmFsTm9kZS5nZXRDb250ZW50KCk7XG5cbiAgICBub2RlTm9DaG9pY2VOb2RlID0gKHRlcm1pbmFsTm9kZUNvbnRlbnQgPT09IFwifFwiKTtcbiAgfVxuXG4gIHJldHVybiBub2RlTm9DaG9pY2VOb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlUnVsZU5hbWVOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVSdWxlTmFtZU5vZGUgPSBmYWxzZTtcblxuICBjb25zdCBub2RlVGVybWluYWxOb2RlID0gbm9kZS5pc1Rlcm1pbmFsTm9kZSgpLFxuICAgICAgICBub2RlTm9uVGVybWluYWxOb2RlID0gIW5vZGVUZXJtaW5hbE5vZGU7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBub25UZXJtaW5hbE5vZGVSdWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpO1xuXG4gICAgbm9kZVJ1bGVOYW1lTm9kZSA9IChub25UZXJtaW5hbE5vZGVSdWxlTmFtZSA9PT0gUnVsZU5hbWVSdWxlTmFtZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZVJ1bGVOYW1lTm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZVF1YW50aWZpZXJOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVRdWFudGlmaWVyTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGVOYW1lUXVhbnRpZmllclJ1bGVOYW1lID0gKHJ1bGVOYW1lID09PSBRdWFudGlmaWVyUnVsZU5hbWUpO1xuXG4gICAgbm9kZVF1YW50aWZpZXJOb2RlID0gcnVsZU5hbWVRdWFudGlmaWVyUnVsZU5hbWU7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBub2RlUXVhbnRpZmllck5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVMb29rQWhlYWRNb2RpZmllck5vZGUobm9kZSkge1xuICBsZXQgbm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGVOYW1lTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSA9IChydWxlTmFtZSA9PT0gTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSk7XG5cbiAgICBub2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlID0gcnVsZU5hbWVMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lOyAgLy8vXG4gIH1cblxuICByZXR1cm4gbm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZTtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZU5hbWVGcm9tUXVhbnRpZmllck5vZGUocXVhbnRpZmllck5vZGUpIHtcbiAgbGV0IG5vblRlcm1pbmFsTm9kZTtcblxuICBub25UZXJtaW5hbE5vZGUgPSBxdWFudGlmaWVyTm9kZTsgLy8vXG5cbiAgY29uc3QgY2hpbGROb2RlcyA9IG5vblRlcm1pbmFsTm9kZS5nZXRDaGlsZE5vZGVzKCksXG4gICAgICAgIGZpcnN0Q2hpbGROb2RlID0gZmlyc3QoY2hpbGROb2Rlcyk7XG5cbiAgbm9uVGVybWluYWxOb2RlID0gZmlyc3RDaGlsZE5vZGU7ICAvLy9cblxuICBjb25zdCBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpO1xuXG4gIHJldHVybiBydWxlTmFtZTtcbn1cbiJdfQ==