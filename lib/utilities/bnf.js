"use strict";

var ruleNames = require("../bnf/ruleNames"),
    arrayUtilities = require("../utilities/array");

var first = arrayUtilities.first,
    LookAheadModifierRuleName = ruleNames.LookAheadModifierRuleName,
    QuantifierRuleName = ruleNames.QuantifierRuleName,
    RuleNameRuleName = ruleNames.RuleNameRuleName;

function isNodeChoiceNode(node) {
  var nodeNoChoiceNode = false;
  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    var terminalNode = node,
        ///
    terminalNodeContent = terminalNode.getContent();
    nodeNoChoiceNode = terminalNodeContent === "|";
  }

  return nodeNoChoiceNode;
}

function isNodeRuleNameNode(node) {
  var nodeRuleNameNode = false;
  var nodeTerminalNode = node.isTerminalNode(),
      nodeNonTerminalNode = !nodeTerminalNode;

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    nonTerminalNodeRuleName = nonTerminalNode.getRuleName();
    nodeRuleNameNode = nonTerminalNodeRuleName === RuleNameRuleName;
  }

  return nodeRuleNameNode;
}

function isNodeQuantifierNode(node) {
  var nodeQuantifierNode = false;
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName(),
        ruleNameQuantifierRuleName = ruleName === QuantifierRuleName;
    nodeQuantifierNode = ruleNameQuantifierRuleName; ///
  }

  return nodeQuantifierNode;
}

function isNodeLookAheadModifierNode(node) {
  var nodeLookAheadModifierNode = false;
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName(),
        ruleNameLookAheadModifierRuleName = ruleName === LookAheadModifierRuleName;
    nodeLookAheadModifierNode = ruleNameLookAheadModifierRuleName; ///
  }

  return nodeLookAheadModifierNode;
}

function ruleNameFromQuantifierNode(quantifierNode) {
  var nonTerminalNode;
  nonTerminalNode = quantifierNode; ///

  var childNodes = nonTerminalNode.getChildNodes(),
      firstChildNode = first(childNodes);
  nonTerminalNode = firstChildNode; ///

  var ruleName = nonTerminalNode.getRuleName();
  return ruleName;
}

module.exports = {
  isNodeChoiceNode: isNodeChoiceNode,
  isNodeRuleNameNode: isNodeRuleNameNode,
  isNodeQuantifierNode: isNodeQuantifierNode,
  isNodeLookAheadModifierNode: isNodeLookAheadModifierNode,
  ruleNameFromQuantifierNode: ruleNameFromQuantifierNode
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJuZi5qcyJdLCJuYW1lcyI6WyJydWxlTmFtZXMiLCJyZXF1aXJlIiwiYXJyYXlVdGlsaXRpZXMiLCJmaXJzdCIsIkxvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUiLCJRdWFudGlmaWVyUnVsZU5hbWUiLCJSdWxlTmFtZVJ1bGVOYW1lIiwiaXNOb2RlQ2hvaWNlTm9kZSIsIm5vZGUiLCJub2RlTm9DaG9pY2VOb2RlIiwibm9kZVRlcm1pbmFsTm9kZSIsImlzVGVybWluYWxOb2RlIiwidGVybWluYWxOb2RlIiwidGVybWluYWxOb2RlQ29udGVudCIsImdldENvbnRlbnQiLCJpc05vZGVSdWxlTmFtZU5vZGUiLCJub2RlUnVsZU5hbWVOb2RlIiwibm9kZU5vblRlcm1pbmFsTm9kZSIsIm5vblRlcm1pbmFsTm9kZSIsIm5vblRlcm1pbmFsTm9kZVJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJpc05vZGVRdWFudGlmaWVyTm9kZSIsIm5vZGVRdWFudGlmaWVyTm9kZSIsImlzTm9uVGVybWluYWxOb2RlIiwicnVsZU5hbWUiLCJydWxlTmFtZVF1YW50aWZpZXJSdWxlTmFtZSIsImlzTm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZSIsIm5vZGVMb29rQWhlYWRNb2RpZmllck5vZGUiLCJydWxlTmFtZUxvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWUiLCJydWxlTmFtZUZyb21RdWFudGlmaWVyTm9kZSIsInF1YW50aWZpZXJOb2RlIiwiY2hpbGROb2RlcyIsImdldENoaWxkTm9kZXMiLCJmaXJzdENoaWxkTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGtCQUFELENBQXpCO0FBQUEsSUFDTUMsY0FBYyxHQUFHRCxPQUFPLENBQUMsb0JBQUQsQ0FEOUI7O0FBR00sSUFBRUUsS0FBRixHQUFZRCxjQUFaLENBQUVDLEtBQUY7QUFBQSxJQUNFQyx5QkFERixHQUNzRUosU0FEdEUsQ0FDRUks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LGtCQUZlO0FBR2ZNLEVBQUFBLG9CQUFvQixFQUFwQkEsb0JBSGU7QUFJZkssRUFBQUEsMkJBQTJCLEVBQTNCQSwyQkFKZTtBQUtmRyxFQUFBQSwwQkFBMEIsRUFBMUJBO0FBTGUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcnVsZU5hbWVzID0gcmVxdWlyZShcIi4uL2JuZi9ydWxlTmFtZXNcIiksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoXCIuLi91dGlsaXRpZXMvYXJyYXlcIik7XG5cbmNvbnN0IHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lLCBRdWFudGlmaWVyUnVsZU5hbWUsIFJ1bGVOYW1lUnVsZU5hbWUgfSA9IHJ1bGVOYW1lcztcblxuZnVuY3Rpb24gaXNOb2RlQ2hvaWNlTm9kZShub2RlKSB7XG4gIGxldCBub2RlTm9DaG9pY2VOb2RlID0gZmFsc2U7XG5cbiAgY29uc3Qgbm9kZVRlcm1pbmFsTm9kZSA9IG5vZGUuaXNUZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZVRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IHRlcm1pbmFsTm9kZSA9IG5vZGUsICAvLy9cbiAgICAgICAgICB0ZXJtaW5hbE5vZGVDb250ZW50ID0gdGVybWluYWxOb2RlLmdldENvbnRlbnQoKTtcblxuICAgIG5vZGVOb0Nob2ljZU5vZGUgPSAodGVybWluYWxOb2RlQ29udGVudCA9PT0gXCJ8XCIpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVOb0Nob2ljZU5vZGU7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZVJ1bGVOYW1lTm9kZShub2RlKSB7XG4gIGxldCBub2RlUnVsZU5hbWVOb2RlID0gZmFsc2U7XG5cbiAgY29uc3Qgbm9kZVRlcm1pbmFsTm9kZSA9IG5vZGUuaXNUZXJtaW5hbE5vZGUoKSxcbiAgICAgICAgbm9kZU5vblRlcm1pbmFsTm9kZSA9ICFub2RlVGVybWluYWxOb2RlO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgbm9uVGVybWluYWxOb2RlUnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICAgIG5vZGVSdWxlTmFtZU5vZGUgPSAobm9uVGVybWluYWxOb2RlUnVsZU5hbWUgPT09IFJ1bGVOYW1lUnVsZU5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVSdWxlTmFtZU5vZGU7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZVF1YW50aWZpZXJOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVRdWFudGlmaWVyTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGVOYW1lUXVhbnRpZmllclJ1bGVOYW1lID0gKHJ1bGVOYW1lID09PSBRdWFudGlmaWVyUnVsZU5hbWUpO1xuXG4gICAgbm9kZVF1YW50aWZpZXJOb2RlID0gcnVsZU5hbWVRdWFudGlmaWVyUnVsZU5hbWU7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBub2RlUXVhbnRpZmllck5vZGU7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZShub2RlKSB7XG4gIGxldCBub2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlID0gZmFsc2U7XG5cbiAgY29uc3Qgbm9kZU5vblRlcm1pbmFsTm9kZSA9IG5vZGUuaXNOb25UZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsTm9kZSA9IG5vZGUsIC8vL1xuICAgICAgICAgIHJ1bGVOYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgcnVsZU5hbWVMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lID0gKHJ1bGVOYW1lID09PSBMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lKTtcblxuICAgIG5vZGVMb29rQWhlYWRNb2RpZmllck5vZGUgPSBydWxlTmFtZUxvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWU7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBub2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlO1xuXG59XG5cbmZ1bmN0aW9uIHJ1bGVOYW1lRnJvbVF1YW50aWZpZXJOb2RlKHF1YW50aWZpZXJOb2RlKSB7XG4gIGxldCBub25UZXJtaW5hbE5vZGU7XG5cbiAgbm9uVGVybWluYWxOb2RlID0gcXVhbnRpZmllck5vZGU7IC8vL1xuXG4gIGNvbnN0IGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpLFxuICAgICAgICBmaXJzdENoaWxkTm9kZSA9IGZpcnN0KGNoaWxkTm9kZXMpO1xuXG4gIG5vblRlcm1pbmFsTm9kZSA9IGZpcnN0Q2hpbGROb2RlOyAgLy8vXG5cbiAgY29uc3QgcnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICByZXR1cm4gcnVsZU5hbWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc05vZGVDaG9pY2VOb2RlLFxuICBpc05vZGVSdWxlTmFtZU5vZGUsXG4gIGlzTm9kZVF1YW50aWZpZXJOb2RlLFxuICBpc05vZGVMb29rQWhlYWRNb2RpZmllck5vZGUsXG4gIHJ1bGVOYW1lRnJvbVF1YW50aWZpZXJOb2RlXG59O1xuIl19