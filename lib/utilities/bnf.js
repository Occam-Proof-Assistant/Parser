'use strict';

var lexers = require('occam-lexers');

var ruleNames = require('../bnf/ruleNames'),
    arrayUtilities = require('../utilities/array');

var first = arrayUtilities.first,
    specialSymbols = lexers.specialSymbols,
    NO_WHITESPACE = specialSymbols.NO_WHITESPACE,
    QuantifierRuleName = ruleNames.QuantifierRuleName,
    RuleNameRuleName = ruleNames.RuleNameRuleName;


function isNodeChoiceNode(node) {
  var nodeNoChoiceNode = false;

  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    var terminalNode = node,
        ///
    terminalNodeContent = terminalNode.getContent();

    nodeNoChoiceNode = terminalNodeContent === '|';
  }

  return nodeNoChoiceNode;
}

function isNodeRuleNameNode(node) {
  var nodeRuleNameNode = false;

  var nodeTerminalNode = node.isTerminalNode(),
      nodeNonTerminalNode = !nodeTerminalNode;

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    nonTerminalNodeRuleName = nonTerminalNode.getRuleName();

    nodeRuleNameNode = nonTerminalNodeRuleName === RuleNameRuleName;
  }

  return nodeRuleNameNode;
}

function isNodeQuantifierNode(node) {
  var nodeQuantifierNode = false;

  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName(),
        ruleNameQuantifierRuleName = ruleName === QuantifierRuleName;

    nodeQuantifierNode = ruleNameQuantifierRuleName; ///
  }

  return nodeQuantifierNode;
}

function isNodeNoWhitespaceNode(node) {
  var nodeNoWhitespaceNode = false;

  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    var terminalNode = node,
        terminalNodeContent = terminalNode.getContent();

    nodeNoWhitespaceNode = terminalNodeContent === NO_WHITESPACE;
  }

  return nodeNoWhitespaceNode;
}

function ruleNameFromQuantifierNode(quantifierNode) {
  var nonTerminalNode = void 0;

  nonTerminalNode = quantifierNode; ///

  var childNodes = nonTerminalNode.getChildNodes(),
      firstChildNode = first(childNodes);

  nonTerminalNode = firstChildNode; ///

  var ruleName = nonTerminalNode.getRuleName();

  return ruleName;
}

module.exports = {
  isNodeChoiceNode: isNodeChoiceNode,
  isNodeRuleNameNode: isNodeRuleNameNode,
  isNodeQuantifierNode: isNodeQuantifierNode,
  isNodeNoWhitespaceNode: isNodeNoWhitespaceNode,
  ruleNameFromQuantifierNode: ruleNameFromQuantifierNode
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvYm5mLmpzIl0sIm5hbWVzIjpbImxleGVycyIsInJlcXVpcmUiLCJydWxlTmFtZXMiLCJhcnJheVV0aWxpdGllcyIsImZpcnN0Iiwic3BlY2lhbFN5bWJvbHMiLCJOT19XSElURVNQQUNFIiwiUXVhbnRpZmllclJ1bGVOYW1lIiwiUnVsZU5hbWVSdWxlTmFtZSIsImlzTm9kZUNob2ljZU5vZGUiLCJub2RlIiwibm9kZU5vQ2hvaWNlTm9kZSIsIm5vZGVUZXJtaW5hbE5vZGUiLCJpc1Rlcm1pbmFsTm9kZSIsInRlcm1pbmFsTm9kZSIsInRlcm1pbmFsTm9kZUNvbnRlbnQiLCJnZXRDb250ZW50IiwiaXNOb2RlUnVsZU5hbWVOb2RlIiwibm9kZVJ1bGVOYW1lTm9kZSIsIm5vZGVOb25UZXJtaW5hbE5vZGUiLCJub25UZXJtaW5hbE5vZGUiLCJub25UZXJtaW5hbE5vZGVSdWxlTmFtZSIsImdldFJ1bGVOYW1lIiwiaXNOb2RlUXVhbnRpZmllck5vZGUiLCJub2RlUXVhbnRpZmllck5vZGUiLCJpc05vblRlcm1pbmFsTm9kZSIsInJ1bGVOYW1lIiwicnVsZU5hbWVRdWFudGlmaWVyUnVsZU5hbWUiLCJpc05vZGVOb1doaXRlc3BhY2VOb2RlIiwibm9kZU5vV2hpdGVzcGFjZU5vZGUiLCJydWxlTmFtZUZyb21RdWFudGlmaWVyTm9kZSIsInF1YW50aWZpZXJOb2RlIiwiY2hpbGROb2RlcyIsImdldENoaWxkTm9kZXMiLCJmaXJzdENoaWxkTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFNBQVNDLFFBQVEsY0FBUixDQUFmOztBQUVBLElBQU1DLFlBQVlELFFBQVEsa0JBQVIsQ0FBbEI7QUFBQSxJQUNNRSxpQkFBaUJGLFFBQVEsb0JBQVIsQ0FEdkI7O0FBR00sSUFBRUcsS0FBRixHQUFZRCxjQUFaLENBQUVDLEtBQUY7QUFBQSxJQUNFQyxjQURGLEdBQ3FCTCxNQURyQixDQUNFSyxjQURGO0FBQUEsSUFFRUMsYUFGRixHQUVvQkQsY0FGcEIsQ0FFRUMsYUFGRjtBQUFBLElBR0VDLGtCQUhGLEdBRzJDTCxTQUgzQyxDQUdFSyxrQkFIRjtBQUFBLElBR3NCQyxnQkFIdEIsR0FHMkNOLFNBSDNDLENBR3NCTSxnQkFIdEI7OztBQUtOLFNBQVNDLGdCQUFULENBQTBCQyxJQUExQixFQUFnQztBQUM5QixNQUFJQyxtQkFBbUIsS0FBdkI7O0FBRUEsTUFBTUMsbUJBQW1CRixLQUFLRyxjQUFMLEVBQXpCOztBQUVBLE1BQUlELGdCQUFKLEVBQXNCO0FBQ3BCLFFBQU1FLGVBQWVKLElBQXJCO0FBQUEsUUFBNEI7QUFDdEJLLDBCQUFzQkQsYUFBYUUsVUFBYixFQUQ1Qjs7QUFHQUwsdUJBQW9CSSx3QkFBd0IsR0FBNUM7QUFDRDs7QUFFRCxTQUFPSixnQkFBUDtBQUNEOztBQUVELFNBQVNNLGtCQUFULENBQTRCUCxJQUE1QixFQUFrQztBQUNoQyxNQUFJUSxtQkFBbUIsS0FBdkI7O0FBRUEsTUFBTU4sbUJBQW1CRixLQUFLRyxjQUFMLEVBQXpCO0FBQUEsTUFDTU0sc0JBQXNCLENBQUNQLGdCQUQ3Qjs7QUFHQSxNQUFJTyxtQkFBSixFQUF5QjtBQUN2QixRQUFNQyxrQkFBa0JWLElBQXhCO0FBQUEsUUFBOEI7QUFDeEJXLDhCQUEwQkQsZ0JBQWdCRSxXQUFoQixFQURoQzs7QUFHQUosdUJBQW9CRyw0QkFBNEJiLGdCQUFoRDtBQUNEOztBQUVELFNBQU9VLGdCQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssb0JBQVQsQ0FBOEJiLElBQTlCLEVBQW9DO0FBQ2xDLE1BQUljLHFCQUFxQixLQUF6Qjs7QUFFQSxNQUFNTCxzQkFBc0JULEtBQUtlLGlCQUFMLEVBQTVCOztBQUVBLE1BQUlOLG1CQUFKLEVBQXlCO0FBQ3ZCLFFBQU1DLGtCQUFrQlYsSUFBeEI7QUFBQSxRQUE4QjtBQUN4QmdCLGVBQVdOLGdCQUFnQkUsV0FBaEIsRUFEakI7QUFBQSxRQUVNSyw2QkFBOEJELGFBQWFuQixrQkFGakQ7O0FBSUFpQix5QkFBcUJHLDBCQUFyQixDQUx1QixDQUsyQjtBQUNuRDs7QUFFRCxTQUFPSCxrQkFBUDtBQUNEOztBQUVELFNBQVNJLHNCQUFULENBQWdDbEIsSUFBaEMsRUFBc0M7QUFDcEMsTUFBSW1CLHVCQUF1QixLQUEzQjs7QUFFQSxNQUFNakIsbUJBQW1CRixLQUFLRyxjQUFMLEVBQXpCOztBQUVBLE1BQUlELGdCQUFKLEVBQXNCO0FBQ3BCLFFBQU1FLGVBQWVKLElBQXJCO0FBQUEsUUFDTUssc0JBQXNCRCxhQUFhRSxVQUFiLEVBRDVCOztBQUdBYSwyQkFBd0JkLHdCQUF3QlQsYUFBaEQ7QUFDRDs7QUFFRCxTQUFPdUIsb0JBQVA7QUFDRDs7QUFFRCxTQUFTQywwQkFBVCxDQUFvQ0MsY0FBcEMsRUFBb0Q7QUFDbEQsTUFBSVgsd0JBQUo7O0FBRUFBLG9CQUFrQlcsY0FBbEIsQ0FIa0QsQ0FHaEI7O0FBRWxDLE1BQU1DLGFBQWFaLGdCQUFnQmEsYUFBaEIsRUFBbkI7QUFBQSxNQUNNQyxpQkFBaUI5QixNQUFNNEIsVUFBTixDQUR2Qjs7QUFHQVosb0JBQWtCYyxjQUFsQixDQVJrRCxDQVFmOztBQUVuQyxNQUFNUixXQUFXTixnQkFBZ0JFLFdBQWhCLEVBQWpCOztBQUVBLFNBQU9JLFFBQVA7QUFDRDs7QUFFRFMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmM0Isb0NBRGU7QUFFZlEsd0NBRmU7QUFHZk0sNENBSGU7QUFJZkssZ0RBSmU7QUFLZkU7QUFMZSxDQUFqQiIsImZpbGUiOiJibmYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGxleGVycyA9IHJlcXVpcmUoJ29jY2FtLWxleGVycycpO1xuXG5jb25zdCBydWxlTmFtZXMgPSByZXF1aXJlKCcuLi9ibmYvcnVsZU5hbWVzJyksXG4gICAgICBhcnJheVV0aWxpdGllcyA9IHJlcXVpcmUoJy4uL3V0aWxpdGllcy9hcnJheScpO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgc3BlY2lhbFN5bWJvbHMgfSA9IGxleGVycyxcbiAgICAgIHsgTk9fV0hJVEVTUEFDRSB9ID0gc3BlY2lhbFN5bWJvbHMsXG4gICAgICB7IFF1YW50aWZpZXJSdWxlTmFtZSwgUnVsZU5hbWVSdWxlTmFtZSB9ID0gcnVsZU5hbWVzO1xuXG5mdW5jdGlvbiBpc05vZGVDaG9pY2VOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVOb0Nob2ljZU5vZGUgPSBmYWxzZTtcblxuICBjb25zdCBub2RlVGVybWluYWxOb2RlID0gbm9kZS5pc1Rlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3QgdGVybWluYWxOb2RlID0gbm9kZSwgIC8vL1xuICAgICAgICAgIHRlcm1pbmFsTm9kZUNvbnRlbnQgPSB0ZXJtaW5hbE5vZGUuZ2V0Q29udGVudCgpO1xuXG4gICAgbm9kZU5vQ2hvaWNlTm9kZSA9ICh0ZXJtaW5hbE5vZGVDb250ZW50ID09PSAnfCcpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVOb0Nob2ljZU5vZGU7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZVJ1bGVOYW1lTm9kZShub2RlKSB7XG4gIGxldCBub2RlUnVsZU5hbWVOb2RlID0gZmFsc2U7XG5cbiAgY29uc3Qgbm9kZVRlcm1pbmFsTm9kZSA9IG5vZGUuaXNUZXJtaW5hbE5vZGUoKSxcbiAgICAgICAgbm9kZU5vblRlcm1pbmFsTm9kZSA9ICFub2RlVGVybWluYWxOb2RlO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgbm9uVGVybWluYWxOb2RlUnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICAgIG5vZGVSdWxlTmFtZU5vZGUgPSAobm9uVGVybWluYWxOb2RlUnVsZU5hbWUgPT09IFJ1bGVOYW1lUnVsZU5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVSdWxlTmFtZU5vZGU7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZVF1YW50aWZpZXJOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVRdWFudGlmaWVyTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGVOYW1lUXVhbnRpZmllclJ1bGVOYW1lID0gKHJ1bGVOYW1lID09PSBRdWFudGlmaWVyUnVsZU5hbWUpO1xuXG4gICAgbm9kZVF1YW50aWZpZXJOb2RlID0gcnVsZU5hbWVRdWFudGlmaWVyUnVsZU5hbWU7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBub2RlUXVhbnRpZmllck5vZGU7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZU5vV2hpdGVzcGFjZU5vZGUobm9kZSkge1xuICBsZXQgbm9kZU5vV2hpdGVzcGFjZU5vZGUgPSBmYWxzZTtcblxuICBjb25zdCBub2RlVGVybWluYWxOb2RlID0gbm9kZS5pc1Rlcm1pbmFsTm9kZSgpO1xuXG4gIGlmIChub2RlVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3QgdGVybWluYWxOb2RlID0gbm9kZSxcbiAgICAgICAgICB0ZXJtaW5hbE5vZGVDb250ZW50ID0gdGVybWluYWxOb2RlLmdldENvbnRlbnQoKTtcblxuICAgIG5vZGVOb1doaXRlc3BhY2VOb2RlID0gKHRlcm1pbmFsTm9kZUNvbnRlbnQgPT09IE5PX1dISVRFU1BBQ0UpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVOb1doaXRlc3BhY2VOb2RlO1xufVxuXG5mdW5jdGlvbiBydWxlTmFtZUZyb21RdWFudGlmaWVyTm9kZShxdWFudGlmaWVyTm9kZSkge1xuICBsZXQgbm9uVGVybWluYWxOb2RlO1xuXG4gIG5vblRlcm1pbmFsTm9kZSA9IHF1YW50aWZpZXJOb2RlOyAvLy9cblxuICBjb25zdCBjaGlsZE5vZGVzID0gbm9uVGVybWluYWxOb2RlLmdldENoaWxkTm9kZXMoKSxcbiAgICAgICAgZmlyc3RDaGlsZE5vZGUgPSBmaXJzdChjaGlsZE5vZGVzKTtcblxuICBub25UZXJtaW5hbE5vZGUgPSBmaXJzdENoaWxkTm9kZTsgIC8vL1xuXG4gIGNvbnN0IHJ1bGVOYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFJ1bGVOYW1lKCk7XG5cbiAgcmV0dXJuIHJ1bGVOYW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNOb2RlQ2hvaWNlTm9kZSxcbiAgaXNOb2RlUnVsZU5hbWVOb2RlLFxuICBpc05vZGVRdWFudGlmaWVyTm9kZSxcbiAgaXNOb2RlTm9XaGl0ZXNwYWNlTm9kZSxcbiAgcnVsZU5hbWVGcm9tUXVhbnRpZmllck5vZGVcbn07XG4iXX0=