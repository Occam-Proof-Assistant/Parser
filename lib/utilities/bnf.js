"use strict";

var _array = _interopRequireDefault(require("../utilities/array"));

var _ruleNames = require("../bnf/ruleNames");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var first = _array["default"].first;

function isNodeChoiceNode(node) {
  var nodeNoChoiceNode = false;
  var nodeTerminalNode = node.isTerminalNode();

  if (nodeTerminalNode) {
    var terminalNode = node,
        ///
    terminalNodeContent = terminalNode.getContent();
    nodeNoChoiceNode = terminalNodeContent === "|";
  }

  return nodeNoChoiceNode;
}

function isNodeRuleNameNode(node) {
  var nodeRuleNameNode = false;
  var nodeTerminalNode = node.isTerminalNode(),
      nodeNonTerminalNode = !nodeTerminalNode;

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    nonTerminalNodeRuleName = nonTerminalNode.getRuleName();
    nodeRuleNameNode = nonTerminalNodeRuleName === _ruleNames.RuleNameRuleName;
  }

  return nodeRuleNameNode;
}

function isNodeQuantifierNode(node) {
  var nodeQuantifierNode = false;
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName(),
        ruleNameQuantifierRuleName = ruleName === _ruleNames.QuantifierRuleName;
    nodeQuantifierNode = ruleNameQuantifierRuleName; ///
  }

  return nodeQuantifierNode;
}

function isNodeLookAheadModifierNode(node) {
  var nodeLookAheadModifierNode = false;
  var nodeNonTerminalNode = node.isNonTerminalNode();

  if (nodeNonTerminalNode) {
    var nonTerminalNode = node,
        ///
    ruleName = nonTerminalNode.getRuleName(),
        ruleNameLookAheadModifierRuleName = ruleName === _ruleNames.LookAheadModifierRuleName;
    nodeLookAheadModifierNode = ruleNameLookAheadModifierRuleName; ///
  }

  return nodeLookAheadModifierNode;
}

function ruleNameFromQuantifierNode(quantifierNode) {
  var nonTerminalNode;
  nonTerminalNode = quantifierNode; ///

  var childNodes = nonTerminalNode.getChildNodes(),
      firstChildNode = first(childNodes);
  nonTerminalNode = firstChildNode; ///

  var ruleName = nonTerminalNode.getRuleName();
  return ruleName;
}

module.exports = {
  isNodeChoiceNode: isNodeChoiceNode,
  isNodeRuleNameNode: isNodeRuleNameNode,
  isNodeQuantifierNode: isNodeQuantifierNode,
  isNodeLookAheadModifierNode: isNodeLookAheadModifierNode,
  ruleNameFromQuantifierNode: ruleNameFromQuantifierNode
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJuZi5qcyJdLCJuYW1lcyI6WyJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwiaXNOb2RlQ2hvaWNlTm9kZSIsIm5vZGUiLCJub2RlTm9DaG9pY2VOb2RlIiwibm9kZVRlcm1pbmFsTm9kZSIsImlzVGVybWluYWxOb2RlIiwidGVybWluYWxOb2RlIiwidGVybWluYWxOb2RlQ29udGVudCIsImdldENvbnRlbnQiLCJpc05vZGVSdWxlTmFtZU5vZGUiLCJub2RlUnVsZU5hbWVOb2RlIiwibm9kZU5vblRlcm1pbmFsTm9kZSIsIm5vblRlcm1pbmFsTm9kZSIsIm5vblRlcm1pbmFsTm9kZVJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiLCJSdWxlTmFtZVJ1bGVOYW1lIiwiaXNOb2RlUXVhbnRpZmllck5vZGUiLCJub2RlUXVhbnRpZmllck5vZGUiLCJpc05vblRlcm1pbmFsTm9kZSIsInJ1bGVOYW1lIiwicnVsZU5hbWVRdWFudGlmaWVyUnVsZU5hbWUiLCJRdWFudGlmaWVyUnVsZU5hbWUiLCJpc05vZGVMb29rQWhlYWRNb2RpZmllck5vZGUiLCJub2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlIiwicnVsZU5hbWVMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lIiwiTG9va0FoZWFkTW9kaWZpZXJSdWxlTmFtZSIsInJ1bGVOYW1lRnJvbVF1YW50aWZpZXJOb2RlIiwicXVhbnRpZmllck5vZGUiLCJjaGlsZE5vZGVzIiwiZ2V0Q2hpbGROb2RlcyIsImZpcnN0Q2hpbGROb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBQ0E7Ozs7SUFFUUEsSyxHQUFVQyxpQixDQUFWRCxLOztBQUVSLFNBQVNFLGdCQUFULENBQTBCQyxJQUExQixFQUFnQztBQUM5QixNQUFJQyxnQkFBZ0IsR0FBRyxLQUF2QjtBQUVBLE1BQU1DLGdCQUFnQixHQUFHRixJQUFJLENBQUNHLGNBQUwsRUFBekI7O0FBRUEsTUFBSUQsZ0JBQUosRUFBc0I7QUFDcEIsUUFBTUUsWUFBWSxHQUFHSixJQUFyQjtBQUFBLFFBQTRCO0FBQ3RCSyxJQUFBQSxtQkFBbUIsR0FBR0QsWUFBWSxDQUFDRSxVQUFiLEVBRDVCO0FBR0FMLElBQUFBLGdCQUFnQixHQUFJSSxtQkFBbUIsS0FBSyxHQUE1QztBQUNEOztBQUVELFNBQU9KLGdCQUFQO0FBQ0Q7O0FBRUQsU0FBU00sa0JBQVQsQ0FBNEJQLElBQTVCLEVBQWtDO0FBQ2hDLE1BQUlRLGdCQUFnQixHQUFHLEtBQXZCO0FBRUEsTUFBTU4sZ0JBQWdCLEdBQUdGLElBQUksQ0FBQ0csY0FBTCxFQUF6QjtBQUFBLE1BQ01NLG1CQUFtQixHQUFHLENBQUNQLGdCQUQ3Qjs7QUFHQSxNQUFJTyxtQkFBSixFQUF5QjtBQUN2QixRQUFNQyxlQUFlLEdBQUdWLElBQXhCO0FBQUEsUUFBOEI7QUFDeEJXLElBQUFBLHVCQUF1QixHQUFHRCxlQUFlLENBQUNFLFdBQWhCLEVBRGhDO0FBR0FKLElBQUFBLGdCQUFnQixHQUFJRyx1QkFBdUIsS0FBS0UsMkJBQWhEO0FBQ0Q7O0FBRUQsU0FBT0wsZ0JBQVA7QUFDRDs7QUFFRCxTQUFTTSxvQkFBVCxDQUE4QmQsSUFBOUIsRUFBb0M7QUFDbEMsTUFBSWUsa0JBQWtCLEdBQUcsS0FBekI7QUFFQSxNQUFNTixtQkFBbUIsR0FBR1QsSUFBSSxDQUFDZ0IsaUJBQUwsRUFBNUI7O0FBRUEsTUFBSVAsbUJBQUosRUFBeUI7QUFDdkIsUUFBTUMsZUFBZSxHQUFHVixJQUF4QjtBQUFBLFFBQThCO0FBQ3hCaUIsSUFBQUEsUUFBUSxHQUFHUCxlQUFlLENBQUNFLFdBQWhCLEVBRGpCO0FBQUEsUUFFTU0sMEJBQTBCLEdBQUlELFFBQVEsS0FBS0UsNkJBRmpEO0FBSUFKLElBQUFBLGtCQUFrQixHQUFHRywwQkFBckIsQ0FMdUIsQ0FLMkI7QUFDbkQ7O0FBRUQsU0FBT0gsa0JBQVA7QUFDRDs7QUFFRCxTQUFTSywyQkFBVCxDQUFxQ3BCLElBQXJDLEVBQTJDO0FBQ3pDLE1BQUlxQix5QkFBeUIsR0FBRyxLQUFoQztBQUVBLE1BQU1aLG1CQUFtQixHQUFHVCxJQUFJLENBQUNnQixpQkFBTCxFQUE1Qjs7QUFFQSxNQUFJUCxtQkFBSixFQUF5QjtBQUN2QixRQUFNQyxlQUFlLEdBQUdWLElBQXhCO0FBQUEsUUFBOEI7QUFDeEJpQixJQUFBQSxRQUFRLEdBQUdQLGVBQWUsQ0FBQ0UsV0FBaEIsRUFEakI7QUFBQSxRQUVNVSxpQ0FBaUMsR0FBSUwsUUFBUSxLQUFLTSxvQ0FGeEQ7QUFJQUYsSUFBQUEseUJBQXlCLEdBQUdDLGlDQUE1QixDQUx1QixDQUt5QztBQUNqRTs7QUFFRCxTQUFPRCx5QkFBUDtBQUVEOztBQUVELFNBQVNHLDBCQUFULENBQW9DQyxjQUFwQyxFQUFvRDtBQUNsRCxNQUFJZixlQUFKO0FBRUFBLEVBQUFBLGVBQWUsR0FBR2UsY0FBbEIsQ0FIa0QsQ0FHaEI7O0FBRWxDLE1BQU1DLFVBQVUsR0FBR2hCLGVBQWUsQ0FBQ2lCLGFBQWhCLEVBQW5CO0FBQUEsTUFDTUMsY0FBYyxHQUFHL0IsS0FBSyxDQUFDNkIsVUFBRCxDQUQ1QjtBQUdBaEIsRUFBQUEsZUFBZSxHQUFHa0IsY0FBbEIsQ0FSa0QsQ0FRZjs7QUFFbkMsTUFBTVgsUUFBUSxHQUFHUCxlQUFlLENBQUNFLFdBQWhCLEVBQWpCO0FBRUEsU0FBT0ssUUFBUDtBQUNEOztBQUVEWSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZi9CLEVBQUFBLGdCQUFnQixFQUFoQkEsZ0JBRGU7QUFFZlEsRUFBQUEsa0JBQWtCLEVBQWxCQSxrQkFGZTtBQUdmTyxFQUFBQSxvQkFBb0IsRUFBcEJBLG9CQUhlO0FBSWZNLEVBQUFBLDJCQUEyQixFQUEzQkEsMkJBSmU7QUFLZkksRUFBQUEsMEJBQTBCLEVBQTFCQTtBQUxlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBhcnJheVV0aWxpdGllcyBmcm9tIFwiLi4vdXRpbGl0aWVzL2FycmF5XCI7XG5pbXBvcnQgeyBMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lLCBRdWFudGlmaWVyUnVsZU5hbWUsIFJ1bGVOYW1lUnVsZU5hbWUgfSBmcm9tIFwiLi4vYm5mL3J1bGVOYW1lc1wiO1xuXG5jb25zdCB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZnVuY3Rpb24gaXNOb2RlQ2hvaWNlTm9kZShub2RlKSB7XG4gIGxldCBub2RlTm9DaG9pY2VOb2RlID0gZmFsc2U7XG5cbiAgY29uc3Qgbm9kZVRlcm1pbmFsTm9kZSA9IG5vZGUuaXNUZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZVRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IHRlcm1pbmFsTm9kZSA9IG5vZGUsICAvLy9cbiAgICAgICAgICB0ZXJtaW5hbE5vZGVDb250ZW50ID0gdGVybWluYWxOb2RlLmdldENvbnRlbnQoKTtcblxuICAgIG5vZGVOb0Nob2ljZU5vZGUgPSAodGVybWluYWxOb2RlQ29udGVudCA9PT0gXCJ8XCIpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVOb0Nob2ljZU5vZGU7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZVJ1bGVOYW1lTm9kZShub2RlKSB7XG4gIGxldCBub2RlUnVsZU5hbWVOb2RlID0gZmFsc2U7XG5cbiAgY29uc3Qgbm9kZVRlcm1pbmFsTm9kZSA9IG5vZGUuaXNUZXJtaW5hbE5vZGUoKSxcbiAgICAgICAgbm9kZU5vblRlcm1pbmFsTm9kZSA9ICFub2RlVGVybWluYWxOb2RlO1xuXG4gIGlmIChub2RlTm9uVGVybWluYWxOb2RlKSB7XG4gICAgY29uc3Qgbm9uVGVybWluYWxOb2RlID0gbm9kZSwgLy8vXG4gICAgICAgICAgbm9uVGVybWluYWxOb2RlUnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICAgIG5vZGVSdWxlTmFtZU5vZGUgPSAobm9uVGVybWluYWxOb2RlUnVsZU5hbWUgPT09IFJ1bGVOYW1lUnVsZU5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVSdWxlTmFtZU5vZGU7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZVF1YW50aWZpZXJOb2RlKG5vZGUpIHtcbiAgbGV0IG5vZGVRdWFudGlmaWVyTm9kZSA9IGZhbHNlO1xuXG4gIGNvbnN0IG5vZGVOb25UZXJtaW5hbE5vZGUgPSBub2RlLmlzTm9uVGVybWluYWxOb2RlKCk7XG5cbiAgaWYgKG5vZGVOb25UZXJtaW5hbE5vZGUpIHtcbiAgICBjb25zdCBub25UZXJtaW5hbE5vZGUgPSBub2RlLCAvLy9cbiAgICAgICAgICBydWxlTmFtZSA9IG5vblRlcm1pbmFsTm9kZS5nZXRSdWxlTmFtZSgpLFxuICAgICAgICAgIHJ1bGVOYW1lUXVhbnRpZmllclJ1bGVOYW1lID0gKHJ1bGVOYW1lID09PSBRdWFudGlmaWVyUnVsZU5hbWUpO1xuXG4gICAgbm9kZVF1YW50aWZpZXJOb2RlID0gcnVsZU5hbWVRdWFudGlmaWVyUnVsZU5hbWU7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBub2RlUXVhbnRpZmllck5vZGU7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZUxvb2tBaGVhZE1vZGlmaWVyTm9kZShub2RlKSB7XG4gIGxldCBub2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlID0gZmFsc2U7XG5cbiAgY29uc3Qgbm9kZU5vblRlcm1pbmFsTm9kZSA9IG5vZGUuaXNOb25UZXJtaW5hbE5vZGUoKTtcblxuICBpZiAobm9kZU5vblRlcm1pbmFsTm9kZSkge1xuICAgIGNvbnN0IG5vblRlcm1pbmFsTm9kZSA9IG5vZGUsIC8vL1xuICAgICAgICAgIHJ1bGVOYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFJ1bGVOYW1lKCksXG4gICAgICAgICAgcnVsZU5hbWVMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lID0gKHJ1bGVOYW1lID09PSBMb29rQWhlYWRNb2RpZmllclJ1bGVOYW1lKTtcblxuICAgIG5vZGVMb29rQWhlYWRNb2RpZmllck5vZGUgPSBydWxlTmFtZUxvb2tBaGVhZE1vZGlmaWVyUnVsZU5hbWU7ICAvLy9cbiAgfVxuXG4gIHJldHVybiBub2RlTG9va0FoZWFkTW9kaWZpZXJOb2RlO1xuXG59XG5cbmZ1bmN0aW9uIHJ1bGVOYW1lRnJvbVF1YW50aWZpZXJOb2RlKHF1YW50aWZpZXJOb2RlKSB7XG4gIGxldCBub25UZXJtaW5hbE5vZGU7XG5cbiAgbm9uVGVybWluYWxOb2RlID0gcXVhbnRpZmllck5vZGU7IC8vL1xuXG4gIGNvbnN0IGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpLFxuICAgICAgICBmaXJzdENoaWxkTm9kZSA9IGZpcnN0KGNoaWxkTm9kZXMpO1xuXG4gIG5vblRlcm1pbmFsTm9kZSA9IGZpcnN0Q2hpbGROb2RlOyAgLy8vXG5cbiAgY29uc3QgcnVsZU5hbWUgPSBub25UZXJtaW5hbE5vZGUuZ2V0UnVsZU5hbWUoKTtcblxuICByZXR1cm4gcnVsZU5hbWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc05vZGVDaG9pY2VOb2RlLFxuICBpc05vZGVSdWxlTmFtZU5vZGUsXG4gIGlzTm9kZVF1YW50aWZpZXJOb2RlLFxuICBpc05vZGVMb29rQWhlYWRNb2RpZmllck5vZGUsXG4gIHJ1bGVOYW1lRnJvbVF1YW50aWZpZXJOb2RlXG59O1xuIl19