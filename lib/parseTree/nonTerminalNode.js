'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ParseTree = require('../parseTree'),
    EmptyParseTree = require('../parseTree/empty'),
    VerticalBranchParseTree = require('../parseTree/verticalBranch');

var NonTerminalNodeParseTree = function (_ParseTree) {
  _inherits(NonTerminalNodeParseTree, _ParseTree);

  function NonTerminalNodeParseTree() {
    _classCallCheck(this, NonTerminalNodeParseTree);

    return _possibleConstructorReturn(this, (NonTerminalNodeParseTree.__proto__ || Object.getPrototypeOf(NonTerminalNodeParseTree)).apply(this, arguments));
  }

  _createClass(NonTerminalNodeParseTree, null, [{
    key: 'fromNonTerminalNode',
    value: function fromNonTerminalNode(nonTerminalNode) {
      var productionName = nonTerminalNode.getProductionName(),
          childNodes = nonTerminalNode.getChildNodes(),
          productionNameParseTree = parseTreeFromProductionName(productionName),
          childParseTreesParseTree = parseTreeFromChildNodes(childNodes);

      var parseTree = productionNameParseTree,
          ///
      parseTreeWidth = parseTree.getWidth(),
          childParseTreesParseTreeWidth = childParseTreesParseTree.getWidth(),
          differenceInWidths = Math.abs(parseTreeWidth - childParseTreesParseTreeWidth),
          leftMarginWidth = Math.floor(differenceInWidths / 2),
          rightMarginWidth = Math.ceil(differenceInWidths / 2);

      if (false) {} else if (parseTreeWidth < childParseTreesParseTreeWidth) {
        parseTree.addLeftMargin(leftMarginWidth);
        parseTree.addRightMargin(rightMarginWidth);
      } else if (childParseTreesParseTreeWidth < parseTreeWidth) {
        childParseTreesParseTree.addLeftMargin(leftMarginWidth);
        childParseTreesParseTree.addRightMargin(rightMarginWidth);
      }

      parseTree.appendToBottom(childParseTreesParseTree);

      return parseTree;
    }
  }]);

  return NonTerminalNodeParseTree;
}(ParseTree);

module.exports = NonTerminalNodeParseTree;

function parseTreeFromProductionName(productionName) {
  var str = productionName,
      ///
  parseTree = ParseTree.fromString(str),
      parseTreeWidth = parseTree.getWidth(),
      verticalBranchParseTree = VerticalBranchParseTree.fromWidth(parseTreeWidth);

  parseTree.appendToTop(verticalBranchParseTree);
  parseTree.appendToBottom(verticalBranchParseTree);

  return parseTree;
}

function parseTreeFromChildNodes(childNodes) {
  var childParseTrees = childNodes.map(function (childNode) {
    var childParseTree = childNode.getParseTree();

    return childParseTree;
  }),
      childParseTreesLength = childParseTrees.length,
      childParseTreesDepth = childParseTrees.reduce(function (childParseTreesDepth, childParseTree) {
    var childParseTreeDepth = childParseTree.getDepth();

    childParseTreesDepth = Math.max(childParseTreesDepth, childParseTreeDepth);

    return childParseTreesDepth;
  }, 0),
      emptyParseTree = EmptyParseTree.fromDepth(childParseTreesDepth),
      parseTree = emptyParseTree; ///

  childParseTrees.forEach(function (childParseTree, index) {
    var childParseTreeDepth = childParseTree.getDepth(),
        clonedChildParseTree = childParseTree.clone(),
        lastChildParseTree = index === childParseTreesLength - 1;

    if (!lastChildParseTree) {
      var rightMarginWidth = 1;

      clonedChildParseTree.addRightMargin(rightMarginWidth);
    }

    if (childParseTreeDepth < childParseTreesDepth) {
      var bottomMarginDepth = childParseTreesDepth - childParseTreeDepth;

      clonedChildParseTree.addBottomMargin(bottomMarginDepth);
    }

    parseTree.appendToRight(clonedChildParseTree);
  });

  return parseTree;
}
//# sourceMappingURL=data:application/json;base64,