'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ParseTree = require('../parseTree'),
    EmptyParseTree = require('../parseTree/empty'),
    ChildNodesParseTree = require('../parseTree/childNodes'),
    ProductionNameParseTree = require('../parseTree/productionName'),
    VerticalBranchParseTree = require('../parseTree/verticalBranch'),
    HorizontalBranchParseTree = require('../parseTree/horizontalBranch');

var NonTerminalNodeParseTree = function (_ParseTree) {
  _inherits(NonTerminalNodeParseTree, _ParseTree);

  function NonTerminalNodeParseTree(lines, verticalBranchParseTree) {
    _classCallCheck(this, NonTerminalNodeParseTree);

    var _this = _possibleConstructorReturn(this, (NonTerminalNodeParseTree.__proto__ || Object.getPrototypeOf(NonTerminalNodeParseTree)).call(this, lines));

    _this.verticalBranchParseTree = verticalBranchParseTree;
    return _this;
  }

  _createClass(NonTerminalNodeParseTree, [{
    key: 'getVerticalBranchPosition',
    value: function getVerticalBranchPosition() {
      return this.verticalBranchParseTree.getVerticalBranchPosition();
    }
  }], [{
    key: 'fromNonTerminalNode',
    value: function fromNonTerminalNode(nonTerminalNode) {
      var productionName = nonTerminalNode.getProductionName(),
          childNodes = nonTerminalNode.getChildNodes(),
          childNodesParseTree = ChildNodesParseTree.fromChildNodes(childNodes),
          productionNameParseTree = ProductionNameParseTree.fromProductionName(productionName),
          productionNameParseTreeWidth = productionNameParseTree.getWidth(),
          productionNameParseTreeDepth = productionNameParseTree.getDepth(),
          childNodesParseTreeWidth = childNodesParseTree.getWidth(),
          nonTerminalNodeParseTreeDepth = productionNameParseTreeDepth;

      var childNodesParseTreeVerticalBranchPosition = childNodesParseTree.getVerticalBranchPosition();

      if (childNodesParseTreeVerticalBranchPosition !== null) {
        var leftMargin, rightMargin, verticalBranchParseTree, verticalBranchParseTreeWidth, verticalBranchParseTreeVerticalBranchPosition;

        if (productionNameParseTreeWidth === childNodesParseTreeWidth) {
          verticalBranchParseTreeWidth = productionNameParseTreeWidth;
          verticalBranchParseTree = VerticalBranchParseTree.fromWidth(verticalBranchParseTreeWidth);
        } else if (productionNameParseTreeWidth > childNodesParseTreeWidth) {
          verticalBranchParseTreeWidth = productionNameParseTreeWidth;
          verticalBranchParseTree = VerticalBranchParseTree.fromWidth(verticalBranchParseTreeWidth);
          verticalBranchParseTreeVerticalBranchPosition = verticalBranchParseTree.getVerticalBranchPosition();

          leftMargin = verticalBranchParseTreeVerticalBranchPosition - childNodesParseTreeVerticalBranchPosition;
          rightMargin = productionNameParseTreeWidth - childNodesParseTreeWidth - leftMargin;

          childNodesParseTree.addLeftMargin(leftMargin);
          childNodesParseTree.addRightMargin(rightMargin);
        } else if (productionNameParseTreeWidth < childNodesParseTreeWidth) {
          verticalBranchParseTreeWidth = productionNameParseTreeWidth;
          verticalBranchParseTree = VerticalBranchParseTree.fromWidth(verticalBranchParseTreeWidth);
          verticalBranchParseTreeVerticalBranchPosition = verticalBranchParseTree.getVerticalBranchPosition();

          leftMargin = childNodesParseTreeVerticalBranchPosition - verticalBranchParseTreeVerticalBranchPosition;
          rightMargin = childNodesParseTreeWidth - productionNameParseTreeWidth - leftMargin;

          verticalBranchParseTree.addLeftMargin(leftMargin);
          verticalBranchParseTree.addRightMargin(rightMargin);
          productionNameParseTree.addLeftMargin(leftMargin);
          productionNameParseTree.addRightMargin(rightMargin);
        }
      } else {
        // var differenceInWidths = Math.abs(productionNameParseTreeWidth - childNodesParseTreeWidth),
        //     leftMarginWidth = Math.ceil(differenceInWidths/2),
        //     rightMarginWidth = Math.floor(differenceInWidths/2);
        //
        // if (false) {
        //
        // } else if (productionNameParseTreeWidth > childNodesParseTreeWidth) {
        //   childNodesParseTree.addLeftMargin(leftMarginWidth);
        //   childNodesParseTree.addRightMargin(rightMarginWidth);
        // } else if (productionNameParseTreeWidth < childNodesParseTreeWidth) {
        //   productionNameParseTree.addLeftMargin(leftMarginWidth);
        //   productionNameParseTree.addRightMargin(rightMarginWidth);
        // }
      }

      var nonTerminalNodeParseTree = EmptyParseTree.fromDepth(nonTerminalNodeParseTreeDepth, NonTerminalNodeParseTree, verticalBranchParseTree);

      nonTerminalNodeParseTree.appendToRight(productionNameParseTree);
      nonTerminalNodeParseTree.appendToTop(verticalBranchParseTree);
      nonTerminalNodeParseTree.appendToBottom(childNodesParseTree);

      return nonTerminalNodeParseTree;
    }
  }]);

  return NonTerminalNodeParseTree;
}(ParseTree);

module.exports = NonTerminalNodeParseTree;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9wYXJzZVRyZWUvbm9uVGVybWluYWxOb2RlLmpzIl0sIm5hbWVzIjpbIlBhcnNlVHJlZSIsInJlcXVpcmUiLCJFbXB0eVBhcnNlVHJlZSIsIkNoaWxkTm9kZXNQYXJzZVRyZWUiLCJQcm9kdWN0aW9uTmFtZVBhcnNlVHJlZSIsIlZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlIiwiSG9yaXpvbnRhbEJyYW5jaFBhcnNlVHJlZSIsIk5vblRlcm1pbmFsTm9kZVBhcnNlVHJlZSIsImxpbmVzIiwidmVydGljYWxCcmFuY2hQYXJzZVRyZWUiLCJnZXRWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uIiwibm9uVGVybWluYWxOb2RlIiwicHJvZHVjdGlvbk5hbWUiLCJnZXRQcm9kdWN0aW9uTmFtZSIsImNoaWxkTm9kZXMiLCJnZXRDaGlsZE5vZGVzIiwiY2hpbGROb2Rlc1BhcnNlVHJlZSIsImZyb21DaGlsZE5vZGVzIiwicHJvZHVjdGlvbk5hbWVQYXJzZVRyZWUiLCJmcm9tUHJvZHVjdGlvbk5hbWUiLCJwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZVdpZHRoIiwiZ2V0V2lkdGgiLCJwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZURlcHRoIiwiZ2V0RGVwdGgiLCJjaGlsZE5vZGVzUGFyc2VUcmVlV2lkdGgiLCJub25UZXJtaW5hbE5vZGVQYXJzZVRyZWVEZXB0aCIsImNoaWxkTm9kZXNQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uIiwibGVmdE1hcmdpbiIsInJpZ2h0TWFyZ2luIiwidmVydGljYWxCcmFuY2hQYXJzZVRyZWVXaWR0aCIsInZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlVmVydGljYWxCcmFuY2hQb3NpdGlvbiIsImZyb21XaWR0aCIsImFkZExlZnRNYXJnaW4iLCJhZGRSaWdodE1hcmdpbiIsIm5vblRlcm1pbmFsTm9kZVBhcnNlVHJlZSIsImZyb21EZXB0aCIsImFwcGVuZFRvUmlnaHQiLCJhcHBlbmRUb1RvcCIsImFwcGVuZFRvQm90dG9tIiwi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QkFBekIsRUFBd0RsQix3QkFBeEQsRUFBa0ZFLHVCQUFsRixDQUEvQjs7QUFFQXlCLCtCQUF5QkUsYUFBekIsQ0FBdUNsQix1QkFBdkM7QUFDQWdCLCtCQUF5QkcsV0FBekIsQ0FBcUM1Qix1QkFBckM7QUFDQXlCLCtCQUF5QkksY0FBekIsQ0FBd0N0QixtQkFBeEM7O0FBRUEsYUFBT2tCLHdCQUFQO0FBQ0Q7Ozs7RUE3RW9DbEMsUzs7QUFnRnZDdUMsT0FBT0MsT0FBUCxHQUFpQmpDLHdCQUFqQiIsImZpbGUiOiJub25UZXJtaW5hbE5vZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBQYXJzZVRyZWUgPSByZXF1aXJlKCcuLi9wYXJzZVRyZWUnKSxcbiAgICBFbXB0eVBhcnNlVHJlZSA9IHJlcXVpcmUoJy4uL3BhcnNlVHJlZS9lbXB0eScpLFxuICAgIENoaWxkTm9kZXNQYXJzZVRyZWUgPSByZXF1aXJlKCcuLi9wYXJzZVRyZWUvY2hpbGROb2RlcycpLFxuICAgIFByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlID0gcmVxdWlyZSgnLi4vcGFyc2VUcmVlL3Byb2R1Y3Rpb25OYW1lJyksXG4gICAgVmVydGljYWxCcmFuY2hQYXJzZVRyZWUgPSByZXF1aXJlKCcuLi9wYXJzZVRyZWUvdmVydGljYWxCcmFuY2gnKSxcbiAgICBIb3Jpem9udGFsQnJhbmNoUGFyc2VUcmVlID0gcmVxdWlyZSgnLi4vcGFyc2VUcmVlL2hvcml6b250YWxCcmFuY2gnKTtcblxuY2xhc3MgTm9uVGVybWluYWxOb2RlUGFyc2VUcmVlIGV4dGVuZHMgUGFyc2VUcmVlIHtcbiAgY29uc3RydWN0b3IobGluZXMsIHZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlKSB7XG4gICAgc3VwZXIobGluZXMpO1xuXG4gICAgdGhpcy52ZXJ0aWNhbEJyYW5jaFBhcnNlVHJlZSA9IHZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlO1xuICB9XG5cbiAgZ2V0VmVydGljYWxCcmFuY2hQb3NpdGlvbigpIHsgcmV0dXJuIHRoaXMudmVydGljYWxCcmFuY2hQYXJzZVRyZWUuZ2V0VmVydGljYWxCcmFuY2hQb3NpdGlvbigpOyB9XG5cbiAgc3RhdGljIGZyb21Ob25UZXJtaW5hbE5vZGUobm9uVGVybWluYWxOb2RlKSB7XG4gICAgdmFyIHByb2R1Y3Rpb25OYW1lID0gbm9uVGVybWluYWxOb2RlLmdldFByb2R1Y3Rpb25OYW1lKCksXG4gICAgICAgIGNoaWxkTm9kZXMgPSBub25UZXJtaW5hbE5vZGUuZ2V0Q2hpbGROb2RlcygpLFxuICAgICAgICBjaGlsZE5vZGVzUGFyc2VUcmVlID0gQ2hpbGROb2Rlc1BhcnNlVHJlZS5mcm9tQ2hpbGROb2RlcyhjaGlsZE5vZGVzKSxcbiAgICAgICAgcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWUgPSBQcm9kdWN0aW9uTmFtZVBhcnNlVHJlZS5mcm9tUHJvZHVjdGlvbk5hbWUocHJvZHVjdGlvbk5hbWUpLFxuICAgICAgICBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZVdpZHRoID0gcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWUuZ2V0V2lkdGgoKSxcbiAgICAgICAgcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVEZXB0aCA9IHByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlLmdldERlcHRoKCksXG4gICAgICAgIGNoaWxkTm9kZXNQYXJzZVRyZWVXaWR0aCA9IGNoaWxkTm9kZXNQYXJzZVRyZWUuZ2V0V2lkdGgoKSxcbiAgICAgICAgbm9uVGVybWluYWxOb2RlUGFyc2VUcmVlRGVwdGggPSBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZURlcHRoO1xuXG4gICAgdmFyIGNoaWxkTm9kZXNQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uID0gY2hpbGROb2Rlc1BhcnNlVHJlZS5nZXRWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uKCk7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1BhcnNlVHJlZVZlcnRpY2FsQnJhbmNoUG9zaXRpb24gIT09IG51bGwpIHtcbiAgICAgIHZhciBsZWZ0TWFyZ2luLFxuICAgICAgICAgIHJpZ2h0TWFyZ2luLFxuICAgICAgICAgIHZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlLFxuICAgICAgICAgIHZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlV2lkdGgsXG4gICAgICAgICAgdmVydGljYWxCcmFuY2hQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uO1xuXG4gICAgICBpZiAocHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVXaWR0aCA9PT0gY2hpbGROb2Rlc1BhcnNlVHJlZVdpZHRoKSB7XG4gICAgICAgIHZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlV2lkdGggPSBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZVdpZHRoO1xuICAgICAgICB2ZXJ0aWNhbEJyYW5jaFBhcnNlVHJlZSA9IFZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlLmZyb21XaWR0aCh2ZXJ0aWNhbEJyYW5jaFBhcnNlVHJlZVdpZHRoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVXaWR0aCA+IGNoaWxkTm9kZXNQYXJzZVRyZWVXaWR0aCkge1xuICAgICAgICB2ZXJ0aWNhbEJyYW5jaFBhcnNlVHJlZVdpZHRoID0gcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVXaWR0aDtcbiAgICAgICAgdmVydGljYWxCcmFuY2hQYXJzZVRyZWUgPSBWZXJ0aWNhbEJyYW5jaFBhcnNlVHJlZS5mcm9tV2lkdGgodmVydGljYWxCcmFuY2hQYXJzZVRyZWVXaWR0aCk7XG4gICAgICAgIHZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlVmVydGljYWxCcmFuY2hQb3NpdGlvbiA9IHZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlLmdldFZlcnRpY2FsQnJhbmNoUG9zaXRpb24oKTtcblxuICAgICAgICBsZWZ0TWFyZ2luID0gdmVydGljYWxCcmFuY2hQYXJzZVRyZWVWZXJ0aWNhbEJyYW5jaFBvc2l0aW9uIC0gY2hpbGROb2Rlc1BhcnNlVHJlZVZlcnRpY2FsQnJhbmNoUG9zaXRpb247XG4gICAgICAgIHJpZ2h0TWFyZ2luID0gcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVXaWR0aCAtIGNoaWxkTm9kZXNQYXJzZVRyZWVXaWR0aCAtIGxlZnRNYXJnaW47XG5cbiAgICAgICAgY2hpbGROb2Rlc1BhcnNlVHJlZS5hZGRMZWZ0TWFyZ2luKGxlZnRNYXJnaW4pO1xuICAgICAgICBjaGlsZE5vZGVzUGFyc2VUcmVlLmFkZFJpZ2h0TWFyZ2luKHJpZ2h0TWFyZ2luKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVXaWR0aCA8IGNoaWxkTm9kZXNQYXJzZVRyZWVXaWR0aCkge1xuICAgICAgICB2ZXJ0aWNhbEJyYW5jaFBhcnNlVHJlZVdpZHRoID0gcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVXaWR0aDtcbiAgICAgICAgdmVydGljYWxCcmFuY2hQYXJzZVRyZWUgPSBWZXJ0aWNhbEJyYW5jaFBhcnNlVHJlZS5mcm9tV2lkdGgodmVydGljYWxCcmFuY2hQYXJzZVRyZWVXaWR0aCk7XG4gICAgICAgIHZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlVmVydGljYWxCcmFuY2hQb3NpdGlvbiA9IHZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlLmdldFZlcnRpY2FsQnJhbmNoUG9zaXRpb24oKTtcblxuICAgICAgICBsZWZ0TWFyZ2luID0gY2hpbGROb2Rlc1BhcnNlVHJlZVZlcnRpY2FsQnJhbmNoUG9zaXRpb24gLSB2ZXJ0aWNhbEJyYW5jaFBhcnNlVHJlZVZlcnRpY2FsQnJhbmNoUG9zaXRpb247XG4gICAgICAgIHJpZ2h0TWFyZ2luID0gY2hpbGROb2Rlc1BhcnNlVHJlZVdpZHRoIC0gcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWVXaWR0aCAtIGxlZnRNYXJnaW47XG5cbiAgICAgICAgdmVydGljYWxCcmFuY2hQYXJzZVRyZWUuYWRkTGVmdE1hcmdpbihsZWZ0TWFyZ2luKTtcbiAgICAgICAgdmVydGljYWxCcmFuY2hQYXJzZVRyZWUuYWRkUmlnaHRNYXJnaW4ocmlnaHRNYXJnaW4pO1xuICAgICAgICBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZS5hZGRMZWZ0TWFyZ2luKGxlZnRNYXJnaW4pO1xuICAgICAgICBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZS5hZGRSaWdodE1hcmdpbihyaWdodE1hcmdpbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHZhciBkaWZmZXJlbmNlSW5XaWR0aHMgPSBNYXRoLmFicyhwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZVdpZHRoIC0gY2hpbGROb2Rlc1BhcnNlVHJlZVdpZHRoKSxcbiAgICAgIC8vICAgICBsZWZ0TWFyZ2luV2lkdGggPSBNYXRoLmNlaWwoZGlmZmVyZW5jZUluV2lkdGhzLzIpLFxuICAgICAgLy8gICAgIHJpZ2h0TWFyZ2luV2lkdGggPSBNYXRoLmZsb29yKGRpZmZlcmVuY2VJbldpZHRocy8yKTtcbiAgICAgIC8vXG4gICAgICAvLyBpZiAoZmFsc2UpIHtcbiAgICAgIC8vXG4gICAgICAvLyB9IGVsc2UgaWYgKHByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlV2lkdGggPiBjaGlsZE5vZGVzUGFyc2VUcmVlV2lkdGgpIHtcbiAgICAgIC8vICAgY2hpbGROb2Rlc1BhcnNlVHJlZS5hZGRMZWZ0TWFyZ2luKGxlZnRNYXJnaW5XaWR0aCk7XG4gICAgICAvLyAgIGNoaWxkTm9kZXNQYXJzZVRyZWUuYWRkUmlnaHRNYXJnaW4ocmlnaHRNYXJnaW5XaWR0aCk7XG4gICAgICAvLyB9IGVsc2UgaWYgKHByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlV2lkdGggPCBjaGlsZE5vZGVzUGFyc2VUcmVlV2lkdGgpIHtcbiAgICAgIC8vICAgcHJvZHVjdGlvbk5hbWVQYXJzZVRyZWUuYWRkTGVmdE1hcmdpbihsZWZ0TWFyZ2luV2lkdGgpO1xuICAgICAgLy8gICBwcm9kdWN0aW9uTmFtZVBhcnNlVHJlZS5hZGRSaWdodE1hcmdpbihyaWdodE1hcmdpbldpZHRoKTtcbiAgICAgIC8vIH1cbiAgICB9XG5cbiAgICB2YXIgbm9uVGVybWluYWxOb2RlUGFyc2VUcmVlID0gRW1wdHlQYXJzZVRyZWUuZnJvbURlcHRoKG5vblRlcm1pbmFsTm9kZVBhcnNlVHJlZURlcHRoLCBOb25UZXJtaW5hbE5vZGVQYXJzZVRyZWUsIHZlcnRpY2FsQnJhbmNoUGFyc2VUcmVlKTtcblxuICAgIG5vblRlcm1pbmFsTm9kZVBhcnNlVHJlZS5hcHBlbmRUb1JpZ2h0KHByb2R1Y3Rpb25OYW1lUGFyc2VUcmVlKTtcbiAgICBub25UZXJtaW5hbE5vZGVQYXJzZVRyZWUuYXBwZW5kVG9Ub3AodmVydGljYWxCcmFuY2hQYXJzZVRyZWUpO1xuICAgIG5vblRlcm1pbmFsTm9kZVBhcnNlVHJlZS5hcHBlbmRUb0JvdHRvbShjaGlsZE5vZGVzUGFyc2VUcmVlKTtcblxuICAgIHJldHVybiBub25UZXJtaW5hbE5vZGVQYXJzZVRyZWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOb25UZXJtaW5hbE5vZGVQYXJzZVRyZWU7XG4iXX0=