'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Rule = require('../rule'),
    Production = require('../production');

var NonImplicitlyLeftRecursiveProduction = function (_Production) {
  _inherits(NonImplicitlyLeftRecursiveProduction, _Production);

  function NonImplicitlyLeftRecursiveProduction() {
    _classCallCheck(this, NonImplicitlyLeftRecursiveProduction);

    return _possibleConstructorReturn(this, (NonImplicitlyLeftRecursiveProduction.__proto__ || Object.getPrototypeOf(NonImplicitlyLeftRecursiveProduction)).apply(this, arguments));
  }

  _createClass(NonImplicitlyLeftRecursiveProduction, null, [{
    key: 'fromProductionAndPreviousProductions',
    value: function fromProductionAndPreviousProductions(production, previousProductions) {
      var productionName = production.getName(),
          productionNode = production.getNode(),
          name = productionName,
          ///
      rules = rulesFromProductionAndPreviousProductions(production, previousProductions),
          Node = productionNode,
          ///
      nonImplicitlyLeftRecursiveProduction = new NonImplicitlyLeftRecursiveProduction(name, rules, Node);

      return nonImplicitlyLeftRecursiveProduction;
    }
  }]);

  return NonImplicitlyLeftRecursiveProduction;
}(Production);

module.exports = NonImplicitlyLeftRecursiveProduction;

function rulesFromProductionAndPreviousProductions(production, previousProductions) {
  var productionRules = production.getRules(),
      rules = productionRules.reduce(function (rules, productionRule) {
    var productionRuleImplicitlyLeftRecursivePreviousProduction = productionRule.implicitlyLeftRecursivePreviousProduction(previousProductions);

    if (productionRuleImplicitlyLeftRecursivePreviousProduction !== null) {
      var previousProduction = productionRuleImplicitlyLeftRecursivePreviousProduction,
          ///
      rulesWithPreviousProductionInlineFromProductionInline = rulesWithPreviousProductionInlineFromProductionRuleAndPreviousProduction(productionRule, previousProduction);

      rules = rules.concat(rulesWithPreviousProductionInlineFromProductionInline);
    } else {
      var rule = productionRule;

      rules.push(rule);
    }

    return rules;
  }, []);

  return rules;
}

function rulesWithPreviousProductionInlineFromProductionRuleAndPreviousProduction(productionRule, previousProduction) {
  var previousProductionRules = previousProduction.getRules(),
      rulesWithPreviousProductionInline = previousProductionRules.map(function (previousProductionRule) {
    var previousProductionRuleParts = previousProductionRule.getParts(),
        productionRuleAllButFirstParts = productionRule.getAllButFirstParts(),
        ruleWithPreviousProductionInlineParts = [].concat(previousProductionRuleParts).concat(productionRuleAllButFirstParts),
        ruleWithPreviousProductionInline = new Rule(ruleWithPreviousProductionInlineParts);

    return ruleWithPreviousProductionInline;
  });

  return rulesWithPreviousProductionInline;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9jb21tb24vcHJvZHVjdGlvbi9ub25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZS5qcyJdLCJuYW1lcyI6WyJSdWxlIiwicmVxdWlyZSIsIlByb2R1Y3Rpb24iLCJOb25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJwcm9kdWN0aW9uIiwicHJldmlvdXNQcm9kdWN0aW9ucyIsInByb2R1Y3Rpb25OYW1lIiwiZ2V0TmFtZSIsInByb2R1Y3Rpb25Ob2RlIiwiZ2V0Tm9kZSIsIm5hbWUiLCJydWxlcyIsInJ1bGVzRnJvbVByb2R1Y3Rpb25BbmRQcmV2aW91c1Byb2R1Y3Rpb25zIiwiTm9kZSIsIm5vbkltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcm9kdWN0aW9uUnVsZXMiLCJnZXRSdWxlcyIsInJlZHVjZSIsInByb2R1Y3Rpb25SdWxlIiwicHJvZHVjdGlvblJ1bGVJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByZXZpb3VzUHJvZHVjdGlvbiIsImltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUHJldmlvdXNQcm9kdWN0aW9uIiwicHJldmlvdXNQcm9kdWN0aW9uIiwicnVsZXNXaXRoUHJldmlvdXNQcm9kdWN0aW9uSW5saW5lRnJvbVByb2R1Y3Rpb25JbmxpbmUiLCJydWxlc1dpdGhQcmV2aW91c1Byb2R1Y3Rpb25JbmxpbmVGcm9tUHJvZHVjdGlvblJ1bGVBbmRQcmV2aW91c1Byb2R1Y3Rpb24iLCJjb25jYXQiLCJydWxlIiwicHVzaCIsInByZXZpb3VzUHJvZHVjdGlvblJ1bGVzIiwicnVsZXNXaXRoUHJldmlvdXNQcm9kdWN0aW9uSW5saW5lIiwibWFwIiwicHJldmlvdXNQcm9kdWN0aW9uUnVsZSIsInByZXZpb3VzUHJvZHVjdGlvblJ1bGVQYXJ0cyIsImdldFBhcnRzIiwicHJvZHVjdGlvblJ1bGVBbGxCdXRGaXJzdFBhcnRzIiwiZ2V0QWxsQnV0Rmlyc3RQYXJ0cyIsInJ1bGVXaXRoUHJldmlvdXNQcm9kdWN0aW9uSW5saW5lUGFydHMiLCJydWxlV2l0aFByZXZpb3VzUHJvZHVjdGlvbklubGluZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxPQUFPQyxRQUFRLFNBQVIsQ0FBYjtBQUFBLElBQ01DLGFBQWFELFFBQVEsZUFBUixDQURuQjs7SUFHTUUsb0M7Ozs7Ozs7Ozs7O3lEQUN3Q0MsVSxFQUFZQyxtQixFQUFxQjtBQUMzRSxVQUFNQyxpQkFBaUJGLFdBQVdHLE9BQVgsRUFBdkI7QUFBQSxVQUNNQyxpQkFBaUJKLFdBQVdLLE9BQVgsRUFEdkI7QUFBQSxVQUVNQyxPQUFPSixjQUZiO0FBQUEsVUFFOEI7QUFDeEJLLGNBQVFDLDBDQUEwQ1IsVUFBMUMsRUFBc0RDLG1CQUF0RCxDQUhkO0FBQUEsVUFJTVEsT0FBT0wsY0FKYjtBQUFBLFVBSThCO0FBQ3hCTSw2Q0FBdUMsSUFBSVgsb0NBQUosQ0FBeUNPLElBQXpDLEVBQStDQyxLQUEvQyxFQUFzREUsSUFBdEQsQ0FMN0M7O0FBT0EsYUFBT0Msb0NBQVA7QUFDRDs7OztFQVZnRFosVTs7QUFhbkRhLE9BQU9DLE9BQVAsR0FBaUJiLG9DQUFqQjs7QUFFQSxTQUFTUyx5Q0FBVCxDQUFtRFIsVUFBbkQsRUFBK0RDLG1CQUEvRCxFQUFvRjtBQUNsRixNQUFNWSxrQkFBa0JiLFdBQVdjLFFBQVgsRUFBeEI7QUFBQSxNQUNNUCxRQUFRTSxnQkFBZ0JFLE1BQWhCLENBQXVCLFVBQVNSLEtBQVQsRUFBZ0JTLGNBQWhCLEVBQWdDO0FBQzdELFFBQU1DLDBEQUEwREQsZUFBZUUseUNBQWYsQ0FBeURqQixtQkFBekQsQ0FBaEU7O0FBRUEsUUFBSWdCLDREQUE0RCxJQUFoRSxFQUFzRTtBQUNwRSxVQUFNRSxxQkFBcUJGLHVEQUEzQjtBQUFBLFVBQW9GO0FBQzlFRyw4REFBd0RDLHlFQUF5RUwsY0FBekUsRUFBeUZHLGtCQUF6RixDQUQ5RDs7QUFHQVosY0FBUUEsTUFBTWUsTUFBTixDQUFhRixxREFBYixDQUFSO0FBQ0QsS0FMRCxNQUtPO0FBQ0wsVUFBTUcsT0FBT1AsY0FBYjs7QUFFQVQsWUFBTWlCLElBQU4sQ0FBV0QsSUFBWDtBQUNEOztBQUVELFdBQU9oQixLQUFQO0FBQ0QsR0FmTyxFQWVMLEVBZkssQ0FEZDs7QUFrQkEsU0FBT0EsS0FBUDtBQUNEOztBQUVELFNBQVNjLHdFQUFULENBQWtGTCxjQUFsRixFQUFrR0csa0JBQWxHLEVBQXNIO0FBQ3BILE1BQU1NLDBCQUEwQk4sbUJBQW1CTCxRQUFuQixFQUFoQztBQUFBLE1BQ01ZLG9DQUFvQ0Qsd0JBQXdCRSxHQUF4QixDQUE0QixVQUFTQyxzQkFBVCxFQUFpQztBQUMvRixRQUFNQyw4QkFBOEJELHVCQUF1QkUsUUFBdkIsRUFBcEM7QUFBQSxRQUNNQyxpQ0FBaUNmLGVBQWVnQixtQkFBZixFQUR2QztBQUFBLFFBRU1DLHdDQUF3QyxHQUFHWCxNQUFILENBQVVPLDJCQUFWLEVBQXVDUCxNQUF2QyxDQUE4Q1MsOEJBQTlDLENBRjlDO0FBQUEsUUFHTUcsbUNBQW1DLElBQUl0QyxJQUFKLENBQVNxQyxxQ0FBVCxDQUh6Qzs7QUFLQSxXQUFPQyxnQ0FBUDtBQUNELEdBUG1DLENBRDFDOztBQVVBLFNBQU9SLGlDQUFQO0FBQ0QiLCJmaWxlIjoibm9uSW1wbGljaXRseUxlZnRSZWN1cnNpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlJyksXG4gICAgICBQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi4vcHJvZHVjdGlvbicpO1xuXG5jbGFzcyBOb25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gZXh0ZW5kcyBQcm9kdWN0aW9uIHtcbiAgc3RhdGljIGZyb21Qcm9kdWN0aW9uQW5kUHJldmlvdXNQcm9kdWN0aW9ucyhwcm9kdWN0aW9uLCBwcmV2aW91c1Byb2R1Y3Rpb25zKSB7XG4gICAgY29uc3QgcHJvZHVjdGlvbk5hbWUgPSBwcm9kdWN0aW9uLmdldE5hbWUoKSxcbiAgICAgICAgICBwcm9kdWN0aW9uTm9kZSA9IHByb2R1Y3Rpb24uZ2V0Tm9kZSgpLFxuICAgICAgICAgIG5hbWUgPSBwcm9kdWN0aW9uTmFtZSwgIC8vL1xuICAgICAgICAgIHJ1bGVzID0gcnVsZXNGcm9tUHJvZHVjdGlvbkFuZFByZXZpb3VzUHJvZHVjdGlvbnMocHJvZHVjdGlvbiwgcHJldmlvdXNQcm9kdWN0aW9ucyksXG4gICAgICAgICAgTm9kZSA9IHByb2R1Y3Rpb25Ob2RlLCAgLy8vXG4gICAgICAgICAgbm9uSW1wbGljaXRseUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uID0gbmV3IE5vbkltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbihuYW1lLCBydWxlcywgTm9kZSk7XG5cbiAgICByZXR1cm4gbm9uSW1wbGljaXRseUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTm9uSW1wbGljaXRseUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uO1xuXG5mdW5jdGlvbiBydWxlc0Zyb21Qcm9kdWN0aW9uQW5kUHJldmlvdXNQcm9kdWN0aW9ucyhwcm9kdWN0aW9uLCBwcmV2aW91c1Byb2R1Y3Rpb25zKSB7XG4gIGNvbnN0IHByb2R1Y3Rpb25SdWxlcyA9IHByb2R1Y3Rpb24uZ2V0UnVsZXMoKSxcbiAgICAgICAgcnVsZXMgPSBwcm9kdWN0aW9uUnVsZXMucmVkdWNlKGZ1bmN0aW9uKHJ1bGVzLCBwcm9kdWN0aW9uUnVsZSkge1xuICAgICAgICAgIGNvbnN0IHByb2R1Y3Rpb25SdWxlSW1wbGljaXRseUxlZnRSZWN1cnNpdmVQcmV2aW91c1Byb2R1Y3Rpb24gPSBwcm9kdWN0aW9uUnVsZS5pbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByZXZpb3VzUHJvZHVjdGlvbihwcmV2aW91c1Byb2R1Y3Rpb25zKTtcblxuICAgICAgICAgIGlmIChwcm9kdWN0aW9uUnVsZUltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUHJldmlvdXNQcm9kdWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c1Byb2R1Y3Rpb24gPSBwcm9kdWN0aW9uUnVsZUltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUHJldmlvdXNQcm9kdWN0aW9uLCAvLy9cbiAgICAgICAgICAgICAgICAgIHJ1bGVzV2l0aFByZXZpb3VzUHJvZHVjdGlvbklubGluZUZyb21Qcm9kdWN0aW9uSW5saW5lID0gcnVsZXNXaXRoUHJldmlvdXNQcm9kdWN0aW9uSW5saW5lRnJvbVByb2R1Y3Rpb25SdWxlQW5kUHJldmlvdXNQcm9kdWN0aW9uKHByb2R1Y3Rpb25SdWxlLCBwcmV2aW91c1Byb2R1Y3Rpb24pO1xuXG4gICAgICAgICAgICBydWxlcyA9IHJ1bGVzLmNvbmNhdChydWxlc1dpdGhQcmV2aW91c1Byb2R1Y3Rpb25JbmxpbmVGcm9tUHJvZHVjdGlvbklubGluZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJ1bGUgPSBwcm9kdWN0aW9uUnVsZTtcblxuICAgICAgICAgICAgcnVsZXMucHVzaChydWxlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcnVsZXM7XG4gICAgICAgIH0sIFtdKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmZ1bmN0aW9uIHJ1bGVzV2l0aFByZXZpb3VzUHJvZHVjdGlvbklubGluZUZyb21Qcm9kdWN0aW9uUnVsZUFuZFByZXZpb3VzUHJvZHVjdGlvbihwcm9kdWN0aW9uUnVsZSwgcHJldmlvdXNQcm9kdWN0aW9uKSB7XG4gIGNvbnN0IHByZXZpb3VzUHJvZHVjdGlvblJ1bGVzID0gcHJldmlvdXNQcm9kdWN0aW9uLmdldFJ1bGVzKCksXG4gICAgICAgIHJ1bGVzV2l0aFByZXZpb3VzUHJvZHVjdGlvbklubGluZSA9IHByZXZpb3VzUHJvZHVjdGlvblJ1bGVzLm1hcChmdW5jdGlvbihwcmV2aW91c1Byb2R1Y3Rpb25SdWxlKSB7XG4gICAgICAgICAgY29uc3QgcHJldmlvdXNQcm9kdWN0aW9uUnVsZVBhcnRzID0gcHJldmlvdXNQcm9kdWN0aW9uUnVsZS5nZXRQYXJ0cygpLFxuICAgICAgICAgICAgICAgIHByb2R1Y3Rpb25SdWxlQWxsQnV0Rmlyc3RQYXJ0cyA9IHByb2R1Y3Rpb25SdWxlLmdldEFsbEJ1dEZpcnN0UGFydHMoKSxcbiAgICAgICAgICAgICAgICBydWxlV2l0aFByZXZpb3VzUHJvZHVjdGlvbklubGluZVBhcnRzID0gW10uY29uY2F0KHByZXZpb3VzUHJvZHVjdGlvblJ1bGVQYXJ0cykuY29uY2F0KHByb2R1Y3Rpb25SdWxlQWxsQnV0Rmlyc3RQYXJ0cyksXG4gICAgICAgICAgICAgICAgcnVsZVdpdGhQcmV2aW91c1Byb2R1Y3Rpb25JbmxpbmUgPSBuZXcgUnVsZShydWxlV2l0aFByZXZpb3VzUHJvZHVjdGlvbklubGluZVBhcnRzKTtcblxuICAgICAgICAgIHJldHVybiBydWxlV2l0aFByZXZpb3VzUHJvZHVjdGlvbklubGluZTtcbiAgICAgICAgfSk7XG5cbiAgcmV0dXJuIHJ1bGVzV2l0aFByZXZpb3VzUHJvZHVjdGlvbklubGluZTtcbn1cblxuIl19