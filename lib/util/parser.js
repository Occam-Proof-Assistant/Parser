'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Graph = require('../graph'),
    RightRecursiveProduction = require('../common/production/rightRecursive'),
    PossiblyCyclicProduction = require('../common/production/possiblyCyclic'),
    NonLeftRecursiveProduction = require('../common/production/nonLeftRecursive'),
    NonImplicitlyLeftRecursiveProduction = require('../common/production/nonImplicitlyLeftRecursive');

var parserUtil = function () {
  function parserUtil() {
    _classCallCheck(this, parserUtil);
  }

  _createClass(parserUtil, null, [{
    key: 'tokensFromLines',
    value: function tokensFromLines(lines) {
      var tokens = lines.reduce(function (tokens, line) {
        var lineTokens = line.getTokens();

        tokens = tokens.concat(lineTokens);

        return tokens;
      }, []);

      return tokens;
    }
  }, {
    key: 'eliminateCycles',
    value: function eliminateCycles(productions) {
      var possiblyCyclicProductions = possiblyCyclicProductionsFromProductions(productions),
          graph = graphFromPossiblyCyclicProductions(possiblyCyclicProductions),
          stronglyConnectedComponents = graph.getStronglyConnectedComponents();

      debugger;

      return productions;
    }
  }, {
    key: 'eliminateLeftRecursion',
    value: function eliminateLeftRecursion(productions) {
      var nonLeftRecursiveProductions = [],
          rightRecursiveProductions = [];

      productions.forEach(function (production, index) {
        var begin = 0,
            end = index,
            ///
        previousNonLeftRecursiveProductions = nonLeftRecursiveProductions.slice(begin, end),
            previousProductions = previousNonLeftRecursiveProductions,
            ///
        productionImplicitlyLeftRecursive = production.isImplicitlyLeftRecursive(previousProductions);

        if (productionImplicitlyLeftRecursive) {
          var nonImplicitlyLeftRecursiveProduction = NonImplicitlyLeftRecursiveProduction.fromProductionAndPreviousProductions(production, previousProductions);

          production = nonImplicitlyLeftRecursiveProduction; ///
        }

        var productionLeftRecursive = production.isLeftRecursive();

        if (productionLeftRecursive) {
          var nonLeftRecursiveProduction = NonLeftRecursiveProduction.fromProduction(production),
              rightRecursiveProduction = RightRecursiveProduction.fromProduction(production);

          nonLeftRecursiveProductions.push(nonLeftRecursiveProduction);

          rightRecursiveProductions.push(rightRecursiveProduction);
        } else {
          var _nonLeftRecursiveProduction = production; ///

          nonLeftRecursiveProductions.push(_nonLeftRecursiveProduction);
        }
      });

      productions = [].concat(nonLeftRecursiveProductions).concat(rightRecursiveProductions);

      return productions;
    }
  }]);

  return parserUtil;
}();

module.exports = parserUtil;

function possiblyCyclicProductionsFromProductions(productions) {
  var possiblyCyclicProductions = productions.reduce(function (possiblyCyclicProductions, production) {
    var possiblyCyclicProduction = PossiblyCyclicProduction.fromProduction(production);

    if (possiblyCyclicProduction !== null) {
      possiblyCyclicProductions.push(possiblyCyclicProduction);
    }

    return possiblyCyclicProductions;
  }, []);

  return possiblyCyclicProductions;
}

function graphFromPossiblyCyclicProductions(possiblyCyclicProductions) {
  var graph = new Graph();

  possiblyCyclicProductions.forEach(function (possiblyCyclicProduction) {
    var possiblyCyclicProductionName = possiblyCyclicProduction.getName(),
        possiblyCyclicProductionRulesProductionNames = possiblyCyclicProduction.getRulesProductionNames(),
        vertexName = possiblyCyclicProductionName,
        ///
    descendantVertexNames = possiblyCyclicProductionRulesProductionNames; ///

    graph.addVertex(vertexName, descendantVertexNames);
  });

  return graph;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,