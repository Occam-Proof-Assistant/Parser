'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Graph = require('../graph'),
    CyclicProduction = require('../common/production/unitRules'),
    NonUnitProduction = require('../common/production/nonUnit'),
    RightRecursiveProduction = require('../common/production/rightRecursive'),
    NonLeftRecursiveProduction = require('../common/production/nonLeftRecursive'),
    NonImplicitlyLeftRecursiveProduction = require('../common/production/nonImplicitlyLeftRecursive');

var parserUtil = function () {
  function parserUtil() {
    _classCallCheck(this, parserUtil);
  }

  _createClass(parserUtil, null, [{
    key: 'tokensFromLines',
    value: function tokensFromLines(lines) {
      var tokens = lines.reduce(function (tokens, line) {
        var lineTokens = line.getTokens();

        tokens = tokens.concat(lineTokens);

        return tokens;
      }, []);

      return tokens;
    }
  }, {
    key: 'eliminateCycles',
    value: function eliminateCycles(productions) {
      var cyclicProductions = cyclicProductionsFromProductions(productions),
          graph = graphFromCyclicProductions(cyclicProductions),
          components = graph.getComponents();

      productions = productionsFromComponents(components, productions);

      return productions;
    }
  }, {
    key: 'eliminateLeftRecursion',
    value: function eliminateLeftRecursion(productions) {
      var nonLeftRecursiveProductions = [],
          rightRecursiveProductions = [];

      productions.forEach(function (production, index) {
        var begin = 0,
            end = index,
            ///
        previousNonLeftRecursiveProductions = nonLeftRecursiveProductions.slice(begin, end),
            previousProductions = previousNonLeftRecursiveProductions,
            ///
        productionImplicitlyLeftRecursive = production.isImplicitlyLeftRecursive(previousProductions);

        if (productionImplicitlyLeftRecursive) {
          var nonImplicitlyLeftRecursiveProduction = NonImplicitlyLeftRecursiveProduction.fromProductionAndPreviousProductions(production, previousProductions);

          production = nonImplicitlyLeftRecursiveProduction; ///
        }

        var productionLeftRecursive = production.isLeftRecursive();

        if (productionLeftRecursive) {
          var nonLeftRecursiveProduction = NonLeftRecursiveProduction.fromProduction(production),
              rightRecursiveProduction = RightRecursiveProduction.fromProduction(production);

          nonLeftRecursiveProductions.push(nonLeftRecursiveProduction);

          rightRecursiveProductions.push(rightRecursiveProduction);
        } else {
          var _nonLeftRecursiveProduction = production; ///

          nonLeftRecursiveProductions.push(_nonLeftRecursiveProduction);
        }
      });

      productions = [].concat(nonLeftRecursiveProductions).concat(rightRecursiveProductions);

      return productions;
    }
  }, {
    key: 'findProduction',
    value: function findProduction(productionName, productions) {
      var foundProduction = null;

      productions.some(function (production) {
        var name = production.getName();

        if (name === productionName) {
          foundProduction = production;

          return true;
        }
      });

      var production = foundProduction;

      return production;
    }
  }]);

  return parserUtil;
}();

module.exports = parserUtil;

function cyclicProductionsFromProductions(productions) {
  var cyclicProductions = productions.reduce(function (cyclicProductions, production) {
    var cyclicProduction = CyclicProduction.fromProduction(production);

    if (cyclicProduction !== null) {
      cyclicProductions.push(cyclicProduction);
    }

    return cyclicProductions;
  }, []);

  return cyclicProductions;
}

function graphFromCyclicProductions(cyclicProductions) {
  var graph = new Graph();

  cyclicProductions.forEach(function (cyclicProduction) {
    var cyclicProductionName = cyclicProduction.getName(),
        cyclicProductionRulesProductionNames = cyclicProduction.getRulesProductionNames(),
        vertexName = cyclicProductionName,
        ///
    descendantVertexNames = cyclicProductionRulesProductionNames; ///

    graph.addVertex(vertexName, descendantVertexNames);
  });

  return graph;
}

function productionsFromComponents(components, productions) {
  var componentProductions = components.reduce(function (componentProductions, component) {
    var componentCyclic = component.isCyclic();

    if (componentCyclic) {
      var cyclicComponent = component,
          ///
      nonCyclicProductions = nonCyclicProductionsFromCyclicComponent(cyclicComponent, productions);

      componentProductions = componentProductions.concat(nonCyclicProductions);
    } else {
      var nonCyclicComponent = component,
          ///
      production = productionFromNonCyclicComponent(nonCyclicComponent, productions);

      componentProductions.push(production);
    }

    return componentProductions;
  }, []);

  productions = componentProductions; ///

  return productions;
}

function nonCyclicProductionsFromCyclicComponent(cyclicComponent, productions) {
  var cyclicProductions = cyclicComponent.mapVertex(function (vertex) {
    var vertexName = vertex.getName(),
        cyclicProductionName = vertexName,
        ///
    production = parserUtil.findProduction(cyclicProductionName, productions),
        cyclicProduction = CyclicProduction.fromProduction(production);

    return cyclicProduction;
  }),
      unitProductions = unitProductionsFromCyclicProductions(cyclicProductions),
      nonUnitProductions = nonUnitProductionsFromCyclicProductions(cyclicProductions);

  debugger;
}

function unitProductionsFromCyclicProductions(cyclicProductions) {
  var unitProductions = cyclicProductions.reduce(function (unitProductions, cyclicProduction) {
    var cyclicProductionEdges = cyclicProduction.getUnitProductions();

    unitProductions = unitProductions.concat(cyclicProductionEdges);

    return unitProductions;
  }, []);

  return unitProductions;
}

function nonUnitProductionsFromCyclicProductions(cyclicProductions) {
  var nonUnitProductions = cyclicProductions.map(function (cyclicProduction) {
    var nonUnitProduction = NonUnitProduction.fromCyclicProduction(cyclicProduction);

    return nonUnitProduction;
  });

  return nonUnitProductions;
}

function productionFromNonCyclicComponent(nonCyclicComponent, productions) {
  var nonCyclicComponentFirstVertex = nonCyclicComponent.getFirstVertex(),
      nonCyclicComponentFirstVertexName = nonCyclicComponentFirstVertex.getName(),
      productionName = nonCyclicComponentFirstVertexName,
      ///
  production = parserUtil.findProduction(productionName, productions);

  return production;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsL3BhcnNlci5qcyJdLCJuYW1lcyI6WyJHcmFwaCIsInJlcXVpcmUiLCJDeWNsaWNQcm9kdWN0aW9uIiwiTm9uVW5pdFByb2R1Y3Rpb24iLCJSaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiIsIk5vbkltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbiIsInBhcnNlclV0aWwiLCJsaW5lcyIsInRva2VucyIsInJlZHVjZSIsImxpbmUiLCJsaW5lVG9rZW5zIiwiZ2V0VG9rZW5zIiwiY29uY2F0IiwicHJvZHVjdGlvbnMiLCJjeWNsaWNQcm9kdWN0aW9ucyIsImN5Y2xpY1Byb2R1Y3Rpb25zRnJvbVByb2R1Y3Rpb25zIiwiZ3JhcGgiLCJncmFwaEZyb21DeWNsaWNQcm9kdWN0aW9ucyIsImNvbXBvbmVudHMiLCJnZXRDb21wb25lbnRzIiwicHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50cyIsIm5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9ucyIsInJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbnMiLCJmb3JFYWNoIiwicHJvZHVjdGlvbiIsImluZGV4IiwiYmVnaW4iLCJlbmQiLCJwcmV2aW91c05vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9ucyIsInNsaWNlIiwicHJldmlvdXNQcm9kdWN0aW9ucyIsInByb2R1Y3Rpb25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZSIsImlzSW1wbGljaXRseUxlZnRSZWN1cnNpdmUiLCJub25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJmcm9tUHJvZHVjdGlvbkFuZFByZXZpb3VzUHJvZHVjdGlvbnMiLCJwcm9kdWN0aW9uTGVmdFJlY3Vyc2l2ZSIsImlzTGVmdFJlY3Vyc2l2ZSIsIm5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uIiwiZnJvbVByb2R1Y3Rpb24iLCJyaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb24iLCJwdXNoIiwicHJvZHVjdGlvbk5hbWUiLCJmb3VuZFByb2R1Y3Rpb24iLCJzb21lIiwibmFtZSIsImdldE5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3ljbGljUHJvZHVjdGlvbiIsImN5Y2xpY1Byb2R1Y3Rpb25OYW1lIiwiY3ljbGljUHJvZHVjdGlvblJ1bGVzUHJvZHVjdGlvbk5hbWVzIiwiZ2V0UnVsZXNQcm9kdWN0aW9uTmFtZXMiLCJ2ZXJ0ZXhOYW1lIiwiZGVzY2VuZGFudFZlcnRleE5hbWVzIiwiYWRkVmVydGV4IiwiY29tcG9uZW50UHJvZHVjdGlvbnMiLCJjb21wb25lbnQiLCJjb21wb25lbnRDeWNsaWMiLCJpc0N5Y2xpYyIsImN5Y2xpY0NvbXBvbmVudCIsIm5vbkN5Y2xpY1Byb2R1Y3Rpb25zIiwibm9uQ3ljbGljUHJvZHVjdGlvbnNGcm9tQ3ljbGljQ29tcG9uZW50Iiwibm9uQ3ljbGljQ29tcG9uZW50IiwicHJvZHVjdGlvbkZyb21Ob25DeWNsaWNDb21wb25lbnQiLCJtYXBWZXJ0ZXgiLCJ2ZXJ0ZXgiLCJmaW5kUHJvZHVjdGlvbiIsInVuaXRQcm9kdWN0aW9ucyIsInVuaXRQcm9kdWN0aW9uc0Zyb21DeWNsaWNQcm9kdWN0aW9ucyIsIm5vblVuaXRQcm9kdWN0aW9ucyIsIm5vblVuaXRQcm9kdWN0aW9uc0Zyb21DeWNsaWNQcm9kdWN0aW9ucyIsImN5Y2xpY1Byb2R1Y3Rpb25FZGdlcyIsImdldFVuaXRQcm9kdWN0aW9ucyIsIm1hcCIsIm5vblVuaXRQcm9kdWN0aW9uIiwiZnJvbUN5Y2xpY1Byb2R1Y3Rpb24iLCJub25DeWNsaWNDb21wb25lbnRGaXJzdFZlcnRleCIsImdldEZpcnN0VmVydGV4Iiwibm9uQ3ljbGljQ29tcG9uZW50Rmlyc3RWZXJ0ZXhOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsUUFBUUMsUUFBUSxVQUFSLENBQWQ7QUFBQSxJQUNNQyxtQkFBbUJELFFBQVEsZ0NBQVIsQ0FEekI7QUFBQSxJQUVNRSxvQkFBb0JGLFFBQVEsOEJBQVIsQ0FGMUI7QUFBQSxJ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LFdBQU9KLGVBQVA7QUFDRCxHQU51QixFQU1yQixFQU5xQixDQUF4Qjs7QUFRQSxTQUFPQSxlQUFQO0FBQ0Q7O0FBRUQsU0FBU0csdUNBQVQsQ0FBaUR4RCxpQkFBakQsRUFBb0U7QUFDbEUsTUFBTXVELHFCQUFxQnZELGtCQUFrQjJELEdBQWxCLENBQXNCLFVBQVN6QixnQkFBVCxFQUEyQjtBQUMxRSxRQUFNMEIsb0JBQW9CekUsa0JBQWtCMEUsb0JBQWxCLENBQXVDM0IsZ0JBQXZDLENBQTFCOztBQUVBLFdBQU8wQixpQkFBUDtBQUNELEdBSjBCLENBQTNCOztBQU1BLFNBQU9MLGtCQUFQO0FBQ0Q7O0FBRUQsU0FBU04sZ0NBQVQsQ0FBMENELGtCQUExQyxFQUE4RGpELFdBQTlELEVBQTJFO0FBQ3pFLE1BQU0rRCxnQ0FBZ0NkLG1CQUFtQmUsY0FBbkIsRUFBdEM7QUFBQSxNQUNNQyxvQ0FBb0NGLDhCQUE4Qi9CLE9BQTlCLEVBRDFDO0FBQUEsTUFFTUosaUJBQWlCcUMsaUNBRnZCO0FBQUEsTUFFMkQ7QUFDckR0RCxlQUFhbkIsV0FBVzZELGNBQVgsQ0FBMEJ6QixjQUExQixFQUEwQzVCLFdBQTFDLENBSG5COztBQUtBLFNBQU9XLFVBQVA7QUFDRCIsImZpbGUiOiJwYXJzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEdyYXBoID0gcmVxdWlyZSgnLi4vZ3JhcGgnKSxcbiAgICAgIEN5Y2xpY1Byb2R1Y3Rpb24gPSByZXF1aXJlKCcuLi9jb21tb24vcHJvZHVjdGlvbi91bml0UnVsZXMnKSxcbiAgICAgIE5vblVuaXRQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi4vY29tbW9uL3Byb2R1Y3Rpb24vbm9uVW5pdCcpLFxuICAgICAgUmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi4vY29tbW9uL3Byb2R1Y3Rpb24vcmlnaHRSZWN1cnNpdmUnKSxcbiAgICAgIE5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi4vY29tbW9uL3Byb2R1Y3Rpb24vbm9uTGVmdFJlY3Vyc2l2ZScpLFxuICAgICAgTm9uSW1wbGljaXRseUxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uID0gcmVxdWlyZSgnLi4vY29tbW9uL3Byb2R1Y3Rpb24vbm9uSW1wbGljaXRseUxlZnRSZWN1cnNpdmUnKTtcblxuY2xhc3MgcGFyc2VyVXRpbCB7XG4gIHN0YXRpYyB0b2tlbnNGcm9tTGluZXMobGluZXMpIHtcbiAgICBjb25zdCB0b2tlbnMgPSBsaW5lcy5yZWR1Y2UoZnVuY3Rpb24odG9rZW5zLCBsaW5lKSB7XG4gICAgICBjb25zdCBsaW5lVG9rZW5zID0gbGluZS5nZXRUb2tlbnMoKTtcblxuICAgICAgdG9rZW5zID0gdG9rZW5zLmNvbmNhdChsaW5lVG9rZW5zKTtcblxuICAgICAgcmV0dXJuIHRva2VucztcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gdG9rZW5zO1xuICB9XG5cbiAgc3RhdGljIGVsaW1pbmF0ZUN5Y2xlcyhwcm9kdWN0aW9ucykge1xuICAgIGNvbnN0IGN5Y2xpY1Byb2R1Y3Rpb25zID0gY3ljbGljUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMocHJvZHVjdGlvbnMpLFxuICAgICAgICAgIGdyYXBoID0gZ3JhcGhGcm9tQ3ljbGljUHJvZHVjdGlvbnMoY3ljbGljUHJvZHVjdGlvbnMpLFxuICAgICAgICAgIGNvbXBvbmVudHMgPSBncmFwaC5nZXRDb21wb25lbnRzKCk7XG5cbiAgICBwcm9kdWN0aW9ucyA9IHByb2R1Y3Rpb25zRnJvbUNvbXBvbmVudHMoY29tcG9uZW50cywgcHJvZHVjdGlvbnMpO1xuXG4gICAgcmV0dXJuIHByb2R1Y3Rpb25zO1xuICB9XG5cbiAgc3RhdGljIGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocHJvZHVjdGlvbnMpIHtcbiAgICBjb25zdCBub25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMgPSBbXSxcbiAgICAgICAgICByaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb25zID0gW107XG5cbiAgICBwcm9kdWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHByb2R1Y3Rpb24sIGluZGV4KSB7XG4gICAgICBjb25zdCBiZWdpbiA9IDAsXG4gICAgICAgICAgICBlbmQgPSBpbmRleCwgIC8vL1xuICAgICAgICAgICAgcHJldmlvdXNOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMgPSBub25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMuc2xpY2UoYmVnaW4sIGVuZCksXG4gICAgICAgICAgICBwcmV2aW91c1Byb2R1Y3Rpb25zID0gcHJldmlvdXNOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbnMsICAvLy9cbiAgICAgICAgICAgIHByb2R1Y3Rpb25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZSA9IHByb2R1Y3Rpb24uaXNJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZShwcmV2aW91c1Byb2R1Y3Rpb25zKTtcblxuICAgICAgaWYgKHByb2R1Y3Rpb25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZSkge1xuICAgICAgICBjb25zdCBub25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gPSBOb25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24uZnJvbVByb2R1Y3Rpb25BbmRQcmV2aW91c1Byb2R1Y3Rpb25zKHByb2R1Y3Rpb24sIHByZXZpb3VzUHJvZHVjdGlvbnMpO1xuXG4gICAgICAgIHByb2R1Y3Rpb24gPSBub25JbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb247ICAvLy9cbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvZHVjdGlvbkxlZnRSZWN1cnNpdmUgPSBwcm9kdWN0aW9uLmlzTGVmdFJlY3Vyc2l2ZSgpO1xuXG4gICAgICBpZiAocHJvZHVjdGlvbkxlZnRSZWN1cnNpdmUpIHtcbiAgICAgICAgY29uc3Qgbm9uTGVmdFJlY3Vyc2l2ZVByb2R1Y3Rpb24gPSBOb25MZWZ0UmVjdXJzaXZlUHJvZHVjdGlvbi5mcm9tUHJvZHVjdGlvbihwcm9kdWN0aW9uKSxcbiAgICAgICAgICAgICAgcmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uID0gUmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uLmZyb21Qcm9kdWN0aW9uKHByb2R1Y3Rpb24pO1xuXG4gICAgICAgIG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9ucy5wdXNoKG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKTtcblxuICAgICAgICByaWdodFJlY3Vyc2l2ZVByb2R1Y3Rpb25zLnB1c2gocmlnaHRSZWN1cnNpdmVQcm9kdWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uID0gcHJvZHVjdGlvbjsgIC8vL1xuXG4gICAgICAgIG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9ucy5wdXNoKG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9uKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHByb2R1Y3Rpb25zID0gW10uY29uY2F0KG5vbkxlZnRSZWN1cnNpdmVQcm9kdWN0aW9ucykuY29uY2F0KHJpZ2h0UmVjdXJzaXZlUHJvZHVjdGlvbnMpO1xuXG4gICAgcmV0dXJuIHByb2R1Y3Rpb25zO1xuICB9XG5cbiAgc3RhdGljIGZpbmRQcm9kdWN0aW9uKHByb2R1Y3Rpb25OYW1lLCBwcm9kdWN0aW9ucykge1xuICAgIGxldCBmb3VuZFByb2R1Y3Rpb24gPSBudWxsO1xuXG4gICAgcHJvZHVjdGlvbnMuc29tZShmdW5jdGlvbihwcm9kdWN0aW9uKSB7XG4gICAgICBjb25zdCBuYW1lID0gcHJvZHVjdGlvbi5nZXROYW1lKCk7XG5cbiAgICAgIGlmIChuYW1lID09PSBwcm9kdWN0aW9uTmFtZSkge1xuICAgICAgICBmb3VuZFByb2R1Y3Rpb24gPSBwcm9kdWN0aW9uO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgcHJvZHVjdGlvbiA9IGZvdW5kUHJvZHVjdGlvbjtcblxuICAgIHJldHVybiBwcm9kdWN0aW9uO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VyVXRpbDtcblxuZnVuY3Rpb24gY3ljbGljUHJvZHVjdGlvbnNGcm9tUHJvZHVjdGlvbnMocHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgY3ljbGljUHJvZHVjdGlvbnMgPSBwcm9kdWN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24oY3ljbGljUHJvZHVjdGlvbnMsIHByb2R1Y3Rpb24pIHtcbiAgICBjb25zdCBjeWNsaWNQcm9kdWN0aW9uID0gQ3ljbGljUHJvZHVjdGlvbi5mcm9tUHJvZHVjdGlvbihwcm9kdWN0aW9uKTtcblxuICAgIGlmIChjeWNsaWNQcm9kdWN0aW9uICE9PSBudWxsKSB7XG4gICAgICBjeWNsaWNQcm9kdWN0aW9ucy5wdXNoKGN5Y2xpY1Byb2R1Y3Rpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBjeWNsaWNQcm9kdWN0aW9ucztcbiAgfSwgW10pO1xuXG4gIHJldHVybiBjeWNsaWNQcm9kdWN0aW9ucztcbn1cblxuZnVuY3Rpb24gZ3JhcGhGcm9tQ3ljbGljUHJvZHVjdGlvbnMoY3ljbGljUHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgZ3JhcGggPSBuZXcgR3JhcGgoKTtcblxuICBjeWNsaWNQcm9kdWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGN5Y2xpY1Byb2R1Y3Rpb24pIHtcbiAgICBjb25zdCBjeWNsaWNQcm9kdWN0aW9uTmFtZSA9IGN5Y2xpY1Byb2R1Y3Rpb24uZ2V0TmFtZSgpLFxuICAgICAgICAgIGN5Y2xpY1Byb2R1Y3Rpb25SdWxlc1Byb2R1Y3Rpb25OYW1lcyA9IGN5Y2xpY1Byb2R1Y3Rpb24uZ2V0UnVsZXNQcm9kdWN0aW9uTmFtZXMoKSxcbiAgICAgICAgICB2ZXJ0ZXhOYW1lID0gY3ljbGljUHJvZHVjdGlvbk5hbWUsICAvLy9cbiAgICAgICAgICBkZXNjZW5kYW50VmVydGV4TmFtZXMgPSBjeWNsaWNQcm9kdWN0aW9uUnVsZXNQcm9kdWN0aW9uTmFtZXM7IC8vL1xuXG4gICAgZ3JhcGguYWRkVmVydGV4KHZlcnRleE5hbWUsIGRlc2NlbmRhbnRWZXJ0ZXhOYW1lcyk7XG4gIH0pO1xuXG4gIHJldHVybiBncmFwaDtcbn1cblxuZnVuY3Rpb24gcHJvZHVjdGlvbnNGcm9tQ29tcG9uZW50cyhjb21wb25lbnRzLCBwcm9kdWN0aW9ucykge1xuICBjb25zdCBjb21wb25lbnRQcm9kdWN0aW9ucyA9IGNvbXBvbmVudHMucmVkdWNlKGZ1bmN0aW9uKGNvbXBvbmVudFByb2R1Y3Rpb25zLCBjb21wb25lbnQpIHtcbiAgICBjb25zdCBjb21wb25lbnRDeWNsaWMgPSBjb21wb25lbnQuaXNDeWNsaWMoKTtcblxuICAgIGlmIChjb21wb25lbnRDeWNsaWMpIHtcbiAgICAgIGNvbnN0IGN5Y2xpY0NvbXBvbmVudCA9IGNvbXBvbmVudCwgIC8vL1xuICAgICAgICAgICAgbm9uQ3ljbGljUHJvZHVjdGlvbnMgPSBub25DeWNsaWNQcm9kdWN0aW9uc0Zyb21DeWNsaWNDb21wb25lbnQoY3ljbGljQ29tcG9uZW50LCBwcm9kdWN0aW9ucyk7XG5cbiAgICAgIGNvbXBvbmVudFByb2R1Y3Rpb25zID0gY29tcG9uZW50UHJvZHVjdGlvbnMuY29uY2F0KG5vbkN5Y2xpY1Byb2R1Y3Rpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgbm9uQ3ljbGljQ29tcG9uZW50ID0gY29tcG9uZW50LCAgLy8vXG4gICAgICAgICAgICBwcm9kdWN0aW9uID0gcHJvZHVjdGlvbkZyb21Ob25DeWNsaWNDb21wb25lbnQobm9uQ3ljbGljQ29tcG9uZW50LCBwcm9kdWN0aW9ucyk7XG5cbiAgICAgIGNvbXBvbmVudFByb2R1Y3Rpb25zLnB1c2gocHJvZHVjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvbmVudFByb2R1Y3Rpb25zO1xuICB9LCBbXSk7XG5cbiAgcHJvZHVjdGlvbnMgPSBjb21wb25lbnRQcm9kdWN0aW9uczsgLy8vXG5cbiAgcmV0dXJuIHByb2R1Y3Rpb25zO1xufVxuXG5mdW5jdGlvbiBub25DeWNsaWNQcm9kdWN0aW9uc0Zyb21DeWNsaWNDb21wb25lbnQoY3ljbGljQ29tcG9uZW50LCBwcm9kdWN0aW9ucykge1xuICBjb25zdCBjeWNsaWNQcm9kdWN0aW9ucyA9IGN5Y2xpY0NvbXBvbmVudC5tYXBWZXJ0ZXgoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgICAgICAgY29uc3QgdmVydGV4TmFtZSA9IHZlcnRleC5nZXROYW1lKCksXG4gICAgICAgICAgICAgICAgY3ljbGljUHJvZHVjdGlvbk5hbWUgPSB2ZXJ0ZXhOYW1lLCAgLy8vXG4gICAgICAgICAgICAgICAgcHJvZHVjdGlvbiA9IHBhcnNlclV0aWwuZmluZFByb2R1Y3Rpb24oY3ljbGljUHJvZHVjdGlvbk5hbWUsIHByb2R1Y3Rpb25zKSxcbiAgICAgICAgICAgICAgICBjeWNsaWNQcm9kdWN0aW9uID0gQ3ljbGljUHJvZHVjdGlvbi5mcm9tUHJvZHVjdGlvbihwcm9kdWN0aW9uKTtcblxuICAgICAgICAgIHJldHVybiBjeWNsaWNQcm9kdWN0aW9uO1xuICAgICAgICB9KSxcbiAgICAgICAgdW5pdFByb2R1Y3Rpb25zID0gdW5pdFByb2R1Y3Rpb25zRnJvbUN5Y2xpY1Byb2R1Y3Rpb25zKGN5Y2xpY1Byb2R1Y3Rpb25zKSxcbiAgICAgICAgbm9uVW5pdFByb2R1Y3Rpb25zID0gbm9uVW5pdFByb2R1Y3Rpb25zRnJvbUN5Y2xpY1Byb2R1Y3Rpb25zKGN5Y2xpY1Byb2R1Y3Rpb25zKTtcblxuICBkZWJ1Z2dlclxufVxuXG5mdW5jdGlvbiB1bml0UHJvZHVjdGlvbnNGcm9tQ3ljbGljUHJvZHVjdGlvbnMoY3ljbGljUHJvZHVjdGlvbnMpIHtcbiAgY29uc3QgdW5pdFByb2R1Y3Rpb25zID0gY3ljbGljUHJvZHVjdGlvbnMucmVkdWNlKGZ1bmN0aW9uKHVuaXRQcm9kdWN0aW9ucywgY3ljbGljUHJvZHVjdGlvbikge1xuICAgIGNvbnN0IGN5Y2xpY1Byb2R1Y3Rpb25FZGdlcyA9IGN5Y2xpY1Byb2R1Y3Rpb24uZ2V0VW5pdFByb2R1Y3Rpb25zKCk7XG5cbiAgICB1bml0UHJvZHVjdGlvbnMgPSB1bml0UHJvZHVjdGlvbnMuY29uY2F0KGN5Y2xpY1Byb2R1Y3Rpb25FZGdlcyk7XG5cbiAgICByZXR1cm4gdW5pdFByb2R1Y3Rpb25zO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIHVuaXRQcm9kdWN0aW9ucztcbn1cblxuZnVuY3Rpb24gbm9uVW5pdFByb2R1Y3Rpb25zRnJvbUN5Y2xpY1Byb2R1Y3Rpb25zKGN5Y2xpY1Byb2R1Y3Rpb25zKSB7XG4gIGNvbnN0IG5vblVuaXRQcm9kdWN0aW9ucyA9IGN5Y2xpY1Byb2R1Y3Rpb25zLm1hcChmdW5jdGlvbihjeWNsaWNQcm9kdWN0aW9uKSB7XG4gICAgY29uc3Qgbm9uVW5pdFByb2R1Y3Rpb24gPSBOb25Vbml0UHJvZHVjdGlvbi5mcm9tQ3ljbGljUHJvZHVjdGlvbihjeWNsaWNQcm9kdWN0aW9uKTtcbiAgICBcbiAgICByZXR1cm4gbm9uVW5pdFByb2R1Y3Rpb247XG4gIH0pO1xuICBcbiAgcmV0dXJuIG5vblVuaXRQcm9kdWN0aW9ucztcbn1cblxuZnVuY3Rpb24gcHJvZHVjdGlvbkZyb21Ob25DeWNsaWNDb21wb25lbnQobm9uQ3ljbGljQ29tcG9uZW50LCBwcm9kdWN0aW9ucykge1xuICBjb25zdCBub25DeWNsaWNDb21wb25lbnRGaXJzdFZlcnRleCA9IG5vbkN5Y2xpY0NvbXBvbmVudC5nZXRGaXJzdFZlcnRleCgpLFxuICAgICAgICBub25DeWNsaWNDb21wb25lbnRGaXJzdFZlcnRleE5hbWUgPSBub25DeWNsaWNDb21wb25lbnRGaXJzdFZlcnRleC5nZXROYW1lKCksXG4gICAgICAgIHByb2R1Y3Rpb25OYW1lID0gbm9uQ3ljbGljQ29tcG9uZW50Rmlyc3RWZXJ0ZXhOYW1lLCAgLy8vXG4gICAgICAgIHByb2R1Y3Rpb24gPSBwYXJzZXJVdGlsLmZpbmRQcm9kdWN0aW9uKHByb2R1Y3Rpb25OYW1lLCBwcm9kdWN0aW9ucyk7XG5cbiAgcmV0dXJuIHByb2R1Y3Rpb247XG59Il19